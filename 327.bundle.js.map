{"version":3,"file":"327.bundle.js","mappings":"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","sources":["webpack://ol-mbtiles/./examples/code/sync-init.ts","webpack://ol-mbtiles/./dist/index.js","webpack://ol-mbtiles/./node_modules/ol/source/OSM.js"],"sourcesContent":["import Map from 'ol/Map.js';\nimport TileLayer from 'ol/layer/Tile.js';\nimport OSM from 'ol/source/OSM';\nimport View from 'ol/View.js';\nimport ImageTileLayer from 'ol/layer/Tile';\nimport TileDebug from 'ol/source/TileDebug';\nimport { fromLonLat, get as getProjection } from 'ol/proj';\nimport { Extent, getWidth } from 'ol/extent';\n\nimport { MBTilesRasterSource } from 'ol-mbtiles';\nimport TileGrid from 'ol/tilegrid/TileGrid';\n\nconst projExtent = getProjection('EPSG:3857')?.getExtent() as Extent;\nconst baseResolution = getWidth(projExtent) / 256;\nfunction resolutions(maxZoom: number): number[] {\n  const r = [ baseResolution ];\n  for (let z = 1; z <= maxZoom; z++)\n    r.push(r[r.length - 1] / 2);\n  return r;\n}\n\n// Raster MBTiles from\n// https://www.data.gouv.fr/en/datasets/pyramide-de-tuiles-depuis-la-bd-ortho-r/\n// 240MB original file\n\n// This is a synchronous function\nexport default function () {\n  return new Map({\n    target: 'map',\n    layers: [\n      new TileLayer({\n        zIndex: 20,\n        source: new TileDebug()\n      }),\n      new TileLayer({\n        zIndex: 0,\n        source: new OSM(),\n      }),\n      new ImageTileLayer({\n        zIndex: 10,\n        opacity: 0.5,\n        source: new MBTilesRasterSource({\n          url: 'https://velivole.b-cdn.net/tiles-RGR92UTM40S.mbtiles',\n          attributions: [\n            'IGN / Mapotempo',\n            'BD Ortho 5m',\n            'https://www.data.gouv.fr/en/datasets/pyramide-de-tuiles-depuis-la-bd-ortho-r/'\n          ],\n          tileGrid: new TileGrid({\n            origin: [projExtent[0], projExtent[2]],\n            // These must be known\n            extent: [\n              6141145.607336855,\n              -2443028.8860581857,\n              6216858.872510456,\n              -2366876.107971946\n            ],\n            minZoom: 9,\n            resolutions: resolutions(16)\n          }),\n        }),\n      })\n    ],\n    view: new View({\n      center: fromLonLat([55.47437, -21.08468]),\n      zoom: 9\n    }),\n  });\n}","import { createSQLiteHTTPPool } from 'sqlite-wasm-http';\nimport { get, transformExtent } from 'ol/proj.js';\nimport { getWidth } from 'ol/extent.js';\nimport TileGrid from 'ol/tilegrid/TileGrid.js';\nimport VectorTileSource from 'ol/source/VectorTile.js';\nimport Protobuf from 'pbf';\nimport { VectorTile } from '@mapbox/vector-tile';\nimport pako from 'pako';\nimport FeatureFormat from 'ol/format/Feature.js';\nimport Projection from 'ol/proj/Projection.js';\nimport RenderFeature from 'ol/render/Feature.js';\nimport ImageTileSource from 'ol/source/TileImage.js';\nimport TileState from 'ol/TileState.js';\n\nvar _a;\nconst debugEnabled = (typeof OL_MBTILES_DEBUG !== 'undefined' && OL_MBTILES_DEBUG) ||\n    (typeof process !== 'undefined' && typeof ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.OL_MBTILES_DEBUG) !== 'undefined' && process.env.OL_MBTILES_DEBUG);\nconst debug = debugEnabled ? console.debug.bind(console) : () => undefined;\n\nconst formats = {\n    'jpg': { type: 'raster', mime: 'image/jpeg' },\n    'png': { type: 'raster', mime: 'image/png' },\n    'webp': { type: 'raster', mime: 'image/webp' },\n    'pbf': { type: 'vector' },\n    'mvt': { type: 'vector' },\n};\nfunction httpPoolOptions(options) {\n    var _a, _b, _c;\n    return {\n        workers: (_a = options === null || options === void 0 ? void 0 : options.sqlWorkers) !== null && _a !== void 0 ? _a : 4,\n        httpOptions: {\n            backendType: options === null || options === void 0 ? void 0 : options.backendType,\n            maxPageSize: (_b = options === null || options === void 0 ? void 0 : options.maxSqlPageSize) !== null && _b !== void 0 ? _b : 4096,\n            cacheSize: (_c = options === null || options === void 0 ? void 0 : options.sqlCacheSize) !== null && _c !== void 0 ? _c : 4096\n        },\n    };\n}\n/**\n * Automatically import MBTiles metadata and return an options object\n * compatible with the source constructors.\n *\n * @param {(MBTilesRasterOptions | MBTilesVectorOptions) & SQLOptions} opt Any MBTiles{Raster|Vector}Source options to be overridden\n * @param {string} opt.url URL of the remote tileset\n * @returns {(MBTilesRasterOptions | MBTilesVectorOptions)}\n */\nfunction importMBTiles(opt) {\n    const pool = createSQLiteHTTPPool(httpPoolOptions(opt));\n    return pool\n        .then((pool) => pool.open(opt.url).then(() => pool))\n        .then((p) => p.exec('SELECT name,value FROM metadata'))\n        .then((r) => {\n        if (r && r.length) {\n            // Transform an array of form [ ['name', 'value' ], ... ] to object\n            const data = r.reduce((a, x) => {\n                a[x.row[0]] = x.row[1];\n                return a;\n            }, {});\n            debug('Loaded metadata', data);\n            return data;\n        }\n        throw new Error('Could not load metadata');\n    })\n        .then((md) => {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const opts = Object.assign({}, opt);\n        const format = (_b = (_a = md['format']) === null || _a === void 0 ? void 0 : _a.toLowerCase) === null || _b === void 0 ? void 0 : _b.call(_a);\n        if (!formats[format])\n            console.warn('Unknown tile format', format);\n        // Sometimes, I wonder if Mapbox doesn't hold a patent or some\n        // other kind of investment related to everyone using 3857\n        opts.projection = (_c = opt.projection) !== null && _c !== void 0 ? _c : 'EPSG:3857';\n        opts.attributions = ((_d = md.attribution) !== null && _d !== void 0 ? _d : md.description);\n        opts.maxZoom = (_e = opt.maxZoom) !== null && _e !== void 0 ? _e : +md['maxzoom'];\n        opts.minZoom = (_f = opt.minZoom) !== null && _f !== void 0 ? _f : +md['minzoom'];\n        const projExtent = (_h = (_g = get(opts.projection)) === null || _g === void 0 ? void 0 : _g.getExtent) === null || _h === void 0 ? void 0 : _h.call(_g);\n        const bounds = md['bounds'];\n        const extent = bounds ?\n            transformExtent(bounds.split(',').map((r) => +r), 'EPSG:4326', opts.projection) :\n            projExtent;\n        if (formats[format].type === 'raster') {\n            if (opts.maxZoom === undefined || opts.minZoom === undefined || projExtent === undefined)\n                throw new Error('Cannot determine tilegrid, need minZoom, maxZoom');\n            const baseResolution = getWidth(projExtent) / 256;\n            const resolutions = [baseResolution];\n            for (let z = 1; z <= opts.maxZoom; z++)\n                resolutions.push(resolutions[resolutions.length - 1] / 2);\n            const mime = (_j = formats[format].mime) !== null && _j !== void 0 ? _j : format;\n            opts.mime = mime;\n            opts.tileGrid = new TileGrid({\n                origin: [projExtent[0], projExtent[2]],\n                extent,\n                minZoom: opts.minZoom,\n                resolutions\n            });\n        }\n        else {\n            const vectorOpts = opts;\n            // Alas VectorTileSource in OpenLayers does not support\n            // constraining the extent while keeping the origin\n            vectorOpts.extent = projExtent;\n        }\n        opts.pool = pool;\n        opts.url = opt.url;\n        return opts;\n    })\n        .catch((e) => pool.then((p) => p.close()).then(() => Promise.reject(e)));\n}\n\nclass MBTilesFormat extends FeatureFormat {\n    constructor(options) {\n        var _a, _b, _c;\n        super();\n        options = options ? options : {};\n        this.dataProjection = new Projection({\n            code: '',\n            units: 'tile-pixels',\n        });\n        this.featureClass_ = options.featureClass ? options.featureClass : RenderFeature;\n        this.geometryName_ = (_a = options.geometryName) !== null && _a !== void 0 ? _a : 'Geometry';\n        this.layers_ = (_b = options.layers) !== null && _b !== void 0 ? _b : null;\n        this.idProperty_ = options.idProperty;\n        this.extent = (_c = options.extent) !== null && _c !== void 0 ? _c : 4096;\n        /*\n         * As this is the very first time MBTiles will be distributed by HTTP\n         * there is still no official MIME type\n         */\n        this.supportedMediaTypes = [\n            'application/vnd-mbtiles'\n        ];\n    }\n    readFeature(source, options) {\n        const properties = source.properties;\n        let id;\n        if (!this.idProperty_) {\n            id = source.id;\n        }\n        else {\n            id = properties[this.idProperty_];\n            delete properties[this.idProperty_];\n        }\n        const points = source.loadGeometry();\n        const flatCoordinates = [];\n        const ends = [];\n        const type = MBTilesFormat.MBTypes[points.length > 1 ? 'multi' : 'mono'][source.type];\n        if (type === 'Unknown')\n            return null;\n        for (let i = 0; i < points.length; i++) {\n            if (points[i].length == 0)\n                continue;\n            for (let j = 0; j < points[i].length; j++) {\n                flatCoordinates.push(points[i][j].x, points[i][j].y);\n            }\n            ends.push(flatCoordinates.length);\n        }\n        const feature = new this.featureClass_(type, flatCoordinates, ends, 2, properties, id);\n        if ((options === null || options === void 0 ? void 0 : options.dataProjection) && 'transform' in feature)\n            feature.transform(options === null || options === void 0 ? void 0 : options.dataProjection);\n        return feature;\n    }\n    readFeatures(source, options) {\n        const layers = this.layers_;\n        const features = [];\n        const tile = new VectorTile(new Protobuf(pako.ungzip(source)));\n        options = this.adaptOptions(options);\n        const dataProjection = get(options === null || options === void 0 ? void 0 : options.dataProjection);\n        const extent = options === null || options === void 0 ? void 0 : options.extent;\n        if (!dataProjection || !options || !extent)\n            throw new Error('Cannot determine the projection/extent');\n        dataProjection.setWorldExtent(extent);\n        dataProjection.setExtent([0, 0, this.extent, this.extent]);\n        options.dataProjection = dataProjection;\n        for (const layerName of Object.keys(tile.layers)) {\n            if (layers && !layers.includes(layerName)) {\n                continue;\n            }\n            const l = tile.layers[layerName];\n            for (let idx = 0; idx < l.length; idx++) {\n                const vectorFeature = l.feature(idx);\n                const feature = this.readFeature(vectorFeature, options);\n                feature.getProperties().layer = layerName;\n                features.push(feature);\n            }\n        }\n        return features;\n    }\n    readProjection() {\n        return this.dataProjection;\n    }\n}\nMBTilesFormat.MBTypes = {\n    mono: ['Unknown', 'Point', 'LineString', 'Polygon'],\n    multi: ['Unknown', 'MultiPoint', 'MultiLineString', 'Polygon']\n};\n\n/**\n * A tile source in a remote .mbtiles file accessible by HTTP\n *\n * WARNING\n * If your application continuously creates and removes MBTilesSource\n * objects, special care must be taken to properly dispose of them.\n * An MBTilesSource creates a thread pool that the JS engine is unable to\n * automatically garbage-collect unless the dispose() method\n * is invoked.\n * If you need to dispose a map that can potentially contain\n * MBTilesSource objects, check loadExample() in\n * https://github.com/mmomtchev/ol-mbtiles/blob/main/examples/index.ts#L15\n */\nclass MBTilesVectorSource extends VectorTileSource {\n    /**\n     * @param {MBTilesVectorOptions} options options\n     */\n    constructor(options) {\n        var _a;\n        if (options.url === undefined && options.pool === undefined)\n            throw new Error('Must specify url');\n        super(Object.assign(Object.assign({}, options), { url: undefined, format: new MBTilesFormat({\n                layers: options.layers\n            }), \n            // This is required to prevent Openlayers' cache from thinking that all tiles share the same URL\n            tileUrlFunction: (coords) => `${options.url}#${coords[0]}:${coords[1]}:${coords[2]}` }));\n        this.setTileLoadFunction(this.tileLoader.bind(this));\n        this.pool = (_a = options.pool) !== null && _a !== void 0 ? _a : createSQLiteHTTPPool(httpPoolOptions(options))\n            .then((pool) => pool.open(options.url).then(() => pool));\n    }\n    tileLoader(_tile, _url) {\n        const tile = _tile;\n        debug('loading tile', [tile.tileCoord[0], tile.tileCoord[1], tile.tileCoord[2]]);\n        tile.setLoader((extent, resolution, projection) => {\n            this.pool\n                .then((p) => p.exec('SELECT tile_data FROM tiles WHERE zoom_level = $zoom AND tile_column = $col AND tile_row = $row', {\n                $zoom: tile.tileCoord[0],\n                $col: tile.tileCoord[1],\n                $row: (1 << tile.tileCoord[0]) - 1 - tile.tileCoord[2]\n            }))\n                .then((r) => {\n                if (r && r[0] && r[0].row[0]) {\n                    const format = tile.getFormat();\n                    const features = format.readFeatures(r[0].row[0], {\n                        extent,\n                        featureProjection: projection\n                    });\n                    tile.setFeatures(features);\n                    tile.onLoad(features, projection);\n                    return;\n                }\n                throw new Error(`No data for ${tile.tileCoord}`);\n            })\n                .catch((e) => {\n                debug(e);\n                tile.onError();\n            });\n        });\n    }\n    disposeInternal() {\n        return this.pool.then((p) => p.close());\n    }\n}\n\n/**\n * A tile source in a remote .mbtiles file accessible by HTTP\n *\n * WARNING\n * If your application continuously creates and removes MBTilesSource\n * objects, special care must be taken to properly dispose of them.\n * An MBTilesSource creates a thread pool that the JS engine is unable to\n * automatically garbage-collect unless the dispose() method\n * is invoked.\n * If you need to dispose a map that can potentially contain\n * MBTilesSource objects, check loadExample() in\n * https://github.com/mmomtchev/ol-mbtiles/blob/main/examples/index.ts#L15\n */\nclass MBTilesRasterSource extends ImageTileSource {\n    /**\n     * @param {MBTilesRasterOptions} options options\n     */\n    constructor(options) {\n        var _a;\n        if (options.url === undefined && options.pool === undefined)\n            throw new Error('Must specify url');\n        super(Object.assign(Object.assign({}, options), { url: undefined, \n            // This is required to prevent Openlayers' cache from thinking that all tiles share the same URL\n            tileUrlFunction: (coords) => `${options.url}#${coords[0]}:${coords[1]}:${coords[2]}` }));\n        this.setTileLoadFunction(this.tileLoader.bind(this));\n        this.pool = (_a = options.pool) !== null && _a !== void 0 ? _a : createSQLiteHTTPPool(httpPoolOptions(options))\n            .then((pool) => pool.open(options.url).then(() => pool));\n        this.mime = options.mime;\n    }\n    // TODO fix the tile type in Openlayers\n    tileLoader(tile, _url) {\n        debug('loading tile', [tile.tileCoord[0], tile.tileCoord[1], tile.tileCoord[2]]);\n        const image = tile.getImage();\n        this.pool\n            .then((p) => p.exec('SELECT tile_data FROM tiles WHERE zoom_level = $zoom AND tile_column = $col AND tile_row = $row', {\n            $zoom: tile.tileCoord[0],\n            $col: tile.tileCoord[1],\n            $row: (1 << tile.tileCoord[0]) - 1 - tile.tileCoord[2]\n        }))\n            .then((r) => {\n            if (r && r[0]) {\n                if (r[0].row[0] instanceof Uint8Array) {\n                    const blob = new Blob([r[0].row[0]], { type: this.mime });\n                    const imageUrl = URL.createObjectURL(blob);\n                    image.src = imageUrl;\n                    return;\n                }\n            }\n            throw new Error(`No data for ${tile.tileCoord}`);\n        })\n            .catch((e) => {\n            debug(e);\n            tile.setState(TileState.ERROR);\n        });\n    }\n    disposeInternal() {\n        return this.pool.then((p) => p.close());\n    }\n}\n\nexport { MBTilesFormat, MBTilesRasterSource, MBTilesVectorSource, importMBTiles };\n//# sourceMappingURL=index.js.map\n","/**\n * @module ol/source/OSM\n */\n\nimport XYZ from './XYZ.js';\n\n/**\n * The attribution containing a link to the OpenStreetMap Copyright and License\n * page.\n * @const\n * @type {string}\n * @api\n */\nexport const ATTRIBUTION =\n  '&#169; ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a> ' +\n  'contributors.';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [maxZoom=19] Max zoom.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.\n * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n * @api\n */\nclass OSM extends XYZ {\n  /**\n   * @param {Options} [options] Open Street Map options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    let attributions;\n    if (options.attributions !== undefined) {\n      attributions = options.attributions;\n    } else {\n      attributions = [ATTRIBUTION];\n    }\n\n    const crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\n\n    const url =\n      options.url !== undefined\n        ? options.url\n        : 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n    super({\n      attributions: attributions,\n      attributionsCollapsible: false,\n      cacheSize: options.cacheSize,\n      crossOrigin: crossOrigin,\n      interpolate: options.interpolate,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileLoadFunction: options.tileLoadFunction,\n      transition: options.transition,\n      url: url,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection,\n    });\n  }\n}\n\nexport default OSM;\n"],"names":["projExtent","getExtent","baseResolution","resolutions","maxZoom","r","z","push","length","target","layers","zIndex","source","opacity","url","attributions","tileGrid","origin","extent","minZoom","view","center","zoom","_a","debug","process","env","OL_MBTILES_DEBUG","console","bind","formats","type","mime","httpPoolOptions","options","_b","_c","workers","sqlWorkers","httpOptions","backendType","maxPageSize","maxSqlPageSize","cacheSize","sqlCacheSize","importMBTiles","opt","pool","then","open","p","exec","data","reduce","a","x","row","Error","md","_d","_e","_f","_g","_h","_j","opts","Object","assign","format","toLowerCase","call","warn","projection","attribution","description","bounds","split","map","undefined","catch","e","close","Promise","reject","MBTilesFormat","constructor","super","this","dataProjection","code","units","featureClass_","featureClass","geometryName_","geometryName","layers_","idProperty_","idProperty","supportedMediaTypes","readFeature","properties","id","points","loadGeometry","flatCoordinates","ends","MBTypes","i","j","y","feature","transform","readFeatures","features","tile","VectorTile","adaptOptions","setWorldExtent","setExtent","layerName","keys","includes","l","idx","vectorFeature","getProperties","layer","readProjection","mono","multi","MBTilesVectorSource","tileUrlFunction","coords","setTileLoadFunction","tileLoader","_tile","_url","tileCoord","setLoader","resolution","$zoom","$col","$row","getFormat","featureProjection","setFeatures","onLoad","onError","disposeInternal","MBTilesRasterSource","image","getImage","Uint8Array","blob","Blob","imageUrl","URL","createObjectURL","src","setState","ERROR","OSM","crossOrigin","attributionsCollapsible","interpolate","reprojectionErrorThreshold","tileLoadFunction","transition","wrapX","zDirection"],"sourceRoot":""}