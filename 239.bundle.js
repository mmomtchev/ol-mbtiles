"use strict";(self.webpackChunkol_mbtiles=self.webpackChunkol_mbtiles||[]).push([[239],{5239:(e,o,t)=>{t.r(o),t.d(o,{default:()=>c});var n=t(8854),r=t(2479),i=t(8266),l=t(9090),s=t(6263),a=t(8661),d=t(5686),u=function(e,o,t,n){return new(t||(t=Promise))((function(r,i){function l(e){try{a(n.next(e))}catch(e){i(e)}}function s(e){try{a(n.throw(e))}catch(e){i(e)}}function a(e){var o;e.done?r(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(l,s)}a((n=n.apply(e,o||[])).next())}))};function c(){return u(this,void 0,void 0,(function*(){return new n.Z({target:"map",layers:[new r.Z({zIndex:20,source:new s.Z}),new r.Z({zIndex:10,opacity:.4,source:new i.Z}),new r.Z({zIndex:0,source:new d.Yr(yield(0,d.ri)({url:"https://velivole.b-cdn.net/tiles-RGR92UTM40S.mbtiles"}))})],view:new l.ZP({center:(0,a.mi)([55.47437,-21.08468]),zoom:9})})}))}},5686:(e,o,t)=>{t.d(o,{Yr:()=>Z,H5:()=>E,ri:()=>c});var n,r=t(9759),i=t(8661),l=t(8641),s=t(8738);const a="undefined"!=typeof OL_MBTILES_DEBUG&&OL_MBTILES_DEBUG||"undefined"!=typeof process&&void 0!==(null===(n=null===process||void 0===process?void 0:process.env)||void 0===n?void 0:n.OL_MBTILES_DEBUG)&&process.env.OL_MBTILES_DEBUG?console.debug.bind(console):()=>{},d={jpg:"raster",png:"raster",webp:"raster",pbf:"vector",mvt:"vector"};function u(e){var o,t,n;return{workers:null!==(o=null==e?void 0:e.sqlWorkers)&&void 0!==o?o:4,httpOptions:{maxPageSize:null!==(t=null==e?void 0:e.maxSqlPageSize)&&void 0!==t?t:4096,cacheSize:null!==(n=null==e?void 0:e.sqlCacheSize)&&void 0!==n?n:4096}}}function c(e){const o=(0,r.he)(u(e)).then((o=>o.open(e.url).then((()=>o))));return o.then((e=>e.exec("SELECT name,value FROM metadata"))).then((e=>{if(e&&e.length){const o=e.reduce(((e,o)=>(e[o.row[0]]=o.row[1],e)),{});return a("Loaded metadata",o),o}throw new Error("Could not load metadata")})).then((t=>{var n,r,a,u,c,p,h,m;const v=Object.assign({},e),w=null===(r=null===(n=t.format)||void 0===n?void 0:n.toLowerCase)||void 0===r?void 0:r.call(n);d[w]||console.warn("Unknown tile format",w),v.projection=null!==(a=e.projection)&&void 0!==a?a:"EPSG:3857",v.attributions=null!==(u=t.attribution)&&void 0!==u?u:t.description,v.maxZoom=null!==(c=e.maxZoom)&&void 0!==c?c:+t.maxzoom,v.minZoom=null!==(p=e.minZoom)&&void 0!==p?p:+t.minzoom;const f=null===(m=null===(h=(0,i.U2)(v.projection))||void 0===h?void 0:h.getExtent)||void 0===m?void 0:m.call(h),g=t.bounds,y=g?(0,i.$A)(g.split(",").map((e=>+e)),"EPSG:4326",v.projection):f;if("raster"===d[w]){if(void 0===v.maxZoom||void 0===v.minZoom||void 0===f)throw new Error("Cannot determine tilegrid, need minZoom, maxZoom");const e=[(0,l.dz)(f)/256];for(let o=1;o<=v.maxZoom;o++)e.push(e[e.length-1]/2);v.tileGrid=new s.Z({origin:[f[0],f[2]],extent:y,minZoom:v.minZoom,resolutions:e})}else v.extent=f;return v.pool=o,v.url=e.url,v}))}var p=t(7205),h=t(3614),m=t.n(h),v=t(8929),w=t(7885),f=t(9646),g=t(9619),y=t(3433);class x extends f.ZP{constructor(e){var o,t,n;super(),e=e||{},this.dataProjection=new g.Z({code:"",units:"tile-pixels"}),this.featureClass_=e.featureClass?e.featureClass:y.ZP,this.geometryName_=null!==(o=e.geometryName)&&void 0!==o?o:"Geometry",this.layers_=null!==(t=e.layers)&&void 0!==t?t:null,this.idProperty_=e.idProperty,this.extent=null!==(n=e.extent)&&void 0!==n?n:4096,this.supportedMediaTypes=["application/vnd-mbtiles"]}readFeature(e,o){const t=e.properties;let n;this.idProperty_?(n=t[this.idProperty_],delete t[this.idProperty_]):n=e.id;const r=e.loadGeometry(),i=[],l=[],s=x.MBTypes[r.length>1?"multi":"mono"][e.type];if("Unknown"===s)return null;for(let e=0;e<r.length;e++)if(0!=r[e].length){for(let o=0;o<r[e].length;o++)i.push(r[e][o].x,r[e][o].y);l.push(i.length)}const a=new this.featureClass_(s,i,l,t,n);return a.transform(null==o?void 0:o.dataProjection),a}readFeatures(e,o){const t=this.layers_,n=[],r=new v.VectorTile(new(m())(w.ZP.ungzip(e)));o=this.adaptOptions(o);const l=(0,i.U2)(null==o?void 0:o.dataProjection),s=null==o?void 0:o.extent;if(!l||!o||!s)throw new Error("Cannot determine the projection/extent");l.setWorldExtent(s),l.setExtent([0,0,this.extent,this.extent]),o.dataProjection=l;for(const e of Object.keys(r.layers)){if(t&&!t.includes(e))continue;const i=r.layers[e];for(let t=0;t<i.length;t++){const r=i.feature(t),l=this.readFeature(r,o);l.getProperties().layer=e,n.push(l)}}return n}readProjection(){return this.dataProjection}}x.MBTypes={mono:["Unknown","Point","LineString","Polygon"],multi:["Unknown","MultiPoint","MultiLineString","Polygon"]};class E extends p.Z{constructor(e){var o;if(void 0===e.url&&void 0===e.pool)throw new Error("Must specify url");super(Object.assign(Object.assign({},e),{url:void 0,format:new x({layers:e.layers}),tileUrlFunction:o=>`${e.url}#${o[0]}:${o[1]}:${o[2]}`})),this.setTileLoadFunction(this.tileLoader.bind(this)),this.pool=null!==(o=e.pool)&&void 0!==o?o:(0,r.he)(u(e)).then((o=>o.open(e.url).then((()=>o))))}tileLoader(e,o){const t=e;a("loading tile",[t.tileCoord[0],t.tileCoord[1],t.tileCoord[2]]),t.setLoader(((e,o,n)=>{this.pool.then((e=>e.exec("SELECT tile_data FROM tiles WHERE zoom_level = $zoom AND tile_column = $col AND tile_row = $row",{$zoom:t.tileCoord[0],$col:t.tileCoord[1],$row:(1<<t.tileCoord[0])-1-t.tileCoord[2]}))).then((o=>{if(o&&o[0]&&o[0].row[0]){const r=t.getFormat().readFeatures(o[0].row[0],{extent:e,featureProjection:n});return t.setFeatures(r),void t.onLoad(r,n)}throw new Error(`No data for ${t.tileCoord}`)})).catch((e=>{a(e),t.onError()}))}))}disposeInternal(){return this.pool.then((e=>e.close()))}}var b=t(928),C=t(7195);class Z extends b.Z{constructor(e){var o;if(void 0===e.url&&void 0===e.pool)throw new Error("Must specify url");super(Object.assign(Object.assign({},e),{url:void 0,tileUrlFunction:o=>`${e.url}#${o[0]}:${o[1]}:${o[2]}`})),this.setTileLoadFunction(this.tileLoader.bind(this)),this.pool=null!==(o=e.pool)&&void 0!==o?o:(0,r.he)(u(e)).then((o=>o.open(e.url).then((()=>o))))}tileLoader(e,o){a("loading tile",[e.tileCoord[0],e.tileCoord[1],e.tileCoord[2]]);const t=e.getImage();this.pool.then((o=>o.exec("SELECT tile_data FROM tiles WHERE zoom_level = $zoom AND tile_column = $col AND tile_row = $row",{$zoom:e.tileCoord[0],$col:e.tileCoord[1],$row:(1<<e.tileCoord[0])-1-e.tileCoord[2]}))).then((o=>{if(!(o&&o[0]&&o[0].row[0]instanceof Uint8Array))throw new Error(`No data for ${e.tileCoord}`);{const e=new Blob([o[0].row[0]]),n=URL.createObjectURL(e);t.src=n}})).catch((o=>{a(o),e.setState(C.Z.ERROR)}))}disposeInternal(){return this.pool.then((e=>e.close()))}}},8266:(e,o,t)=>{t.d(o,{Z:()=>i});var n=t(4680);class r extends n.Z{constructor(e){let o;o=void 0!==(e=e||{}).attributions?e.attributions:['&#169; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors.'];const t=void 0!==e.crossOrigin?e.crossOrigin:"anonymous",n=void 0!==e.url?e.url:"https://tile.openstreetmap.org/{z}/{x}/{y}.png";super({attributions:o,attributionsCollapsible:!1,cacheSize:e.cacheSize,crossOrigin:t,interpolate:e.interpolate,maxZoom:void 0!==e.maxZoom?e.maxZoom:19,opaque:void 0===e.opaque||e.opaque,reprojectionErrorThreshold:e.reprojectionErrorThreshold,tileLoadFunction:e.tileLoadFunction,transition:e.transition,url:n,wrapX:e.wrapX,zDirection:e.zDirection})}}const i=r}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,