(()=>{"use strict";var e,r,t={6186:(e,r,t)=>{var n;t.d(r,{fF:()=>s});const i="undefined"!=typeof SQLITE_DEBUG&&SQLITE_DEBUG||"undefined"!=typeof process&&void 0!==(null===(n=null===process||void 0===process?void 0:process.env)||void 0===n?void 0:n.SQLITE_DEBUG)&&process.env.SQLITE_DEBUG||"",o=["threads","vfs","cache","http"],s={};for(const e of o)s[e]=i.includes(e)?console.debug.bind(console):()=>{}},6945:(e,r,t)=>{var n=t(7028),i=t(7400),o=t(6186),s=function(e,r,t,n){return new(t||(t=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var r;e.done?i(e.value):(r=e.value,r instanceof t?r:new t((function(e){e(r)}))).then(s,a)}c((n=n.apply(e,r||[])).next())}))};let a;const c={},f=new n.Z({max:32});let d,l=1;const u={xOpen:function(e){return s(this,void 0,void 0,(function*(){let r=f.get(e.url);return r instanceof Promise&&(r=yield r),void 0!==r||(r=fetch(e.url,{method:"HEAD",headers:Object.assign({},null==a?void 0:a.headers)}).then((r=>("bytes"!==r.headers.get("Accept-Ranges")&&console.warn(`Server for ${e.url} does not advertise 'Accept-Ranges'. If the server supports it, in order to remove this message, add "Accept-Ranges: bytes". Additionally, if using CORS, add "Access-Control-Expose-Headers: *".`),{url:e.url,id:l++,size:BigInt(r.headers.get("Content-Length")),pageSize:null}))),f.set(e.url,r),f.set(e.url,yield r)),0}))},xAccess:function(e,r){return s(this,void 0,void 0,(function*(){const t=new Uint32Array(r.shm,0,1);try{const n=yield u.xOpen(e,r);t[0]=0===n?1:0}catch(e){t[0]=0}return 0}))},xRead:function(e,r){return s(this,void 0,void 0,(function*(){let t=f.get(e.url);if(!t)throw new Error(`File ${e.url} not open`);if(t instanceof Promise&&(t=yield t),!t.pageSize){t.pageSize=1024;const r=new ArrayBuffer(2),n=yield u.xRead({msg:"xRead",url:e.url,offset:BigInt(16),n:2},{buffer:new Uint8Array(r)}),s=new Uint16Array(r);if(0!==n)return n;if((0,i.g)(s),t.pageSize=s[0],o.fF.vfs(`page size is ${t.pageSize}`),1024!=t.pageSize&&(console.warn(`Page size for ${e.url} is ${t.pageSize}, recommended size is 1024`),d.delete(t.id+"|0")),t.pageSize>a.maxPageSize)throw new Error(`${t.pageSize} is over the maximum configured ${a.maxPageSize}`)}const n=BigInt(t.pageSize),s=BigInt(e.n),c=e.offset/n;c*n!==e.offset&&o.fF.vfs(`Read chunk ${e.offset}:${e.n} is not page-aligned`);let l=c*n;if(l+n<e.offset+s)throw new Error(`Read chunk ${e.offset}:${e.n} spans across a page-boundary`);const h=t.id+"|"+c;let g=d.get(h);if(g instanceof Promise&&(g=yield g),"number"==typeof g){o.fF.cache(`cache hit (multi-page segment) for ${e.url}:${c}`);const r=BigInt(g)*n;g=d.get(t.id+"|"+g),g instanceof Promise&&(g=yield g),g instanceof Uint8Array?l=r:g=void 0}if(void 0===g){o.fF.cache(`cache miss for ${e.url}:${c}`);let r=t.pageSize,n=c>0&&d.get(t.id+"|"+(Number(c)-1));n&&(n instanceof Promise&&(n=yield n),"number"==typeof n&&(n=d.get(t.id+"|"+n)),n instanceof Promise&&(n=yield n),n instanceof Uint8Array&&(r=2*n.byteLength,o.fF.cache(`downloading super page of size ${r}`)));const i=r/t.pageSize;o.fF.http(`downloading page ${c} of size ${r} starting at ${l}`);const s=fetch(e.url,{method:"GET",headers:Object.assign(Object.assign({},a.headers),{Range:`bytes=${l}-${l+BigInt(r-1)}`})}).then((e=>e.arrayBuffer())).then((e=>new Uint8Array(e)));d.set(h,s);for(let e=Number(c)+1;e<Number(c)+i;e++)d.set(t.id+"|"+e,s.then((()=>Number(c))));if(g=yield s,!(g instanceof Uint8Array)||0===g.length)throw new Error(`Invalid HTTP response received: ${JSON.stringify(s)}`);d.set(h,g);for(let e=Number(c)+1;e<Number(c)+i;e++)d.set(t.id+"|"+e,Number(c))}else o.fF.cache(`cache hit for ${e.url}:${c}`);const p=Number(e.offset-l);return r.buffer.set(g.subarray(p,p+e.n)),0}))},xFilesize:function(e,r){return s(this,void 0,void 0,(function*(){let t=f.get(e.url);if(!t)throw new Error(`File ${e.fid} not open`);return t instanceof Promise&&(t=yield t),new BigInt64Array(r.shm,0,1)[0]=t.size,0}))}};function h({data:e}){return s(this,void 0,void 0,(function*(){let r;o.fF.threads("Received new work message",this,e);try{r=yield u[e.msg](e,this),o.fF.threads("operation successful",this,r),Atomics.store(this.lock,0,r)}catch(e){console.error(e),Atomics.store(this.lock,0,1)}Atomics.notify(this.lock,0)}))}if(globalThis.onmessage=({data:e})=>{switch(o.fF.threads("Received new control message",e),e.msg){case"handshake":{const r=new SharedArrayBuffer(a.maxPageSize+Int32Array.BYTES_PER_ELEMENT),t=new Int32Array(r,a.maxPageSize),n=new Uint8Array(r,0,a.maxPageSize);t[0]=65535,c[e.id]={id:e.id,port:e.port,shm:r,lock:t,buffer:n},postMessage({msg:"ack",id:e.id,shm:r,lock:t}),e.port.onmessage=h.bind(c[e.id])}break;case"init":a=e.options,d=new n.Z({maxSize:1024*a.cacheSize,sizeCalculation:e=>{var r;return null!==(r=e.byteLength)&&void 0!==r?r:4}});break;case"close":postMessage({msg:"ack"}),close();break;default:throw new Error(`Invalid message received by backend: ${e}`)}},"undefined"==typeof SharedArrayBuffer)throw new Error('SharedArrayBuffer is not available. If your browser supports it, the webserver must send "Cross-Origin-Opener-Policy: same-origin "and "Cross-Origin-Embedder-Policy: require-corp" headers.')}},n={};function i(e){var r=n[e];if(void 0!==r)return r.exports;var o=n[e]={exports:{}};return t[e](o,o.exports,i),o.exports}i.m=t,i.x=()=>{var e=i.O(void 0,[906],(()=>i(6945)));return i.O(e)},e=[],i.O=(r,t,n,o)=>{if(!t){var s=1/0;for(d=0;d<e.length;d++){for(var[t,n,o]=e[d],a=!0,c=0;c<t.length;c++)(!1&o||s>=o)&&Object.keys(i.O).every((e=>i.O[e](t[c])))?t.splice(c--,1):(a=!1,o<s&&(s=o));if(a){e.splice(d--,1);var f=n();void 0!==f&&(r=f)}}return r}o=o||0;for(var d=e.length;d>0&&e[d-1][2]>o;d--)e[d]=e[d-1];e[d]=[t,n,o]},i.d=(e,r)=>{for(var t in r)i.o(r,t)&&!i.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:r[t]})},i.f={},i.e=e=>Promise.all(Object.keys(i.f).reduce(((r,t)=>(i.f[t](e,r),r)),[])),i.u=e=>e+".bundle.js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var r=i.g.document;if(!e&&r&&(r.currentScript&&(e=r.currentScript.src),!e)){var t=r.getElementsByTagName("script");t.length&&(e=t[t.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),(()=>{var e={945:1};i.f.i=(r,t)=>{e[r]||importScripts(i.p+i.u(r))};var r=self.webpackChunkol_mbtiles=self.webpackChunkol_mbtiles||[],t=r.push.bind(r);r.push=r=>{var[n,o,s]=r;for(var a in o)i.o(o,a)&&(i.m[a]=o[a]);for(s&&s(i);n.length;)e[n.pop()]=1;t(r)}})(),r=i.x,i.x=()=>i.e(906).then(r),i.x()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,