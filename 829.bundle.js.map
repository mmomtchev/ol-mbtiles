{"version":3,"file":"829.bundle.js","mappings":"sgBAce,a,yCACb,OAAO,IAAI,IAAI,CACbA,OAAQ,MACRC,OAAQ,CACN,IAAI,IAAU,CACZC,OAAQ,IAAI,MAEd,IAAI,IAAU,CACZA,OAAQ,IAAI,MAEd,IAAI,IAAgB,CAClBA,OAAQ,IAAI,WAA0B,QAAc,CAClDC,IAAK,0DAEPC,MAAO,QAGXC,KAAM,IAAI,KAAK,CACbC,QAAQ,QAAW,CAAC,GAAI,KACxBC,KAAM,KAGZ,G,6ICjCO,SAASC,EAAUC,EAAcC,GACtC,IAAIC,EACAC,EACJ,OAAQH,GACN,KAAK,EACHE,EAAQ,EACRC,EAAO,MACP,MACF,KAAK,EACHD,EAAQ,EACRC,EAAO,QACP,MACF,KAAK,EACHD,EAAQ,EACRC,EAAO,QACP,MACF,QACED,EAAQ,EACRC,EAAO,QAGXA,GAAQ,yBACR,MAAMC,EAAS,UA0Bf,OAvBc,IAAI,KAAM,CACtBC,MAAO,IAAI,IAAO,CAChBC,KAAM,IAAI,IAAK,CACbC,MAAOH,IAETI,OAAQN,EACRO,OAAQ,IAAI,IAAO,CACjBF,MAAOH,EACPF,MAAOA,MAGXQ,KAAM,IAAI,IAAK,CACbP,KAAMA,EACNO,KAAMT,EAAQU,IAAI,KAClBL,KAAM,IAAI,IAAK,CACbC,MAjBS,YAmBXE,OAAQ,IAAI,IAAO,CACjBF,MAAOH,EACPF,MAAO,OAKf,CAEO,MAAMU,EAAc,IAAI,KAAM,CACnCH,OAAQ,IAAI,IAAO,CACjBF,MAAO,OACPL,MAAO,MAMLW,EAAwC,CAAC,EACzCC,EAAoC,CACxC,SAAY,OACZ,MAAS,OACT,QAAW,QAEAC,EAAgB,IAAI,KAAM,CACrCT,KAAM,IAAI,IAAK,CACbC,MAAO,SAETE,OAAQ,IAAI,IAAO,CACjBF,MAAO,OACPL,MAAO,MAGEc,EAAa,IAAI,KAAM,CAClCV,KAAM,IAAI,IAAK,CACbC,MAAO,cAGEU,EAAgB,IAAI,KAAM,CACrCR,OAAQ,IAAI,IAAO,CACjBF,MAAO,UACPL,MAAO,MAGEgB,EAAY,SAAUjB,GACjC,MAAMkB,EAAOlB,EAAQU,IAAI,SACnBS,EAAUnB,EAAQU,IAAI,WACtBU,EAAWpB,EAAQU,IAAI,YACvBW,EAAWH,EAAO,IAAMC,EAAU,IAAMC,EAC9C,IAAI1B,EAAQkB,EAAeS,GAC3B,IAAK3B,EAAO,CACV,IAAIY,EAAOL,EACPkB,GACFb,EAAQ,OACRL,EAAQ,IAERK,EAAQO,EAAUK,GAClBjB,EAAgB,WAARiB,EAAoB,IAAM,GAEpCxB,EAAQ,IAAI,KAAM,CAChBc,OAAQ,IAAI,IAAO,CACjBF,MAAOA,EACPL,MAAOA,IAETqB,OAAQF,IAEVR,EAAeS,GAAY3B,CAC7B,CACA,OAAOA,CACT,EACM6B,EAAY,IAAI,KAAM,CAC1BnB,MAAO,IAAI,IAAO,CAChBG,OAAQ,EACRF,KAAM,IAAI,IAAK,CACbC,MAAO,gBAIPkB,EAAa,IAAI,IAAO,CAC5BlB,MAAO,QACPL,MAAO,IAEIwB,EAAa,SAAUzB,GAClC,GAA4B,WAAxBA,EAAQU,IAAI,SACd,OAAO,KACT,GAAIV,EAAQU,IAAI,QAAS,CACvB,MAAMhB,EAAQ6B,EAAUG,QAOxB,OANAhC,EAAMiC,QAAQ,IAAI,IAAK,CACrBlB,KAAMT,EAAQU,IAAI,QAClBkB,SAAU,EACV1B,KAAM,uBACNM,OAAQgB,KAEH9B,CACT,CACA,OAAO,IACT,C","sources":["webpack://ol-mbtiles/./examples/code/klokantech.ts","webpack://ol-mbtiles/./examples/style.ts"],"sourcesContent":["import Map from 'ol/Map.js';\nimport OSM from 'ol/source/OSM.js';\nimport TileLayer from 'ol/layer/Tile.js';\nimport View from 'ol/View.js';\nimport VectorTileLayer from 'ol/layer/VectorTile';\nimport TileDebug from 'ol/source/TileDebug';\nimport { fromLonLat } from 'ol/proj';\n\nimport { importMBTiles, MBTilesVectorSource } from 'ol-mbtiles';\nimport { styleBorder } from '../style';\n\n// MBTiles from\n// https://github.com/klokantech/vector-tiles-sample\n\nexport default async function () {\n  return new Map({\n    target: 'map',\n    layers: [\n      new TileLayer({\n        source: new OSM(),\n      }),\n      new TileLayer({\n        source: new TileDebug()\n      }),\n      new VectorTileLayer({\n        source: new MBTilesVectorSource(await importMBTiles({\n          url: 'https://velivole.b-cdn.net/mbtiles/countries.mbtiles',\n        })),\n        style: styleBorder\n      })\n    ],\n    view: new View({\n      center: fromLonLat([12, 50]),\n      zoom: 6\n    }),\n  });\n}","import { FeatureLike } from 'ol/Feature';\nimport { Style, Text, Fill, Stroke, Circle } from 'ol/style';\n\nexport function styleTown(size: number, feature: FeatureLike): Style {\n  let width: number;\n  let font: string;\n  switch (size) {\n    case 0:\n      width = 6;\n      font = '2em';\n      break;\n    case 1:\n      width = 5;\n      font = '1.2em';\n      break;\n    case 2:\n      width = 3;\n      font = '0.8em';\n      break;\n    default:\n      width = 1;\n      font = '0.5em';\n      break;\n  }\n  font += ' helvetica, sans-serif';\n  const color1 = '#00007f';\n  const color2 = '#ffffff';\n\n  const style = new Style({\n    image: new Circle({\n      fill: new Fill({\n        color: color1,\n      }),\n      radius: width,\n      stroke: new Stroke({\n        color: color1,\n        width: width,\n      }),\n    }),\n    text: new Text({\n      font: font,\n      text: feature.get('n'),\n      fill: new Fill({\n        color: color2\n      }),\n      stroke: new Stroke({\n        color: color1,\n        width: 2\n      })\n    })\n  });\n  return style;\n}\n\nexport const styleBorder = new Style({\n  stroke: new Stroke({\n    color: 'blue',\n    width: 2\n  })\n});\n\n\n// Styles inspired from https://openlayers.org/en/latest/examples/osm-vector-tiles.html\nconst roadStyleCache: Record<string, Style> = {};\nconst roadColor: Record<string, string> = {\n  'motorway': '#776',\n  'trunk': '#ccb',\n  'highway': '#f39',\n};\nexport const buildingStyle = new Style({\n  fill: new Fill({\n    color: '#666'\n  }),\n  stroke: new Stroke({\n    color: '#444',\n    width: 1,\n  }),\n});\nexport const waterStyle = new Style({\n  fill: new Fill({\n    color: '#9db9e8',\n  }),\n});\nexport const boundaryStyle = new Style({\n  stroke: new Stroke({\n    color: '#8B008B',\n    width: 2,\n  }),\n});\nexport const roadStyle = function (feature: FeatureLike) {\n  const kind = feature.get('class');\n  const railway = feature.get('railway');\n  const sort_key = feature.get('sort_key');\n  const styleKey = kind + '/' + railway + '/' + sort_key;\n  let style = roadStyleCache[styleKey];\n  if (!style) {\n    let color, width;\n    if (railway) {\n      color = '#7de';\n      width = 1;\n    } else {\n      color = roadColor[kind];\n      width = kind == 'highway' ? 1.5 : 1;\n    }\n    style = new Style({\n      stroke: new Stroke({\n        color: color,\n        width: width,\n      }),\n      zIndex: sort_key,\n    });\n    roadStyleCache[styleKey] = style;\n  }\n  return style;\n};\nconst placeBase = new Style({\n  image: new Circle({\n    radius: 5,\n    fill: new Fill({\n      color: '#000080'\n    })\n  })\n});\nconst textStroke = new Stroke({\n  color: 'white',\n  width: 2\n});\nexport const placeStyle = function (feature: FeatureLike): Style {\n  if (feature.get('class') == 'country')\n    return null as unknown as Style;\n  if (feature.get('name')) {\n    const style = placeBase.clone();\n    style.setText(new Text({\n      text: feature.get('name'),\n      offsetY: -5,\n      font: 'bold 16px sans-serif',\n      stroke: textStroke\n    }));\n    return style;\n  }\n  return null as unknown as Style;\n};"],"names":["target","layers","source","url","style","view","center","zoom","styleTown","size","feature","width","font","color1","image","fill","color","radius","stroke","text","get","styleBorder","roadStyleCache","roadColor","buildingStyle","waterStyle","boundaryStyle","roadStyle","kind","railway","sort_key","styleKey","zIndex","placeBase","textStroke","placeStyle","clone","setText","offsetY"],"sourceRoot":""}