{"version":3,"file":"832.bundle.js","mappings":"+IAcIA,E,iIACJ,MAEMC,EADkB,oBAAZC,cAAsK,KAA1D,QAAxEF,EAAiB,OAAZE,cAAgC,IAAZA,aAAqB,EAASA,QAAQC,WAAwB,IAAPH,OAAgB,EAASA,EAAGI,mBAAqCF,QAAQC,IAAIC,iBAChLC,QAAQJ,MAAMK,KAAKD,SAAW,KAAe,EAEpEE,EAAU,CACZ,IAAO,CAAEC,KAAM,SAAUC,KAAM,cAC/B,IAAO,CAAED,KAAM,SAAUC,KAAM,aAC/B,KAAQ,CAAED,KAAM,SAAUC,KAAM,cAChC,IAAO,CAAED,KAAM,UACf,IAAO,CAAEA,KAAM,WAEnB,SAASE,EAAgBC,GACrB,IAAIX,EAAIY,EAAIC,EACZ,MAAO,CACHC,QAAyF,QAA/Ed,EAAKW,aAAyC,EAASA,EAAQI,kBAA+B,IAAPf,EAAgBA,EAAK,EACtHgB,YAAa,CACTC,YAAaN,aAAyC,EAASA,EAAQM,YACvEC,YAAiG,QAAnFN,EAAKD,aAAyC,EAASA,EAAQQ,sBAAmC,IAAPP,EAAgBA,EAAK,KAC9HQ,UAA6F,QAAjFP,EAAKF,aAAyC,EAASA,EAAQU,oBAAiC,IAAPR,EAAgBA,EAAK,MAGtI,CASA,SAASS,EAAcC,GACnB,MAAMC,GAAO,QAAqBd,EAAgBa,IAClD,OAAOC,EACFC,MAAMD,GAASA,EAAKE,KAAKH,EAAII,KAAKF,MAAK,IAAMD,MAC7CC,MAAMG,GAAMA,EAAEC,KAAK,qCACnBJ,MAAMK,IACP,GAAIA,GAAKA,EAAEC,OAAQ,CAEf,MAAMC,EAAOF,EAAEG,QAAO,CAACC,EAAGC,KACtBD,EAAEC,EAAEC,IAAI,IAAMD,EAAEC,IAAI,GACbF,IACR,CAAC,GAEJ,OADAjC,EAAM,kBAAmB+B,GAClBA,CACX,CACA,MAAM,IAAIK,MAAM,0BAA0B,IAEzCZ,MAAMa,IACP,IAAItC,EAAIY,EAAIC,EAAI0B,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EACpC,MAAMC,EAAOC,OAAOC,OAAO,CAAC,EAAGxB,GACzByB,EAA4F,QAAlFpC,EAA6B,QAAvBZ,EAAKsC,EAAW,cAAsB,IAAPtC,OAAgB,EAASA,EAAGiD,mBAAgC,IAAPrC,OAAgB,EAASA,EAAGsC,KAAKlD,GACtIO,EAAQyC,IACT3C,QAAQ8C,KAAK,sBAAuBH,GAGxCH,EAAKO,WAAuC,QAAzBvC,EAAKU,EAAI6B,kBAA+B,IAAPvC,EAAgBA,EAAK,YACzEgC,EAAKQ,aAA0C,QAAzBd,EAAKD,EAAGgB,mBAAgC,IAAPf,EAAgBA,EAAKD,EAAGiB,YAC/EV,EAAKW,QAAiC,QAAtBhB,EAAKjB,EAAIiC,eAA4B,IAAPhB,EAAgBA,GAAMF,EAAY,QAChFO,EAAKY,QAAiC,QAAtBhB,EAAKlB,EAAIkC,eAA4B,IAAPhB,EAAgBA,GAAMH,EAAY,QAChF,MAAMoB,EAAsG,QAAxFf,EAAqC,QAA/BD,GAAK,QAAIG,EAAKO,mBAAgC,IAAPV,OAAgB,EAASA,EAAGiB,iBAA8B,IAAPhB,OAAgB,EAASA,EAAGO,KAAKR,GAC/IkB,EAAStB,EAAW,OACpBuB,EAASD,GACX,QAAgBA,EAAOE,MAAM,KAAKC,KAAKjC,IAAOA,IAAI,YAAae,EAAKO,YACpEM,EACJ,GAA6B,WAAzBnD,EAAQyC,GAAQxC,KAAmB,CACnC,QAAqBwD,IAAjBnB,EAAKW,cAA0CQ,IAAjBnB,EAAKY,cAAwCO,IAAfN,EAC5D,MAAM,IAAIrB,MAAM,oDACpB,MACM4B,EAAc,EADG,QAASP,GAAc,KAE9C,IAAK,IAAIQ,EAAI,EAAGA,GAAKrB,EAAKW,QAASU,IAC/BD,EAAYE,KAAKF,EAAYA,EAAYlC,OAAS,GAAK,GAC3D,MAAMtB,EAAuC,QAA/BmC,EAAKrC,EAAQyC,GAAQvC,YAAyB,IAAPmC,EAAgBA,EAAKI,EAC1EH,EAAKpC,KAAOA,EACZoC,EAAKuB,SAAW,IAAI,IAAS,CACzBC,OAAQ,CAACX,EAAW,GAAIA,EAAW,IACnCG,SACAJ,QAASZ,EAAKY,QACdQ,eAER,MAEuBpB,EAGRgB,OAASH,EAIxB,OAFAb,EAAKrB,KAAOA,EACZqB,EAAKlB,IAAMJ,EAAII,IACRkB,CAAI,IAEVyB,OAAOC,GAAM/C,EAAKC,MAAMG,GAAMA,EAAE4C,UAAS/C,MAAK,IAAMgD,QAAQC,OAAOH,MAC5E,CAEA,MAAMI,UAAsB,KACxB,WAAAC,CAAYjE,GACR,IAAIX,EAAIY,EAAIC,EACZgE,QACAlE,EAAUA,GAAoB,CAAC,EAC/BmE,KAAKC,eAAiB,IAAI,IAAW,CACjCC,KAAM,GACNC,MAAO,gBAEXH,KAAKI,cAAgBvE,EAAQwE,aAAexE,EAAQwE,aAAe,KACnEL,KAAKM,cAAgD,QAA/BpF,EAAKW,EAAQ0E,oBAAiC,IAAPrF,EAAgBA,EAAK,WAClF8E,KAAKQ,QAAoC,QAAzB1E,EAAKD,EAAQ4E,cAA2B,IAAP3E,EAAgBA,EAAK,KACtEkE,KAAKU,YAAc7E,EAAQ8E,WAC3BX,KAAKjB,OAAmC,QAAzBhD,EAAKF,EAAQkD,cAA2B,IAAPhD,EAAgBA,EAAK,KAKrEiE,KAAKY,oBAAsB,CACvB,0BAER,CACA,WAAAC,CAAYC,EAAQjF,GAChB,MAAMkF,EAAaD,EAAOC,WAC1B,IAAIC,EACChB,KAAKU,aAINM,EAAKD,EAAWf,KAAKU,oBACdK,EAAWf,KAAKU,cAJvBM,EAAKF,EAAOE,GAMhB,MAAMC,EAASH,EAAOI,eAChBC,EAAkB,GAClBC,EAAO,GACP1F,EAAOmE,EAAcwB,QAAQJ,EAAOhE,OAAS,EAAI,QAAU,QAAQ6D,EAAOpF,MAChF,GAAa,YAATA,EACA,OAAO,KACX,IAAK,IAAI4F,EAAI,EAAGA,EAAIL,EAAOhE,OAAQqE,IAC/B,GAAwB,GAApBL,EAAOK,GAAGrE,OAAd,CAEA,IAAK,IAAIsE,EAAI,EAAGA,EAAIN,EAAOK,GAAGrE,OAAQsE,IAClCJ,EAAgB9B,KAAK4B,EAAOK,GAAGC,GAAGlE,EAAG4D,EAAOK,GAAGC,GAAGC,GAEtDJ,EAAK/B,KAAK8B,EAAgBlE,OAJd,CAMhB,MAAMwE,EAAU,IAAIzB,KAAKI,cAAc1E,EAAMyF,EAAiBC,EAAM,EAAGL,EAAYC,GAGnF,OAFKnF,aAAyC,EAASA,EAAQoE,iBAAmB,cAAewB,GAC7FA,EAAQC,UAAU7F,aAAyC,EAASA,EAAQoE,gBACzEwB,CACX,CACA,YAAAE,CAAab,EAAQjF,GACjB,MAAM4E,EAAST,KAAKQ,QACdoB,EAAW,GACXC,EAAO,IAAI,EAAAC,WAAW,IAAI,IAAS,YAAYhB,KACrDjF,EAAUmE,KAAK+B,aAAalG,GAC5B,MAAMoE,GAAiB,QAAIpE,aAAyC,EAASA,EAAQoE,gBAC/ElB,EAASlD,aAAyC,EAASA,EAAQkD,OACzE,IAAKkB,IAAmBpE,IAAYkD,EAChC,MAAM,IAAIxB,MAAM,0CACpB0C,EAAe+B,eAAejD,GAC9BkB,EAAegC,UAAU,CAAC,EAAG,EAAGjC,KAAKjB,OAAQiB,KAAKjB,SAClDlD,EAAQoE,eAAiBA,EACzB,IAAK,MAAMiC,KAAalE,OAAOmE,KAAKN,EAAKpB,QAAS,CAC9C,GAAIA,IAAWA,EAAO2B,SAASF,GAC3B,SAEJ,MAAMG,EAAIR,EAAKpB,OAAOyB,GACtB,IAAK,IAAII,EAAM,EAAGA,EAAMD,EAAEpF,OAAQqF,IAAO,CACrC,MAAMC,EAAgBF,EAAEZ,QAAQa,GAC1Bb,EAAUzB,KAAKa,YAAY0B,EAAe1G,GAChD4F,EAAQe,gBAAgBC,MAAQP,EAChCN,EAASvC,KAAKoC,EAClB,CACJ,CACA,OAAOG,CACX,CACA,cAAAc,GACI,OAAO1C,KAAKC,cAChB,EAEJJ,EAAcwB,QAAU,CACpBsB,KAAM,CAAC,UAAW,QAAS,aAAc,WACzCC,MAAO,CAAC,UAAW,aAAc,kBAAmB,YAgBxD,MAAMC,UAA4B,IAI9B,WAAA/C,CAAYjE,GACR,IAAIX,EACJ,QAAoBgE,IAAhBrD,EAAQgB,UAAsCqC,IAAjBrD,EAAQa,KACrC,MAAM,IAAIa,MAAM,oBACpBwC,MAAM/B,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGpC,GAAU,CAAEgB,SAAKqC,EAAWhB,OAAQ,IAAI2B,EAAc,CACpFY,OAAQ5E,EAAQ4E,SAGpBqC,gBAAkBC,GAAW,GAAGlH,EAAQgB,OAAOkG,EAAO,MAAMA,EAAO,MAAMA,EAAO,QACpF/C,KAAKgD,oBAAoBhD,KAAKiD,WAAWzH,KAAKwE,OAC9CA,KAAKtD,KAA+B,QAAvBxB,EAAKW,EAAQa,YAAyB,IAAPxB,EAAgBA,GAAK,QAAqBU,EAAgBC,IACjGc,MAAMD,GAASA,EAAKE,KAAKf,EAAQgB,KAAKF,MAAK,IAAMD,KAC1D,CACA,UAAAuG,CAAWC,EAAOC,GACd,MAAMtB,EAAOqB,EACb/H,EAAM,eAAgB,CAAC0G,EAAKuB,UAAU,GAAIvB,EAAKuB,UAAU,GAAIvB,EAAKuB,UAAU,KAC5EvB,EAAKwB,WAAU,CAACtE,EAAQuE,EAAYhF,KAChC0B,KAAKtD,KACAC,MAAMG,GAAMA,EAAEC,KAAK,kGAAmG,CACvHwG,MAAO1B,EAAKuB,UAAU,GACtBI,KAAM3B,EAAKuB,UAAU,GACrBK,MAAO,GAAK5B,EAAKuB,UAAU,IAAM,EAAIvB,EAAKuB,UAAU,OAEnDzG,MAAMK,IACP,GAAIA,GAAKA,EAAE,IAAMA,EAAE,GAAGM,IAAI,GAAI,CAC1B,MACMsE,EADSC,EAAK6B,YACI/B,aAAa3E,EAAE,GAAGM,IAAI,GAAI,CAC9CyB,SACA4E,kBAAmBrF,IAIvB,OAFAuD,EAAK+B,YAAYhC,QACjBC,EAAKgC,OAAOjC,EAAUtD,EAE1B,CACA,MAAM,IAAIf,MAAM,eAAesE,EAAKuB,YAAY,IAE/C5D,OAAOC,IACRtE,EAAMsE,GACNoC,EAAKiC,SAAS,GAChB,GAEV,CACA,eAAAC,GACI,OAAO/D,KAAKtD,KAAKC,MAAMG,GAAMA,EAAE4C,SACnC,EAgBJ,MAAMsE,UAA4B,IAI9B,WAAAlE,CAAYjE,GACR,IAAIX,EACJ,QAAoBgE,IAAhBrD,EAAQgB,UAAsCqC,IAAjBrD,EAAQa,KACrC,MAAM,IAAIa,MAAM,oBACpBwC,MAAM/B,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGpC,GAAU,CAAEgB,SAAKqC,EAEnD4D,gBAAkBC,GAAW,GAAGlH,EAAQgB,OAAOkG,EAAO,MAAMA,EAAO,MAAMA,EAAO,QACpF/C,KAAKgD,oBAAoBhD,KAAKiD,WAAWzH,KAAKwE,OAC9CA,KAAKtD,KAA+B,QAAvBxB,EAAKW,EAAQa,YAAyB,IAAPxB,EAAgBA,GAAK,QAAqBU,EAAgBC,IACjGc,MAAMD,GAASA,EAAKE,KAAKf,EAAQgB,KAAKF,MAAK,IAAMD,MACtDsD,KAAKrE,KAAOE,EAAQF,IACxB,CAEA,UAAAsH,CAAWpB,EAAMsB,GACbhI,EAAM,eAAgB,CAAC0G,EAAKuB,UAAU,GAAIvB,EAAKuB,UAAU,GAAIvB,EAAKuB,UAAU,KAC5E,MAAMa,EAAQpC,EAAKqC,WACnBlE,KAAKtD,KACAC,MAAMG,GAAMA,EAAEC,KAAK,kGAAmG,CACvHwG,MAAO1B,EAAKuB,UAAU,GACtBI,KAAM3B,EAAKuB,UAAU,GACrBK,MAAO,GAAK5B,EAAKuB,UAAU,IAAM,EAAIvB,EAAKuB,UAAU,OAEnDzG,MAAMK,IACP,KAAIA,GAAKA,EAAE,IACHA,EAAE,GAAGM,IAAI,aAAc6G,YAO/B,MAAM,IAAI5G,MAAM,eAAesE,EAAKuB,aARpC,CAEQ,MAAMgB,EAAO,IAAIC,KAAK,CAACrH,EAAE,GAAGM,IAAI,IAAK,CAAE5B,KAAMsE,KAAKrE,OAC5C2I,EAAWC,IAAIC,gBAAgBJ,GACrCH,EAAMQ,IAAMH,CAGpB,CACgD,IAE/C9E,OAAOC,IACRtE,EAAMsE,GACNoC,EAAK6C,SAAS,IAAUC,MAAM,GAEtC,CACA,eAAAZ,GACI,OAAO/D,KAAKtD,KAAKC,MAAMG,GAAMA,EAAE4C,SACnC,E,0DCnPJ,MAAMkF,UAAYC,EAAA,EAIhB,WAAA/E,CAAYjE,GAGV,MAAMyC,OACmBY,KAHzBrD,EAAUA,GAAW,CAAC,GAGZyC,WAA2BzC,EAAQyC,WAAa,YAEpDgB,OACiBJ,IAArBrD,EAAQyD,SACJzD,EAAQyD,UACR,QAAU,CACRP,QAAQ,QAAqBT,GAC7BwG,cAAejJ,EAAQiJ,cACvBpG,QAAS7C,EAAQ6C,QACjBC,QAAS9C,EAAQ8C,QACjBoG,SAAUlJ,EAAQkJ,WAG1BhF,MAAM,CACJxB,aAAc1C,EAAQ0C,aACtBjC,UAAWT,EAAQS,UACnB0I,YAAanJ,EAAQmJ,YACrBC,YAAapJ,EAAQoJ,YACrB3G,WAAYA,EACZ4G,2BAA4BrJ,EAAQqJ,2BACpC5F,SAAUA,EACV6F,iBAAkBtJ,EAAQsJ,iBAC1BC,eAAgBvJ,EAAQuJ,eACxBtC,gBAAiBjH,EAAQiH,gBACzBjG,IAAKhB,EAAQgB,IACbwI,KAAMxJ,EAAQwJ,KACdC,WAAyBpG,IAAlBrD,EAAQyJ,OAAsBzJ,EAAQyJ,MAC7CC,WAAY1J,EAAQ0J,WACpBC,wBAAyB3J,EAAQ2J,wBACjCC,WAAY5J,EAAQ4J,aAOtBzF,KAAK0F,aAA6BxG,IAAnBrD,EAAQ8J,OAAuB9J,EAAQ8J,OAAS,CACjE,CAMA,SAAAC,GACE,OAAO5F,KAAK0F,OACd,EAGF,UCtCA,EAvCA,cAAkB,EAIhB,WAAA5F,CAAYjE,GAGV,IAAI0C,EAEFA,OAD2BW,KAH7BrD,EAAUA,GAAW,CAAC,GAGV0C,aACK1C,EAAQ0C,aAER,CAhDnB,4GAmDE,MAAMyG,OACoB9F,IAAxBrD,EAAQmJ,YAA4BnJ,EAAQmJ,YAAc,YAEtDnI,OACYqC,IAAhBrD,EAAQgB,IACJhB,EAAQgB,IACR,iDAENkD,MAAM,CACJxB,aAAcA,EACdiH,yBAAyB,EACzBlJ,UAAWT,EAAQS,UACnB0I,YAAaA,EACbC,YAAapJ,EAAQoJ,YACrBvG,aAA6BQ,IAApBrD,EAAQ6C,QAAwB7C,EAAQ6C,QAAU,GAC3DwG,2BAA4BrJ,EAAQqJ,2BACpCC,iBAAkBtJ,EAAQsJ,iBAC1BI,WAAY1J,EAAQ0J,WACpB1I,IAAKA,EACLyI,MAAOzJ,EAAQyJ,MACfG,WAAY5J,EAAQ4J,YAExB,E","sources":["webpack://ol-mbtiles/./dist/index.js","webpack://ol-mbtiles/./node_modules/ol/source/XYZ.js","webpack://ol-mbtiles/./node_modules/ol/source/OSM.js"],"sourcesContent":["import { createSQLiteHTTPPool } from 'sqlite-wasm-http';\nimport { get, transformExtent } from 'ol/proj.js';\nimport { getWidth } from 'ol/extent.js';\nimport TileGrid from 'ol/tilegrid/TileGrid.js';\nimport VectorTileSource from 'ol/source/VectorTile.js';\nimport Protobuf from 'pbf';\nimport { VectorTile } from '@mapbox/vector-tile';\nimport pako from 'pako';\nimport FeatureFormat from 'ol/format/Feature.js';\nimport Projection from 'ol/proj/Projection.js';\nimport RenderFeature from 'ol/render/Feature.js';\nimport ImageTileSource from 'ol/source/TileImage.js';\nimport TileState from 'ol/TileState.js';\n\nvar _a;\nconst debugEnabled = (typeof OL_MBTILES_DEBUG !== 'undefined' && OL_MBTILES_DEBUG) ||\n    (typeof process !== 'undefined' && typeof ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.OL_MBTILES_DEBUG) !== 'undefined' && process.env.OL_MBTILES_DEBUG);\nconst debug = debugEnabled ? console.debug.bind(console) : () => undefined;\n\nconst formats = {\n    'jpg': { type: 'raster', mime: 'image/jpeg' },\n    'png': { type: 'raster', mime: 'image/png' },\n    'webp': { type: 'raster', mime: 'image/webp' },\n    'pbf': { type: 'vector' },\n    'mvt': { type: 'vector' },\n};\nfunction httpPoolOptions(options) {\n    var _a, _b, _c;\n    return {\n        workers: (_a = options === null || options === void 0 ? void 0 : options.sqlWorkers) !== null && _a !== void 0 ? _a : 4,\n        httpOptions: {\n            backendType: options === null || options === void 0 ? void 0 : options.backendType,\n            maxPageSize: (_b = options === null || options === void 0 ? void 0 : options.maxSqlPageSize) !== null && _b !== void 0 ? _b : 4096,\n            cacheSize: (_c = options === null || options === void 0 ? void 0 : options.sqlCacheSize) !== null && _c !== void 0 ? _c : 4096\n        },\n    };\n}\n/**\n * Automatically import MBTiles metadata and return an options object\n * compatible with the source constructors.\n *\n * @param {(MBTilesRasterOptions | MBTilesVectorOptions) & SQLOptions} opt Any MBTiles{Raster|Vector}Source options to be overridden\n * @param {string} opt.url URL of the remote tileset\n * @returns {(MBTilesRasterOptions | MBTilesVectorOptions)}\n */\nfunction importMBTiles(opt) {\n    const pool = createSQLiteHTTPPool(httpPoolOptions(opt));\n    return pool\n        .then((pool) => pool.open(opt.url).then(() => pool))\n        .then((p) => p.exec('SELECT name,value FROM metadata'))\n        .then((r) => {\n        if (r && r.length) {\n            // Transform an array of form [ ['name', 'value' ], ... ] to object\n            const data = r.reduce((a, x) => {\n                a[x.row[0]] = x.row[1];\n                return a;\n            }, {});\n            debug('Loaded metadata', data);\n            return data;\n        }\n        throw new Error('Could not load metadata');\n    })\n        .then((md) => {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const opts = Object.assign({}, opt);\n        const format = (_b = (_a = md['format']) === null || _a === void 0 ? void 0 : _a.toLowerCase) === null || _b === void 0 ? void 0 : _b.call(_a);\n        if (!formats[format])\n            console.warn('Unknown tile format', format);\n        // Sometimes, I wonder if Mapbox doesn't hold a patent or some\n        // other kind of investment related to everyone using 3857\n        opts.projection = (_c = opt.projection) !== null && _c !== void 0 ? _c : 'EPSG:3857';\n        opts.attributions = ((_d = md.attribution) !== null && _d !== void 0 ? _d : md.description);\n        opts.maxZoom = (_e = opt.maxZoom) !== null && _e !== void 0 ? _e : +md['maxzoom'];\n        opts.minZoom = (_f = opt.minZoom) !== null && _f !== void 0 ? _f : +md['minzoom'];\n        const projExtent = (_h = (_g = get(opts.projection)) === null || _g === void 0 ? void 0 : _g.getExtent) === null || _h === void 0 ? void 0 : _h.call(_g);\n        const bounds = md['bounds'];\n        const extent = bounds ?\n            transformExtent(bounds.split(',').map((r) => +r), 'EPSG:4326', opts.projection) :\n            projExtent;\n        if (formats[format].type === 'raster') {\n            if (opts.maxZoom === undefined || opts.minZoom === undefined || projExtent === undefined)\n                throw new Error('Cannot determine tilegrid, need minZoom, maxZoom');\n            const baseResolution = getWidth(projExtent) / 256;\n            const resolutions = [baseResolution];\n            for (let z = 1; z <= opts.maxZoom; z++)\n                resolutions.push(resolutions[resolutions.length - 1] / 2);\n            const mime = (_j = formats[format].mime) !== null && _j !== void 0 ? _j : format;\n            opts.mime = mime;\n            opts.tileGrid = new TileGrid({\n                origin: [projExtent[0], projExtent[2]],\n                extent,\n                minZoom: opts.minZoom,\n                resolutions\n            });\n        }\n        else {\n            const vectorOpts = opts;\n            // Alas VectorTileSource in OpenLayers does not support\n            // constraining the extent while keeping the origin\n            vectorOpts.extent = projExtent;\n        }\n        opts.pool = pool;\n        opts.url = opt.url;\n        return opts;\n    })\n        .catch((e) => pool.then((p) => p.close()).then(() => Promise.reject(e)));\n}\n\nclass MBTilesFormat extends FeatureFormat {\n    constructor(options) {\n        var _a, _b, _c;\n        super();\n        options = options ? options : {};\n        this.dataProjection = new Projection({\n            code: '',\n            units: 'tile-pixels',\n        });\n        this.featureClass_ = options.featureClass ? options.featureClass : RenderFeature;\n        this.geometryName_ = (_a = options.geometryName) !== null && _a !== void 0 ? _a : 'Geometry';\n        this.layers_ = (_b = options.layers) !== null && _b !== void 0 ? _b : null;\n        this.idProperty_ = options.idProperty;\n        this.extent = (_c = options.extent) !== null && _c !== void 0 ? _c : 4096;\n        /*\n         * As this is the very first time MBTiles will be distributed by HTTP\n         * there is still no official MIME type\n         */\n        this.supportedMediaTypes = [\n            'application/vnd-mbtiles'\n        ];\n    }\n    readFeature(source, options) {\n        const properties = source.properties;\n        let id;\n        if (!this.idProperty_) {\n            id = source.id;\n        }\n        else {\n            id = properties[this.idProperty_];\n            delete properties[this.idProperty_];\n        }\n        const points = source.loadGeometry();\n        const flatCoordinates = [];\n        const ends = [];\n        const type = MBTilesFormat.MBTypes[points.length > 1 ? 'multi' : 'mono'][source.type];\n        if (type === 'Unknown')\n            return null;\n        for (let i = 0; i < points.length; i++) {\n            if (points[i].length == 0)\n                continue;\n            for (let j = 0; j < points[i].length; j++) {\n                flatCoordinates.push(points[i][j].x, points[i][j].y);\n            }\n            ends.push(flatCoordinates.length);\n        }\n        const feature = new this.featureClass_(type, flatCoordinates, ends, 2, properties, id);\n        if ((options === null || options === void 0 ? void 0 : options.dataProjection) && 'transform' in feature)\n            feature.transform(options === null || options === void 0 ? void 0 : options.dataProjection);\n        return feature;\n    }\n    readFeatures(source, options) {\n        const layers = this.layers_;\n        const features = [];\n        const tile = new VectorTile(new Protobuf(pako.ungzip(source)));\n        options = this.adaptOptions(options);\n        const dataProjection = get(options === null || options === void 0 ? void 0 : options.dataProjection);\n        const extent = options === null || options === void 0 ? void 0 : options.extent;\n        if (!dataProjection || !options || !extent)\n            throw new Error('Cannot determine the projection/extent');\n        dataProjection.setWorldExtent(extent);\n        dataProjection.setExtent([0, 0, this.extent, this.extent]);\n        options.dataProjection = dataProjection;\n        for (const layerName of Object.keys(tile.layers)) {\n            if (layers && !layers.includes(layerName)) {\n                continue;\n            }\n            const l = tile.layers[layerName];\n            for (let idx = 0; idx < l.length; idx++) {\n                const vectorFeature = l.feature(idx);\n                const feature = this.readFeature(vectorFeature, options);\n                feature.getProperties().layer = layerName;\n                features.push(feature);\n            }\n        }\n        return features;\n    }\n    readProjection() {\n        return this.dataProjection;\n    }\n}\nMBTilesFormat.MBTypes = {\n    mono: ['Unknown', 'Point', 'LineString', 'Polygon'],\n    multi: ['Unknown', 'MultiPoint', 'MultiLineString', 'Polygon']\n};\n\n/**\n * A tile source in a remote .mbtiles file accessible by HTTP\n *\n * WARNING\n * If your application continuously creates and removes MBTilesSource\n * objects, special care must be taken to properly dispose of them.\n * An MBTilesSource creates a thread pool that the JS engine is unable to\n * automatically garbage-collect unless the dispose() method\n * is invoked.\n * If you need to dispose a map that can potentially contain\n * MBTilesSource objects, check loadExample() in\n * https://github.com/mmomtchev/ol-mbtiles/blob/main/examples/index.ts#L15\n */\nclass MBTilesVectorSource extends VectorTileSource {\n    /**\n     * @param {MBTilesVectorOptions} options options\n     */\n    constructor(options) {\n        var _a;\n        if (options.url === undefined && options.pool === undefined)\n            throw new Error('Must specify url');\n        super(Object.assign(Object.assign({}, options), { url: undefined, format: new MBTilesFormat({\n                layers: options.layers\n            }), \n            // This is required to prevent Openlayers' cache from thinking that all tiles share the same URL\n            tileUrlFunction: (coords) => `${options.url}#${coords[0]}:${coords[1]}:${coords[2]}` }));\n        this.setTileLoadFunction(this.tileLoader.bind(this));\n        this.pool = (_a = options.pool) !== null && _a !== void 0 ? _a : createSQLiteHTTPPool(httpPoolOptions(options))\n            .then((pool) => pool.open(options.url).then(() => pool));\n    }\n    tileLoader(_tile, _url) {\n        const tile = _tile;\n        debug('loading tile', [tile.tileCoord[0], tile.tileCoord[1], tile.tileCoord[2]]);\n        tile.setLoader((extent, resolution, projection) => {\n            this.pool\n                .then((p) => p.exec('SELECT tile_data FROM tiles WHERE zoom_level = $zoom AND tile_column = $col AND tile_row = $row', {\n                $zoom: tile.tileCoord[0],\n                $col: tile.tileCoord[1],\n                $row: (1 << tile.tileCoord[0]) - 1 - tile.tileCoord[2]\n            }))\n                .then((r) => {\n                if (r && r[0] && r[0].row[0]) {\n                    const format = tile.getFormat();\n                    const features = format.readFeatures(r[0].row[0], {\n                        extent,\n                        featureProjection: projection\n                    });\n                    tile.setFeatures(features);\n                    tile.onLoad(features, projection);\n                    return;\n                }\n                throw new Error(`No data for ${tile.tileCoord}`);\n            })\n                .catch((e) => {\n                debug(e);\n                tile.onError();\n            });\n        });\n    }\n    disposeInternal() {\n        return this.pool.then((p) => p.close());\n    }\n}\n\n/**\n * A tile source in a remote .mbtiles file accessible by HTTP\n *\n * WARNING\n * If your application continuously creates and removes MBTilesSource\n * objects, special care must be taken to properly dispose of them.\n * An MBTilesSource creates a thread pool that the JS engine is unable to\n * automatically garbage-collect unless the dispose() method\n * is invoked.\n * If you need to dispose a map that can potentially contain\n * MBTilesSource objects, check loadExample() in\n * https://github.com/mmomtchev/ol-mbtiles/blob/main/examples/index.ts#L15\n */\nclass MBTilesRasterSource extends ImageTileSource {\n    /**\n     * @param {MBTilesRasterOptions} options options\n     */\n    constructor(options) {\n        var _a;\n        if (options.url === undefined && options.pool === undefined)\n            throw new Error('Must specify url');\n        super(Object.assign(Object.assign({}, options), { url: undefined, \n            // This is required to prevent Openlayers' cache from thinking that all tiles share the same URL\n            tileUrlFunction: (coords) => `${options.url}#${coords[0]}:${coords[1]}:${coords[2]}` }));\n        this.setTileLoadFunction(this.tileLoader.bind(this));\n        this.pool = (_a = options.pool) !== null && _a !== void 0 ? _a : createSQLiteHTTPPool(httpPoolOptions(options))\n            .then((pool) => pool.open(options.url).then(() => pool));\n        this.mime = options.mime;\n    }\n    // TODO fix the tile type in Openlayers\n    tileLoader(tile, _url) {\n        debug('loading tile', [tile.tileCoord[0], tile.tileCoord[1], tile.tileCoord[2]]);\n        const image = tile.getImage();\n        this.pool\n            .then((p) => p.exec('SELECT tile_data FROM tiles WHERE zoom_level = $zoom AND tile_column = $col AND tile_row = $row', {\n            $zoom: tile.tileCoord[0],\n            $col: tile.tileCoord[1],\n            $row: (1 << tile.tileCoord[0]) - 1 - tile.tileCoord[2]\n        }))\n            .then((r) => {\n            if (r && r[0]) {\n                if (r[0].row[0] instanceof Uint8Array) {\n                    const blob = new Blob([r[0].row[0]], { type: this.mime });\n                    const imageUrl = URL.createObjectURL(blob);\n                    image.src = imageUrl;\n                    return;\n                }\n            }\n            throw new Error(`No data for ${tile.tileCoord}`);\n        })\n            .catch((e) => {\n            debug(e);\n            tile.setState(TileState.ERROR);\n        });\n    }\n    disposeInternal() {\n        return this.pool.then((p) => p.close());\n    }\n}\n\nexport { MBTilesFormat, MBTilesRasterSource, MBTilesVectorSource, importMBTiles };\n//# sourceMappingURL=index.js.map\n","/**\n * @module ol/source/XYZ\n */\n\nimport TileImage from './TileImage.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {number} [maxZoom=42] Optional max zoom level. Not used if `tileGrid` is provided.\n * @property {number} [minZoom=0] Optional min zoom level. Not used if `tileGrid` is provided.\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Deprecated.  Use an ImageTile source with a loader\n * instead.  Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\n * Not used if `tileGrid` is provided.\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\n * This allows artifacts of rendering at tile edges to be ignored.\n * Supported images should be wider and taller than the tile size by a value of `2 x gutter`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Deprecated.  Use an ImageTile source and provide a function\n * for the url option instead.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`,\n * and `{z}` placeholders. A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`,\n * may be used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] Deprecated.  Use an ImageTile source and provide an array of URLs for the\n * url option instead.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data with URLs in a set XYZ format that are\n * defined in a URL template. By default, this follows the widely-used\n * Google grid where `x` 0 and `y` 0 are in the top left. Grids like\n * TMS where `x` 0 and `y` 0 are in the bottom left can be used by\n * using the `{-y}` placeholder in the URL template, so long as the\n * source does not have a custom tile grid. In this case\n * a `tileUrlFunction` can be used, such as:\n * ```js\n *  tileUrlFunction: function(coordinate) {\n *    return 'http://mapserver.com/' + coordinate[0] + '/' +\n *      coordinate[1] + '/' + (-coordinate[2] - 1) + '.png';\n *  }\n * ```\n * @api\n */\nclass XYZ extends TileImage {\n  /**\n   * @param {Options} [options] XYZ options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    const projection =\n      options.projection !== undefined ? options.projection : 'EPSG:3857';\n\n    const tileGrid =\n      options.tileGrid !== undefined\n        ? options.tileGrid\n        : createXYZ({\n            extent: extentFromProjection(projection),\n            maxResolution: options.maxResolution,\n            maxZoom: options.maxZoom,\n            minZoom: options.minZoom,\n            tileSize: options.tileSize,\n          });\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n  }\n\n  /**\n   * @return {number} Gutter.\n   * @override\n   */\n  getGutter() {\n    return this.gutter_;\n  }\n}\n\nexport default XYZ;\n","/**\n * @module ol/source/OSM\n */\n\nimport XYZ from './XYZ.js';\n\n/**\n * The attribution containing a link to the OpenStreetMap Copyright and License\n * page.\n * @const\n * @type {string}\n * @api\n */\nexport const ATTRIBUTION =\n  '&#169; ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a> ' +\n  'contributors.';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [maxZoom=19] Max zoom.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.\n * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n * @api\n */\nclass OSM extends XYZ {\n  /**\n   * @param {Options} [options] Open Street Map options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    let attributions;\n    if (options.attributions !== undefined) {\n      attributions = options.attributions;\n    } else {\n      attributions = [ATTRIBUTION];\n    }\n\n    const crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\n\n    const url =\n      options.url !== undefined\n        ? options.url\n        : 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n    super({\n      attributions: attributions,\n      attributionsCollapsible: false,\n      cacheSize: options.cacheSize,\n      crossOrigin: crossOrigin,\n      interpolate: options.interpolate,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileLoadFunction: options.tileLoadFunction,\n      transition: options.transition,\n      url: url,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection,\n    });\n  }\n}\n\nexport default OSM;\n"],"names":["_a","debug","process","env","OL_MBTILES_DEBUG","console","bind","formats","type","mime","httpPoolOptions","options","_b","_c","workers","sqlWorkers","httpOptions","backendType","maxPageSize","maxSqlPageSize","cacheSize","sqlCacheSize","importMBTiles","opt","pool","then","open","url","p","exec","r","length","data","reduce","a","x","row","Error","md","_d","_e","_f","_g","_h","_j","opts","Object","assign","format","toLowerCase","call","warn","projection","attributions","attribution","description","maxZoom","minZoom","projExtent","getExtent","bounds","extent","split","map","undefined","resolutions","z","push","tileGrid","origin","catch","e","close","Promise","reject","MBTilesFormat","constructor","super","this","dataProjection","code","units","featureClass_","featureClass","geometryName_","geometryName","layers_","layers","idProperty_","idProperty","supportedMediaTypes","readFeature","source","properties","id","points","loadGeometry","flatCoordinates","ends","MBTypes","i","j","y","feature","transform","readFeatures","features","tile","VectorTile","adaptOptions","setWorldExtent","setExtent","layerName","keys","includes","l","idx","vectorFeature","getProperties","layer","readProjection","mono","multi","MBTilesVectorSource","tileUrlFunction","coords","setTileLoadFunction","tileLoader","_tile","_url","tileCoord","setLoader","resolution","$zoom","$col","$row","getFormat","featureProjection","setFeatures","onLoad","onError","disposeInternal","MBTilesRasterSource","image","getImage","Uint8Array","blob","Blob","imageUrl","URL","createObjectURL","src","setState","ERROR","XYZ","TileImage","maxResolution","tileSize","crossOrigin","interpolate","reprojectionErrorThreshold","tileLoadFunction","tilePixelRatio","urls","wrapX","transition","attributionsCollapsible","zDirection","gutter_","gutter","getGutter"],"sourceRoot":""}