"use strict";(self.webpackChunkol_mbtiles=self.webpackChunkol_mbtiles||[]).push([[757],{7757:(e,t,o)=>{o.r(t),o.d(t,{default:()=>h});var r=o(8854),n=o(8266),i=o(2479),s=o(9090),a=o(9731),l=o(6263),c=o(8661),d=o(5901),u=o(5917);function h(){return new r.Z({target:"map",layers:[new i.Z({source:new n.Z}),new i.Z({source:new l.Z}),new a.Z({source:new d.B({url:"https://velivole.b-cdn.net/mbtiles/countries.mbtiles"}),style:u.kY})],view:new s.ZP({center:(0,c.mi)([12,50]),zoom:6})})}},5917:(e,t,o)=>{o.d(t,{d_:()=>h,kY:()=>c,xl:()=>m,y8:()=>l});var r=o(7539),n=o(283),i=o(1345),s=o(8958),a=o(1280);function l(e,t){let o,l;switch(e){case 0:o=6,l="2em";break;case 1:o=5,l="1.2em";break;case 2:o=3,l="0.8em";break;default:o=1,l="0.5em"}l+=" helvetica, sans-serif";const c="#00007f";return new r.ZP({image:new n.Z({fill:new i.Z({color:c}),radius:o,stroke:new s.Z({color:c,width:o})}),text:new a.Z({font:l,text:t.get("n"),fill:new i.Z({color:"#ffffff"}),stroke:new s.Z({color:c,width:2})})})}const c=new r.ZP({stroke:new s.Z({color:"blue",width:2})}),d={},u={major_road:"#776",minor_road:"#ccb",highway:"#f39"},h=(new r.ZP({fill:new i.Z({color:"#666"}),stroke:new s.Z({color:"#444",width:1})}),new r.ZP({fill:new i.Z({color:"#9db9e8"})})),m=function(e){const t=e.get("kind"),o=e.get("railway"),n=e.get("sort_key"),i=t+"/"+o+"/"+n;let a=d[i];if(!a){let e,l;o?(e="#7de",l=1):(e=u[t],l="highway"==t?1.5:1),a=new r.ZP({stroke:new s.Z({color:e,width:l}),zIndex:n}),d[i]=a}return a}},5901:(e,t,o)=>{o.d(t,{B:()=>p});var r=o(2891),n=o.n(r),i=o(7205),s=o(3614),a=o.n(s),l=o(8929),c=o(7885),d=o(9646),u=o(9619),h=o(3433),m=o(8661);class w extends d.ZP{constructor(e){var t,o,r;super(),e=e||{},this.dataProjection=new u.Z({code:"",units:"tile-pixels"}),this.featureClass_=e.featureClass?e.featureClass:h.ZP,this.geometryName_=null!==(t=e.geometryName)&&void 0!==t?t:"Geometry",this.layers_=null!==(o=e.layers)&&void 0!==o?o:null,this.idProperty_=e.idProperty,this.extent=null!==(r=e.extent)&&void 0!==r?r:4096,this.supportedMediaTypes=["application/vnd-mbtiles"]}readFeature(e,t){const o=e.properties;let r;this.idProperty_?(r=o[this.idProperty_],delete o[this.idProperty_]):r=e.id;const n=e.loadGeometry(),i=[],s=[],a=w.MBTypes[n.length>1?"multi":"mono"][e.type];if("Unknown"===a)return null;for(let e=0;e<n.length;e++)if(0!=n[e].length){for(let t=0;t<n[e].length;t++)i.push(n[e][t].x,n[e][t].y);s.push(i.length)}const l=new this.featureClass_(a,i,s,o,r);return l.transform(t.dataProjection),l}readFeatures(e,t){const o=this.layers_,r=[],n=new l.VectorTile(new(a())(c.ec(e)));t=this.adaptOptions(t);const i=(0,m.U2)(t.dataProjection);i.setWorldExtent(t.extent),i.setExtent([0,0,this.extent,this.extent]),t.dataProjection=i;for(const e of Object.keys(n.layers)){if(o&&!o.includes(e))continue;const i=n.layers[e];for(let o=0;o<i.length;o++){const n=i.feature(o),s=this.readFeature(n,t);s.getProperties().layer=e,r.push(s)}}return r}readProjection(){return this.dataProjection}}w.MBTypes={mono:["Unknown","Point","LineString","Polygon"],multi:["Unknown","MultiPoint","MultiLineString","Polygon"]};const f=null!==n()&&void 0!==n()?n():r;class p extends i.Z{constructor(e){var t,o;super(Object.assign(Object.assign({},e),{url:void 0,format:new w({layers:e.layers}),tileUrlFunction:e=>`${e[0]}:${e[1]}:${e[2]}`})),this.setTileLoadFunction(this.tileLoader.bind(this));const r={from:"inline",config:{serverMode:"full",requestChunkSize:1024,url:e.url}};this.worker=[];for(let n=0;n<(null!==(t=e.sqlWorkers)&&void 0!==t?t:4);n++)this.worker[n]=f.createDbWorker([r],p.workerUrl.toString(),p.wasmUrl.toString(),null!==(o=e.maxSingleTransfer)&&void 0!==o?o:10485760);this.currentWorker=0,this.metadata=this.worker[this.currentWorker++%this.worker.length].then((e=>e.db.query('SELECT name,value FROM metadata WHERE name="maxzoom" or name="minzoom"'))).then((t=>{if(t&&2==t.length){const o=t.reduce(((e,t)=>(e[t.name]=t.value,e)),{});return console.debug("Loaded metadata",o),e.maxZoom==o.maxzoom&&e.minZoom==o.minzoom||console.warn(`minZoom/maxZoom ${o.minzoom}/${o.maxzoom} of retrieved MBTiles do not match Openlayers configuration ${e.minZoom}/${e.maxZoom}`),o}throw new Error("Could not load metadata")})).catch((e=>(console.warn(e),null)))}tileLoader(e,t){console.debug("loading tile",[e.tileCoord[0],e.tileCoord[1],e.tileCoord[2]]),e.setLoader(((t,o,r)=>{this.worker[this.currentWorker++%this.worker.length].then((t=>t.db.query("SELECT tile_data FROM tiles WHERE zoom_level = ? AND tile_column = ? AND tile_row = ?",[e.tileCoord[0],e.tileCoord[1],(1<<e.tileCoord[0])-1-e.tileCoord[2]]))).then((o=>{if(o&&o[0]&&o[0].tile_data){const n=e.getFormat().readFeatures(o[0].tile_data,{extent:t,featureProjection:r});return e.setFeatures(n),void e.onLoad(n,r)}throw new Error(`No data for ${e.tileCoord}`)})).catch((t=>{console.warn(t),e.onError()}))}))}destroy(){for(const e of this.worker)e.then((e=>{e.release()}))}}p.workerUrl=new URL(o(421),o.b),p.wasmUrl=new URL(o(3611),o.b)},8266:(e,t,o)=>{o.d(t,{Z:()=>i});var r=o(6841);class n extends r.Z{constructor(e){let t;t=void 0!==(e=e||{}).attributions?e.attributions:['&#169; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors.'];const o=void 0!==e.crossOrigin?e.crossOrigin:"anonymous",r=void 0!==e.url?e.url:"https://tile.openstreetmap.org/{z}/{x}/{y}.png";super({attributions:t,attributionsCollapsible:!1,cacheSize:e.cacheSize,crossOrigin:o,interpolate:e.interpolate,maxZoom:void 0!==e.maxZoom?e.maxZoom:19,opaque:void 0===e.opaque||e.opaque,reprojectionErrorThreshold:e.reprojectionErrorThreshold,tileLoadFunction:e.tileLoadFunction,transition:e.transition,url:r,wrapX:e.wrapX,zDirection:e.zDirection})}}const i=n}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,