/*! For license information please see 314.bundle.js.LICENSE.txt */
(self.webpackChunkol_mbtiles=self.webpackChunkol_mbtiles||[]).push([[314],{5550:t=>{"use strict";function e(t,e){this.x=t,this.y=e}t.exports=e,e.prototype={clone:function(){return new e(this.x,this.y)},add:function(t){return this.clone()._add(t)},sub:function(t){return this.clone()._sub(t)},multByPoint:function(t){return this.clone()._multByPoint(t)},divByPoint:function(t){return this.clone()._divByPoint(t)},mult:function(t){return this.clone()._mult(t)},div:function(t){return this.clone()._div(t)},rotate:function(t){return this.clone()._rotate(t)},rotateAround:function(t,e){return this.clone()._rotateAround(t,e)},matMult:function(t){return this.clone()._matMult(t)},unit:function(){return this.clone()._unit()},perp:function(){return this.clone()._perp()},round:function(){return this.clone()._round()},mag:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},equals:function(t){return this.x===t.x&&this.y===t.y},dist:function(t){return Math.sqrt(this.distSqr(t))},distSqr:function(t){var e=t.x-this.x,i=t.y-this.y;return e*e+i*i},angle:function(){return Math.atan2(this.y,this.x)},angleTo:function(t){return Math.atan2(this.y-t.y,this.x-t.x)},angleWith:function(t){return this.angleWithSep(t.x,t.y)},angleWithSep:function(t,e){return Math.atan2(this.x*e-this.y*t,this.x*t+this.y*e)},_matMult:function(t){var e=t[0]*this.x+t[1]*this.y,i=t[2]*this.x+t[3]*this.y;return this.x=e,this.y=i,this},_add:function(t){return this.x+=t.x,this.y+=t.y,this},_sub:function(t){return this.x-=t.x,this.y-=t.y,this},_mult:function(t){return this.x*=t,this.y*=t,this},_div:function(t){return this.x/=t,this.y/=t,this},_multByPoint:function(t){return this.x*=t.x,this.y*=t.y,this},_divByPoint:function(t){return this.x/=t.x,this.y/=t.y,this},_unit:function(){return this._div(this.mag()),this},_perp:function(){var t=this.y;return this.y=this.x,this.x=-t,this},_rotate:function(t){var e=Math.cos(t),i=Math.sin(t),n=e*this.x-i*this.y,s=i*this.x+e*this.y;return this.x=n,this.y=s,this},_rotateAround:function(t,e){var i=Math.cos(t),n=Math.sin(t),s=e.x+i*(this.x-e.x)-n*(this.y-e.y),r=e.y+n*(this.x-e.x)+i*(this.y-e.y);return this.x=s,this.y=r,this},_round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}},e.convert=function(t){return t instanceof e?t:Array.isArray(t)?new e(t[0],t[1]):t}},8929:(t,e,i)=>{t.exports.VectorTile=i(2779),i(6024),i(9701)},2779:(t,e,i)=>{"use strict";var n=i(9701);function s(t,e,i){if(3===t){var s=new n(i,i.readVarint()+i.pos);s.length&&(e[s.name]=s)}}t.exports=function(t,e){this.layers=t.readFields(s,{},e)}},6024:(t,e,i)=>{"use strict";var n=i(5550);function s(t,e,i,n,s){this.properties={},this.extent=i,this.type=0,this._pbf=t,this._geometry=-1,this._keys=n,this._values=s,t.readFields(r,this,e)}function r(t,e,i){1==t?e.id=i.readVarint():2==t?function(t,e){for(var i=t.readVarint()+t.pos;t.pos<i;){var n=e._keys[t.readVarint()],s=e._values[t.readVarint()];e.properties[n]=s}}(i,e):3==t?e.type=i.readVarint():4==t&&(e._geometry=i.pos)}function o(t){for(var e,i,n=0,s=0,r=t.length,o=r-1;s<r;o=s++)e=t[s],n+=((i=t[o]).x-e.x)*(e.y+i.y);return n}t.exports=s,s.types=["Unknown","Point","LineString","Polygon"],s.prototype.loadGeometry=function(){var t=this._pbf;t.pos=this._geometry;for(var e,i=t.readVarint()+t.pos,s=1,r=0,o=0,a=0,l=[];t.pos<i;){if(r<=0){var h=t.readVarint();s=7&h,r=h>>3}if(r--,1===s||2===s)o+=t.readSVarint(),a+=t.readSVarint(),1===s&&(e&&l.push(e),e=[]),e.push(new n(o,a));else{if(7!==s)throw new Error("unknown command "+s);e&&e.push(e[0].clone())}}return e&&l.push(e),l},s.prototype.bbox=function(){var t=this._pbf;t.pos=this._geometry;for(var e=t.readVarint()+t.pos,i=1,n=0,s=0,r=0,o=1/0,a=-1/0,l=1/0,h=-1/0;t.pos<e;){if(n<=0){var c=t.readVarint();i=7&c,n=c>>3}if(n--,1===i||2===i)(s+=t.readSVarint())<o&&(o=s),s>a&&(a=s),(r+=t.readSVarint())<l&&(l=r),r>h&&(h=r);else if(7!==i)throw new Error("unknown command "+i)}return[o,l,a,h]},s.prototype.toGeoJSON=function(t,e,i){var n,r,a=this.extent*Math.pow(2,i),l=this.extent*t,h=this.extent*e,c=this.loadGeometry(),u=s.types[this.type];function d(t){for(var e=0;e<t.length;e++){var i=t[e],n=180-360*(i.y+h)/a;t[e]=[360*(i.x+l)/a-180,360/Math.PI*Math.atan(Math.exp(n*Math.PI/180))-90]}}switch(this.type){case 1:var g=[];for(n=0;n<c.length;n++)g[n]=c[n][0];d(c=g);break;case 2:for(n=0;n<c.length;n++)d(c[n]);break;case 3:for(c=function(t){var e=t.length;if(e<=1)return[t];for(var i,n,s=[],r=0;r<e;r++){var a=o(t[r]);0!==a&&(void 0===n&&(n=a<0),n===a<0?(i&&s.push(i),i=[t[r]]):i.push(t[r]))}return i&&s.push(i),s}(c),n=0;n<c.length;n++)for(r=0;r<c[n].length;r++)d(c[n][r])}1===c.length?c=c[0]:u="Multi"+u;var _={type:"Feature",geometry:{type:u,coordinates:c},properties:this.properties};return"id"in this&&(_.id=this.id),_}},9701:(t,e,i)=>{"use strict";var n=i(6024);function s(t,e){this.version=1,this.name=null,this.extent=4096,this.length=0,this._pbf=t,this._keys=[],this._values=[],this._features=[],t.readFields(r,this,e),this.length=this._features.length}function r(t,e,i){15===t?e.version=i.readVarint():1===t?e.name=i.readString():5===t?e.extent=i.readVarint():2===t?e._features.push(i.pos):3===t?e._keys.push(i.readString()):4===t&&e._values.push(function(t){for(var e=null,i=t.readVarint()+t.pos;t.pos<i;){var n=t.readVarint()>>3;e=1===n?t.readString():2===n?t.readFloat():3===n?t.readDouble():4===n?t.readVarint64():5===n?t.readVarint():6===n?t.readSVarint():7===n?t.readBoolean():null}return e}(i))}t.exports=s,s.prototype.feature=function(t){if(t<0||t>=this._features.length)throw new Error("feature index out of bounds");this._pbf.pos=this._features[t];var e=this._pbf.readVarint()+this._pbf.pos;return new n(this._pbf,e,this.extent,this._keys,this._values)}},645:(t,e)=>{e.read=function(t,e,i,n,s){var r,o,a=8*s-n-1,l=(1<<a)-1,h=l>>1,c=-7,u=i?s-1:0,d=i?-1:1,g=t[e+u];for(u+=d,r=g&(1<<-c)-1,g>>=-c,c+=a;c>0;r=256*r+t[e+u],u+=d,c-=8);for(o=r&(1<<-c)-1,r>>=-c,c+=n;c>0;o=256*o+t[e+u],u+=d,c-=8);if(0===r)r=1-h;else{if(r===l)return o?NaN:1/0*(g?-1:1);o+=Math.pow(2,n),r-=h}return(g?-1:1)*o*Math.pow(2,r-n)},e.write=function(t,e,i,n,s,r){var o,a,l,h=8*r-s-1,c=(1<<h)-1,u=c>>1,d=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,g=n?0:r-1,_=n?1:-1,f=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,o=c):(o=Math.floor(Math.log(e)/Math.LN2),e*(l=Math.pow(2,-o))<1&&(o--,l*=2),(e+=o+u>=1?d/l:d*Math.pow(2,1-u))*l>=2&&(o++,l/=2),o+u>=c?(a=0,o=c):o+u>=1?(a=(e*l-1)*Math.pow(2,s),o+=u):(a=e*Math.pow(2,u-1)*Math.pow(2,s),o=0));s>=8;t[i+g]=255&a,g+=_,a/=256,s-=8);for(o=o<<s|a,h+=s;h>0;t[i+g]=255&o,g+=_,o/=256,h-=8);t[i+g-_]|=128*f}},3614:(t,e,i)=>{"use strict";t.exports=s;var n=i(645);function s(t){this.buf=ArrayBuffer.isView&&ArrayBuffer.isView(t)?t:new Uint8Array(t||0),this.pos=0,this.type=0,this.length=this.buf.length}s.Varint=0,s.Fixed64=1,s.Bytes=2,s.Fixed32=5;var r=4294967296,o=1/r,a="undefined"==typeof TextDecoder?null:new TextDecoder("utf8");function l(t){return t.type===s.Bytes?t.readVarint()+t.pos:t.pos+1}function h(t,e,i){return i?4294967296*e+(t>>>0):4294967296*(e>>>0)+(t>>>0)}function c(t,e,i){var n=e<=16383?1:e<=2097151?2:e<=268435455?3:Math.floor(Math.log(e)/(7*Math.LN2));i.realloc(n);for(var s=i.pos-1;s>=t;s--)i.buf[s+n]=i.buf[s]}function u(t,e){for(var i=0;i<t.length;i++)e.writeVarint(t[i])}function d(t,e){for(var i=0;i<t.length;i++)e.writeSVarint(t[i])}function g(t,e){for(var i=0;i<t.length;i++)e.writeFloat(t[i])}function _(t,e){for(var i=0;i<t.length;i++)e.writeDouble(t[i])}function f(t,e){for(var i=0;i<t.length;i++)e.writeBoolean(t[i])}function p(t,e){for(var i=0;i<t.length;i++)e.writeFixed32(t[i])}function m(t,e){for(var i=0;i<t.length;i++)e.writeSFixed32(t[i])}function v(t,e){for(var i=0;i<t.length;i++)e.writeFixed64(t[i])}function y(t,e){for(var i=0;i<t.length;i++)e.writeSFixed64(t[i])}function x(t,e){return(t[e]|t[e+1]<<8|t[e+2]<<16)+16777216*t[e+3]}function w(t,e,i){t[i]=e,t[i+1]=e>>>8,t[i+2]=e>>>16,t[i+3]=e>>>24}function S(t,e){return(t[e]|t[e+1]<<8|t[e+2]<<16)+(t[e+3]<<24)}s.prototype={destroy:function(){this.buf=null},readFields:function(t,e,i){for(i=i||this.length;this.pos<i;){var n=this.readVarint(),s=n>>3,r=this.pos;this.type=7&n,t(s,e,this),this.pos===r&&this.skip(n)}return e},readMessage:function(t,e){return this.readFields(t,e,this.readVarint()+this.pos)},readFixed32:function(){var t=x(this.buf,this.pos);return this.pos+=4,t},readSFixed32:function(){var t=S(this.buf,this.pos);return this.pos+=4,t},readFixed64:function(){var t=x(this.buf,this.pos)+x(this.buf,this.pos+4)*r;return this.pos+=8,t},readSFixed64:function(){var t=x(this.buf,this.pos)+S(this.buf,this.pos+4)*r;return this.pos+=8,t},readFloat:function(){var t=n.read(this.buf,this.pos,!0,23,4);return this.pos+=4,t},readDouble:function(){var t=n.read(this.buf,this.pos,!0,52,8);return this.pos+=8,t},readVarint:function(t){var e,i,n=this.buf;return e=127&(i=n[this.pos++]),i<128?e:(e|=(127&(i=n[this.pos++]))<<7,i<128?e:(e|=(127&(i=n[this.pos++]))<<14,i<128?e:(e|=(127&(i=n[this.pos++]))<<21,i<128?e:function(t,e,i){var n,s,r=i.buf;if(n=(112&(s=r[i.pos++]))>>4,s<128)return h(t,n,e);if(n|=(127&(s=r[i.pos++]))<<3,s<128)return h(t,n,e);if(n|=(127&(s=r[i.pos++]))<<10,s<128)return h(t,n,e);if(n|=(127&(s=r[i.pos++]))<<17,s<128)return h(t,n,e);if(n|=(127&(s=r[i.pos++]))<<24,s<128)return h(t,n,e);if(n|=(1&(s=r[i.pos++]))<<31,s<128)return h(t,n,e);throw new Error("Expected varint not more than 10 bytes")}(e|=(15&(i=n[this.pos]))<<28,t,this))))},readVarint64:function(){return this.readVarint(!0)},readSVarint:function(){var t=this.readVarint();return t%2==1?(t+1)/-2:t/2},readBoolean:function(){return Boolean(this.readVarint())},readString:function(){var t=this.readVarint()+this.pos,e=this.pos;return this.pos=t,t-e>=12&&a?function(t,e,i){return a.decode(t.subarray(e,i))}(this.buf,e,t):function(t,e,i){for(var n="",s=e;s<i;){var r,o,a,l=t[s],h=null,c=l>239?4:l>223?3:l>191?2:1;if(s+c>i)break;1===c?l<128&&(h=l):2===c?128==(192&(r=t[s+1]))&&(h=(31&l)<<6|63&r)<=127&&(h=null):3===c?(r=t[s+1],o=t[s+2],128==(192&r)&&128==(192&o)&&((h=(15&l)<<12|(63&r)<<6|63&o)<=2047||h>=55296&&h<=57343)&&(h=null)):4===c&&(r=t[s+1],o=t[s+2],a=t[s+3],128==(192&r)&&128==(192&o)&&128==(192&a)&&((h=(15&l)<<18|(63&r)<<12|(63&o)<<6|63&a)<=65535||h>=1114112)&&(h=null)),null===h?(h=65533,c=1):h>65535&&(h-=65536,n+=String.fromCharCode(h>>>10&1023|55296),h=56320|1023&h),n+=String.fromCharCode(h),s+=c}return n}(this.buf,e,t)},readBytes:function(){var t=this.readVarint()+this.pos,e=this.buf.subarray(this.pos,t);return this.pos=t,e},readPackedVarint:function(t,e){if(this.type!==s.Bytes)return t.push(this.readVarint(e));var i=l(this);for(t=t||[];this.pos<i;)t.push(this.readVarint(e));return t},readPackedSVarint:function(t){if(this.type!==s.Bytes)return t.push(this.readSVarint());var e=l(this);for(t=t||[];this.pos<e;)t.push(this.readSVarint());return t},readPackedBoolean:function(t){if(this.type!==s.Bytes)return t.push(this.readBoolean());var e=l(this);for(t=t||[];this.pos<e;)t.push(this.readBoolean());return t},readPackedFloat:function(t){if(this.type!==s.Bytes)return t.push(this.readFloat());var e=l(this);for(t=t||[];this.pos<e;)t.push(this.readFloat());return t},readPackedDouble:function(t){if(this.type!==s.Bytes)return t.push(this.readDouble());var e=l(this);for(t=t||[];this.pos<e;)t.push(this.readDouble());return t},readPackedFixed32:function(t){if(this.type!==s.Bytes)return t.push(this.readFixed32());var e=l(this);for(t=t||[];this.pos<e;)t.push(this.readFixed32());return t},readPackedSFixed32:function(t){if(this.type!==s.Bytes)return t.push(this.readSFixed32());var e=l(this);for(t=t||[];this.pos<e;)t.push(this.readSFixed32());return t},readPackedFixed64:function(t){if(this.type!==s.Bytes)return t.push(this.readFixed64());var e=l(this);for(t=t||[];this.pos<e;)t.push(this.readFixed64());return t},readPackedSFixed64:function(t){if(this.type!==s.Bytes)return t.push(this.readSFixed64());var e=l(this);for(t=t||[];this.pos<e;)t.push(this.readSFixed64());return t},skip:function(t){var e=7&t;if(e===s.Varint)for(;this.buf[this.pos++]>127;);else if(e===s.Bytes)this.pos=this.readVarint()+this.pos;else if(e===s.Fixed32)this.pos+=4;else{if(e!==s.Fixed64)throw new Error("Unimplemented type: "+e);this.pos+=8}},writeTag:function(t,e){this.writeVarint(t<<3|e)},realloc:function(t){for(var e=this.length||16;e<this.pos+t;)e*=2;if(e!==this.length){var i=new Uint8Array(e);i.set(this.buf),this.buf=i,this.length=e}},finish:function(){return this.length=this.pos,this.pos=0,this.buf.subarray(0,this.length)},writeFixed32:function(t){this.realloc(4),w(this.buf,t,this.pos),this.pos+=4},writeSFixed32:function(t){this.realloc(4),w(this.buf,t,this.pos),this.pos+=4},writeFixed64:function(t){this.realloc(8),w(this.buf,-1&t,this.pos),w(this.buf,Math.floor(t*o),this.pos+4),this.pos+=8},writeSFixed64:function(t){this.realloc(8),w(this.buf,-1&t,this.pos),w(this.buf,Math.floor(t*o),this.pos+4),this.pos+=8},writeVarint:function(t){(t=+t||0)>268435455||t<0?function(t,e){var i,n;if(t>=0?(i=t%4294967296|0,n=t/4294967296|0):(n=~(-t/4294967296),4294967295^(i=~(-t%4294967296))?i=i+1|0:(i=0,n=n+1|0)),t>=0x10000000000000000||t<-0x10000000000000000)throw new Error("Given varint doesn't fit into 10 bytes");e.realloc(10),function(t,e,i){i.buf[i.pos++]=127&t|128,t>>>=7,i.buf[i.pos++]=127&t|128,t>>>=7,i.buf[i.pos++]=127&t|128,t>>>=7,i.buf[i.pos++]=127&t|128,t>>>=7,i.buf[i.pos]=127&t}(i,0,e),function(t,e){var i=(7&t)<<4;e.buf[e.pos++]|=i|((t>>>=3)?128:0),t&&(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),t&&(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),t&&(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),t&&(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),t&&(e.buf[e.pos++]=127&t)))))}(n,e)}(t,this):(this.realloc(4),this.buf[this.pos++]=127&t|(t>127?128:0),t<=127||(this.buf[this.pos++]=127&(t>>>=7)|(t>127?128:0),t<=127||(this.buf[this.pos++]=127&(t>>>=7)|(t>127?128:0),t<=127||(this.buf[this.pos++]=t>>>7&127))))},writeSVarint:function(t){this.writeVarint(t<0?2*-t-1:2*t)},writeBoolean:function(t){this.writeVarint(Boolean(t))},writeString:function(t){t=String(t),this.realloc(4*t.length),this.pos++;var e=this.pos;this.pos=function(t,e,i){for(var n,s,r=0;r<e.length;r++){if((n=e.charCodeAt(r))>55295&&n<57344){if(!s){n>56319||r+1===e.length?(t[i++]=239,t[i++]=191,t[i++]=189):s=n;continue}if(n<56320){t[i++]=239,t[i++]=191,t[i++]=189,s=n;continue}n=s-55296<<10|n-56320|65536,s=null}else s&&(t[i++]=239,t[i++]=191,t[i++]=189,s=null);n<128?t[i++]=n:(n<2048?t[i++]=n>>6|192:(n<65536?t[i++]=n>>12|224:(t[i++]=n>>18|240,t[i++]=n>>12&63|128),t[i++]=n>>6&63|128),t[i++]=63&n|128)}return i}(this.buf,t,this.pos);var i=this.pos-e;i>=128&&c(e,i,this),this.pos=e-1,this.writeVarint(i),this.pos+=i},writeFloat:function(t){this.realloc(4),n.write(this.buf,t,this.pos,!0,23,4),this.pos+=4},writeDouble:function(t){this.realloc(8),n.write(this.buf,t,this.pos,!0,52,8),this.pos+=8},writeBytes:function(t){var e=t.length;this.writeVarint(e),this.realloc(e);for(var i=0;i<e;i++)this.buf[this.pos++]=t[i]},writeRawMessage:function(t,e){this.pos++;var i=this.pos;t(e,this);var n=this.pos-i;n>=128&&c(i,n,this),this.pos=i-1,this.writeVarint(n),this.pos+=n},writeMessage:function(t,e,i){this.writeTag(t,s.Bytes),this.writeRawMessage(e,i)},writePackedVarint:function(t,e){e.length&&this.writeMessage(t,u,e)},writePackedSVarint:function(t,e){e.length&&this.writeMessage(t,d,e)},writePackedBoolean:function(t,e){e.length&&this.writeMessage(t,f,e)},writePackedFloat:function(t,e){e.length&&this.writeMessage(t,g,e)},writePackedDouble:function(t,e){e.length&&this.writeMessage(t,_,e)},writePackedFixed32:function(t,e){e.length&&this.writeMessage(t,p,e)},writePackedSFixed32:function(t,e){e.length&&this.writeMessage(t,m,e)},writePackedFixed64:function(t,e){e.length&&this.writeMessage(t,v,e)},writePackedSFixed64:function(t,e){e.length&&this.writeMessage(t,y,e)},writeBytesField:function(t,e){this.writeTag(t,s.Bytes),this.writeBytes(e)},writeFixed32Field:function(t,e){this.writeTag(t,s.Fixed32),this.writeFixed32(e)},writeSFixed32Field:function(t,e){this.writeTag(t,s.Fixed32),this.writeSFixed32(e)},writeFixed64Field:function(t,e){this.writeTag(t,s.Fixed64),this.writeFixed64(e)},writeSFixed64Field:function(t,e){this.writeTag(t,s.Fixed64),this.writeSFixed64(e)},writeVarintField:function(t,e){this.writeTag(t,s.Varint),this.writeVarint(e)},writeSVarintField:function(t,e){this.writeTag(t,s.Varint),this.writeSVarint(e)},writeStringField:function(t,e){this.writeTag(t,s.Bytes),this.writeString(e)},writeFloatField:function(t,e){this.writeTag(t,s.Fixed32),this.writeFloat(e)},writeDoubleField:function(t,e){this.writeTag(t,s.Fixed64),this.writeDouble(e)},writeBooleanField:function(t,e){this.writeVarintField(t,Boolean(e))}}},2582:function(t){t.exports=function(){"use strict";function t(t,n,s,r,o){!function t(i,n,s,r,o){for(;r>s;){if(r-s>600){var a=r-s+1,l=n-s+1,h=Math.log(a),c=.5*Math.exp(2*h/3),u=.5*Math.sqrt(h*c*(a-c)/a)*(l-a/2<0?-1:1);t(i,n,Math.max(s,Math.floor(n-l*c/a+u)),Math.min(r,Math.floor(n+(a-l)*c/a+u)),o)}var d=i[n],g=s,_=r;for(e(i,s,n),o(i[r],d)>0&&e(i,s,r);g<_;){for(e(i,g,_),g++,_--;o(i[g],d)<0;)g++;for(;o(i[_],d)>0;)_--}0===o(i[s],d)?e(i,s,_):e(i,++_,r),_<=n&&(s=_+1),n<=_&&(r=_-1)}}(t,n,s||0,r||t.length-1,o||i)}function e(t,e,i){var n=t[e];t[e]=t[i],t[i]=n}function i(t,e){return t<e?-1:t>e?1:0}var n=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function s(t,e,i){if(!i)return e.indexOf(t);for(var n=0;n<e.length;n++)if(i(t,e[n]))return n;return-1}function r(t,e){o(t,0,t.children.length,e,t)}function o(t,e,i,n,s){s||(s=_(null)),s.minX=1/0,s.minY=1/0,s.maxX=-1/0,s.maxY=-1/0;for(var r=e;r<i;r++){var o=t.children[r];a(s,t.leaf?n(o):o)}return s}function a(t,e){return t.minX=Math.min(t.minX,e.minX),t.minY=Math.min(t.minY,e.minY),t.maxX=Math.max(t.maxX,e.maxX),t.maxY=Math.max(t.maxY,e.maxY),t}function l(t,e){return t.minX-e.minX}function h(t,e){return t.minY-e.minY}function c(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function d(t,e){return t.minX<=e.minX&&t.minY<=e.minY&&e.maxX<=t.maxX&&e.maxY<=t.maxY}function g(t,e){return e.minX<=t.maxX&&e.minY<=t.maxY&&e.maxX>=t.minX&&e.maxY>=t.minY}function _(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function f(e,i,n,s,r){for(var o=[i,n];o.length;)if(!((n=o.pop())-(i=o.pop())<=s)){var a=i+Math.ceil((n-i)/s/2)*s;t(e,a,i,n,r),o.push(i,a,a,n)}}return n.prototype.all=function(){return this._all(this.data,[])},n.prototype.search=function(t){var e=this.data,i=[];if(!g(t,e))return i;for(var n=this.toBBox,s=[];e;){for(var r=0;r<e.children.length;r++){var o=e.children[r],a=e.leaf?n(o):o;g(t,a)&&(e.leaf?i.push(o):d(t,a)?this._all(o,i):s.push(o))}e=s.pop()}return i},n.prototype.collides=function(t){var e=this.data;if(!g(t,e))return!1;for(var i=[];e;){for(var n=0;n<e.children.length;n++){var s=e.children[n],r=e.leaf?this.toBBox(s):s;if(g(t,r)){if(e.leaf||d(t,r))return!0;i.push(s)}}e=i.pop()}return!1},n.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var e=0;e<t.length;e++)this.insert(t[e]);return this}var i=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===i.height)this._splitRoot(this.data,i);else{if(this.data.height<i.height){var n=this.data;this.data=i,i=n}this._insert(i,this.data.height-i.height-1,!0)}else this.data=i;return this},n.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},n.prototype.clear=function(){return this.data=_([]),this},n.prototype.remove=function(t,e){if(!t)return this;for(var i,n,r,o=this.data,a=this.toBBox(t),l=[],h=[];o||l.length;){if(o||(o=l.pop(),n=l[l.length-1],i=h.pop(),r=!0),o.leaf){var c=s(t,o.children,e);if(-1!==c)return o.children.splice(c,1),l.push(o),this._condense(l),this}r||o.leaf||!d(o,a)?n?(i++,o=n.children[i],r=!1):o=null:(l.push(o),h.push(i),i=0,n=o,o=o.children[0])}return this},n.prototype.toBBox=function(t){return t},n.prototype.compareMinX=function(t,e){return t.minX-e.minX},n.prototype.compareMinY=function(t,e){return t.minY-e.minY},n.prototype.toJSON=function(){return this.data},n.prototype.fromJSON=function(t){return this.data=t,this},n.prototype._all=function(t,e){for(var i=[];t;)t.leaf?e.push.apply(e,t.children):i.push.apply(i,t.children),t=i.pop();return e},n.prototype._build=function(t,e,i,n){var s,o=i-e+1,a=this._maxEntries;if(o<=a)return r(s=_(t.slice(e,i+1)),this.toBBox),s;n||(n=Math.ceil(Math.log(o)/Math.log(a)),a=Math.ceil(o/Math.pow(a,n-1))),(s=_([])).leaf=!1,s.height=n;var l=Math.ceil(o/a),h=l*Math.ceil(Math.sqrt(a));f(t,e,i,h,this.compareMinX);for(var c=e;c<=i;c+=h){var u=Math.min(c+h-1,i);f(t,c,u,l,this.compareMinY);for(var d=c;d<=u;d+=l){var g=Math.min(d+l-1,u);s.children.push(this._build(t,d,g,n-1))}}return r(s,this.toBBox),s},n.prototype._chooseSubtree=function(t,e,i,n){for(;n.push(e),!e.leaf&&n.length-1!==i;){for(var s=1/0,r=1/0,o=void 0,a=0;a<e.children.length;a++){var l=e.children[a],h=c(l),u=(d=t,g=l,(Math.max(g.maxX,d.maxX)-Math.min(g.minX,d.minX))*(Math.max(g.maxY,d.maxY)-Math.min(g.minY,d.minY))-h);u<r?(r=u,s=h<s?h:s,o=l):u===r&&h<s&&(s=h,o=l)}e=o||e.children[0]}var d,g;return e},n.prototype._insert=function(t,e,i){var n=i?t:this.toBBox(t),s=[],r=this._chooseSubtree(n,this.data,e,s);for(r.children.push(t),a(r,n);e>=0&&s[e].children.length>this._maxEntries;)this._split(s,e),e--;this._adjustParentBBoxes(n,s,e)},n.prototype._split=function(t,e){var i=t[e],n=i.children.length,s=this._minEntries;this._chooseSplitAxis(i,s,n);var o=this._chooseSplitIndex(i,s,n),a=_(i.children.splice(o,i.children.length-o));a.height=i.height,a.leaf=i.leaf,r(i,this.toBBox),r(a,this.toBBox),e?t[e-1].children.push(a):this._splitRoot(i,a)},n.prototype._splitRoot=function(t,e){this.data=_([t,e]),this.data.height=t.height+1,this.data.leaf=!1,r(this.data,this.toBBox)},n.prototype._chooseSplitIndex=function(t,e,i){for(var n,s,r,a,l,h,u,d=1/0,g=1/0,_=e;_<=i-e;_++){var f=o(t,0,_,this.toBBox),p=o(t,_,i,this.toBBox),m=(s=f,r=p,void 0,void 0,void 0,void 0,a=Math.max(s.minX,r.minX),l=Math.max(s.minY,r.minY),h=Math.min(s.maxX,r.maxX),u=Math.min(s.maxY,r.maxY),Math.max(0,h-a)*Math.max(0,u-l)),v=c(f)+c(p);m<d?(d=m,n=_,g=v<g?v:g):m===d&&v<g&&(g=v,n=_)}return n||i-e},n.prototype._chooseSplitAxis=function(t,e,i){var n=t.leaf?this.compareMinX:l,s=t.leaf?this.compareMinY:h;this._allDistMargin(t,e,i,n)<this._allDistMargin(t,e,i,s)&&t.children.sort(n)},n.prototype._allDistMargin=function(t,e,i,n){t.children.sort(n);for(var s=this.toBBox,r=o(t,0,e,s),l=o(t,i-e,i,s),h=u(r)+u(l),c=e;c<i-e;c++){var d=t.children[c];a(r,t.leaf?s(d):d),h+=u(r)}for(var g=i-e-1;g>=e;g--){var _=t.children[g];a(l,t.leaf?s(_):_),h+=u(l)}return h},n.prototype._adjustParentBBoxes=function(t,e,i){for(var n=i;n>=0;n--)a(e[n],t)},n.prototype._condense=function(t){for(var e=t.length-1,i=void 0;e>=0;e--)0===t[e].children.length?e>0?(i=t[e-1].children).splice(i.indexOf(t[e]),1):this.clear():r(t[e],this.toBBox)},n}()},2891:function(t){t.exports=(()=>{"use strict";var t={870:(t,e,i)=>{i.r(e),i.d(e,{createEndpoint:()=>s,expose:()=>h,proxy:()=>m,proxyMarker:()=>n,releaseProxy:()=>r,transfer:()=>p,transferHandlers:()=>l,windowEndpoint:()=>v,wrap:()=>u});const n=Symbol("Comlink.proxy"),s=Symbol("Comlink.endpoint"),r=Symbol("Comlink.releaseProxy"),o=Symbol("Comlink.thrown"),a=t=>"object"==typeof t&&null!==t||"function"==typeof t,l=new Map([["proxy",{canHandle:t=>a(t)&&t[n],serialize(t){const{port1:e,port2:i}=new MessageChannel;return h(t,e),[i,[i]]},deserialize:t=>(t.start(),u(t))}],["throw",{canHandle:t=>a(t)&&o in t,serialize({value:t}){let e;return e=t instanceof Error?{isError:!0,value:{message:t.message,name:t.name,stack:t.stack}}:{isError:!1,value:t},[e,[]]},deserialize(t){if(t.isError)throw Object.assign(new Error(t.value.message),t.value);throw t.value}}]]);function h(t,e=self){e.addEventListener("message",(function i(n){if(!n||!n.data)return;const{id:s,type:r,path:a}=Object.assign({path:[]},n.data),l=(n.data.argumentList||[]).map(x);let u;try{const e=a.slice(0,-1).reduce(((t,e)=>t[e]),t),i=a.reduce(((t,e)=>t[e]),t);switch(r){case 0:u=i;break;case 1:e[a.slice(-1)[0]]=x(n.data.value),u=!0;break;case 2:u=i.apply(e,l);break;case 3:u=m(new i(...l));break;case 4:{const{port1:e,port2:i}=new MessageChannel;h(t,i),u=p(e,[e])}break;case 5:u=void 0}}catch(t){u={value:t,[o]:0}}Promise.resolve(u).catch((t=>({value:t,[o]:0}))).then((t=>{const[n,o]=y(t);e.postMessage(Object.assign(Object.assign({},n),{id:s}),o),5===r&&(e.removeEventListener("message",i),c(e))}))})),e.start&&e.start()}function c(t){(function(t){return"MessagePort"===t.constructor.name})(t)&&t.close()}function u(t,e){return g(t,[],e)}function d(t){if(t)throw new Error("Proxy has been released and is not useable")}function g(t,e=[],i=function(){}){let n=!1;const o=new Proxy(i,{get(i,s){if(d(n),s===r)return()=>w(t,{type:5,path:e.map((t=>t.toString()))}).then((()=>{c(t),n=!0}));if("then"===s){if(0===e.length)return{then:()=>o};const i=w(t,{type:0,path:e.map((t=>t.toString()))}).then(x);return i.then.bind(i)}return g(t,[...e,s])},set(i,s,r){d(n);const[o,a]=y(r);return w(t,{type:1,path:[...e,s].map((t=>t.toString())),value:o},a).then(x)},apply(i,r,o){d(n);const a=e[e.length-1];if(a===s)return w(t,{type:4}).then(x);if("bind"===a)return g(t,e.slice(0,-1));const[l,h]=_(o);return w(t,{type:2,path:e.map((t=>t.toString())),argumentList:l},h).then(x)},construct(i,s){d(n);const[r,o]=_(s);return w(t,{type:3,path:e.map((t=>t.toString())),argumentList:r},o).then(x)}});return o}function _(t){const e=t.map(y);return[e.map((t=>t[0])),(i=e.map((t=>t[1])),Array.prototype.concat.apply([],i))];var i}const f=new WeakMap;function p(t,e){return f.set(t,e),t}function m(t){return Object.assign(t,{[n]:!0})}function v(t,e=self,i="*"){return{postMessage:(e,n)=>t.postMessage(e,i,n),addEventListener:e.addEventListener.bind(e),removeEventListener:e.removeEventListener.bind(e)}}function y(t){for(const[e,i]of l)if(i.canHandle(t)){const[n,s]=i.serialize(t);return[{type:3,name:e,value:n},s]}return[{type:0,value:t},f.get(t)||[]]}function x(t){switch(t.type){case 3:return l.get(t.name).deserialize(t.value);case 0:return t.value}}function w(t,e,i){return new Promise((n=>{const s=new Array(4).fill(0).map((()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16))).join("-");t.addEventListener("message",(function e(i){i.data&&i.data.id&&i.data.id===s&&(t.removeEventListener("message",e),n(i.data))})),t.start&&t.start(),t.postMessage(Object.assign({id:s},e),i)}))}},162:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),s=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),r=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)"default"!==i&&Object.prototype.hasOwnProperty.call(t,i)&&n(e,t,i);return s(e,t),e};Object.defineProperty(e,"__esModule",{value:!0}),e.createDbWorker=void 0;const o=r(i(870));async function a(t){if(t.data&&"eval"===t.data.action){const e=new Int32Array(t.data.notify,0,2),i=new Uint8Array(t.data.notify,8);let n;try{n={ok:await c(t.data.request)}}catch(e){console.error("worker request error",t.data.request,e),n={err:String(e)}}const s=(new TextEncoder).encode(JSON.stringify(n));i.set(s,0),e[1]=s.length,Atomics.notify(e,0)}}function l(t){if("BODY"===t.tagName)return"body";const e=[];for(;t.parentElement&&"BODY"!==t.tagName;){if(t.id){e.unshift("#"+t.id);break}{let i=1,n=t;for(;n.previousElementSibling;)n=n.previousElementSibling,i++;e.unshift(t.tagName.toLowerCase()+":nth-child("+i+")")}t=t.parentElement}return e.join(" > ")}function h(t){return Object.keys(t)}async function c(t){if(console.log("dom vtable request",t),"select"===t.type)return[...document.querySelectorAll(t.selector)].map((e=>{const i={};for(const n of t.columns)"selector"===n?i.selector=l(e):"parent"===n?e.parentElement&&(i.parent=e.parentElement?l(e.parentElement):null):"idx"===n||(i[n]=e[n]);return i}));if("insert"===t.type){if(!t.value.parent)throw Error('"parent" column must be set when inserting');const e=document.querySelectorAll(t.value.parent);if(0===e.length)throw Error(`Parent element ${t.value.parent} could not be found`);if(e.length>1)throw Error(`Parent element ${t.value.parent} ambiguous (${e.length} results)`);const i=e[0];if(!t.value.tagName)throw Error("tagName must be set for inserting");const n=document.createElement(t.value.tagName);for(const e of h(t.value))if(null!==t.value[e]){if("tagName"===e||"parent"===e)continue;if("idx"===e||"selector"===e)throw Error(`${e} can't be set`);n[e]=t.value[e]}return i.appendChild(n),null}if("update"===t.type){const e=document.querySelector(t.value.selector);if(!e)throw Error(`Element ${t.value.selector} not found!`);const i=[];for(const n of h(t.value)){const s=t.value[n];if("parent"!==n){if("idx"!==n&&"selector"!==n&&s!==e[n]){if(console.log("SETTING ",n,e[n],"->",s),"tagName"===n)throw Error("can't change tagName");i.push(n)}}else if(s!==l(e.parentElement)){const t=document.querySelectorAll(s);if(1!==t.length)throw Error(`Invalid target parent: found ${t.length} matches`);t[0].appendChild(e)}}for(const n of i)e[n]=t.value[n];return null}throw Error(`unknown request ${t.type}`)}o.transferHandlers.set("WORKERSQLPROXIES",{canHandle:t=>!1,serialize(t){throw Error("no")},deserialize:t=>(t.start(),o.wrap(t))}),e.createDbWorker=async function(t,e,i,n=1/0){const s=new Worker(e),r=o.wrap(s),l=await r.SplitFileHttpDatabase(i,t,void 0,n);return s.addEventListener("message",a),{db:l,worker:r,configs:t}}},432:function(t,e,i){var n=this&&this.__createBinding||(Object.create?function(t,e,i,n){void 0===n&&(n=i),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[i]}})}:function(t,e,i,n){void 0===n&&(n=i),t[n]=e[i]}),s=this&&this.__exportStar||function(t,e){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(e,i)||n(e,t,i)};Object.defineProperty(e,"__esModule",{value:!0}),s(i(162),e)}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var r=e[n]={exports:{}};return t[n].call(r.exports,r,r.exports,i),r.exports}return i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i(432)})()},3611:(t,e,i)=>{"use strict";t.exports=i.p+"8a2a3c8efae774018112.wasm"},421:(t,e,i)=>{"use strict";t.exports=i.p+"55d3459a09daf1539fb9.js"},6813:(t,e,i)=>{"use strict";i.d(e,{Z:()=>r});const n={1:"The view center is not defined",2:"The view resolution is not defined",3:"The view rotation is not defined",4:"`image` and `src` cannot be provided at the same time",5:"`imgSize` must be set when `image` is provided",7:"`format` must be set when `url` is set",8:"Unknown `serverType` configured",9:"`url` must be configured or set using `#setUrl()`",10:"The default `geometryFunction` can only handle `Point` geometries",11:"`options.featureTypes` must be an Array",12:"`options.geometryName` must also be provided when `options.bbox` is set",13:"Invalid corner",14:"Invalid color",15:"Tried to get a value for a key that does not exist in the cache",16:"Tried to set a value for a key that is used already",17:"`resolutions` must be sorted in descending order",18:"Either `origin` or `origins` must be configured, never both",19:"Number of `tileSizes` and `resolutions` must be equal",20:"Number of `origins` and `resolutions` must be equal",22:"Either `tileSize` or `tileSizes` must be configured, never both",24:"Invalid extent or geometry provided as `geometry`",25:"Cannot fit empty extent provided as `geometry`",26:"Features must have an id set",27:"Features must have an id set",28:'`renderMode` must be `"hybrid"` or `"vector"`',30:"The passed `feature` was already added to the source",31:"Tried to enqueue an `element` that was already added to the queue",32:"Transformation matrix cannot be inverted",33:"Invalid units",34:"Invalid geometry layout",36:"Unknown SRS type",37:"Unknown geometry type found",38:"`styleMapValue` has an unknown type",39:"Unknown geometry type",40:"Expected `feature` to have a geometry",41:"Expected an `ol/style/Style` or an array of `ol/style/Style.js`",42:"Question unknown, the answer is 42",43:"Expected `layers` to be an array or a `Collection`",47:"Expected `controls` to be an array or an `ol/Collection`",48:"Expected `interactions` to be an array or an `ol/Collection`",49:"Expected `overlays` to be an array or an `ol/Collection`",50:"`options.featureTypes` should be an Array",51:"Either `url` or `tileJSON` options must be provided",52:"Unknown `serverType` configured",53:"Unknown `tierSizeCalculation` configured",55:"The {-y} placeholder requires a tile grid with extent",56:"mapBrowserEvent must originate from a pointer event",57:"At least 2 conditions are required",59:"Invalid command found in the PBF",60:"Missing or invalid `size`",61:"Cannot determine IIIF Image API version from provided image information JSON",62:"A `WebGLArrayBuffer` must either be of type `ELEMENT_ARRAY_BUFFER` or `ARRAY_BUFFER`",64:"Layer opacity must be a number",66:"`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has not been enabled. This is done by providing adequate shaders using the `hitVertexShader` and `hitFragmentShader` properties of `WebGLPointsLayerRenderer`",67:"A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both",68:"A VectorTile source can only be rendered if it has a projection compatible with the view projection",69:"`width` or `height` cannot be provided together with `scale`"};class s extends Error{constructor(t){const e=n[t];super(e),this.code=t,this.name="AssertionError",this.message=e}}const r=s},5431:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n=class{constructor(){this.disposed=!1}dispose(){this.disposed||(this.disposed=!0,this.disposeInternal())}disposeInternal(){}}},8096:(t,e,i)=>{"use strict";i.d(e,{K:()=>o});var n=i(5487),s=i(177),r=i(5818);function o(t,e,i){const o=t;let a=!0,l=!1,h=!1;const c=[(0,r.Vx)(o,n.Z.LOAD,(function(){h=!0,l||e()}))];return o.src&&s.Tp?(l=!0,o.decode().then((function(){a&&e()})).catch((function(t){a&&(h?e():i())}))):c.push((0,r.Vx)(o,n.Z.ERROR,i)),function(){a=!1,c.forEach(r.bN)}}},553:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={IDLE:0,LOADING:1,LOADED:2,ERROR:3,EMPTY:4}},825:(t,e,i)=>{"use strict";i.d(e,{Z:()=>l});var n=i(4806),s=i(7195),r=i(8326),o=i(8096);class a extends n.Z{constructor(t,e,i,n,s,r){super(t,e,r),this.crossOrigin_=n,this.src_=i,this.key=i,this.image_=new Image,null!==n&&(this.image_.crossOrigin=n),this.unlisten_=null,this.tileLoadFunction_=s}getImage(){return this.image_}setImage(t){this.image_=t,this.state=s.Z.LOADED,this.unlistenImage_(),this.changed()}handleImageError_(){this.state=s.Z.ERROR,this.unlistenImage_(),this.image_=function(){const t=(0,r.E4)(1,1);return t.fillStyle="rgba(0,0,0,0)",t.fillRect(0,0,1,1),t.canvas}(),this.changed()}handleImageLoad_(){const t=this.image_;t.naturalWidth&&t.naturalHeight?this.state=s.Z.LOADED:this.state=s.Z.EMPTY,this.unlistenImage_(),this.changed()}load(){this.state==s.Z.ERROR&&(this.state=s.Z.IDLE,this.image_=new Image,null!==this.crossOrigin_&&(this.image_.crossOrigin=this.crossOrigin_)),this.state==s.Z.IDLE&&(this.state=s.Z.LOADING,this.changed(),this.tileLoadFunction_(this,this.src_),this.unlisten_=(0,o.K)(this.image_,this.handleImageLoad_.bind(this),this.handleImageError_.bind(this)))}unlistenImage_(){this.unlisten_&&(this.unlisten_(),this.unlisten_=null)}}const l=a},8854:(t,e,i)=>{"use strict";i.d(e,{Z:()=>$t});var n=i(2971),s=i(6813);const r="add",o="remove";var a=i(291);const l="length";class h extends a.ZP{constructor(t,e,i){super(t),this.element=e,this.index=i}}class c extends n.Z{constructor(t,e){if(super(),this.on,this.once,this.un,e=e||{},this.unique_=!!e.unique,this.array_=t||[],this.unique_)for(let t=0,e=this.array_.length;t<e;++t)this.assertUnique_(this.array_[t],t);this.updateLength_()}clear(){for(;this.getLength()>0;)this.pop()}extend(t){for(let e=0,i=t.length;e<i;++e)this.push(t[e]);return this}forEach(t){const e=this.array_;for(let i=0,n=e.length;i<n;++i)t(e[i],i,e)}getArray(){return this.array_}item(t){return this.array_[t]}getLength(){return this.get(l)}insertAt(t,e){if(t<0||t>this.getLength())throw new Error("Index out of bounds: "+t);this.unique_&&this.assertUnique_(e),this.array_.splice(t,0,e),this.updateLength_(),this.dispatchEvent(new h(r,e,t))}pop(){return this.removeAt(this.getLength()-1)}push(t){this.unique_&&this.assertUnique_(t);const e=this.getLength();return this.insertAt(e,t),this.getLength()}remove(t){const e=this.array_;for(let i=0,n=e.length;i<n;++i)if(e[i]===t)return this.removeAt(i)}removeAt(t){if(t<0||t>=this.getLength())return;const e=this.array_[t];return this.array_.splice(t,1),this.updateLength_(),this.dispatchEvent(new h(o,e,t)),e}setAt(t,e){if(t>=this.getLength())return void this.insertAt(t,e);if(t<0)throw new Error("Index out of bounds: "+t);this.unique_&&this.assertUnique_(e,t);const i=this.array_[t];this.array_[t]=e,this.dispatchEvent(new h(o,i,t)),this.dispatchEvent(new h(r,e,t))}updateLength_(){this.set(l,this.array_.length)}assertUnique_(t,e){for(let i=0,n=this.array_.length;i<n;++i)if(this.array_[i]===t&&i!==e)throw new s.Z(58)}}const u=c;var d=i(5431),g=i(6885),_=i(4187),f=i(6101),p=i(8641),m=i(2710),v=i(1295),y=i(1900);class x extends d.Z{constructor(t){super(),this.map_=t}dispatchRenderEvent(t,e){(0,_.O3)()}calculateMatrices2D(t){const e=t.viewState,i=t.coordinateToPixelTransform,n=t.pixelToCoordinateTransform;(0,f.qC)(i,t.size[0]/2,t.size[1]/2,1/e.resolution,-1/e.resolution,-e.rotation,-e.center[0],-e.center[1]),(0,f.nb)(n,i)}forEachFeatureAtCoordinate(t,e,i,n,s,r,o,a){let l;const h=e.viewState;function c(t,e,i,n){return s.call(r,e,t?i:null,n)}const u=h.projection,d=(0,y.Cf)(t.slice(),u),g=[[0,0]];if(u.canWrapX()&&n){const t=u.getExtent(),e=(0,p.dz)(t);g.push([-e,0],[e,0])}const _=e.layerStatesArray,f=_.length,m=[],x=[];for(let n=0;n<g.length;n++)for(let s=f-1;s>=0;--s){const r=_[s],u=r.layer;if(u.hasRenderer()&&(0,v.j)(r,h)&&o.call(a,u)){const s=u.getRenderer(),o=u.getSource();if(s&&o){const a=o.getWrapX()?d:t,h=c.bind(null,r.managed);x[0]=a[0]+g[n][0],x[1]=a[1]+g[n][1],l=s.forEachFeatureAtCoordinate(x,e,i,h,m)}if(l)return l}}if(0===m.length)return;const w=1/m.length;return m.forEach(((t,e)=>t.distanceSq+=e*w)),m.sort(((t,e)=>t.distanceSq-e.distanceSq)),m.some((t=>l=t.callback(t.feature,t.layer,t.geometry))),l}hasFeatureAtCoordinate(t,e,i,n,s,r){return void 0!==this.forEachFeatureAtCoordinate(t,e,i,n,g.uX,this,s,r)}getMap(){return this.map_}renderFrame(t){(0,_.O3)()}scheduleExpireIconCache(t){m.c.canExpireCache()&&t.postRenderFunctions.push(w)}}function w(t,e){m.c.expire()}const S=x;var E=i(5990),b=i(7380),C=i(8771),T=i(245),R=i(147),I=i(5818),k=i(8326);const M=class extends S{constructor(t){super(t),this.fontChangeListenerKey_=(0,I.oL)(R.sG,E.Z.PROPERTYCHANGE,t.redrawText.bind(t)),this.element_=document.createElement("div");const e=this.element_.style;e.position="absolute",e.width="100%",e.height="100%",e.zIndex="0",this.element_.className=T.XV+" ol-layers";const i=t.getViewport();i.insertBefore(this.element_,i.firstChild||null),this.children_=[],this.renderedVisible_=!0}dispatchRenderEvent(t,e){const i=this.getMap();if(i.hasListener(t)){const n=new b.Z(t,void 0,e);i.dispatchEvent(n)}}disposeInternal(){(0,I.bN)(this.fontChangeListenerKey_),this.element_.parentNode.removeChild(this.element_),super.disposeInternal()}renderFrame(t){if(!t)return void(this.renderedVisible_&&(this.element_.style.display="none",this.renderedVisible_=!1));this.calculateMatrices2D(t),this.dispatchRenderEvent(C.Z.PRECOMPOSE,t);const e=t.layerStatesArray.sort((function(t,e){return t.zIndex-e.zIndex})),i=t.viewState;this.children_.length=0;const n=[];let s=null;for(let r=0,o=e.length;r<o;++r){const o=e[r];t.layerIndex=r;const a=o.layer,l=a.getSourceState();if(!(0,v.j)(o,i)||"ready"!=l&&"undefined"!=l){a.unrender();continue}const h=a.render(t,s);h&&(h!==s&&(this.children_.push(h),s=h),"getDeclutter"in a&&n.push(a))}for(let e=n.length-1;e>=0;--e)n[e].renderDeclutter(t);(0,k.hF)(this.element_,this.children_),this.dispatchRenderEvent(C.Z.POSTCOMPOSE,t),this.renderedVisible_||(this.element_.style.display="",this.renderedVisible_=!0),this.scheduleExpireIconCache(t)}};var L=i(5487),P=i(947),O=i(9515),A=i(9374);class Z extends a.ZP{constructor(t,e){super(t),this.layer=e}}const F="layers";class D extends P.Z{constructor(t){t=t||{};const e=Object.assign({},t);delete e.layers;let i=t.layers;super(e),this.on,this.once,this.un,this.layersListenerKeys_=[],this.listenerKeys_={},this.addChangeListener(F,this.handleLayersChanged_),i?Array.isArray(i)?i=new u(i.slice(),{unique:!0}):(0,O.h)("function"==typeof i.getArray,43):i=new u(void 0,{unique:!0}),this.setLayers(i)}handleLayerChange_(){this.changed()}handleLayersChanged_(){this.layersListenerKeys_.forEach(I.bN),this.layersListenerKeys_.length=0;const t=this.getLayers();this.layersListenerKeys_.push((0,I.oL)(t,r,this.handleLayersAdd_,this),(0,I.oL)(t,o,this.handleLayersRemove_,this));for(const t in this.listenerKeys_)this.listenerKeys_[t].forEach(I.bN);(0,A.Z)(this.listenerKeys_);const e=t.getArray();for(let t=0,i=e.length;t<i;t++){const i=e[t];this.registerLayerListeners_(i),this.dispatchEvent(new Z("addlayer",i))}this.changed()}registerLayerListeners_(t){const e=[(0,I.oL)(t,E.Z.PROPERTYCHANGE,this.handleLayerChange_,this),(0,I.oL)(t,L.Z.CHANGE,this.handleLayerChange_,this)];t instanceof D&&e.push((0,I.oL)(t,"addlayer",this.handleLayerGroupAdd_,this),(0,I.oL)(t,"removelayer",this.handleLayerGroupRemove_,this)),this.listenerKeys_[(0,_.sq)(t)]=e}handleLayerGroupAdd_(t){this.dispatchEvent(new Z("addlayer",t.layer))}handleLayerGroupRemove_(t){this.dispatchEvent(new Z("removelayer",t.layer))}handleLayersAdd_(t){const e=t.element;this.registerLayerListeners_(e),this.dispatchEvent(new Z("addlayer",e)),this.changed()}handleLayersRemove_(t){const e=t.element,i=(0,_.sq)(e);this.listenerKeys_[i].forEach(I.bN),delete this.listenerKeys_[i],this.dispatchEvent(new Z("removelayer",e)),this.changed()}getLayers(){return this.get(F)}setLayers(t){const e=this.getLayers();if(e){const t=e.getArray();for(let e=0,i=t.length;e<i;++e)this.dispatchEvent(new Z("removelayer",t[e]))}this.set(F,t)}getLayersArray(t){return t=void 0!==t?t:[],this.getLayers().forEach((function(e){e.getLayersArray(t)})),t}getLayerStatesArray(t){const e=void 0!==t?t:[],i=e.length;this.getLayers().forEach((function(t){t.getLayerStatesArray(e)}));const n=this.getLayerState();let s=n.zIndex;t||void 0!==n.zIndex||(s=0);for(let t=i,r=e.length;t<r;t++){const i=e[t];i.opacity*=n.opacity,i.visible=i.visible&&n.visible,i.maxResolution=Math.min(i.maxResolution,n.maxResolution),i.minResolution=Math.max(i.minResolution,n.minResolution),i.minZoom=Math.max(i.minZoom,n.minZoom),i.maxZoom=Math.min(i.maxZoom,n.maxZoom),void 0!==n.extent&&(void 0!==i.extent?i.extent=(0,p.Ed)(i.extent,n.extent):i.extent=n.extent),void 0===i.zIndex&&(i.zIndex=s)}return e}getSourceState(){return"ready"}}const z=D;class N extends a.ZP{constructor(t,e,i){super(t),this.map=e,this.frameState=void 0!==i?i:null}}const G=N,B=class extends G{constructor(t,e,i,n,s,r){super(t,e,s),this.originalEvent=i,this.pixel_=null,this.coordinate_=null,this.dragging=void 0!==n&&n,this.activePointers=r}get pixel(){return this.pixel_||(this.pixel_=this.map.getEventPixel(this.originalEvent)),this.pixel_}set pixel(t){this.pixel_=t}get coordinate(){return this.coordinate_||(this.coordinate_=this.map.getCoordinateFromPixel(this.pixel)),this.coordinate_}set coordinate(t){this.coordinate_=t}preventDefault(){super.preventDefault(),"preventDefault"in this.originalEvent&&this.originalEvent.preventDefault()}stopPropagation(){super.stopPropagation(),"stopPropagation"in this.originalEvent&&this.originalEvent.stopPropagation()}},W={SINGLECLICK:"singleclick",CLICK:L.Z.CLICK,DBLCLICK:L.Z.DBLCLICK,POINTERDRAG:"pointerdrag",POINTERMOVE:"pointermove",POINTERDOWN:"pointerdown",POINTERUP:"pointerup",POINTEROVER:"pointerover",POINTEROUT:"pointerout",POINTERENTER:"pointerenter",POINTERLEAVE:"pointerleave",POINTERCANCEL:"pointercancel"},j="pointerdown";var U=i(208),Y=i(177);class V extends U.Z{constructor(t,e){super(t),this.map_=t,this.clickTimeoutId_,this.emulateClicks_=!1,this.dragging_=!1,this.dragListenerKeys_=[],this.moveTolerance_=void 0===e?1:e,this.down_=null;const i=this.map_.getViewport();this.activePointers_=[],this.trackedTouches_={},this.element_=i,this.pointerdownListenerKey_=(0,I.oL)(i,j,this.handlePointerDown_,this),this.originalPointerMoveEvent_,this.relayedListenerKey_=(0,I.oL)(i,"pointermove",this.relayMoveEvent_,this),this.boundHandleTouchMove_=this.handleTouchMove_.bind(this),this.element_.addEventListener(L.Z.TOUCHMOVE,this.boundHandleTouchMove_,!!Y.bM&&{passive:!1})}emulateClick_(t){let e=new B(W.CLICK,this.map_,t);this.dispatchEvent(e),void 0!==this.clickTimeoutId_?(clearTimeout(this.clickTimeoutId_),this.clickTimeoutId_=void 0,e=new B(W.DBLCLICK,this.map_,t),this.dispatchEvent(e)):this.clickTimeoutId_=setTimeout((()=>{this.clickTimeoutId_=void 0;const e=new B(W.SINGLECLICK,this.map_,t);this.dispatchEvent(e)}),250)}updateActivePointers_(t){const e=t,i=e.pointerId;if(e.type==W.POINTERUP||e.type==W.POINTERCANCEL){delete this.trackedTouches_[i];for(const t in this.trackedTouches_)if(this.trackedTouches_[t].target!==e.target){delete this.trackedTouches_[t];break}}else e.type!=W.POINTERDOWN&&e.type!=W.POINTERMOVE||(this.trackedTouches_[i]=e);this.activePointers_=Object.values(this.trackedTouches_)}handlePointerUp_(t){this.updateActivePointers_(t);const e=new B(W.POINTERUP,this.map_,t,void 0,void 0,this.activePointers_);this.dispatchEvent(e),this.emulateClicks_&&!e.defaultPrevented&&!this.dragging_&&this.isMouseActionButton_(t)&&this.emulateClick_(this.down_),0===this.activePointers_.length&&(this.dragListenerKeys_.forEach(I.bN),this.dragListenerKeys_.length=0,this.dragging_=!1,this.down_=null)}isMouseActionButton_(t){return 0===t.button}handlePointerDown_(t){this.emulateClicks_=0===this.activePointers_.length,this.updateActivePointers_(t);const e=new B(W.POINTERDOWN,this.map_,t,void 0,void 0,this.activePointers_);this.dispatchEvent(e),this.down_={};for(const e in t){const i=t[e];this.down_[e]="function"==typeof i?g.Zn:i}if(0===this.dragListenerKeys_.length){const t=this.map_.getOwnerDocument();this.dragListenerKeys_.push((0,I.oL)(t,W.POINTERMOVE,this.handlePointerMove_,this),(0,I.oL)(t,W.POINTERUP,this.handlePointerUp_,this),(0,I.oL)(this.element_,W.POINTERCANCEL,this.handlePointerUp_,this)),this.element_.getRootNode&&this.element_.getRootNode()!==t&&this.dragListenerKeys_.push((0,I.oL)(this.element_.getRootNode(),W.POINTERUP,this.handlePointerUp_,this))}}handlePointerMove_(t){if(this.isMoving_(t)){this.updateActivePointers_(t),this.dragging_=!0;const e=new B(W.POINTERDRAG,this.map_,t,this.dragging_,void 0,this.activePointers_);this.dispatchEvent(e)}}relayMoveEvent_(t){this.originalPointerMoveEvent_=t;const e=!(!this.down_||!this.isMoving_(t));this.dispatchEvent(new B(W.POINTERMOVE,this.map_,t,e))}handleTouchMove_(t){const e=this.originalPointerMoveEvent_;e&&!e.defaultPrevented||"boolean"==typeof t.cancelable&&!0!==t.cancelable||t.preventDefault()}isMoving_(t){return this.dragging_||Math.abs(t.clientX-this.down_.clientX)>this.moveTolerance_||Math.abs(t.clientY-this.down_.clientY)>this.moveTolerance_}disposeInternal(){this.relayedListenerKey_&&((0,I.bN)(this.relayedListenerKey_),this.relayedListenerKey_=null),this.element_.removeEventListener(L.Z.TOUCHMOVE,this.boundHandleTouchMove_),this.pointerdownListenerKey_&&((0,I.bN)(this.pointerdownListenerKey_),this.pointerdownListenerKey_=null),this.dragListenerKeys_.forEach(I.bN),this.dragListenerKeys_.length=0,this.element_=null,super.disposeInternal()}}const X=V,K="postrender",H="loadstart",q="loadend",J="layergroup",$="size",Q="target",tt="view",et=1/0,it=class{constructor(t,e){this.priorityFunction_=t,this.keyFunction_=e,this.elements_=[],this.priorities_=[],this.queuedElements_={}}clear(){this.elements_.length=0,this.priorities_.length=0,(0,A.Z)(this.queuedElements_)}dequeue(){const t=this.elements_,e=this.priorities_,i=t[0];1==t.length?(t.length=0,e.length=0):(t[0]=t.pop(),e[0]=e.pop(),this.siftUp_(0));const n=this.keyFunction_(i);return delete this.queuedElements_[n],i}enqueue(t){(0,O.h)(!(this.keyFunction_(t)in this.queuedElements_),31);const e=this.priorityFunction_(t);return e!=et&&(this.elements_.push(t),this.priorities_.push(e),this.queuedElements_[this.keyFunction_(t)]=!0,this.siftDown_(0,this.elements_.length-1),!0)}getCount(){return this.elements_.length}getLeftChildIndex_(t){return 2*t+1}getRightChildIndex_(t){return 2*t+2}getParentIndex_(t){return t-1>>1}heapify_(){let t;for(t=(this.elements_.length>>1)-1;t>=0;t--)this.siftUp_(t)}isEmpty(){return 0===this.elements_.length}isKeyQueued(t){return t in this.queuedElements_}isQueued(t){return this.isKeyQueued(this.keyFunction_(t))}siftUp_(t){const e=this.elements_,i=this.priorities_,n=e.length,s=e[t],r=i[t],o=t;for(;t<n>>1;){const s=this.getLeftChildIndex_(t),r=this.getRightChildIndex_(t),o=r<n&&i[r]<i[s]?r:s;e[t]=e[o],i[t]=i[o],t=o}e[t]=s,i[t]=r,this.siftDown_(o,t)}siftDown_(t,e){const i=this.elements_,n=this.priorities_,s=i[e],r=n[e];for(;e>t;){const t=this.getParentIndex_(e);if(!(n[t]>r))break;i[e]=i[t],n[e]=n[t],e=t}i[e]=s,n[e]=r}reprioritize(){const t=this.priorityFunction_,e=this.elements_,i=this.priorities_;let n=0;const s=e.length;let r,o,a;for(o=0;o<s;++o)r=e[o],a=t(r),a==et?delete this.queuedElements_[this.keyFunction_(r)]:(i[n]=a,e[n++]=r);e.length=n,i.length=n,this.heapify_()}};var nt=i(7195);const st=class extends it{constructor(t,e){super((function(e){return t.apply(null,e)}),(function(t){return t[0].getKey()})),this.boundHandleTileChange_=this.handleTileChange.bind(this),this.tileChangeCallback_=e,this.tilesLoading_=0,this.tilesLoadingKeys_={}}enqueue(t){const e=super.enqueue(t);return e&&t[0].addEventListener(L.Z.CHANGE,this.boundHandleTileChange_),e}getTilesLoading(){return this.tilesLoading_}handleTileChange(t){const e=t.target,i=e.getState();if(i===nt.Z.LOADED||i===nt.Z.ERROR||i===nt.Z.EMPTY){i!==nt.Z.ERROR&&e.removeEventListener(L.Z.CHANGE,this.boundHandleTileChange_);const t=e.getKey();t in this.tilesLoadingKeys_&&(delete this.tilesLoadingKeys_[t],--this.tilesLoading_),this.tileChangeCallback_()}}loadMoreTiles(t,e){let i,n,s,r=0;for(;this.tilesLoading_<t&&r<e&&this.getCount()>0;)n=this.dequeue()[0],s=n.getKey(),i=n.getState(),i!==nt.Z.IDLE||s in this.tilesLoadingKeys_||(this.tilesLoadingKeys_[s]=!0,++this.tilesLoading_,++r,n.load())}};var rt=i(9090),ot=i(7755);class at extends n.Z{constructor(t){super();const e=t.element;!e||t.target||e.style.pointerEvents||(e.style.pointerEvents="auto"),this.element=e||null,this.target_=null,this.map_=null,this.listenerKeys=[],t.render&&(this.render=t.render),t.target&&this.setTarget(t.target)}disposeInternal(){(0,k.ZF)(this.element),super.disposeInternal()}getMap(){return this.map_}setMap(t){this.map_&&(0,k.ZF)(this.element);for(let t=0,e=this.listenerKeys.length;t<e;++t)(0,I.bN)(this.listenerKeys[t]);this.listenerKeys.length=0,this.map_=t,t&&((this.target_?this.target_:t.getOverlayContainerStopEvent()).appendChild(this.element),this.render!==g.Zn&&this.listenerKeys.push((0,I.oL)(t,K,this.render,this)),t.render())}render(t){}setTarget(t){this.target_="string"==typeof t?document.getElementById(t):t}}const lt=at;var ht=i(5537);const ct=class extends lt{constructor(t){t=t||{},super({element:document.createElement("div"),render:t.render,target:t.target}),this.ulElement_=document.createElement("ul"),this.collapsed_=void 0===t.collapsed||t.collapsed,this.userCollapsed_=this.collapsed_,this.overrideCollapsible_=void 0!==t.collapsible,this.collapsible_=void 0===t.collapsible||t.collapsible,this.collapsible_||(this.collapsed_=!1);const e=void 0!==t.className?t.className:"ol-attribution",i=void 0!==t.tipLabel?t.tipLabel:"Attributions",n=void 0!==t.expandClassName?t.expandClassName:e+"-expand",s=void 0!==t.collapseLabel?t.collapseLabel:"›",r=void 0!==t.collapseClassName?t.collapseClassName:e+"-collapse";"string"==typeof s?(this.collapseLabel_=document.createElement("span"),this.collapseLabel_.textContent=s,this.collapseLabel_.className=r):this.collapseLabel_=s;const o=void 0!==t.label?t.label:"i";"string"==typeof o?(this.label_=document.createElement("span"),this.label_.textContent=o,this.label_.className=n):this.label_=o;const a=this.collapsible_&&!this.collapsed_?this.collapseLabel_:this.label_;this.toggleButton_=document.createElement("button"),this.toggleButton_.setAttribute("type","button"),this.toggleButton_.setAttribute("aria-expanded",String(!this.collapsed_)),this.toggleButton_.title=i,this.toggleButton_.appendChild(a),this.toggleButton_.addEventListener(L.Z.CLICK,this.handleClick_.bind(this),!1);const l=e+" "+T.XV+" "+T.hg+(this.collapsed_&&this.collapsible_?" "+T.hN:"")+(this.collapsible_?"":" ol-uncollapsible"),h=this.element;h.className=l,h.appendChild(this.toggleButton_),h.appendChild(this.ulElement_),this.renderedAttributions_=[],this.renderedVisible_=!0}collectSourceAttributions_(t){const e={},i=[];let n=!0;const s=t.layerStatesArray;for(let r=0,o=s.length;r<o;++r){const o=s[r];if(!(0,v.j)(o,t.viewState))continue;const a=o.layer.getSource();if(!a)continue;const l=a.getAttributions();if(!l)continue;const h=l(t);if(h)if(n=n&&!1!==a.getAttributionsCollapsible(),Array.isArray(h))for(let t=0,n=h.length;t<n;++t)h[t]in e||(i.push(h[t]),e[h[t]]=!0);else h in e||(i.push(h),e[h]=!0)}return this.overrideCollapsible_||this.setCollapsible(n),i}updateElement_(t){if(!t)return void(this.renderedVisible_&&(this.element.style.display="none",this.renderedVisible_=!1));const e=this.collectSourceAttributions_(t),i=e.length>0;if(this.renderedVisible_!=i&&(this.element.style.display=i?"":"none",this.renderedVisible_=i),!(0,ht.fS)(e,this.renderedAttributions_)){(0,k.ep)(this.ulElement_);for(let t=0,i=e.length;t<i;++t){const i=document.createElement("li");i.innerHTML=e[t],this.ulElement_.appendChild(i)}this.renderedAttributions_=e}}handleClick_(t){t.preventDefault(),this.handleToggle_(),this.userCollapsed_=this.collapsed_}handleToggle_(){this.element.classList.toggle(T.hN),this.collapsed_?(0,k.$H)(this.collapseLabel_,this.label_):(0,k.$H)(this.label_,this.collapseLabel_),this.collapsed_=!this.collapsed_,this.toggleButton_.setAttribute("aria-expanded",String(!this.collapsed_))}getCollapsible(){return this.collapsible_}setCollapsible(t){this.collapsible_!==t&&(this.collapsible_=t,this.element.classList.toggle("ol-uncollapsible"),this.userCollapsed_&&this.handleToggle_())}setCollapsed(t){this.userCollapsed_=t,this.collapsible_&&this.collapsed_!==t&&this.handleToggle_()}getCollapsed(){return this.collapsed_}render(t){this.updateElement_(t.frameState)}};var ut=i(1015);const dt=class extends lt{constructor(t){t=t||{},super({element:document.createElement("div"),render:t.render,target:t.target});const e=void 0!==t.className?t.className:"ol-rotate",i=void 0!==t.label?t.label:"⇧",n=void 0!==t.compassClassName?t.compassClassName:"ol-compass";this.label_=null,"string"==typeof i?(this.label_=document.createElement("span"),this.label_.className=n,this.label_.textContent=i):(this.label_=i,this.label_.classList.add(n));const s=t.tipLabel?t.tipLabel:"Reset rotation",r=document.createElement("button");r.className=e+"-reset",r.setAttribute("type","button"),r.title=s,r.appendChild(this.label_),r.addEventListener(L.Z.CLICK,this.handleClick_.bind(this),!1);const o=e+" "+T.XV+" "+T.hg,a=this.element;a.className=o,a.appendChild(r),this.callResetNorth_=t.resetNorth?t.resetNorth:void 0,this.duration_=void 0!==t.duration?t.duration:250,this.autoHide_=void 0===t.autoHide||t.autoHide,this.rotation_=void 0,this.autoHide_&&this.element.classList.add(T.oj)}handleClick_(t){t.preventDefault(),void 0!==this.callResetNorth_?this.callResetNorth_():this.resetNorth_()}resetNorth_(){const t=this.getMap().getView();if(!t)return;const e=t.getRotation();void 0!==e&&(this.duration_>0&&e%(2*Math.PI)!=0?t.animate({rotation:0,duration:this.duration_,easing:ut.Vv}):t.setRotation(0))}render(t){const e=t.frameState;if(!e)return;const i=e.viewState.rotation;if(i!=this.rotation_){const t="rotate("+i+"rad)";if(this.autoHide_){const t=this.element.classList.contains(T.oj);t||0!==i?t&&0!==i&&this.element.classList.remove(T.oj):this.element.classList.add(T.oj)}this.label_.style.transform=t}this.rotation_=i}},gt=class extends lt{constructor(t){t=t||{},super({element:document.createElement("div"),target:t.target});const e=void 0!==t.className?t.className:"ol-zoom",i=void 0!==t.delta?t.delta:1,n=void 0!==t.zoomInClassName?t.zoomInClassName:e+"-in",s=void 0!==t.zoomOutClassName?t.zoomOutClassName:e+"-out",r=void 0!==t.zoomInLabel?t.zoomInLabel:"+",o=void 0!==t.zoomOutLabel?t.zoomOutLabel:"–",a=void 0!==t.zoomInTipLabel?t.zoomInTipLabel:"Zoom in",l=void 0!==t.zoomOutTipLabel?t.zoomOutTipLabel:"Zoom out",h=document.createElement("button");h.className=n,h.setAttribute("type","button"),h.title=a,h.appendChild("string"==typeof r?document.createTextNode(r):r),h.addEventListener(L.Z.CLICK,this.handleClick_.bind(this,i),!1);const c=document.createElement("button");c.className=s,c.setAttribute("type","button"),c.title=l,c.appendChild("string"==typeof o?document.createTextNode(o):o),c.addEventListener(L.Z.CLICK,this.handleClick_.bind(this,-i),!1);const u=e+" "+T.XV+" "+T.hg,d=this.element;d.className=u,d.appendChild(h),d.appendChild(c),this.duration_=void 0!==t.duration?t.duration:250}handleClick_(t,e){e.preventDefault(),this.zoomByDelta_(t)}zoomByDelta_(t){const e=this.getMap().getView();if(!e)return;const i=e.getZoom();if(void 0!==i){const n=e.getConstrainedZoom(i+t);this.duration_>0?(e.getAnimating()&&e.cancelAnimations(),e.animate({zoom:n,duration:this.duration_,easing:ut.Vv})):e.setZoom(n)}}},_t="active";class ft extends n.Z{constructor(t){super(),this.on,this.once,this.un,t&&t.handleEvent&&(this.handleEvent=t.handleEvent),this.map_=null,this.setActive(!0)}getActive(){return this.get(_t)}getMap(){return this.map_}handleEvent(t){return!0}setActive(t){this.set(_t,t)}setMap(t){this.map_=t}}function pt(t,e,i,n){const s=t.getZoom();if(void 0===s)return;const r=t.getConstrainedZoom(s+e),o=t.getResolutionForZoom(r);t.getAnimating()&&t.cancelAnimations(),t.animate({resolution:o,anchor:i,duration:void 0!==n?n:250,easing:ut.Vv})}const mt=ft,vt=class extends mt{constructor(t){super(),t=t||{},this.delta_=t.delta?t.delta:1,this.duration_=void 0!==t.duration?t.duration:250}handleEvent(t){let e=!1;if(t.type==W.DBLCLICK){const i=t.originalEvent,n=t.map,s=t.coordinate,r=i.shiftKey?-this.delta_:this.delta_;pt(n.getView(),r,s,this.duration_),i.preventDefault(),e=!0}return!e}};function yt(t){const e=t.length;let i=0,n=0;for(let s=0;s<e;s++)i+=t[s].clientX,n+=t[s].clientY;return{clientX:i/e,clientY:n/e}}const xt=class extends mt{constructor(t){super(t=t||{}),t.handleDownEvent&&(this.handleDownEvent=t.handleDownEvent),t.handleDragEvent&&(this.handleDragEvent=t.handleDragEvent),t.handleMoveEvent&&(this.handleMoveEvent=t.handleMoveEvent),t.handleUpEvent&&(this.handleUpEvent=t.handleUpEvent),t.stopDown&&(this.stopDown=t.stopDown),this.handlingDownUpSequence=!1,this.targetPointers=[]}getPointerCount(){return this.targetPointers.length}handleDownEvent(t){return!1}handleDragEvent(t){}handleEvent(t){if(!t.originalEvent)return!0;let e=!1;if(this.updateTrackedPointers_(t),this.handlingDownUpSequence){if(t.type==W.POINTERDRAG)this.handleDragEvent(t),t.originalEvent.preventDefault();else if(t.type==W.POINTERUP){const e=this.handleUpEvent(t);this.handlingDownUpSequence=e&&this.targetPointers.length>0}}else if(t.type==W.POINTERDOWN){const i=this.handleDownEvent(t);this.handlingDownUpSequence=i,e=this.stopDown(i)}else t.type==W.POINTERMOVE&&this.handleMoveEvent(t);return!e}handleMoveEvent(t){}handleUpEvent(t){return!1}stopDown(t){return t}updateTrackedPointers_(t){t.activePointers&&(this.targetPointers=t.activePointers)}};function wt(t){const e=arguments;return function(t){let i=!0;for(let n=0,s=e.length;n<s&&(i=i&&e[n](t),i);++n);return i}}const St=function(t){const e=t.originalEvent;return e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},Et=function(t){return!t.map.getTargetElement().hasAttribute("tabindex")||function(t){const e=t.map.getTargetElement(),i=t.map.getOwnerDocument().activeElement;return e.contains(i)}(t)},bt=g.uX,Ct=function(t){const e=t.originalEvent;return 0==e.button&&!(Y.G$&&Y.tK&&e.ctrlKey)},Tt=function(t){const e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&!e.shiftKey},Rt=function(t){const e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},It=function(t){const e=t.originalEvent,i=e.target.tagName;return"INPUT"!==i&&"SELECT"!==i&&"TEXTAREA"!==i&&!e.target.isContentEditable},kt=function(t){const e=t.originalEvent;return(0,O.h)(void 0!==e,56),"mouse"==e.pointerType},Mt=function(t){const e=t.originalEvent;return(0,O.h)(void 0!==e,56),e.isPrimary&&0===e.button},Lt=class extends xt{constructor(t){super({stopDown:g.Dv}),t=t||{},this.kinetic_=t.kinetic,this.lastCentroid=null,this.lastPointersCount_,this.panning_=!1;const e=t.condition?t.condition:wt(Tt,Mt);this.condition_=t.onFocusOnly?wt(Et,e):e,this.noKinetic_=!1}handleDragEvent(t){const e=t.map;this.panning_||(this.panning_=!0,e.getView().beginInteraction());const i=this.targetPointers,n=e.getEventPixel(yt(i));if(i.length==this.lastPointersCount_){if(this.kinetic_&&this.kinetic_.update(n[0],n[1]),this.lastCentroid){const e=[this.lastCentroid[0]-n[0],n[1]-this.lastCentroid[1]],i=t.map.getView();(0,y.bA)(e,i.getResolution()),(0,y.U1)(e,i.getRotation()),i.adjustCenterInternal(e)}}else this.kinetic_&&this.kinetic_.begin();this.lastCentroid=n,this.lastPointersCount_=i.length,t.originalEvent.preventDefault()}handleUpEvent(t){const e=t.map,i=e.getView();if(0===this.targetPointers.length){if(!this.noKinetic_&&this.kinetic_&&this.kinetic_.end()){const t=this.kinetic_.getDistance(),n=this.kinetic_.getAngle(),s=i.getCenterInternal(),r=e.getPixelFromCoordinateInternal(s),o=e.getCoordinateFromPixelInternal([r[0]-t*Math.cos(n),r[1]-t*Math.sin(n)]);i.animateInternal({center:i.getConstrainedCenter(o),duration:500,easing:ut.Vv})}return this.panning_&&(this.panning_=!1,i.endInteraction()),!1}return this.kinetic_&&this.kinetic_.begin(),this.lastCentroid=null,!0}handleDownEvent(t){if(this.targetPointers.length>0&&this.condition_(t)){const e=t.map.getView();return this.lastCentroid=null,e.getAnimating()&&e.cancelAnimations(),this.kinetic_&&this.kinetic_.begin(),this.noKinetic_=this.targetPointers.length>1,!0}return!1}};var Pt=i(828);const Ot=class extends xt{constructor(t){t=t||{},super({stopDown:g.Dv}),this.condition_=t.condition?t.condition:St,this.lastAngle_=void 0,this.duration_=void 0!==t.duration?t.duration:250}handleDragEvent(t){if(!kt(t))return;const e=t.map,i=e.getView();if(i.getConstraints().rotation===Pt.h$)return;const n=e.getSize(),s=t.pixel,r=Math.atan2(n[1]/2-s[1],s[0]-n[0]/2);if(void 0!==this.lastAngle_){const t=r-this.lastAngle_;i.adjustRotationInternal(-t)}this.lastAngle_=r}handleUpEvent(t){return!kt(t)||(t.map.getView().endInteraction(this.duration_),!1)}handleDownEvent(t){return!!kt(t)&&(!(!Ct(t)||!this.condition_(t))&&(t.map.getView().beginInteraction(),this.lastAngle_=void 0,!0))}};var At=i(1082);class Zt extends d.Z{constructor(t){super(),this.geometry_=null,this.element_=document.createElement("div"),this.element_.style.position="absolute",this.element_.style.pointerEvents="auto",this.element_.className="ol-box "+t,this.map_=null,this.startPixel_=null,this.endPixel_=null}disposeInternal(){this.setMap(null)}render_(){const t=this.startPixel_,e=this.endPixel_,i="px",n=this.element_.style;n.left=Math.min(t[0],e[0])+i,n.top=Math.min(t[1],e[1])+i,n.width=Math.abs(e[0]-t[0])+i,n.height=Math.abs(e[1]-t[1])+i}setMap(t){if(this.map_){this.map_.getOverlayContainer().removeChild(this.element_);const t=this.element_.style;t.left="inherit",t.top="inherit",t.width="inherit",t.height="inherit"}this.map_=t,this.map_&&this.map_.getOverlayContainer().appendChild(this.element_)}setPixels(t,e){this.startPixel_=t,this.endPixel_=e,this.createOrUpdateGeometry(),this.render_()}createOrUpdateGeometry(){const t=this.startPixel_,e=this.endPixel_,i=[t,[t[0],e[1]],e,[e[0],t[1]]].map(this.map_.getCoordinateFromPixelInternal,this.map_);i[4]=i[0].slice(),this.geometry_?this.geometry_.setCoordinates([i]):this.geometry_=new At.ZP([i])}getGeometry(){return this.geometry_}}const Ft=Zt;class Dt extends a.ZP{constructor(t,e,i){super(t),this.coordinate=e,this.mapBrowserEvent=i}}const zt=class extends xt{constructor(t){super(),this.on,this.once,this.un,t=t||{},this.box_=new Ft(t.className||"ol-dragbox"),this.minArea_=void 0!==t.minArea?t.minArea:64,t.onBoxEnd&&(this.onBoxEnd=t.onBoxEnd),this.startPixel_=null,this.condition_=t.condition?t.condition:Ct,this.boxEndCondition_=t.boxEndCondition?t.boxEndCondition:this.defaultBoxEndCondition}defaultBoxEndCondition(t,e,i){const n=i[0]-e[0],s=i[1]-e[1];return n*n+s*s>=this.minArea_}getGeometry(){return this.box_.getGeometry()}handleDragEvent(t){this.box_.setPixels(this.startPixel_,t.pixel),this.dispatchEvent(new Dt("boxdrag",t.coordinate,t))}handleUpEvent(t){this.box_.setMap(null);const e=this.boxEndCondition_(t,this.startPixel_,t.pixel);return e&&this.onBoxEnd(t),this.dispatchEvent(new Dt(e?"boxend":"boxcancel",t.coordinate,t)),!1}handleDownEvent(t){return!!this.condition_(t)&&(this.startPixel_=t.pixel,this.box_.setMap(t.map),this.box_.setPixels(this.startPixel_,this.startPixel_),this.dispatchEvent(new Dt("boxstart",t.coordinate,t)),!0)}onBoxEnd(t){}},Nt=class extends zt{constructor(t){super({condition:(t=t||{}).condition?t.condition:Rt,className:t.className||"ol-dragzoom",minArea:t.minArea}),this.duration_=void 0!==t.duration?t.duration:200,this.out_=void 0!==t.out&&t.out}onBoxEnd(t){const e=this.getMap().getView();let i=this.getGeometry();if(this.out_){const t=e.rotatedExtentForGeometry(i),n=e.getResolutionForExtentInternal(t),s=e.getResolution()/n;i=i.clone(),i.scale(s*s)}e.fitInternal(i,{duration:this.duration_,easing:ut.Vv})}},Gt=class extends mt{constructor(t){super(),t=t||{},this.defaultCondition_=function(t){return Tt(t)&&It(t)},this.condition_=void 0!==t.condition?t.condition:this.defaultCondition_,this.duration_=void 0!==t.duration?t.duration:100,this.pixelDelta_=void 0!==t.pixelDelta?t.pixelDelta:128}handleEvent(t){let e=!1;if(t.type==L.Z.KEYDOWN){const i=t.originalEvent,n=i.keyCode;if(this.condition_(t)&&(40==n||37==n||39==n||38==n)){const s=t.map.getView(),r=s.getResolution()*this.pixelDelta_;let o=0,a=0;40==n?a=-r:37==n?o=-r:39==n?o=r:a=r;const l=[o,a];(0,y.U1)(l,s.getRotation()),function(t,e,i){const n=t.getCenterInternal();if(n){const s=[n[0]+e[0],n[1]+e[1]];t.animateInternal({duration:void 0!==i?i:250,easing:ut.GE,center:t.getConstrainedCenter(s)})}}(s,l,this.duration_),i.preventDefault(),e=!0}}return!e}},Bt=class extends mt{constructor(t){super(),t=t||{},this.condition_=t.condition?t.condition:It,this.delta_=t.delta?t.delta:1,this.duration_=void 0!==t.duration?t.duration:100}handleEvent(t){let e=!1;if(t.type==L.Z.KEYDOWN||t.type==L.Z.KEYPRESS){const i=t.originalEvent,n=i.charCode;if(this.condition_(t)&&(n=="+".charCodeAt(0)||n=="-".charCodeAt(0))){const s=t.map,r=n=="+".charCodeAt(0)?this.delta_:-this.delta_;pt(s.getView(),r,void 0,this.duration_),i.preventDefault(),e=!0}}return!e}};var Wt=i(3983);const jt=class extends mt{constructor(t){super(t=t||{}),this.totalDelta_=0,this.lastDelta_=0,this.maxDelta_=void 0!==t.maxDelta?t.maxDelta:1,this.duration_=void 0!==t.duration?t.duration:250,this.timeout_=void 0!==t.timeout?t.timeout:80,this.useAnchor_=void 0===t.useAnchor||t.useAnchor,this.constrainResolution_=void 0!==t.constrainResolution&&t.constrainResolution;const e=t.condition?t.condition:bt;this.condition_=t.onFocusOnly?wt(Et,e):e,this.lastAnchor_=null,this.startTime_=void 0,this.timeoutId_,this.mode_=void 0,this.trackpadEventGap_=400,this.trackpadTimeoutId_,this.deltaPerZoom_=300}endInteraction_(){this.trackpadTimeoutId_=void 0;const t=this.getMap();t&&t.getView().endInteraction(void 0,this.lastDelta_?this.lastDelta_>0?1:-1:0,this.lastAnchor_)}handleEvent(t){if(!this.condition_(t))return!0;if(t.type!==L.Z.WHEEL)return!0;const e=t.map,i=t.originalEvent;let n;if(i.preventDefault(),this.useAnchor_&&(this.lastAnchor_=t.coordinate),t.type==L.Z.WHEEL&&(n=i.deltaY,Y.V&&i.deltaMode===WheelEvent.DOM_DELTA_PIXEL&&(n/=Y.MP),i.deltaMode===WheelEvent.DOM_DELTA_LINE&&(n*=40)),0===n)return!1;this.lastDelta_=n;const s=Date.now();void 0===this.startTime_&&(this.startTime_=s),(!this.mode_||s-this.startTime_>this.trackpadEventGap_)&&(this.mode_=Math.abs(n)<4?"trackpad":"wheel");const r=e.getView();if("trackpad"===this.mode_&&!r.getConstrainResolution()&&!this.constrainResolution_)return this.trackpadTimeoutId_?clearTimeout(this.trackpadTimeoutId_):(r.getAnimating()&&r.cancelAnimations(),r.beginInteraction()),this.trackpadTimeoutId_=setTimeout(this.endInteraction_.bind(this),this.timeout_),r.adjustZoom(-n/this.deltaPerZoom_,this.lastAnchor_),this.startTime_=s,!1;this.totalDelta_+=n;const o=Math.max(this.timeout_-(s-this.startTime_),0);return clearTimeout(this.timeoutId_),this.timeoutId_=setTimeout(this.handleWheelZoom_.bind(this,e),o),!1}handleWheelZoom_(t){const e=t.getView();e.getAnimating()&&e.cancelAnimations();let i=-(0,Wt.uZ)(this.totalDelta_,-this.maxDelta_*this.deltaPerZoom_,this.maxDelta_*this.deltaPerZoom_)/this.deltaPerZoom_;(e.getConstrainResolution()||this.constrainResolution_)&&(i=i?i>0?1:-1:0),pt(e,i,this.lastAnchor_,this.duration_),this.mode_=void 0,this.totalDelta_=0,this.lastAnchor_=null,this.startTime_=void 0,this.timeoutId_=void 0}setMouseAnchor(t){this.useAnchor_=t,t||(this.lastAnchor_=null)}},Ut=class extends xt{constructor(t){const e=t=t||{};e.stopDown||(e.stopDown=g.Dv),super(e),this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.threshold_=void 0!==t.threshold?t.threshold:.3,this.duration_=void 0!==t.duration?t.duration:250}handleDragEvent(t){let e=0;const i=this.targetPointers[0],n=this.targetPointers[1],s=Math.atan2(n.clientY-i.clientY,n.clientX-i.clientX);if(void 0!==this.lastAngle_){const t=s-this.lastAngle_;this.rotationDelta_+=t,!this.rotating_&&Math.abs(this.rotationDelta_)>this.threshold_&&(this.rotating_=!0),e=t}this.lastAngle_=s;const r=t.map,o=r.getView();o.getConstraints().rotation!==Pt.h$&&(this.anchor_=r.getCoordinateFromPixelInternal(r.getEventPixel(yt(this.targetPointers))),this.rotating_&&(r.render(),o.adjustRotationInternal(e,this.anchor_)))}handleUpEvent(t){return!(this.targetPointers.length<2)||(t.map.getView().endInteraction(this.duration_),!1)}handleDownEvent(t){if(this.targetPointers.length>=2){const e=t.map;return this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.handlingDownUpSequence||e.getView().beginInteraction(),!0}return!1}},Yt=class extends xt{constructor(t){const e=t=t||{};e.stopDown||(e.stopDown=g.Dv),super(e),this.anchor_=null,this.duration_=void 0!==t.duration?t.duration:400,this.lastDistance_=void 0,this.lastScaleDelta_=1}handleDragEvent(t){let e=1;const i=this.targetPointers[0],n=this.targetPointers[1],s=i.clientX-n.clientX,r=i.clientY-n.clientY,o=Math.sqrt(s*s+r*r);void 0!==this.lastDistance_&&(e=this.lastDistance_/o),this.lastDistance_=o;const a=t.map,l=a.getView();1!=e&&(this.lastScaleDelta_=e),this.anchor_=a.getCoordinateFromPixelInternal(a.getEventPixel(yt(this.targetPointers))),a.render(),l.adjustResolutionInternal(e,this.anchor_)}handleUpEvent(t){if(this.targetPointers.length<2){const e=t.map.getView(),i=this.lastScaleDelta_>1?1:-1;return e.endInteraction(this.duration_,i),!1}return!0}handleDownEvent(t){if(this.targetPointers.length>=2){const e=t.map;return this.anchor_=null,this.lastDistance_=void 0,this.lastScaleDelta_=1,this.handlingDownUpSequence||e.getView().beginInteraction(),!0}return!1}};var Vt=i(8661),Xt=i(4307),Kt=i(44);function Ht(t){t instanceof v.Z?t.setMapInternal(null):t instanceof z&&t.getLayers().forEach(Ht)}function qt(t,e){if(t instanceof v.Z)t.setMapInternal(e);else if(t instanceof z){const i=t.getLayers().getArray();for(let t=0,n=i.length;t<n;++t)qt(i[t],e)}}class Jt extends n.Z{constructor(t){super(),t=t||{},this.on,this.once,this.un;const e=function(t){let e=null;void 0!==t.keyboardEventTarget&&(e="string"==typeof t.keyboardEventTarget?document.getElementById(t.keyboardEventTarget):t.keyboardEventTarget);const i={},n=t.layers&&"function"==typeof t.layers.getLayers?t.layers:new z({layers:t.layers});let s,r,o;return i[J]=n,i[Q]=t.target,i[tt]=t.view instanceof rt.ZP?t.view:new rt.ZP,void 0!==t.controls&&(Array.isArray(t.controls)?s=new u(t.controls.slice()):((0,O.h)("function"==typeof t.controls.getArray,47),s=t.controls)),void 0!==t.interactions&&(Array.isArray(t.interactions)?r=new u(t.interactions.slice()):((0,O.h)("function"==typeof t.interactions.getArray,48),r=t.interactions)),void 0!==t.overlays?Array.isArray(t.overlays)?o=new u(t.overlays.slice()):((0,O.h)("function"==typeof t.overlays.getArray,49),o=t.overlays):o=new u,{controls:s,interactions:r,keyboardEventTarget:e,overlays:o,values:i}}(t);this.renderComplete_,this.loaded_=!0,this.boundHandleBrowserEvent_=this.handleBrowserEvent.bind(this),this.maxTilesLoading_=void 0!==t.maxTilesLoading?t.maxTilesLoading:16,this.pixelRatio_=void 0!==t.pixelRatio?t.pixelRatio:Y.MP,this.postRenderTimeoutHandle_,this.animationDelayKey_,this.animationDelay_=this.animationDelay_.bind(this),this.coordinateToPixelTransform_=(0,f.Ue)(),this.pixelToCoordinateTransform_=(0,f.Ue)(),this.frameIndex_=0,this.frameState_=null,this.previousExtent_=null,this.viewPropertyListenerKey_=null,this.viewChangeListenerKey_=null,this.layerGroupPropertyListenerKeys_=null,this.viewport_=document.createElement("div"),this.viewport_.className="ol-viewport"+("ontouchstart"in window?" ol-touch":""),this.viewport_.style.position="relative",this.viewport_.style.overflow="hidden",this.viewport_.style.width="100%",this.viewport_.style.height="100%",this.overlayContainer_=document.createElement("div"),this.overlayContainer_.style.position="absolute",this.overlayContainer_.style.zIndex="0",this.overlayContainer_.style.width="100%",this.overlayContainer_.style.height="100%",this.overlayContainer_.style.pointerEvents="none",this.overlayContainer_.className="ol-overlaycontainer",this.viewport_.appendChild(this.overlayContainer_),this.overlayContainerStopEvent_=document.createElement("div"),this.overlayContainerStopEvent_.style.position="absolute",this.overlayContainerStopEvent_.style.zIndex="0",this.overlayContainerStopEvent_.style.width="100%",this.overlayContainerStopEvent_.style.height="100%",this.overlayContainerStopEvent_.style.pointerEvents="none",this.overlayContainerStopEvent_.className="ol-overlaycontainer-stopevent",this.viewport_.appendChild(this.overlayContainerStopEvent_),this.mapBrowserEventHandler_=null,this.moveTolerance_=t.moveTolerance,this.keyboardEventTarget_=e.keyboardEventTarget,this.targetChangeHandlerKeys_=null,this.targetElement_=null,this.resizeObserver_=new ResizeObserver((()=>this.updateSize())),this.controls=e.controls||function(t){t=t||{};const e=new u;return(void 0===t.zoom||t.zoom)&&e.push(new gt(t.zoomOptions)),(void 0===t.rotate||t.rotate)&&e.push(new dt(t.rotateOptions)),(void 0===t.attribution||t.attribution)&&e.push(new ct(t.attributionOptions)),e}(),this.interactions=e.interactions||function(t){t=t||{};const e=new u,i=new class{constructor(t,e,i){this.decay_=t,this.minVelocity_=e,this.delay_=i,this.points_=[],this.angle_=0,this.initialVelocity_=0}begin(){this.points_.length=0,this.angle_=0,this.initialVelocity_=0}update(t,e){this.points_.push(t,e,Date.now())}end(){if(this.points_.length<6)return!1;const t=Date.now()-this.delay_,e=this.points_.length-3;if(this.points_[e+2]<t)return!1;let i=e-3;for(;i>0&&this.points_[i+2]>t;)i-=3;const n=this.points_[e+2]-this.points_[i+2];if(n<1e3/60)return!1;const s=this.points_[e]-this.points_[i],r=this.points_[e+1]-this.points_[i+1];return this.angle_=Math.atan2(r,s),this.initialVelocity_=Math.sqrt(s*s+r*r)/n,this.initialVelocity_>this.minVelocity_}getDistance(){return(this.minVelocity_-this.initialVelocity_)/this.decay_}getAngle(){return this.angle_}}(-.005,.05,100);return(void 0===t.altShiftDragRotate||t.altShiftDragRotate)&&e.push(new Ot),(void 0===t.doubleClickZoom||t.doubleClickZoom)&&e.push(new vt({delta:t.zoomDelta,duration:t.zoomDuration})),(void 0===t.dragPan||t.dragPan)&&e.push(new Lt({onFocusOnly:t.onFocusOnly,kinetic:i})),(void 0===t.pinchRotate||t.pinchRotate)&&e.push(new Ut),(void 0===t.pinchZoom||t.pinchZoom)&&e.push(new Yt({duration:t.zoomDuration})),(void 0===t.keyboard||t.keyboard)&&(e.push(new Gt),e.push(new Bt({delta:t.zoomDelta,duration:t.zoomDuration}))),(void 0===t.mouseWheelZoom||t.mouseWheelZoom)&&e.push(new jt({onFocusOnly:t.onFocusOnly,duration:t.zoomDuration})),(void 0===t.shiftDragZoom||t.shiftDragZoom)&&e.push(new Nt({duration:t.zoomDuration})),e}({onFocusOnly:!0}),this.overlays_=e.overlays,this.overlayIdIndex_={},this.renderer_=null,this.postRenderFunctions_=[],this.tileQueue_=new st(this.getTilePriority.bind(this),this.handleTileChange_.bind(this)),this.addChangeListener(J,this.handleLayerGroupChanged_),this.addChangeListener(tt,this.handleViewChanged_),this.addChangeListener($,this.handleSizeChanged_),this.addChangeListener(Q,this.handleTargetChanged_),this.setProperties(e.values);const i=this;!t.view||t.view instanceof rt.ZP||t.view.then((function(t){i.setView(new rt.ZP(t))})),this.controls.addEventListener(r,(t=>{t.element.setMap(this)})),this.controls.addEventListener(o,(t=>{t.element.setMap(null)})),this.interactions.addEventListener(r,(t=>{t.element.setMap(this)})),this.interactions.addEventListener(o,(t=>{t.element.setMap(null)})),this.overlays_.addEventListener(r,(t=>{this.addOverlayInternal_(t.element)})),this.overlays_.addEventListener(o,(t=>{const e=t.element.getId();void 0!==e&&delete this.overlayIdIndex_[e.toString()],t.element.setMap(null)})),this.controls.forEach((t=>{t.setMap(this)})),this.interactions.forEach((t=>{t.setMap(this)})),this.overlays_.forEach(this.addOverlayInternal_.bind(this))}addControl(t){this.getControls().push(t)}addInteraction(t){this.getInteractions().push(t)}addLayer(t){this.getLayerGroup().getLayers().push(t)}handleLayerAdd_(t){qt(t.layer,this)}addOverlay(t){this.getOverlays().push(t)}addOverlayInternal_(t){const e=t.getId();void 0!==e&&(this.overlayIdIndex_[e.toString()]=t),t.setMap(this)}disposeInternal(){this.controls.clear(),this.interactions.clear(),this.overlays_.clear(),this.resizeObserver_.disconnect(),this.setTarget(null),super.disposeInternal()}forEachFeatureAtPixel(t,e,i){if(!this.frameState_||!this.renderer_)return;const n=this.getCoordinateFromPixelInternal(t),s=void 0!==(i=void 0!==i?i:{}).hitTolerance?i.hitTolerance:0,r=void 0!==i.layerFilter?i.layerFilter:g.uX,o=!1!==i.checkWrapped;return this.renderer_.forEachFeatureAtCoordinate(n,this.frameState_,s,o,e,null,r,null)}getFeaturesAtPixel(t,e){const i=[];return this.forEachFeatureAtPixel(t,(function(t){i.push(t)}),e),i}getAllLayers(){const t=[];return function e(i){i.forEach((function(i){i instanceof z?e(i.getLayers()):t.push(i)}))}(this.getLayers()),t}hasFeatureAtPixel(t,e){if(!this.frameState_||!this.renderer_)return!1;const i=this.getCoordinateFromPixelInternal(t),n=void 0!==(e=void 0!==e?e:{}).layerFilter?e.layerFilter:g.uX,s=void 0!==e.hitTolerance?e.hitTolerance:0,r=!1!==e.checkWrapped;return this.renderer_.hasFeatureAtCoordinate(i,this.frameState_,s,r,n,null)}getEventCoordinate(t){return this.getCoordinateFromPixel(this.getEventPixel(t))}getEventCoordinateInternal(t){return this.getCoordinateFromPixelInternal(this.getEventPixel(t))}getEventPixel(t){const e=this.viewport_.getBoundingClientRect(),i=this.getSize(),n=e.width/i[0],s=e.height/i[1],r="changedTouches"in t?t.changedTouches[0]:t;return[(r.clientX-e.left)/n,(r.clientY-e.top)/s]}getTarget(){return this.get(Q)}getTargetElement(){return this.targetElement_}getCoordinateFromPixel(t){return(0,Vt.lO)(this.getCoordinateFromPixelInternal(t),this.getView().getProjection())}getCoordinateFromPixelInternal(t){const e=this.frameState_;return e?(0,f.nn)(e.pixelToCoordinateTransform,t.slice()):null}getControls(){return this.controls}getOverlays(){return this.overlays_}getOverlayById(t){const e=this.overlayIdIndex_[t.toString()];return void 0!==e?e:null}getInteractions(){return this.interactions}getLayerGroup(){return this.get(J)}setLayers(t){const e=this.getLayerGroup();if(t instanceof u)return void e.setLayers(t);const i=e.getLayers();i.clear(),i.extend(t)}getLayers(){return this.getLayerGroup().getLayers()}getLoadingOrNotReady(){const t=this.getLayerGroup().getLayerStatesArray();for(let e=0,i=t.length;e<i;++e){const i=t[e];if(!i.visible)continue;const n=i.layer.getRenderer();if(n&&!n.ready)return!0;const s=i.layer.getSource();if(s&&s.loading)return!0}return!1}getPixelFromCoordinate(t){const e=(0,Vt.Vs)(t,this.getView().getProjection());return this.getPixelFromCoordinateInternal(e)}getPixelFromCoordinateInternal(t){const e=this.frameState_;return e?(0,f.nn)(e.coordinateToPixelTransform,t.slice(0,2)):null}getRenderer(){return this.renderer_}getSize(){return this.get($)}getView(){return this.get(tt)}getViewport(){return this.viewport_}getOverlayContainer(){return this.overlayContainer_}getOverlayContainerStopEvent(){return this.overlayContainerStopEvent_}getOwnerDocument(){const t=this.getTargetElement();return t?t.ownerDocument:document}getTilePriority(t,e,i,n){return function(t,e,i,n,s){if(!t||!(i in t.wantedTiles))return et;if(!t.wantedTiles[i][e.getKey()])return et;const r=t.viewState.center,o=n[0]-r[0],a=n[1]-r[1];return 65536*Math.log(s)+Math.sqrt(o*o+a*a)/s}(this.frameState_,t,e,i,n)}handleBrowserEvent(t,e){e=e||t.type;const i=new B(e,this,t);this.handleMapBrowserEvent(i)}handleMapBrowserEvent(t){if(!this.frameState_)return;const e=t.originalEvent,i=e.type;if(i===j||i===L.Z.WHEEL||i===L.Z.KEYDOWN){const t=this.getOwnerDocument(),i=this.viewport_.getRootNode?this.viewport_.getRootNode():t,n=e.target;if(this.overlayContainerStopEvent_.contains(n)||!(i===t?t.documentElement:i).contains(n))return}if(t.frameState=this.frameState_,!1!==this.dispatchEvent(t)){const e=this.getInteractions().getArray().slice();for(let i=e.length-1;i>=0;i--){const n=e[i];if(n.getMap()===this&&n.getActive()&&this.getTargetElement()&&(!n.handleEvent(t)||t.propagationStopped))break}}}handlePostRender(){const t=this.frameState_,e=this.tileQueue_;if(!e.isEmpty()){let i=this.maxTilesLoading_,n=i;if(t){const e=t.viewHints;if(e[ot.Z.ANIMATING]||e[ot.Z.INTERACTING]){const e=Date.now()-t.time>8;i=e?0:8,n=e?0:2}}e.getTilesLoading()<i&&(e.reprioritize(),e.loadMoreTiles(i,n))}t&&this.renderer_&&!t.animate&&(!0===this.renderComplete_?(this.hasListener(C.Z.RENDERCOMPLETE)&&this.renderer_.dispatchRenderEvent(C.Z.RENDERCOMPLETE,t),!1===this.loaded_&&(this.loaded_=!0,this.dispatchEvent(new G(q,this,t)))):!0===this.loaded_&&(this.loaded_=!1,this.dispatchEvent(new G(H,this,t))));const i=this.postRenderFunctions_;for(let e=0,n=i.length;e<n;++e)i[e](this,t);i.length=0}handleSizeChanged_(){this.getView()&&!this.getView().getAnimating()&&this.getView().resolveConstraints(0),this.render()}handleTargetChanged_(){if(this.mapBrowserEventHandler_){for(let t=0,e=this.targetChangeHandlerKeys_.length;t<e;++t)(0,I.bN)(this.targetChangeHandlerKeys_[t]);this.targetChangeHandlerKeys_=null,this.viewport_.removeEventListener(L.Z.CONTEXTMENU,this.boundHandleBrowserEvent_),this.viewport_.removeEventListener(L.Z.WHEEL,this.boundHandleBrowserEvent_),this.mapBrowserEventHandler_.dispose(),this.mapBrowserEventHandler_=null,(0,k.ZF)(this.viewport_)}if(this.targetElement_){this.resizeObserver_.unobserve(this.targetElement_);const t=this.targetElement_.getRootNode();t instanceof ShadowRoot&&this.resizeObserver_.unobserve(t.host)}const t=this.getTarget(),e="string"==typeof t?document.getElementById(t):t;if(this.targetElement_=e,e){e.appendChild(this.viewport_),this.renderer_||(this.renderer_=new M(this)),this.mapBrowserEventHandler_=new X(this,this.moveTolerance_);for(const t in W)this.mapBrowserEventHandler_.addEventListener(W[t],this.handleMapBrowserEvent.bind(this));this.viewport_.addEventListener(L.Z.CONTEXTMENU,this.boundHandleBrowserEvent_,!1),this.viewport_.addEventListener(L.Z.WHEEL,this.boundHandleBrowserEvent_,!!Y.bM&&{passive:!1});const t=this.keyboardEventTarget_?this.keyboardEventTarget_:e;this.targetChangeHandlerKeys_=[(0,I.oL)(t,L.Z.KEYDOWN,this.handleBrowserEvent,this),(0,I.oL)(t,L.Z.KEYPRESS,this.handleBrowserEvent,this)];const i=e.getRootNode();i instanceof ShadowRoot&&this.resizeObserver_.observe(i.host),this.resizeObserver_.observe(e)}else this.renderer_&&(clearTimeout(this.postRenderTimeoutHandle_),this.postRenderTimeoutHandle_=void 0,this.postRenderFunctions_.length=0,this.renderer_.dispose(),this.renderer_=null),this.animationDelayKey_&&(cancelAnimationFrame(this.animationDelayKey_),this.animationDelayKey_=void 0);this.updateSize()}handleTileChange_(){this.render()}handleViewPropertyChanged_(){this.render()}handleViewChanged_(){this.viewPropertyListenerKey_&&((0,I.bN)(this.viewPropertyListenerKey_),this.viewPropertyListenerKey_=null),this.viewChangeListenerKey_&&((0,I.bN)(this.viewChangeListenerKey_),this.viewChangeListenerKey_=null);const t=this.getView();t&&(this.updateViewportSize_(),this.viewPropertyListenerKey_=(0,I.oL)(t,E.Z.PROPERTYCHANGE,this.handleViewPropertyChanged_,this),this.viewChangeListenerKey_=(0,I.oL)(t,L.Z.CHANGE,this.handleViewPropertyChanged_,this),t.resolveConstraints(0)),this.render()}handleLayerGroupChanged_(){this.layerGroupPropertyListenerKeys_&&(this.layerGroupPropertyListenerKeys_.forEach(I.bN),this.layerGroupPropertyListenerKeys_=null);const t=this.getLayerGroup();t&&(this.handleLayerAdd_(new Z("addlayer",t)),this.layerGroupPropertyListenerKeys_=[(0,I.oL)(t,E.Z.PROPERTYCHANGE,this.render,this),(0,I.oL)(t,L.Z.CHANGE,this.render,this),(0,I.oL)(t,"addlayer",this.handleLayerAdd_,this),(0,I.oL)(t,"removelayer",this.handleLayerRemove_,this)]),this.render()}isRendered(){return!!this.frameState_}animationDelay_(){this.animationDelayKey_=void 0,this.renderFrame_(Date.now())}renderSync(){this.animationDelayKey_&&cancelAnimationFrame(this.animationDelayKey_),this.animationDelay_()}redrawText(){const t=this.getLayerGroup().getLayerStatesArray();for(let e=0,i=t.length;e<i;++e){const i=t[e].layer;i.hasRenderer()&&i.getRenderer().handleFontsChanged()}}render(){this.renderer_&&void 0===this.animationDelayKey_&&(this.animationDelayKey_=requestAnimationFrame(this.animationDelay_))}removeControl(t){return this.getControls().remove(t)}removeInteraction(t){return this.getInteractions().remove(t)}removeLayer(t){return this.getLayerGroup().getLayers().remove(t)}handleLayerRemove_(t){Ht(t.layer)}removeOverlay(t){return this.getOverlays().remove(t)}renderFrame_(t){const e=this.getSize(),i=this.getView(),n=this.frameState_;let s=null;if(void 0!==e&&(0,Xt.py)(e)&&i&&i.isDef()){const n=i.getHints(this.frameState_?this.frameState_.viewHints:void 0),r=i.getState();if(s={animate:!1,coordinateToPixelTransform:this.coordinateToPixelTransform_,declutterTree:null,extent:(0,p.p8)(r.center,r.resolution,r.rotation,e),index:this.frameIndex_++,layerIndex:0,layerStatesArray:this.getLayerGroup().getLayerStatesArray(),pixelRatio:this.pixelRatio_,pixelToCoordinateTransform:this.pixelToCoordinateTransform_,postRenderFunctions:[],size:e,tileQueue:this.tileQueue_,time:t,usedTiles:{},viewState:r,viewHints:n,wantedTiles:{},mapId:(0,_.sq)(this),renderTargets:{}},r.nextCenter&&r.nextResolution){const t=isNaN(r.nextRotation)?r.rotation:r.nextRotation;s.nextExtent=(0,p.p8)(r.nextCenter,r.nextResolution,t,e)}}this.frameState_=s,this.renderer_.renderFrame(s),s&&(s.animate&&this.render(),Array.prototype.push.apply(this.postRenderFunctions_,s.postRenderFunctions),n&&(!this.previousExtent_||!(0,p.xb)(this.previousExtent_)&&!(0,p.fS)(s.extent,this.previousExtent_))&&(this.dispatchEvent(new G("movestart",this,n)),this.previousExtent_=(0,p.YN)(this.previousExtent_)),this.previousExtent_&&!s.viewHints[ot.Z.ANIMATING]&&!s.viewHints[ot.Z.INTERACTING]&&!(0,p.fS)(s.extent,this.previousExtent_)&&(this.dispatchEvent(new G("moveend",this,s)),(0,p.d9)(s.extent,this.previousExtent_))),this.dispatchEvent(new G(K,this,s)),this.renderComplete_=this.hasListener(H)||this.hasListener(q)||this.hasListener(C.Z.RENDERCOMPLETE)?!this.tileQueue_.getTilesLoading()&&!this.tileQueue_.getCount()&&!this.getLoadingOrNotReady():void 0,this.postRenderTimeoutHandle_||(this.postRenderTimeoutHandle_=setTimeout((()=>{this.postRenderTimeoutHandle_=void 0,this.handlePostRender()}),0))}setLayerGroup(t){const e=this.getLayerGroup();e&&this.handleLayerRemove_(new Z("removelayer",e)),this.set(J,t)}setSize(t){this.set($,t)}setTarget(t){this.set(Q,t)}setView(t){if(!t||t instanceof rt.ZP)return void this.set(tt,t);this.set(tt,new rt.ZP);const e=this;t.then((function(t){e.setView(new rt.ZP(t))}))}updateSize(){const t=this.getTargetElement();let e;if(t){const i=getComputedStyle(t),n=t.offsetWidth-parseFloat(i.borderLeftWidth)-parseFloat(i.paddingLeft)-parseFloat(i.paddingRight)-parseFloat(i.borderRightWidth),s=t.offsetHeight-parseFloat(i.borderTopWidth)-parseFloat(i.paddingTop)-parseFloat(i.paddingBottom)-parseFloat(i.borderBottomWidth);isNaN(n)||isNaN(s)||(e=[n,s],!(0,Xt.py)(e)&&(t.offsetWidth||t.offsetHeight||t.getClientRects().length)&&(0,Kt.ZK)("No map visible because the map container's width or height are 0."))}const i=this.getSize();!e||i&&(0,ht.fS)(e,i)||(this.setSize(e),this.updateViewportSize_())}updateViewportSize_(){const t=this.getView();if(t){let e;const i=getComputedStyle(this.viewport_);i.width&&i.height&&(e=[parseInt(i.width,10),parseInt(i.height,10)]),t.setViewportSize(e)}}}const $t=Jt},2971:(t,e,i)=>{"use strict";i.d(e,{Z:()=>c});var n=i(291),s=i(5990),r=i(2706),o=i(4187),a=i(9374);class l extends n.ZP{constructor(t,e,i){super(t),this.key=e,this.oldValue=i}}class h extends r.Z{constructor(t){super(),this.on,this.once,this.un,(0,o.sq)(this),this.values_=null,void 0!==t&&this.setProperties(t)}get(t){let e;return this.values_&&this.values_.hasOwnProperty(t)&&(e=this.values_[t]),e}getKeys(){return this.values_&&Object.keys(this.values_)||[]}getProperties(){return this.values_&&Object.assign({},this.values_)||{}}hasProperties(){return!!this.values_}notify(t,e){let i;i=`change:${t}`,this.hasListener(i)&&this.dispatchEvent(new l(i,t,e)),i=s.Z.PROPERTYCHANGE,this.hasListener(i)&&this.dispatchEvent(new l(i,t,e))}addChangeListener(t,e){this.addEventListener(`change:${t}`,e)}removeChangeListener(t,e){this.removeEventListener(`change:${t}`,e)}set(t,e,i){const n=this.values_||(this.values_={});if(i)n[t]=e;else{const i=n[t];n[t]=e,i!==e&&this.notify(t,i)}}setProperties(t,e){for(const i in t)this.set(i,t[i],e)}applyProperties(t){t.values_&&Object.assign(this.values_||(this.values_={}),t.values_)}unset(t,e){if(this.values_&&t in this.values_){const i=this.values_[t];delete this.values_[t],(0,a.x)(this.values_)&&(this.values_=null),e||this.notify(t,i)}}}const c=h},5990:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={PROPERTYCHANGE:"propertychange"}},2706:(t,e,i)=>{"use strict";i.d(e,{Z:()=>a});var n=i(208),s=i(5487),r=i(5818);class o extends n.Z{constructor(){super(),this.on=this.onInternal,this.once=this.onceInternal,this.un=this.unInternal,this.revision_=0}changed(){++this.revision_,this.dispatchEvent(s.Z.CHANGE)}getRevision(){return this.revision_}onInternal(t,e){if(Array.isArray(t)){const i=t.length,n=new Array(i);for(let s=0;s<i;++s)n[s]=(0,r.oL)(this,t[s],e);return n}return(0,r.oL)(this,t,e)}onceInternal(t,e){let i;if(Array.isArray(t)){const n=t.length;i=new Array(n);for(let s=0;s<n;++s)i[s]=(0,r.Vx)(this,t[s],e)}else i=(0,r.Vx)(this,t,e);return e.ol_key=i,i}unInternal(t,e){const i=e.ol_key;if(i)!function(t){if(Array.isArray(t))for(let e=0,i=t.length;e<i;++e)(0,r.bN)(t[e]);else(0,r.bN)(t)}(i);else if(Array.isArray(t))for(let i=0,n=t.length;i<n;++i)this.removeEventListener(t[i],e);else this.removeEventListener(t,e)}}o.prototype.on,o.prototype.once,o.prototype.un;const a=o},4806:(t,e,i)=>{"use strict";i.d(e,{Z:()=>h});var n=i(208),s=i(5487),r=i(7195),o=i(4187),a=i(1015);class l extends n.Z{constructor(t,e,i){super(),i=i||{},this.tileCoord=t,this.state=e,this.interimTile=null,this.key="",this.transition_=void 0===i.transition?250:i.transition,this.transitionStarts_={},this.interpolate=!!i.interpolate}changed(){this.dispatchEvent(s.Z.CHANGE)}release(){this.state===r.Z.ERROR&&this.setState(r.Z.EMPTY)}getKey(){return this.key+"/"+this.tileCoord}getInterimTile(){if(!this.interimTile)return this;let t=this.interimTile;do{if(t.getState()==r.Z.LOADED)return this.transition_=0,t;t=t.interimTile}while(t);return this}refreshInterimChain(){if(!this.interimTile)return;let t=this.interimTile,e=this;do{if(t.getState()==r.Z.LOADED){t.interimTile=null;break}t.getState()==r.Z.LOADING?e=t:t.getState()==r.Z.IDLE?e.interimTile=t.interimTile:e=t,t=e.interimTile}while(t)}getTileCoord(){return this.tileCoord}getState(){return this.state}setState(t){if(this.state!==r.Z.ERROR&&this.state>t)throw new Error("Tile load sequence violation");this.state=t,this.changed()}load(){(0,o.O3)()}getAlpha(t,e){if(!this.transition_)return 1;let i=this.transitionStarts_[t];if(i){if(-1===i)return 1}else i=e,this.transitionStarts_[t]=i;const n=e-i+1e3/60;return n>=this.transition_?1:(0,a.YQ)(n/this.transition_)}inTransition(t){return!!this.transition_&&-1!==this.transitionStarts_[t]}endTransition(t){this.transition_&&(this.transitionStarts_[t]=-1)}}const h=l},5532:(t,e,i)=>{"use strict";i.d(e,{Z:()=>o});var n=i(9515);const s=class{constructor(t){this.highWaterMark=void 0!==t?t:2048,this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null}canExpireCache(){return this.highWaterMark>0&&this.getCount()>this.highWaterMark}expireCache(t){for(;this.canExpireCache();)this.pop()}clear(){this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null}containsKey(t){return this.entries_.hasOwnProperty(t)}forEach(t){let e=this.oldest_;for(;e;)t(e.value_,e.key_,this),e=e.newer}get(t,e){const i=this.entries_[t];return(0,n.h)(void 0!==i,15),i===this.newest_||(i===this.oldest_?(this.oldest_=this.oldest_.newer,this.oldest_.older=null):(i.newer.older=i.older,i.older.newer=i.newer),i.newer=null,i.older=this.newest_,this.newest_.newer=i,this.newest_=i),i.value_}remove(t){const e=this.entries_[t];return(0,n.h)(void 0!==e,15),e===this.newest_?(this.newest_=e.older,this.newest_&&(this.newest_.newer=null)):e===this.oldest_?(this.oldest_=e.newer,this.oldest_&&(this.oldest_.older=null)):(e.newer.older=e.older,e.older.newer=e.newer),delete this.entries_[t],--this.count_,e.value_}getCount(){return this.count_}getKeys(){const t=new Array(this.count_);let e,i=0;for(e=this.newest_;e;e=e.older)t[i++]=e.key_;return t}getValues(){const t=new Array(this.count_);let e,i=0;for(e=this.newest_;e;e=e.older)t[i++]=e.value_;return t}peekLast(){return this.oldest_.value_}peekLastKey(){return this.oldest_.key_}peekFirstKey(){return this.newest_.key_}peek(t){if(this.containsKey(t))return this.entries_[t].value_}pop(){const t=this.oldest_;return delete this.entries_[t.key_],t.newer&&(t.newer.older=null),this.oldest_=t.newer,this.oldest_||(this.newest_=null),--this.count_,t.value_}replace(t,e){this.get(t),this.entries_[t].value_=e}set(t,e){(0,n.h)(!(t in this.entries_),16);const i={key_:t,newer:null,older:this.newest_,value_:e};this.newest_?this.newest_.newer=i:this.oldest_=i,this.newest_=i,this.entries_[t]=i,++this.count_}setSize(t){this.highWaterMark=t}};var r=i(8634);const o=class extends s{clear(){for(;this.getCount()>0;)this.pop().release();super.clear()}expireCache(t){for(;this.canExpireCache()&&!(this.peekLast().getKey()in t);)this.pop().release()}pruneExceptNewestZ(){if(0===this.getCount())return;const t=this.peekFirstKey(),e=(0,r.Ul)(t)[0];this.forEach((t=>{t.tileCoord[0]!==e&&(this.remove((0,r.km)(t.tileCoord)),t.release())}))}}},2519:(t,e,i)=>{"use strict";i.d(e,{T:()=>s,Z:()=>r});class n{constructor(t,e,i,n){this.minX=t,this.maxX=e,this.minY=i,this.maxY=n}contains(t){return this.containsXY(t[1],t[2])}containsTileRange(t){return this.minX<=t.minX&&t.maxX<=this.maxX&&this.minY<=t.minY&&t.maxY<=this.maxY}containsXY(t,e){return this.minX<=t&&t<=this.maxX&&this.minY<=e&&e<=this.maxY}equals(t){return this.minX==t.minX&&this.minY==t.minY&&this.maxX==t.maxX&&this.maxY==t.maxY}extend(t){t.minX<this.minX&&(this.minX=t.minX),t.maxX>this.maxX&&(this.maxX=t.maxX),t.minY<this.minY&&(this.minY=t.minY),t.maxY>this.maxY&&(this.maxY=t.maxY)}getHeight(){return this.maxY-this.minY+1}getSize(){return[this.getWidth(),this.getHeight()]}getWidth(){return this.maxX-this.minX+1}intersects(t){return this.minX<=t.maxX&&this.maxX>=t.minX&&this.minY<=t.maxY&&this.maxY>=t.minY}}function s(t,e,i,s,r){return void 0!==r?(r.minX=t,r.maxX=e,r.minY=i,r.maxY=s,r):new n(t,e,i,s)}const r=n},7195:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={IDLE:0,LOADING:1,LOADED:2,ERROR:3,EMPTY:4}},9090:(t,e,i)=>{"use strict";i.d(e,{ZP:()=>T});var n=i(2971),s=i(7755);const r={CENTER:"center",RESOLUTION:"resolution",ROTATION:"rotation"};var o=i(4768),a=i(8661),l=i(6885),h=i(1900),c=i(9515),u=i(3983);function d(t,e,i){return function(n,s,r,o,a){if(!n)return;if(!s&&!e)return n;const l=e?0:r[0]*s,h=e?0:r[1]*s,c=a?a[0]:0,d=a?a[1]:0;let g=t[0]+l/2+c,_=t[2]-l/2+c,f=t[1]+h/2+d,p=t[3]-h/2+d;g>_&&(g=(_+g)/2,_=g),f>p&&(f=(p+f)/2,p=f);let m=(0,u.uZ)(n[0],g,_),v=(0,u.uZ)(n[1],f,p);if(o&&i&&s){const t=30*s;m+=-t*Math.log(1+Math.max(0,g-n[0])/t)+t*Math.log(1+Math.max(0,n[0]-_)/t),v+=-t*Math.log(1+Math.max(0,f-n[1])/t)+t*Math.log(1+Math.max(0,n[1]-p)/t)}return[m,v]}}function g(t){return t}var _=i(8641),f=i(5537);function p(t,e,i,n){const s=(0,_.dz)(e)/i[0],r=(0,_.Cr)(e)/i[1];return n?Math.min(t,Math.max(s,r)):Math.min(t,Math.min(s,r))}function m(t,e,i){let n=Math.min(t,e);return n*=Math.log(1+50*Math.max(0,t/e-1))/50+1,i&&(n=Math.max(n,i),n/=Math.log(1+50*Math.max(0,i/t-1))/50+1),(0,u.uZ)(n,i/2,2*e)}function v(t,e,i,n,s){return i=void 0===i||i,function(r,o,a,l){if(void 0!==r){const o=n?p(t,n,a,s):t;return i&&l?m(r,o,e):(0,u.uZ)(r,e,o)}}}var y=i(828),x=i(1015),w=i(1082);class S extends n.Z{constructor(t){super(),this.on,this.once,this.un,t=Object.assign({},t),this.hints_=[0,0],this.animations_=[],this.updateAnimationKey_,this.projection_=(0,a.UQ)(t.projection,"EPSG:3857"),this.viewportSize_=[100,100],this.targetCenter_=null,this.targetResolution_,this.targetRotation_,this.nextCenter_=null,this.nextResolution_,this.nextRotation_,this.cancelAnchor_=void 0,t.projection&&(0,a.h_)(),t.center&&(t.center=(0,a.Vs)(t.center,this.projection_)),t.extent&&(t.extent=(0,a.dY)(t.extent,this.projection_)),this.applyOptions_(t)}applyOptions_(t){const e=Object.assign({},t);for(const t in r)delete e[t];this.setProperties(e,!0);const i=function(t){let e,i,n;let s=void 0!==t.minZoom?t.minZoom:0,r=void 0!==t.maxZoom?t.maxZoom:28;const l=void 0!==t.zoomFactor?t.zoomFactor:2,h=void 0!==t.multiWorld&&t.multiWorld,c=void 0===t.smoothResolutionConstraint||t.smoothResolutionConstraint,d=void 0!==t.showFullExtent&&t.showFullExtent,g=(0,a.UQ)(t.projection,"EPSG:3857"),y=g.getExtent();let x=t.constrainOnlyCenter,w=t.extent;if(h||w||!g.isGlobal()||(x=!1,w=y),void 0!==t.resolutions){const o=t.resolutions;i=o[s],n=void 0!==o[r]?o[r]:o[o.length-1],e=t.constrainResolution?function(t,e,i,n){return e=void 0===e||e,function(s,r,o,a){if(void 0!==s){const l=t[0],h=t[t.length-1],c=i?p(l,i,o,n):l;if(a)return e?m(s,c,h):(0,u.uZ)(s,h,c);const d=Math.min(c,s),g=Math.floor((0,f.h7)(t,d,r));return t[g]>c&&g<t.length-1?t[g+1]:t[g]}}}(o,c,!x&&w,d):v(i,n,c,!x&&w,d)}else{const h=(y?Math.max((0,_.dz)(y),(0,_.Cr)(y)):360*a.Wm.degrees/g.getMetersPerUnit())/o.S/Math.pow(2,0),f=h/Math.pow(2,28);i=t.maxResolution,void 0!==i?s=0:i=h/Math.pow(l,s),n=t.minResolution,void 0===n&&(n=void 0!==t.maxZoom?void 0!==t.maxResolution?i/Math.pow(l,r):h/Math.pow(l,r):f),r=s+Math.floor(Math.log(i/n)/Math.log(l)),n=i/Math.pow(l,r-s),e=t.constrainResolution?function(t,e,i,n,s,r){return n=void 0===n||n,i=void 0!==i?i:0,function(o,a,l,h){if(void 0!==o){const c=s?p(e,s,l,r):e;if(h)return n?m(o,c,i):(0,u.uZ)(o,i,c);const d=1e-9,g=Math.ceil(Math.log(e/c)/Math.log(t)-d),_=-a*(.5-d)+.5,f=Math.min(c,o),v=Math.floor(Math.log(e/f)/Math.log(t)+_),y=Math.max(g,v),x=e/Math.pow(t,y);return(0,u.uZ)(x,i,c)}}}(l,i,n,c,!x&&w,d):v(i,n,c,!x&&w,d)}return{constraint:e,maxResolution:i,minResolution:n,minZoom:s,zoomFactor:l}}(t);this.maxResolution_=i.maxResolution,this.minResolution_=i.minResolution,this.zoomFactor_=i.zoomFactor,this.resolutions_=t.resolutions,this.padding_=t.padding,this.minZoom_=i.minZoom;const n=function(t){if(void 0!==t.extent){const e=void 0===t.smoothExtentConstraint||t.smoothExtentConstraint;return d(t.extent,t.constrainOnlyCenter,e)}const e=(0,a.UQ)(t.projection,"EPSG:3857");if(!0!==t.multiWorld&&e.isGlobal()){const t=e.getExtent().slice();return t[0]=-1/0,t[2]=1/0,d(t,!1,!1)}return g}(t),s=i.constraint,l=function(t){if(void 0===t.enableRotation||t.enableRotation){const e=t.constrainRotation;return void 0===e||!0===e?(0,y.Gw)():!1===e?y.YP:"number"==typeof e?(0,y.gE)(e):y.YP}return y.h$}(t);this.constraints_={center:n,resolution:s,rotation:l},this.setRotation(void 0!==t.rotation?t.rotation:0),this.setCenterInternal(void 0!==t.center?t.center:null),void 0!==t.resolution?this.setResolution(t.resolution):void 0!==t.zoom&&this.setZoom(t.zoom)}get padding(){return this.padding_}set padding(t){let e=this.padding_;this.padding_=t;const i=this.getCenter();if(i){const n=t||[0,0,0,0];e=e||[0,0,0,0];const s=this.getResolution(),r=s/2*(n[3]-e[3]+e[1]-n[1]),o=s/2*(n[0]-e[0]+e[2]-n[2]);this.setCenterInternal([i[0]+r,i[1]-o])}}getUpdatedOptions_(t){const e=this.getProperties();return void 0!==e.resolution?e.resolution=this.getResolution():e.zoom=this.getZoom(),e.center=this.getCenterInternal(),e.rotation=this.getRotation(),Object.assign({},e,t)}animate(t){this.isDef()&&!this.getAnimating()&&this.resolveConstraints(0);const e=new Array(arguments.length);for(let t=0;t<e.length;++t){let i=arguments[t];i.center&&(i=Object.assign({},i),i.center=(0,a.Vs)(i.center,this.getProjection())),i.anchor&&(i=Object.assign({},i),i.anchor=(0,a.Vs)(i.anchor,this.getProjection())),e[t]=i}this.animateInternal.apply(this,e)}animateInternal(t){let e,i=arguments.length;i>1&&"function"==typeof arguments[i-1]&&(e=arguments[i-1],--i);let n=0;for(;n<i&&!this.isDef();++n){const t=arguments[n];t.center&&this.setCenterInternal(t.center),void 0!==t.zoom?this.setZoom(t.zoom):t.resolution&&this.setResolution(t.resolution),void 0!==t.rotation&&this.setRotation(t.rotation)}if(n===i)return void(e&&E(e,!0));let r=Date.now(),o=this.targetCenter_.slice(),a=this.targetResolution_,l=this.targetRotation_;const h=[];for(;n<i;++n){const t=arguments[n],i={start:r,complete:!1,anchor:t.anchor,duration:void 0!==t.duration?t.duration:1e3,easing:t.easing||x.rd,callback:e};if(t.center&&(i.sourceCenter=o,i.targetCenter=t.center.slice(),o=i.targetCenter),void 0!==t.zoom?(i.sourceResolution=a,i.targetResolution=this.getResolutionForZoom(t.zoom),a=i.targetResolution):t.resolution&&(i.sourceResolution=a,i.targetResolution=t.resolution,a=i.targetResolution),void 0!==t.rotation){i.sourceRotation=l;const e=(0,u.$W)(t.rotation-l+Math.PI,2*Math.PI)-Math.PI;i.targetRotation=l+e,l=i.targetRotation}b(i)?i.complete=!0:r+=i.duration,h.push(i)}this.animations_.push(h),this.setHint(s.Z.ANIMATING,1),this.updateAnimations_()}getAnimating(){return this.hints_[s.Z.ANIMATING]>0}getInteracting(){return this.hints_[s.Z.INTERACTING]>0}cancelAnimations(){let t;this.setHint(s.Z.ANIMATING,-this.hints_[s.Z.ANIMATING]);for(let e=0,i=this.animations_.length;e<i;++e){const i=this.animations_[e];if(i[0].callback&&E(i[0].callback,!1),!t)for(let e=0,n=i.length;e<n;++e){const n=i[e];if(!n.complete){t=n.anchor;break}}}this.animations_.length=0,this.cancelAnchor_=t,this.nextCenter_=null,this.nextResolution_=NaN,this.nextRotation_=NaN}updateAnimations_(){if(void 0!==this.updateAnimationKey_&&(cancelAnimationFrame(this.updateAnimationKey_),this.updateAnimationKey_=void 0),!this.getAnimating())return;const t=Date.now();let e=!1;for(let i=this.animations_.length-1;i>=0;--i){const n=this.animations_[i];let r=!0;for(let i=0,s=n.length;i<s;++i){const s=n[i];if(s.complete)continue;const o=t-s.start;let a=s.duration>0?o/s.duration:1;a>=1?(s.complete=!0,a=1):r=!1;const l=s.easing(a);if(s.sourceCenter){const t=s.sourceCenter[0],e=s.sourceCenter[1],i=s.targetCenter[0],n=s.targetCenter[1];this.nextCenter_=s.targetCenter;const r=t+l*(i-t),o=e+l*(n-e);this.targetCenter_=[r,o]}if(s.sourceResolution&&s.targetResolution){const t=1===l?s.targetResolution:s.sourceResolution+l*(s.targetResolution-s.sourceResolution);if(s.anchor){const e=this.getViewportSize_(this.getRotation()),i=this.constraints_.resolution(t,0,e,!0);this.targetCenter_=this.calculateCenterZoom(i,s.anchor)}this.nextResolution_=s.targetResolution,this.targetResolution_=t,this.applyTargetState_(!0)}if(void 0!==s.sourceRotation&&void 0!==s.targetRotation){const t=1===l?(0,u.$W)(s.targetRotation+Math.PI,2*Math.PI)-Math.PI:s.sourceRotation+l*(s.targetRotation-s.sourceRotation);if(s.anchor){const e=this.constraints_.rotation(t,!0);this.targetCenter_=this.calculateCenterRotate(e,s.anchor)}this.nextRotation_=s.targetRotation,this.targetRotation_=t}if(this.applyTargetState_(!0),e=!0,!s.complete)break}if(r){this.animations_[i]=null,this.setHint(s.Z.ANIMATING,-1),this.nextCenter_=null,this.nextResolution_=NaN,this.nextRotation_=NaN;const t=n[0].callback;t&&E(t,!0)}}this.animations_=this.animations_.filter(Boolean),e&&void 0===this.updateAnimationKey_&&(this.updateAnimationKey_=requestAnimationFrame(this.updateAnimations_.bind(this)))}calculateCenterRotate(t,e){let i;const n=this.getCenterInternal();return void 0!==n&&(i=[n[0]-e[0],n[1]-e[1]],(0,h.U1)(i,t-this.getRotation()),(0,h.IH)(i,e)),i}calculateCenterZoom(t,e){let i;const n=this.getCenterInternal(),s=this.getResolution();return void 0!==n&&void 0!==s&&(i=[e[0]-t*(e[0]-n[0])/s,e[1]-t*(e[1]-n[1])/s]),i}getViewportSize_(t){const e=this.viewportSize_;if(t){const i=e[0],n=e[1];return[Math.abs(i*Math.cos(t))+Math.abs(n*Math.sin(t)),Math.abs(i*Math.sin(t))+Math.abs(n*Math.cos(t))]}return e}setViewportSize(t){this.viewportSize_=Array.isArray(t)?t.slice():[100,100],this.getAnimating()||this.resolveConstraints(0)}getCenter(){const t=this.getCenterInternal();return t?(0,a.lO)(t,this.getProjection()):t}getCenterInternal(){return this.get(r.CENTER)}getConstraints(){return this.constraints_}getConstrainResolution(){return this.get("constrainResolution")}getHints(t){return void 0!==t?(t[0]=this.hints_[0],t[1]=this.hints_[1],t):this.hints_.slice()}calculateExtent(t){const e=this.calculateExtentInternal(t);return(0,a.Fj)(e,this.getProjection())}calculateExtentInternal(t){t=t||this.getViewportSizeMinusPadding_();const e=this.getCenterInternal();(0,c.h)(e,1);const i=this.getResolution();(0,c.h)(void 0!==i,2);const n=this.getRotation();return(0,c.h)(void 0!==n,3),(0,_.p8)(e,i,n,t)}getMaxResolution(){return this.maxResolution_}getMinResolution(){return this.minResolution_}getMaxZoom(){return this.getZoomForResolution(this.minResolution_)}setMaxZoom(t){this.applyOptions_(this.getUpdatedOptions_({maxZoom:t}))}getMinZoom(){return this.getZoomForResolution(this.maxResolution_)}setMinZoom(t){this.applyOptions_(this.getUpdatedOptions_({minZoom:t}))}setConstrainResolution(t){this.applyOptions_(this.getUpdatedOptions_({constrainResolution:t}))}getProjection(){return this.projection_}getResolution(){return this.get(r.RESOLUTION)}getResolutions(){return this.resolutions_}getResolutionForExtent(t,e){return this.getResolutionForExtentInternal((0,a.dY)(t,this.getProjection()),e)}getResolutionForExtentInternal(t,e){e=e||this.getViewportSizeMinusPadding_();const i=(0,_.dz)(t)/e[0],n=(0,_.Cr)(t)/e[1];return Math.max(i,n)}getResolutionForValueFunction(t){t=t||2;const e=this.getConstrainedResolution(this.maxResolution_),i=this.minResolution_,n=Math.log(e/i)/Math.log(t);return function(i){return e/Math.pow(t,i*n)}}getRotation(){return this.get(r.ROTATION)}getValueForResolutionFunction(t){const e=Math.log(t||2),i=this.getConstrainedResolution(this.maxResolution_),n=this.minResolution_,s=Math.log(i/n)/e;return function(t){return Math.log(i/t)/e/s}}getViewportSizeMinusPadding_(t){let e=this.getViewportSize_(t);const i=this.padding_;return i&&(e=[e[0]-i[1]-i[3],e[1]-i[0]-i[2]]),e}getState(){const t=this.getProjection(),e=this.getResolution(),i=this.getRotation();let n=this.getCenterInternal();const s=this.padding_;if(s){const t=this.getViewportSizeMinusPadding_();n=C(n,this.getViewportSize_(),[t[0]/2+s[3],t[1]/2+s[0]],e,i)}return{center:n.slice(0),projection:void 0!==t?t:null,resolution:e,nextCenter:this.nextCenter_,nextResolution:this.nextResolution_,nextRotation:this.nextRotation_,rotation:i,zoom:this.getZoom()}}getZoom(){let t;const e=this.getResolution();return void 0!==e&&(t=this.getZoomForResolution(e)),t}getZoomForResolution(t){let e,i,n=this.minZoom_||0;if(this.resolutions_){const s=(0,f.h7)(this.resolutions_,t,1);n=s,e=this.resolutions_[s],i=s==this.resolutions_.length-1?2:e/this.resolutions_[s+1]}else e=this.maxResolution_,i=this.zoomFactor_;return n+Math.log(e/t)/Math.log(i)}getResolutionForZoom(t){if(this.resolutions_){if(this.resolutions_.length<=1)return 0;const e=(0,u.uZ)(Math.floor(t),0,this.resolutions_.length-2),i=this.resolutions_[e]/this.resolutions_[e+1];return this.resolutions_[e]/Math.pow(i,(0,u.uZ)(t-e,0,1))}return this.maxResolution_/Math.pow(this.zoomFactor_,t-this.minZoom_)}fit(t,e){let i;if((0,c.h)(Array.isArray(t)||"function"==typeof t.getSimplifiedGeometry,24),Array.isArray(t)){(0,c.h)(!(0,_.xb)(t),25);const e=(0,a.dY)(t,this.getProjection());i=(0,w.oJ)(e)}else if("Circle"===t.getType()){const e=(0,a.dY)(t.getExtent(),this.getProjection());i=(0,w.oJ)(e),i.rotate(this.getRotation(),(0,_.qg)(e))}else{const e=(0,a.Cs)();i=e?t.clone().transform(e,this.getProjection()):t}this.fitInternal(i,e)}rotatedExtentForGeometry(t){const e=this.getRotation(),i=Math.cos(e),n=Math.sin(-e),s=t.getFlatCoordinates(),r=t.getStride();let o=1/0,a=1/0,l=-1/0,h=-1/0;for(let t=0,e=s.length;t<e;t+=r){const e=s[t]*i-s[t+1]*n,r=s[t]*n+s[t+1]*i;o=Math.min(o,e),a=Math.min(a,r),l=Math.max(l,e),h=Math.max(h,r)}return[o,a,l,h]}fitInternal(t,e){let i=(e=e||{}).size;i||(i=this.getViewportSizeMinusPadding_());const n=void 0!==e.padding?e.padding:[0,0,0,0],s=void 0!==e.nearest&&e.nearest;let r;r=void 0!==e.minResolution?e.minResolution:void 0!==e.maxZoom?this.getResolutionForZoom(e.maxZoom):0;const o=this.rotatedExtentForGeometry(t);let a=this.getResolutionForExtentInternal(o,[i[0]-n[1]-n[3],i[1]-n[0]-n[2]]);a=isNaN(a)?r:Math.max(a,r),a=this.getConstrainedResolution(a,s?0:1);const h=this.getRotation(),c=Math.sin(h),u=Math.cos(h),d=(0,_.qg)(o);d[0]+=(n[1]-n[3])/2*a,d[1]+=(n[0]-n[2])/2*a;const g=d[0]*u-d[1]*c,f=d[1]*u+d[0]*c,p=this.getConstrainedCenter([g,f],a),m=e.callback?e.callback:l.Zn;void 0!==e.duration?this.animateInternal({resolution:a,center:p,duration:e.duration,easing:e.easing},m):(this.targetResolution_=a,this.targetCenter_=p,this.applyTargetState_(!1,!0),E(m,!0))}centerOn(t,e,i){this.centerOnInternal((0,a.Vs)(t,this.getProjection()),e,i)}centerOnInternal(t,e,i){this.setCenterInternal(C(t,e,i,this.getResolution(),this.getRotation()))}calculateCenterShift(t,e,i,n){let s;const r=this.padding_;if(r&&t){const o=this.getViewportSizeMinusPadding_(-i),a=C(t,n,[o[0]/2+r[3],o[1]/2+r[0]],e,i);s=[t[0]-a[0],t[1]-a[1]]}return s}isDef(){return!!this.getCenterInternal()&&void 0!==this.getResolution()}adjustCenter(t){const e=(0,a.lO)(this.targetCenter_,this.getProjection());this.setCenter([e[0]+t[0],e[1]+t[1]])}adjustCenterInternal(t){const e=this.targetCenter_;this.setCenterInternal([e[0]+t[0],e[1]+t[1]])}adjustResolution(t,e){e=e&&(0,a.Vs)(e,this.getProjection()),this.adjustResolutionInternal(t,e)}adjustResolutionInternal(t,e){const i=this.getAnimating()||this.getInteracting(),n=this.getViewportSize_(this.getRotation()),s=this.constraints_.resolution(this.targetResolution_*t,0,n,i);e&&(this.targetCenter_=this.calculateCenterZoom(s,e)),this.targetResolution_*=t,this.applyTargetState_()}adjustZoom(t,e){this.adjustResolution(Math.pow(this.zoomFactor_,-t),e)}adjustRotation(t,e){e&&(e=(0,a.Vs)(e,this.getProjection())),this.adjustRotationInternal(t,e)}adjustRotationInternal(t,e){const i=this.getAnimating()||this.getInteracting(),n=this.constraints_.rotation(this.targetRotation_+t,i);e&&(this.targetCenter_=this.calculateCenterRotate(n,e)),this.targetRotation_+=t,this.applyTargetState_()}setCenter(t){this.setCenterInternal(t?(0,a.Vs)(t,this.getProjection()):t)}setCenterInternal(t){this.targetCenter_=t,this.applyTargetState_()}setHint(t,e){return this.hints_[t]+=e,this.changed(),this.hints_[t]}setResolution(t){this.targetResolution_=t,this.applyTargetState_()}setRotation(t){this.targetRotation_=t,this.applyTargetState_()}setZoom(t){this.setResolution(this.getResolutionForZoom(t))}applyTargetState_(t,e){const i=this.getAnimating()||this.getInteracting()||e,n=this.constraints_.rotation(this.targetRotation_,i),s=this.getViewportSize_(n),o=this.constraints_.resolution(this.targetResolution_,0,s,i),a=this.constraints_.center(this.targetCenter_,o,s,i,this.calculateCenterShift(this.targetCenter_,o,n,s));this.get(r.ROTATION)!==n&&this.set(r.ROTATION,n),this.get(r.RESOLUTION)!==o&&(this.set(r.RESOLUTION,o),this.set("zoom",this.getZoom(),!0)),a&&this.get(r.CENTER)&&(0,h.fS)(this.get(r.CENTER),a)||this.set(r.CENTER,a),this.getAnimating()&&!t&&this.cancelAnimations(),this.cancelAnchor_=void 0}resolveConstraints(t,e,i){t=void 0!==t?t:200;const n=e||0,s=this.constraints_.rotation(this.targetRotation_),r=this.getViewportSize_(s),o=this.constraints_.resolution(this.targetResolution_,n,r),a=this.constraints_.center(this.targetCenter_,o,r,!1,this.calculateCenterShift(this.targetCenter_,o,s,r));if(0===t&&!this.cancelAnchor_)return this.targetResolution_=o,this.targetRotation_=s,this.targetCenter_=a,void this.applyTargetState_();i=i||(0===t?this.cancelAnchor_:void 0),this.cancelAnchor_=void 0,this.getResolution()===o&&this.getRotation()===s&&this.getCenterInternal()&&(0,h.fS)(this.getCenterInternal(),a)||(this.getAnimating()&&this.cancelAnimations(),this.animateInternal({rotation:s,center:a,resolution:o,duration:t,easing:x.Vv,anchor:i}))}beginInteraction(){this.resolveConstraints(0),this.setHint(s.Z.INTERACTING,1)}endInteraction(t,e,i){i=i&&(0,a.Vs)(i,this.getProjection()),this.endInteractionInternal(t,e,i)}endInteractionInternal(t,e,i){this.setHint(s.Z.INTERACTING,-1),this.resolveConstraints(t,e,i)}getConstrainedCenter(t,e){const i=this.getViewportSize_(this.getRotation());return this.constraints_.center(t,e||this.getResolution(),i)}getConstrainedZoom(t,e){const i=this.getResolutionForZoom(t);return this.getZoomForResolution(this.getConstrainedResolution(i,e))}getConstrainedResolution(t,e){e=e||0;const i=this.getViewportSize_(this.getRotation());return this.constraints_.resolution(t,e,i)}}function E(t,e){setTimeout((function(){t(e)}),0)}function b(t){return!(t.sourceCenter&&t.targetCenter&&!(0,h.fS)(t.sourceCenter,t.targetCenter))&&t.sourceResolution===t.targetResolution&&t.sourceRotation===t.targetRotation}function C(t,e,i,n,s){const r=Math.cos(-s);let o=Math.sin(-s),a=t[0]*r-t[1]*o,l=t[1]*r+t[0]*o;return a+=(e[0]/2-i[0])*n,l+=(i[1]-e[1]/2)*n,o=-o,[a*r-l*o,l*r+a*o]}const T=S},7755:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={ANIMATING:0,INTERACTING:1}},5537:(t,e,i)=>{"use strict";function n(t,e,i){let n,r;i=i||s;let o=0,a=t.length,l=!1;for(;o<a;)n=o+(a-o>>1),r=+i(t[n],e),r<0?o=n+1:(a=n,l=!r);return l?o:~o}function s(t,e){return t>e?1:t<e?-1:0}function r(t,e,i){const n=t.length;if(t[0]<=e)return 0;if(e<=t[n-1])return n-1;let s;if(i>0){for(s=1;s<n;++s)if(t[s]<e)return s-1}else if(i<0){for(s=1;s<n;++s)if(t[s]<=e)return s}else for(s=1;s<n;++s){if(t[s]==e)return s;if(t[s]<e)return"function"==typeof i?i(e,t[s-1],t[s])>0?s-1:s:t[s-1]-e<e-t[s]?s-1:s}return n-1}function o(t,e,i){for(;e<i;){const n=t[e];t[e]=t[i],t[i]=n,++e,--i}}function a(t,e){const i=Array.isArray(e)?e:[e],n=i.length;for(let e=0;e<n;e++)t[t.length]=i[e]}function l(t,e){const i=t.length;if(i!==e.length)return!1;for(let n=0;n<i;n++)if(t[n]!==e[n])return!1;return!0}function h(t,e,i){const n=e||s;return t.every((function(e,s){if(0===s)return!0;const r=n(t[s-1],e);return!(r>0||i&&0===r)}))}i.d(e,{FZ:()=>o,fS:()=>l,h7:()=>r,j2:()=>s,l7:()=>a,pT:()=>h,ry:()=>n})},9515:(t,e,i)=>{"use strict";i.d(e,{h:()=>s});var n=i(6813);function s(t,e){if(!t)throw new n.Z(e)}},9706:(t,e,i)=>{"use strict";i.d(e,{BB:()=>u,XC:()=>a,_2:()=>h});var n=i(9515),s=i(3983);const r=/^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i,o=/^([a-z]*)$|^hsla?\(.*\)$/i;function a(t){return"string"==typeof t?t:u(t)}const l=function(){const t={};let e=0;return function(i){let s;if(t.hasOwnProperty(i))s=t[i];else{if(e>=1024){let i=0;for(const n in t)0==(3&i++)&&(delete t[n],--e)}s=function(t){let e,i,s,a,l;if(o.exec(t)&&(t=function(t){const e=document.createElement("div");if(e.style.color=t,""!==e.style.color){document.body.appendChild(e);const t=getComputedStyle(e).color;return document.body.removeChild(e),t}return""}(t)),r.exec(t)){const n=t.length-1;let r;r=n<=4?1:2;const o=4===n||8===n;e=parseInt(t.substr(1+0*r,r),16),i=parseInt(t.substr(1+1*r,r),16),s=parseInt(t.substr(1+2*r,r),16),a=o?parseInt(t.substr(1+3*r,r),16):255,1==r&&(e=(e<<4)+e,i=(i<<4)+i,s=(s<<4)+s,o&&(a=(a<<4)+a)),l=[e,i,s,a/255]}else t.startsWith("rgba(")?(l=t.slice(5,-1).split(",").map(Number),c(l)):t.startsWith("rgb(")?(l=t.slice(4,-1).split(",").map(Number),l.push(1),c(l)):(0,n.h)(!1,14);return l}(i),t[i]=s,++e}return s}}();function h(t){return Array.isArray(t)?t:l(t)}function c(t){return t[0]=(0,s.uZ)(t[0]+.5|0,0,255),t[1]=(0,s.uZ)(t[1]+.5|0,0,255),t[2]=(0,s.uZ)(t[2]+.5|0,0,255),t[3]=(0,s.uZ)(t[3],0,1),t}function u(t){let e=t[0];e!=(0|e)&&(e=e+.5|0);let i=t[1];i!=(0|i)&&(i=i+.5|0);let n=t[2];return n!=(0|n)&&(n=n+.5|0),"rgba("+e+","+i+","+n+","+(void 0===t[3]?1:Math.round(100*t[3])/100)+")"}},6620:(t,e,i)=>{"use strict";i.d(e,{y:()=>s});var n=i(9706);function s(t){return Array.isArray(t)?(0,n.BB)(t):t}},44:(t,e,i)=>{"use strict";i.d(e,{ZK:()=>r});const n={info:1,warn:2,error:3,none:4};let s=n.info;function r(...t){s>n.warn||console.warn(...t)}},1900:(t,e,i)=>{"use strict";i.d(e,{Cf:()=>l,IH:()=>s,U1:()=>o,bA:()=>a,fS:()=>r});var n=i(8641);function s(t,e){return t[0]+=+e[0],t[1]+=+e[1],t}function r(t,e){let i=!0;for(let n=t.length-1;n>=0;--n)if(t[n]!=e[n]){i=!1;break}return i}function o(t,e){const i=Math.cos(e),n=Math.sin(e),s=t[0]*i-t[1]*n,r=t[1]*i+t[0]*n;return t[0]=s,t[1]=r,t}function a(t,e){return t[0]*=e,t[1]*=e,t}function l(t,e){if(e.canWrapX()){const i=(0,n.dz)(e.getExtent()),s=function(t,e,i){const s=e.getExtent();let r=0;return e.canWrapX()&&(t[0]<s[0]||t[0]>s[2])&&(i=i||(0,n.dz)(s),r=Math.floor((t[0]-s[0])/i)),r}(t,e,i);s&&(t[0]-=s*i)}return t}},245:(t,e,i)=>{"use strict";i.d(e,{XV:()=>s,hN:()=>o,hg:()=>r,oj:()=>n,p:()=>h});const n="ol-hidden",s="ol-unselectable",r="ol-control",o="ol-collapsed",a=new RegExp(["^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)","(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)","(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)","(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?","(?:small|large)|medium|smaller|larger|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))","(?:\\s*\\/\\s*(normal|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])?))","?\\s*([-,\\\"\\'\\sa-z]+?)\\s*$"].join(""),"i"),l=["style","variant","weight","size","lineHeight","family"],h=function(t){const e=t.match(a);if(!e)return null;const i={lineHeight:"normal",size:"1.2em",style:"normal",weight:"normal",variant:"normal"};for(let t=0,n=l.length;t<n;++t){const n=e[t+1];void 0!==n&&(i[l[t]]=n)}return i.families=i.family.split(/,\s?/),i}},8326:(t,e,i)=>{"use strict";i.d(e,{$H:()=>o,E4:()=>s,ZF:()=>a,ep:()=>l,hF:()=>h,jy:()=>r});var n=i(177);function s(t,e,i,s){let r;return r=i&&i.length?i.shift():n.Id?new OffscreenCanvas(t||300,e||300):document.createElement("canvas"),t&&(r.width=t),e&&(r.height=e),r.getContext("2d",s)}function r(t){const e=t.canvas;e.width=1,e.height=1,t.clearRect(0,0,1,1)}function o(t,e){const i=e.parentNode;i&&i.replaceChild(t,e)}function a(t){return t&&t.parentNode?t.parentNode.removeChild(t):null}function l(t){for(;t.lastChild;)t.removeChild(t.lastChild)}function h(t,e){const i=t.childNodes;for(let n=0;;++n){const s=i[n],r=e[n];if(!s&&!r)break;s!==r&&(s?r?t.insertBefore(r,s):(t.removeChild(s),--n):t.appendChild(r))}}},1015:(t,e,i)=>{"use strict";function n(t){return Math.pow(t,3)}function s(t){return 1-n(1-t)}function r(t){return 3*t*t-2*t*t*t}function o(t){return t}i.d(e,{GE:()=>o,Vv:()=>s,YQ:()=>n,rd:()=>r})},5818:(t,e,i)=>{"use strict";i.d(e,{Vx:()=>r,bN:()=>o,oL:()=>s});var n=i(9374);function s(t,e,i,n,s){if(n&&n!==t&&(i=i.bind(n)),s){const n=i;i=function(){t.removeEventListener(e,i),n.apply(this,arguments)}}const r={target:t,type:e,listener:i};return t.addEventListener(e,i),r}function r(t,e,i,n){return s(t,e,i,n,!0)}function o(t){t&&t.target&&(t.target.removeEventListener(t.type,t.listener),(0,n.Z)(t))}},291:(t,e,i)=>{"use strict";i.d(e,{ZP:()=>n});const n=class{constructor(t){this.propagationStopped,this.defaultPrevented,this.type=t,this.target=null}preventDefault(){this.defaultPrevented=!0}stopPropagation(){this.propagationStopped=!0}}},5487:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={CHANGE:"change",ERROR:"error",BLUR:"blur",CLEAR:"clear",CONTEXTMENU:"contextmenu",CLICK:"click",DBLCLICK:"dblclick",DRAGENTER:"dragenter",DRAGOVER:"dragover",DROP:"drop",FOCUS:"focus",KEYDOWN:"keydown",KEYPRESS:"keypress",LOAD:"load",RESIZE:"resize",TOUCHMOVE:"touchmove",WHEEL:"wheel"}},208:(t,e,i)=>{"use strict";i.d(e,{Z:()=>l});var n=i(5431),s=i(291),r=i(6885),o=i(9374);class a extends n.Z{constructor(t){super(),this.eventTarget_=t,this.pendingRemovals_=null,this.dispatching_=null,this.listeners_=null}addEventListener(t,e){if(!t||!e)return;const i=this.listeners_||(this.listeners_={}),n=i[t]||(i[t]=[]);n.includes(e)||n.push(e)}dispatchEvent(t){const e="string"==typeof t,i=e?t:t.type,n=this.listeners_&&this.listeners_[i];if(!n)return;const o=e?new s.ZP(t):t;o.target||(o.target=this.eventTarget_||this);const a=this.dispatching_||(this.dispatching_={}),l=this.pendingRemovals_||(this.pendingRemovals_={});let h;i in a||(a[i]=0,l[i]=0),++a[i];for(let t=0,e=n.length;t<e;++t)if(h="handleEvent"in n[t]?n[t].handleEvent(o):n[t].call(this,o),!1===h||o.propagationStopped){h=!1;break}if(0==--a[i]){let t=l[i];for(delete l[i];t--;)this.removeEventListener(i,r.Zn);delete a[i]}return h}disposeInternal(){this.listeners_&&(0,o.Z)(this.listeners_)}getListeners(t){return this.listeners_&&this.listeners_[t]||void 0}hasListener(t){return!!this.listeners_&&(t?t in this.listeners_:Object.keys(this.listeners_).length>0)}removeEventListener(t,e){const i=this.listeners_&&this.listeners_[t];if(i){const n=i.indexOf(e);-1!==n&&(this.pendingRemovals_&&t in this.pendingRemovals_?(i[n]=r.Zn,++this.pendingRemovals_[t]):(i.splice(n,1),0===i.length&&delete this.listeners_[t]))}}}const l=a},8641:(t,e,i)=>{"use strict";i.d(e,{Cr:()=>L,EO:()=>z,Ed:()=>P,GN:()=>m,H6:()=>E,HK:()=>p,I7:()=>N,Ne:()=>G,T9:()=>_,Wj:()=>x,Xv:()=>A,YN:()=>f,b8:()=>h,bg:()=>b,d9:()=>a,dY:()=>M,dz:()=>Z,f3:()=>o,fS:()=>v,g0:()=>I,hC:()=>C,hI:()=>r,jE:()=>u,kK:()=>F,l7:()=>y,lJ:()=>g,p8:()=>k,pX:()=>d,qP:()=>w,qf:()=>l,qg:()=>R,r4:()=>c,rL:()=>O,w$:()=>T,xb:()=>D});var n=i(8716),s=i(9515);function r(t){const e=[1/0,1/0,-1/0,-1/0];for(let i=0,n=t.length;i<n;++i)x(e,t[i]);return e}function o(t,e,i){return i?(i[0]=t[0]-e,i[1]=t[1]-e,i[2]=t[2]+e,i[3]=t[3]+e,i):[t[0]-e,t[1]-e,t[2]+e,t[3]+e]}function a(t,e){return e?(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e):t.slice()}function l(t,e,i){let n,s;return n=e<t[0]?t[0]-e:t[2]<e?e-t[2]:0,s=i<t[1]?t[1]-i:t[3]<i?i-t[3]:0,n*n+s*s}function h(t,e){return u(t,e[0],e[1])}function c(t,e){return t[0]<=e[0]&&e[2]<=t[2]&&t[1]<=e[1]&&e[3]<=t[3]}function u(t,e,i){return t[0]<=e&&e<=t[2]&&t[1]<=i&&i<=t[3]}function d(t,e){const i=t[0],s=t[1],r=t[2],o=t[3],a=e[0],l=e[1];let h=n.Z.UNKNOWN;return a<i?h|=n.Z.LEFT:a>r&&(h|=n.Z.RIGHT),l<s?h|=n.Z.BELOW:l>o&&(h|=n.Z.ABOVE),h===n.Z.UNKNOWN&&(h=n.Z.INTERSECTING),h}function g(){return[1/0,1/0,-1/0,-1/0]}function _(t,e,i,n,s){return s?(s[0]=t,s[1]=e,s[2]=i,s[3]=n,s):[t,e,i,n]}function f(t){return _(1/0,1/0,-1/0,-1/0,t)}function p(t,e){const i=t[0],n=t[1];return _(i,n,i,n,e)}function m(t,e,i,n,s){return w(f(s),t,e,i,n)}function v(t,e){return t[0]==e[0]&&t[2]==e[2]&&t[1]==e[1]&&t[3]==e[3]}function y(t,e){return e[0]<t[0]&&(t[0]=e[0]),e[2]>t[2]&&(t[2]=e[2]),e[1]<t[1]&&(t[1]=e[1]),e[3]>t[3]&&(t[3]=e[3]),t}function x(t,e){e[0]<t[0]&&(t[0]=e[0]),e[0]>t[2]&&(t[2]=e[0]),e[1]<t[1]&&(t[1]=e[1]),e[1]>t[3]&&(t[3]=e[1])}function w(t,e,i,n,s){for(;i<n;i+=s)S(t,e[i],e[i+1]);return t}function S(t,e,i){t[0]=Math.min(t[0],e),t[1]=Math.min(t[1],i),t[2]=Math.max(t[2],e),t[3]=Math.max(t[3],i)}function E(t,e){let i;return i=e(C(t)),i||(i=e(T(t)),i||(i=e(A(t)),i||(i=e(O(t)),i||!1)))}function b(t){let e=0;return D(t)||(e=Z(t)*L(t)),e}function C(t){return[t[0],t[1]]}function T(t){return[t[2],t[1]]}function R(t){return[(t[0]+t[2])/2,(t[1]+t[3])/2]}function I(t,e){let i;return"bottom-left"===e?i=C(t):"bottom-right"===e?i=T(t):"top-left"===e?i=O(t):"top-right"===e?i=A(t):(0,s.h)(!1,13),i}function k(t,e,i,n,s){const[r,o,a,l,h,c,u,d]=M(t,e,i,n);return _(Math.min(r,a,h,u),Math.min(o,l,c,d),Math.max(r,a,h,u),Math.max(o,l,c,d),s)}function M(t,e,i,n){const s=e*n[0]/2,r=e*n[1]/2,o=Math.cos(i),a=Math.sin(i),l=s*o,h=s*a,c=r*o,u=r*a,d=t[0],g=t[1];return[d-l+u,g-h-c,d-l-u,g-h+c,d+l-u,g+h+c,d+l+u,g+h-c,d-l+u,g-h-c]}function L(t){return t[3]-t[1]}function P(t,e,i){const n=i||[1/0,1/0,-1/0,-1/0];return F(t,e)?(t[0]>e[0]?n[0]=t[0]:n[0]=e[0],t[1]>e[1]?n[1]=t[1]:n[1]=e[1],t[2]<e[2]?n[2]=t[2]:n[2]=e[2],t[3]<e[3]?n[3]=t[3]:n[3]=e[3]):f(n),n}function O(t){return[t[0],t[3]]}function A(t){return[t[2],t[3]]}function Z(t){return t[2]-t[0]}function F(t,e){return t[0]<=e[2]&&t[2]>=e[0]&&t[1]<=e[3]&&t[3]>=e[1]}function D(t){return t[2]<t[0]||t[3]<t[1]}function z(t,e){return e?(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e):t}function N(t,e,i){let s=!1;const r=d(t,e),o=d(t,i);if(r===n.Z.INTERSECTING||o===n.Z.INTERSECTING)s=!0;else{const a=t[0],l=t[1],h=t[2],c=t[3],u=e[0],d=e[1],g=i[0],_=i[1],f=(_-d)/(g-u);let p,m;o&n.Z.ABOVE&&!(r&n.Z.ABOVE)&&(p=g-(_-c)/f,s=p>=a&&p<=h),s||!(o&n.Z.RIGHT)||r&n.Z.RIGHT||(m=_-(g-h)*f,s=m>=l&&m<=c),s||!(o&n.Z.BELOW)||r&n.Z.BELOW||(p=g-(_-l)/f,s=p>=a&&p<=h),s||!(o&n.Z.LEFT)||r&n.Z.LEFT||(m=_-(g-a)*f,s=m>=l&&m<=c)}return s}function G(t,e,i,n){let s=[];if(n>1){const e=t[2]-t[0],i=t[3]-t[1];for(let r=0;r<n;++r)s.push(t[0]+e*r/n,t[1],t[2],t[1]+i*r/n,t[2]-e*r/n,t[3],t[0],t[3]-i*r/n)}else s=[t[0],t[1],t[2],t[1],t[2],t[3],t[0],t[3]];e(s,s,2);const r=[],o=[];for(let t=0,e=s.length;t<e;t+=2)r.push(s[t]),o.push(s[t+1]);return function(t,e,i){return _(Math.min.apply(null,t),Math.min.apply(null,e),Math.max.apply(null,t),Math.max.apply(null,e),i)}(r,o,i)}},8716:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={UNKNOWN:0,INTERSECTING:1,ABOVE:2,RIGHT:4,BELOW:8,LEFT:16}},9646:(t,e,i)=>{"use strict";i.d(e,{ZP:()=>r});var n=i(4187),s=i(8661);const r=class{constructor(){this.dataProjection=void 0,this.defaultFeatureProjection=void 0,this.supportedMediaTypes=null}getReadOptions(t,e){if(e){let i=e.dataProjection?(0,s.U2)(e.dataProjection):this.readProjection(t);e.extent&&i&&"tile-pixels"===i.getUnits()&&(i=(0,s.U2)(i),i.setWorldExtent(e.extent)),e={dataProjection:i,featureProjection:e.featureProjection}}return this.adaptOptions(e)}adaptOptions(t){return Object.assign({dataProjection:this.dataProjection,featureProjection:this.defaultFeatureProjection},t)}getType(){return(0,n.O3)()}readFeature(t,e){return(0,n.O3)()}readFeatures(t,e){return(0,n.O3)()}readGeometry(t,e){return(0,n.O3)()}readProjection(t){return(0,n.O3)()}writeFeature(t,e){return(0,n.O3)()}writeFeatures(t,e){return(0,n.O3)()}writeGeometry(t,e){return(0,n.O3)()}}},6885:(t,e,i)=>{"use strict";i.d(e,{Dv:()=>r,Zn:()=>o,qe:()=>a,uX:()=>s});var n=i(5537);function s(){return!0}function r(){return!1}function o(){}function a(t){let e,i,s,r=!1;return function(){const o=Array.prototype.slice.call(arguments);return r&&this===s&&(0,n.fS)(o,i)||(r=!0,s=this,i=o,e=t.apply(this,arguments)),e}}},1082:(t,e,i)=>{"use strict";i.d(e,{ZP:()=>C,oJ:()=>T});var n=i(6762),s=i(3983);function r(t,e,i,n,r,o,a){const l=t[e],h=t[e+1],c=t[i]-l,u=t[i+1]-h;let d;if(0===c&&0===u)d=e;else{const g=((r-l)*c+(o-h)*u)/(c*c+u*u);if(g>1)d=i;else{if(g>0){for(let r=0;r<n;++r)a[r]=(0,s.t7)(t[e+r],t[i+r],g);return void(a.length=n)}d=e}}for(let e=0;e<n;++e)a[e]=t[d+e];a.length=n}function o(t,e,i,n,r){let o=t[e],a=t[e+1];for(e+=n;e<i;e+=n){const i=t[e],n=t[e+1],l=(0,s.bI)(o,a,i,n);l>r&&(r=l),o=i,a=n}return r}function a(t,e,i,n,o,a,l,h,c,u,d){if(e==i)return u;let g,_;if(0===o){if(_=(0,s.bI)(l,h,t[e],t[e+1]),_<u){for(g=0;g<n;++g)c[g]=t[e+g];return c.length=n,_}return u}d=d||[NaN,NaN];let f=e+n;for(;f<i;)if(r(t,f-n,f,n,l,h,d),_=(0,s.bI)(l,h,d[0],d[1]),_<u){for(u=_,g=0;g<n;++g)c[g]=d[g];c.length=n,f+=n}else f+=n*Math.max((Math.sqrt(_)-Math.sqrt(u))/o|0,1);if(a&&(r(t,i-n,e,n,l,h,d),_=(0,s.bI)(l,h,d[0],d[1]),_<u)){for(u=_,g=0;g<n;++g)c[g]=d[g];c.length=n}return u}var l=i(8641);function h(t,e,i,n){for(let s=0,r=i.length;s<r;++s){const r=i[s];for(let i=0;i<n;++i)t[e++]=r[i]}return e}var c=i(226),u=i(9241);function d(t,e,i,n){let s=0,r=t[i-n],o=t[i-n+1];for(;e<i;e+=n){const i=t[e],n=t[e+1];s+=o*i-r*n,r=i,o=n}return s/2}class g extends n.ZP{constructor(t,e){super(),this.maxDelta_=-1,this.maxDeltaRevision_=-1,void 0===e||Array.isArray(t[0])?this.setCoordinates(t,e):this.setFlatCoordinates(e,t)}clone(){return new g(this.flatCoordinates.slice(),this.layout)}closestPointXY(t,e,i,n){return n<(0,l.qf)(this.getExtent(),t,e)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(o(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),a(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,this.maxDelta_,!0,t,e,i,n))}getArea(){return d(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)}getCoordinates(){return(0,u.Ml)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)}getSimplifiedGeometryInternal(t){const e=[];return e.length=(0,c.dt)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,e,0),new g(e,"XY")}getType(){return"LinearRing"}intersectsExtent(t){return!1}setCoordinates(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=h(this.flatCoordinates,0,t,this.stride),this.changed()}}const _=g;class f extends n.ZP{constructor(t,e){super(),this.setCoordinates(t,e)}clone(){const t=new f(this.flatCoordinates.slice(),this.layout);return t.applyProperties(this),t}closestPointXY(t,e,i,n){const r=this.flatCoordinates,o=(0,s.bI)(t,e,r[0],r[1]);if(o<n){const t=this.stride;for(let e=0;e<t;++e)i[e]=r[e];return i.length=t,o}return n}getCoordinates(){return this.flatCoordinates?this.flatCoordinates.slice():[]}computeExtent(t){return(0,l.HK)(this.flatCoordinates,t)}getType(){return"Point"}intersectsExtent(t){return(0,l.jE)(t,this.flatCoordinates[0],this.flatCoordinates[1])}setCoordinates(t,e){this.setLayout(e,t,0),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=function(t,e,i,n){for(let n=0,s=i.length;n<s;++n)t[e++]=i[n];return e}(this.flatCoordinates,0,t,this.stride),this.changed()}}const p=f;var m=i(5537),v=i(3448),y=i(969);function x(t,e,i,n){for(;e<i-n;){for(let s=0;s<n;++s){const r=t[e+s];t[e+s]=t[i-n+s],t[i-n+s]=r}e+=n,i-=n}}function w(t,e,i,n){let s=0,r=t[i-n],o=t[i-n+1];for(;e<i;e+=n){const i=t[e],n=t[e+1];s+=(i-r)*(n+o),r=i,o=n}return 0===s?void 0:s>0}function S(t,e,i,n,s){s=void 0!==s&&s;for(let r=0,o=i.length;r<o;++r){const o=i[r],a=w(t,e,o,n);(0===r?s&&a||!s&&!a:s&&!a||!s&&a)&&x(t,e,o,n),e=o}return e}var E=i(9679);class b extends n.ZP{constructor(t,e,i){super(),this.ends_=[],this.flatInteriorPointRevision_=-1,this.flatInteriorPoint_=null,this.maxDelta_=-1,this.maxDeltaRevision_=-1,this.orientedRevision_=-1,this.orientedFlatCoordinates_=null,void 0!==e&&i?(this.setFlatCoordinates(e,t),this.ends_=i):this.setCoordinates(t,e)}appendLinearRing(t){this.flatCoordinates?(0,m.l7)(this.flatCoordinates,t.getFlatCoordinates()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.ends_.push(this.flatCoordinates.length),this.changed()}clone(){const t=new b(this.flatCoordinates.slice(),this.layout,this.ends_.slice());return t.applyProperties(this),t}closestPointXY(t,e,i,n){return n<(0,l.qf)(this.getExtent(),t,e)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(function(t,e,i,n,s){for(let r=0,a=i.length;r<a;++r){const a=i[r];s=o(t,e,a,n,s),e=a}return s}(this.flatCoordinates,0,this.ends_,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),function(t,e,i,n,s,r,o,l,h,c,u){u=u||[NaN,NaN];for(let d=0,g=i.length;d<g;++d){const g=i[d];c=a(t,e,g,n,s,r,o,l,h,c,u),e=g}return c}(this.flatCoordinates,0,this.ends_,this.stride,this.maxDelta_,!0,t,e,i,n))}containsXY(t,e){return(0,E.wY)(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,e)}getArea(){return function(t,e,i,n){let s=0;for(let r=0,o=i.length;r<o;++r){const o=i[r];s+=d(t,e,o,n),e=o}return s}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride)}getCoordinates(t){let e;return void 0!==t?(e=this.getOrientedFlatCoordinates().slice(),S(e,0,this.ends_,this.stride,t)):e=this.flatCoordinates,(0,u.o1)(e,0,this.ends_,this.stride)}getEnds(){return this.ends_}getFlatInteriorPoint(){if(this.flatInteriorPointRevision_!=this.getRevision()){const t=(0,l.qg)(this.getExtent());this.flatInteriorPoint_=(0,v.X)(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,0),this.flatInteriorPointRevision_=this.getRevision()}return this.flatInteriorPoint_}getInteriorPoint(){return new p(this.getFlatInteriorPoint(),"XYM")}getLinearRingCount(){return this.ends_.length}getLinearRing(t){return t<0||this.ends_.length<=t?null:new _(this.flatCoordinates.slice(0===t?0:this.ends_[t-1],this.ends_[t]),this.layout)}getLinearRings(){const t=this.layout,e=this.flatCoordinates,i=this.ends_,n=[];let s=0;for(let r=0,o=i.length;r<o;++r){const o=i[r],a=new _(e.slice(s,o),t);n.push(a),s=o}return n}getOrientedFlatCoordinates(){if(this.orientedRevision_!=this.getRevision()){const t=this.flatCoordinates;!function(t,e,i,n,s){s=void 0!==s&&s;for(let r=0,o=i.length;r<o;++r){const o=i[r],a=w(t,e,o,n);if(0===r){if(s&&a||!s&&!a)return!1}else if(s&&!a||!s&&a)return!1;e=o}return!0}(t,0,this.ends_,this.stride)?(this.orientedFlatCoordinates_=t.slice(),this.orientedFlatCoordinates_.length=S(this.orientedFlatCoordinates_,0,this.ends_,this.stride)):this.orientedFlatCoordinates_=t,this.orientedRevision_=this.getRevision()}return this.orientedFlatCoordinates_}getSimplifiedGeometryInternal(t){const e=[],i=[];return e.length=(0,c.Zh)(this.flatCoordinates,0,this.ends_,this.stride,Math.sqrt(t),e,0,i),new b(e,"XY",i)}getType(){return"Polygon"}intersectsExtent(t){return(0,y.ac)(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t)}setCoordinates(t,e){this.setLayout(e,t,2),this.flatCoordinates||(this.flatCoordinates=[]);const i=function(t,e,i,n,s){s=s||[];let r=0;for(let o=0,a=i.length;o<a;++o){const a=h(t,e,i[o],n);s[r++]=a,e=a}return s.length=r,s}(this.flatCoordinates,0,t,this.stride,this.ends_);this.flatCoordinates.length=0===i.length?0:i[i.length-1],this.changed()}}const C=b;function T(t){const e=t[0],i=t[1],n=t[2],s=t[3],r=[e,i,e,s,n,s,n,i,e,i];return new b(r,"XY",[r.length])}},6762:(t,e,i)=>{"use strict";i.d(e,{ZP:()=>f,Kr:()=>_});var n=i(2971),s=i(4187),r=i(6101),o=i(8641),a=i(8661),l=i(6885),h=i(6442);const c=(0,r.Ue)();class u extends n.Z{constructor(){super(),this.extent_=(0,o.lJ)(),this.extentRevision_=-1,this.simplifiedGeometryMaxMinSquaredTolerance=0,this.simplifiedGeometryRevision=0,this.simplifyTransformedInternal=(0,l.qe)((function(t,e,i){if(!i)return this.getSimplifiedGeometry(e);const n=this.clone();return n.applyTransform(i),n.getSimplifiedGeometry(e)}))}simplifyTransformed(t,e){return this.simplifyTransformedInternal(this.getRevision(),t,e)}clone(){return(0,s.O3)()}closestPointXY(t,e,i,n){return(0,s.O3)()}containsXY(t,e){const i=this.getClosestPoint([t,e]);return i[0]===t&&i[1]===e}getClosestPoint(t,e){return e=e||[NaN,NaN],this.closestPointXY(t[0],t[1],e,1/0),e}intersectsCoordinate(t){return this.containsXY(t[0],t[1])}computeExtent(t){return(0,s.O3)()}getExtent(t){if(this.extentRevision_!=this.getRevision()){const t=this.computeExtent(this.extent_);(isNaN(t[0])||isNaN(t[1]))&&(0,o.YN)(t),this.extentRevision_=this.getRevision()}return(0,o.EO)(this.extent_,t)}rotate(t,e){(0,s.O3)()}scale(t,e,i){(0,s.O3)()}simplify(t){return this.getSimplifiedGeometry(t*t)}getSimplifiedGeometry(t){return(0,s.O3)()}getType(){return(0,s.O3)()}applyTransform(t){(0,s.O3)()}intersectsExtent(t){return(0,s.O3)()}translate(t,e){(0,s.O3)()}transform(t,e){const i=(0,a.U2)(t),n="tile-pixels"==i.getUnits()?function(t,n,s){const l=i.getExtent(),u=i.getWorldExtent(),d=(0,o.Cr)(u)/(0,o.Cr)(l);return(0,r.qC)(c,u[0],u[3],d,-d,0,0,0),(0,h.vT)(t,0,t.length,s,c,n),(0,a.Ck)(i,e)(t,n,s)}:(0,a.Ck)(i,e);return this.applyTransform(n),this}}const d=u;function g(t){let e;return"XY"==t?e=2:"XYZ"==t||"XYM"==t?e=3:"XYZM"==t&&(e=4),e}function _(t,e,i){const n=t.getFlatCoordinates();if(!n)return null;const s=t.getStride();return(0,h.vT)(n,0,n.length,s,e,i)}const f=class extends d{constructor(){super(),this.layout="XY",this.stride=2,this.flatCoordinates=null}computeExtent(t){return(0,o.GN)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t)}getCoordinates(){return(0,s.O3)()}getFirstCoordinate(){return this.flatCoordinates.slice(0,this.stride)}getFlatCoordinates(){return this.flatCoordinates}getLastCoordinate(){return this.flatCoordinates.slice(this.flatCoordinates.length-this.stride)}getLayout(){return this.layout}getSimplifiedGeometry(t){if(this.simplifiedGeometryRevision!==this.getRevision()&&(this.simplifiedGeometryMaxMinSquaredTolerance=0,this.simplifiedGeometryRevision=this.getRevision()),t<0||0!==this.simplifiedGeometryMaxMinSquaredTolerance&&t<=this.simplifiedGeometryMaxMinSquaredTolerance)return this;const e=this.getSimplifiedGeometryInternal(t);return e.getFlatCoordinates().length<this.flatCoordinates.length?e:(this.simplifiedGeometryMaxMinSquaredTolerance=t,this)}getSimplifiedGeometryInternal(t){return this}getStride(){return this.stride}setFlatCoordinates(t,e){this.stride=g(t),this.layout=t,this.flatCoordinates=e}setCoordinates(t,e){(0,s.O3)()}setLayout(t,e,i){let n;if(t)n=g(t);else{for(let t=0;t<i;++t){if(0===e.length)return this.layout="XY",void(this.stride=2);e=e[0]}n=e.length,t=function(t){let e;return 2==t?e="XY":3==t?e="XYZ":4==t&&(e="XYZM"),e}(n)}this.layout=t,this.stride=n}applyTransform(t){this.flatCoordinates&&(t(this.flatCoordinates,this.flatCoordinates,this.stride),this.changed())}rotate(t,e){const i=this.getFlatCoordinates();if(i){const n=this.getStride();(0,h.U1)(i,0,i.length,n,t,e,i),this.changed()}}scale(t,e,i){void 0===e&&(e=t),i||(i=(0,o.qg)(this.getExtent()));const n=this.getFlatCoordinates();if(n){const s=this.getStride();(0,h.bA)(n,0,n.length,s,t,e,i,n),this.changed()}}translate(t,e){const i=this.getFlatCoordinates();if(i){const n=this.getStride();(0,h.Iu)(i,0,i.length,n,t,e,i),this.changed()}}}},9679:(t,e,i)=>{"use strict";i.d(e,{TG:()=>r,uG:()=>s,wY:()=>o});var n=i(8641);function s(t,e,i,s,o){return!(0,n.H6)(o,(function(n){return!r(t,e,i,s,n[0],n[1])}))}function r(t,e,i,n,s,r){let o=0,a=t[i-n],l=t[i-n+1];for(;e<i;e+=n){const i=t[e],n=t[e+1];l<=r?n>r&&(i-a)*(r-l)-(s-a)*(n-l)>0&&o++:n<=r&&(i-a)*(r-l)-(s-a)*(n-l)<0&&o--,a=i,l=n}return 0!==o}function o(t,e,i,n,s,o){if(0===i.length)return!1;if(!r(t,e,i[0],n,s,o))return!1;for(let e=1,a=i.length;e<a;++e)if(r(t,i[e-1],i[e],n,s,o))return!1;return!0}},9241:(t,e,i)=>{"use strict";function n(t,e,i,n,s){s=void 0!==s?s:[];let r=0;for(let o=e;o<i;o+=n)s[r++]=t.slice(o,o+n);return s.length=r,s}function s(t,e,i,s,r){r=void 0!==r?r:[];let o=0;for(let a=0,l=i.length;a<l;++a){const l=i[a];r[o++]=n(t,e,l,s,r[o]),e=l}return r.length=o,r}function r(t,e,i,n,r){r=void 0!==r?r:[];let o=0;for(let a=0,l=i.length;a<l;++a){const l=i[a];r[o++]=1===l.length&&l[0]===e?[]:s(t,e,l,n,r[o]),e=l[l.length-1]}return r.length=o,r}i.d(e,{Ml:()=>n,o1:()=>s,ug:()=>r})},3448:(t,e,i)=>{"use strict";i.d(e,{U:()=>o,X:()=>r});var n=i(5537),s=i(9679);function r(t,e,i,r,o,a,l){let h,c,u,d,g,_,f;const p=o[a+1],m=[];for(let n=0,s=i.length;n<s;++n){const s=i[n];for(d=t[s-r],_=t[s-r+1],h=e;h<s;h+=r)g=t[h],f=t[h+1],(p<=_&&f<=p||_<=p&&p<=f)&&(u=(p-_)/(f-_)*(g-d)+d,m.push(u)),d=g,_=f}let v=NaN,y=-1/0;for(m.sort(n.j2),d=m[0],h=1,c=m.length;h<c;++h){g=m[h];const n=Math.abs(g-d);n>y&&(u=(d+g)/2,(0,s.wY)(t,e,i,r,u,p)&&(v=u,y=n)),d=g}return isNaN(v)&&(v=o[a]),l?(l.push(v,p,y),l):[v,p,y]}function o(t,e,i,n,s){let o=[];for(let a=0,l=i.length;a<l;++a){const l=i[a];o=r(t,e,l,n,s,2*a,o),e=l[l.length-1]}return o}},969:(t,e,i)=>{"use strict";i.d(e,{mV:()=>o,ac:()=>a});var n=i(8641),s=i(9679);function r(t,e,i,s,r){const o=(0,n.qP)((0,n.lJ)(),t,e,i,s);return!!(0,n.kK)(r,o)&&(!!(0,n.r4)(r,o)||o[0]>=r[0]&&o[2]<=r[2]||o[1]>=r[1]&&o[3]<=r[3]||function(t,e,i,s,o){let a;for(e+=s;e<i;e+=s)if(l=t.slice(e-s,e),h=t.slice(e,e+s),a=(0,n.I7)(r,l,h),a)return a;var l,h;return!1}(t,e,i,s))}function o(t,e,i,n,o){return!!(r(t,e,i,n,o)||(0,s.TG)(t,e,i,n,o[0],o[1])||(0,s.TG)(t,e,i,n,o[0],o[3])||(0,s.TG)(t,e,i,n,o[2],o[1])||(0,s.TG)(t,e,i,n,o[2],o[3]))}function a(t,e,i,n,a){if(!o(t,e,i[0],n,a))return!1;if(1===i.length)return!0;for(let e=1,o=i.length;e<o;++e)if((0,s.uG)(t,i[e-1],i[e],n,a)&&!r(t,i[e-1],i[e],n,a))return!1;return!0}},226:(t,e,i)=>{"use strict";i.d(e,{Zh:()=>a,dt:()=>s,uZ:()=>r});var n=i(3983);function s(t,e,i,s,r,o,a){const l=(i-e)/s;if(l<3){for(;e<i;e+=s)o[a++]=t[e],o[a++]=t[e+1];return a}const h=new Array(l);h[0]=1,h[l-1]=1;const c=[e,i-s];let u=0;for(;c.length>0;){const i=c.pop(),o=c.pop();let a=0;const l=t[o],d=t[o+1],g=t[i],_=t[i+1];for(let e=o+s;e<i;e+=s){const i=t[e],s=t[e+1],r=(0,n.rU)(i,s,l,d,g,_);r>a&&(u=e,a=r)}a>r&&(h[(u-e)/s]=1,o+s<u&&c.push(o,u),u+s<i&&c.push(u,i))}for(let i=0;i<l;++i)h[i]&&(o[a++]=t[e+i*s],o[a++]=t[e+i*s+1]);return a}function r(t,e){return e*Math.round(t/e)}function o(t,e,i,n,s,o,a){if(e==i)return a;let l,h,c=r(t[e],s),u=r(t[e+1],s);e+=n,o[a++]=c,o[a++]=u;do{if(l=r(t[e],s),h=r(t[e+1],s),(e+=n)==i)return o[a++]=l,o[a++]=h,a}while(l==c&&h==u);for(;e<i;){const i=r(t[e],s),d=r(t[e+1],s);if(e+=n,i==l&&d==h)continue;const g=l-c,_=h-u,f=i-c,p=d-u;g*p==_*f&&(g<0&&f<g||g==f||g>0&&f>g)&&(_<0&&p<_||_==p||_>0&&p>_)?(l=i,h=d):(o[a++]=l,o[a++]=h,c=l,u=h,l=i,h=d)}return o[a++]=l,o[a++]=h,a}function a(t,e,i,n,s,r,a,l){for(let h=0,c=i.length;h<c;++h){const c=i[h];a=o(t,e,c,n,s,r,a),l.push(a),e=c}return a}},6442:(t,e,i)=>{"use strict";function n(t,e,i,n,s,r){r=r||[];let o=0;for(let a=e;a<i;a+=n){const e=t[a],i=t[a+1];r[o++]=s[0]*e+s[2]*i+s[4],r[o++]=s[1]*e+s[3]*i+s[5]}return r&&r.length!=o&&(r.length=o),r}function s(t,e,i,n,s,r,o){o=o||[];const a=Math.cos(s),l=Math.sin(s),h=r[0],c=r[1];let u=0;for(let s=e;s<i;s+=n){const e=t[s]-h,i=t[s+1]-c;o[u++]=h+e*a-i*l,o[u++]=c+e*l+i*a;for(let e=s+2;e<s+n;++e)o[u++]=t[e]}return o&&o.length!=u&&(o.length=u),o}function r(t,e,i,n,s,r,o,a){a=a||[];const l=o[0],h=o[1];let c=0;for(let o=e;o<i;o+=n){const e=t[o]-l,i=t[o+1]-h;a[c++]=l+s*e,a[c++]=h+r*i;for(let e=o+2;e<o+n;++e)a[c++]=t[e]}return a&&a.length!=c&&(a.length=c),a}function o(t,e,i,n,s,r,o){o=o||[];let a=0;for(let l=e;l<i;l+=n){o[a++]=t[l]+s,o[a++]=t[l+1]+r;for(let e=l+2;e<l+n;++e)o[a++]=t[e]}return o&&o.length!=a&&(o.length=a),o}i.d(e,{Iu:()=>o,U1:()=>s,bA:()=>r,vT:()=>n})},177:(t,e,i)=>{"use strict";i.d(e,{G$:()=>r,Id:()=>l,MP:()=>a,Tp:()=>h,V:()=>s,bM:()=>c,tK:()=>o});const n="undefined"!=typeof navigator&&void 0!==navigator.userAgent?navigator.userAgent.toLowerCase():"",s=n.includes("firefox"),r=(n.includes("safari")&&!n.includes("chrom")&&(n.includes("version/15.4")||/cpu (os|iphone os) 15_4 like mac os x/.test(n)),n.includes("webkit")&&!n.includes("edge")),o=n.includes("macintosh"),a="undefined"!=typeof devicePixelRatio?devicePixelRatio:1,l="undefined"!=typeof WorkerGlobalScope&&"undefined"!=typeof OffscreenCanvas&&self instanceof WorkerGlobalScope,h="undefined"!=typeof Image&&Image.prototype.decode,c=function(){let t=!1;try{const e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("_",null,e),window.removeEventListener("_",null,e)}catch(t){}return t}()},947:(t,e,i)=>{"use strict";i.d(e,{Z:()=>h});var n=i(2971),s=i(1912),r=i(4187),o=i(9515),a=i(3983);class l extends n.Z{constructor(t){super(),this.on,this.once,this.un,this.background_=t.background;const e=Object.assign({},t);"object"==typeof t.properties&&(delete e.properties,Object.assign(e,t.properties)),e[s.Z.OPACITY]=void 0!==t.opacity?t.opacity:1,(0,o.h)("number"==typeof e[s.Z.OPACITY],64),e[s.Z.VISIBLE]=void 0===t.visible||t.visible,e[s.Z.Z_INDEX]=t.zIndex,e[s.Z.MAX_RESOLUTION]=void 0!==t.maxResolution?t.maxResolution:1/0,e[s.Z.MIN_RESOLUTION]=void 0!==t.minResolution?t.minResolution:0,e[s.Z.MIN_ZOOM]=void 0!==t.minZoom?t.minZoom:-1/0,e[s.Z.MAX_ZOOM]=void 0!==t.maxZoom?t.maxZoom:1/0,this.className_=void 0!==e.className?e.className:"ol-layer",delete e.className,this.setProperties(e),this.state_=null}getBackground(){return this.background_}getClassName(){return this.className_}getLayerState(t){const e=this.state_||{layer:this,managed:void 0===t||t},i=this.getZIndex();return e.opacity=(0,a.uZ)(Math.round(100*this.getOpacity())/100,0,1),e.visible=this.getVisible(),e.extent=this.getExtent(),e.zIndex=void 0!==i||e.managed?i:1/0,e.maxResolution=this.getMaxResolution(),e.minResolution=Math.max(this.getMinResolution(),0),e.minZoom=this.getMinZoom(),e.maxZoom=this.getMaxZoom(),this.state_=e,e}getLayersArray(t){return(0,r.O3)()}getLayerStatesArray(t){return(0,r.O3)()}getExtent(){return this.get(s.Z.EXTENT)}getMaxResolution(){return this.get(s.Z.MAX_RESOLUTION)}getMinResolution(){return this.get(s.Z.MIN_RESOLUTION)}getMinZoom(){return this.get(s.Z.MIN_ZOOM)}getMaxZoom(){return this.get(s.Z.MAX_ZOOM)}getOpacity(){return this.get(s.Z.OPACITY)}getSourceState(){return(0,r.O3)()}getVisible(){return this.get(s.Z.VISIBLE)}getZIndex(){return this.get(s.Z.Z_INDEX)}setBackground(t){this.background_=t,this.changed()}setExtent(t){this.set(s.Z.EXTENT,t)}setMaxResolution(t){this.set(s.Z.MAX_RESOLUTION,t)}setMinResolution(t){this.set(s.Z.MIN_RESOLUTION,t)}setMaxZoom(t){this.set(s.Z.MAX_ZOOM,t)}setMinZoom(t){this.set(s.Z.MIN_ZOOM,t)}setOpacity(t){(0,o.h)("number"==typeof t,64),this.set(s.Z.OPACITY,t)}setVisible(t){this.set(s.Z.VISIBLE,t)}setZIndex(t){this.set(s.Z.Z_INDEX,t)}disposeInternal(){this.state_&&(this.state_.layer=null,this.state_=null),super.disposeInternal()}}const h=l},1295:(t,e,i)=>{"use strict";i.d(e,{Z:()=>u,j:()=>c});var n=i(947),s=i(5487),r=i(1912),o=i(8771),a=i(9515),l=i(5818);class h extends n.Z{constructor(t){const e=Object.assign({},t);delete e.source,super(e),this.on,this.once,this.un,this.mapPrecomposeKey_=null,this.mapRenderKey_=null,this.sourceChangeKey_=null,this.renderer_=null,this.sourceReady_=!1,this.rendered=!1,t.render&&(this.render=t.render),t.map&&this.setMap(t.map),this.addChangeListener(r.Z.SOURCE,this.handleSourcePropertyChange_);const i=t.source?t.source:null;this.setSource(i)}getLayersArray(t){return(t=t||[]).push(this),t}getLayerStatesArray(t){return(t=t||[]).push(this.getLayerState()),t}getSource(){return this.get(r.Z.SOURCE)||null}getRenderSource(){return this.getSource()}getSourceState(){const t=this.getSource();return t?t.getState():"undefined"}handleSourceChange_(){this.changed(),this.sourceReady_||"ready"!==this.getSource().getState()||(this.sourceReady_=!0,this.dispatchEvent("sourceready"))}handleSourcePropertyChange_(){this.sourceChangeKey_&&((0,l.bN)(this.sourceChangeKey_),this.sourceChangeKey_=null),this.sourceReady_=!1;const t=this.getSource();t&&(this.sourceChangeKey_=(0,l.oL)(t,s.Z.CHANGE,this.handleSourceChange_,this),"ready"===t.getState()&&(this.sourceReady_=!0,setTimeout((()=>{this.dispatchEvent("sourceready")}),0))),this.changed()}getFeatures(t){return this.renderer_?this.renderer_.getFeatures(t):Promise.resolve([])}getData(t){return this.renderer_&&this.rendered?this.renderer_.getData(t):null}render(t,e){const i=this.getRenderer();if(i.prepareFrame(t))return this.rendered=!0,i.renderFrame(t,e)}unrender(){this.rendered=!1}setMapInternal(t){t||this.unrender(),this.set(r.Z.MAP,t)}getMapInternal(){return this.get(r.Z.MAP)}setMap(t){this.mapPrecomposeKey_&&((0,l.bN)(this.mapPrecomposeKey_),this.mapPrecomposeKey_=null),t||this.changed(),this.mapRenderKey_&&((0,l.bN)(this.mapRenderKey_),this.mapRenderKey_=null),t&&(this.mapPrecomposeKey_=(0,l.oL)(t,o.Z.PRECOMPOSE,(function(t){const e=t.frameState.layerStatesArray,i=this.getLayerState(!1);(0,a.h)(!e.some((function(t){return t.layer===i.layer})),67),e.push(i)}),this),this.mapRenderKey_=(0,l.oL)(this,s.Z.CHANGE,t.render,t),this.changed())}setSource(t){this.set(r.Z.SOURCE,t)}getRenderer(){return this.renderer_||(this.renderer_=this.createRenderer()),this.renderer_}hasRenderer(){return!!this.renderer_}createRenderer(){return null}disposeInternal(){this.renderer_&&(this.renderer_.dispose(),delete this.renderer_),this.setSource(null),super.disposeInternal()}}function c(t,e){if(!t.visible)return!1;const i=e.resolution;if(i<t.minResolution||i>=t.maxResolution)return!1;const n=e.zoom;return n>t.minZoom&&n<=t.maxZoom}const u=h},1912:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={OPACITY:"opacity",VISIBLE:"visible",EXTENT:"extent",Z_INDEX:"zIndex",MAX_RESOLUTION:"maxResolution",MIN_RESOLUTION:"minResolution",MAX_ZOOM:"maxZoom",MIN_ZOOM:"minZoom",SOURCE:"source",MAP:"map"}},2479:(t,e,i)=>{"use strict";i.d(e,{Z:()=>l});var n=i(1295),s=i(8280);class r extends n.Z{constructor(t){t=t||{};const e=Object.assign({},t);delete e.preload,delete e.useInterimTilesOnError,super(e),this.on,this.once,this.un,this.setPreload(void 0!==t.preload?t.preload:0),this.setUseInterimTilesOnError(void 0===t.useInterimTilesOnError||t.useInterimTilesOnError)}getPreload(){return this.get(s.Z.PRELOAD)}setPreload(t){this.set(s.Z.PRELOAD,t)}getUseInterimTilesOnError(){return this.get(s.Z.USE_INTERIM_TILES_ON_ERROR)}setUseInterimTilesOnError(t){this.set(s.Z.USE_INTERIM_TILES_ON_ERROR,t)}getData(t){return super.getData(t)}}const o=r;var a=i(4708);const l=class extends o{constructor(t){super(t)}createRenderer(){return new a.Z(this)}}},8280:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={PRELOAD:"preload",USE_INTERIM_TILES_ON_ERROR:"useInterimTilesOnError"}},9731:(t,e,i)=>{"use strict";i.d(e,{Z:()=>Ft});var n=i(1295),s=i(2582),r=i(7539),o=i(283),a=i(1345),l=i(5487),h=i(553),c=i(8443),u=i(9706),d=i(9515),g=i(208),_=i(8326),f=i(2710),p=i(8096);let m=null;class v extends g.Z{constructor(t,e,i,n,s,r){super(),this.hitDetectionImage_=null,this.image_=t,this.crossOrigin_=n,this.canvas_={},this.color_=r,this.unlisten_=null,this.imageState_=s,this.size_=i,this.src_=e,this.tainted_}initializeImage_(){this.image_=new Image,null!==this.crossOrigin_&&(this.image_.crossOrigin=this.crossOrigin_)}isTainted_(){if(void 0===this.tainted_&&this.imageState_===h.Z.LOADED){m||(m=(0,_.E4)(1,1,void 0,{willReadFrequently:!0})),m.drawImage(this.image_,0,0);try{m.getImageData(0,0,1,1),this.tainted_=!1}catch(t){m=null,this.tainted_=!0}}return!0===this.tainted_}dispatchChangeEvent_(){this.dispatchEvent(l.Z.CHANGE)}handleImageError_(){this.imageState_=h.Z.ERROR,this.unlistenImage_(),this.dispatchChangeEvent_()}handleImageLoad_(){this.imageState_=h.Z.LOADED,this.size_?(this.image_.width=this.size_[0],this.image_.height=this.size_[1]):this.size_=[this.image_.width,this.image_.height],this.unlistenImage_(),this.dispatchChangeEvent_()}getImage(t){return this.image_||this.initializeImage_(),this.replaceColor_(t),this.canvas_[t]?this.canvas_[t]:this.image_}getPixelRatio(t){return this.replaceColor_(t),this.canvas_[t]?t:1}getImageState(){return this.imageState_}getHitDetectionImage(){if(this.image_||this.initializeImage_(),!this.hitDetectionImage_)if(this.isTainted_()){const t=this.size_[0],e=this.size_[1],i=(0,_.E4)(t,e);i.fillRect(0,0,t,e),this.hitDetectionImage_=i.canvas}else this.hitDetectionImage_=this.image_;return this.hitDetectionImage_}getSize(){return this.size_}getSrc(){return this.src_}load(){if(this.imageState_===h.Z.IDLE){this.image_||this.initializeImage_(),this.imageState_=h.Z.LOADING;try{this.image_.src=this.src_}catch(t){this.handleImageError_()}this.unlisten_=(0,p.K)(this.image_,this.handleImageLoad_.bind(this),this.handleImageError_.bind(this))}}replaceColor_(t){if(!this.color_||this.canvas_[t]||this.imageState_!==h.Z.LOADED)return;const e=this.image_,i=document.createElement("canvas");i.width=Math.ceil(e.width*t),i.height=Math.ceil(e.height*t);const n=i.getContext("2d");n.scale(t,t),n.drawImage(e,0,0),n.globalCompositeOperation="multiply",n.fillStyle=(0,u.XC)(this.color_),n.fillRect(0,0,i.width/t,i.height/t),n.globalCompositeOperation="destination-in",n.drawImage(e,0,0),this.canvas_[t]=i}unlistenImage_(){this.unlisten_&&(this.unlisten_(),this.unlisten_=null)}}var y=i(4187);class x extends c.Z{constructor(t){const e=void 0!==(t=t||{}).opacity?t.opacity:1,i=void 0!==t.rotation?t.rotation:0,n=void 0!==t.scale?t.scale:1,s=void 0!==t.rotateWithView&&t.rotateWithView;super({opacity:e,rotation:i,scale:n,displacement:void 0!==t.displacement?t.displacement:[0,0],rotateWithView:s,declutterMode:t.declutterMode}),this.anchor_=void 0!==t.anchor?t.anchor:[.5,.5],this.normalizedAnchor_=null,this.anchorOrigin_=void 0!==t.anchorOrigin?t.anchorOrigin:"top-left",this.anchorXUnits_=void 0!==t.anchorXUnits?t.anchorXUnits:"fraction",this.anchorYUnits_=void 0!==t.anchorYUnits?t.anchorYUnits:"fraction",this.crossOrigin_=void 0!==t.crossOrigin?t.crossOrigin:null;const r=void 0!==t.img?t.img:null;this.imgSize_=t.imgSize;let o=t.src;(0,d.h)(!(void 0!==o&&r),4),(0,d.h)(!r||r&&this.imgSize_,5),void 0!==o&&0!==o.length||!r||(o=r.src||(0,y.sq)(r)),(0,d.h)(void 0!==o&&o.length>0,6),(0,d.h)(!((void 0!==t.width||void 0!==t.height)&&void 0!==t.scale),69);const a=void 0!==t.src?h.Z.IDLE:h.Z.LOADED;if(this.color_=void 0!==t.color?(0,u._2)(t.color):null,this.iconImage_=function(t,e,i,n,s,r){let o=f.c.get(e,n,r);return o||(o=new v(t,e,i,n,s,r),f.c.set(e,n,r,o)),o}(r,o,void 0!==this.imgSize_?this.imgSize_:null,this.crossOrigin_,a,this.color_),this.offset_=void 0!==t.offset?t.offset:[0,0],this.offsetOrigin_=void 0!==t.offsetOrigin?t.offsetOrigin:"top-left",this.origin_=null,this.size_=void 0!==t.size?t.size:null,this.width_=t.width,this.height_=t.height,void 0!==this.width_||void 0!==this.height_){const t=this.getImage(1),e=()=>{this.updateScaleFromWidthAndHeight(this.width_,this.height_)};t.width>0?this.updateScaleFromWidthAndHeight(this.width_,this.height_):t.addEventListener("load",e)}}clone(){const t=this.getScale();return new x({anchor:this.anchor_.slice(),anchorOrigin:this.anchorOrigin_,anchorXUnits:this.anchorXUnits_,anchorYUnits:this.anchorYUnits_,color:this.color_&&this.color_.slice?this.color_.slice():this.color_||void 0,crossOrigin:this.crossOrigin_,imgSize:this.imgSize_,offset:this.offset_.slice(),offsetOrigin:this.offsetOrigin_,opacity:this.getOpacity(),rotateWithView:this.getRotateWithView(),rotation:this.getRotation(),scale:Array.isArray(t)?t.slice():t,size:null!==this.size_?this.size_.slice():void 0,src:this.getSrc(),displacement:this.getDisplacement().slice(),declutterMode:this.getDeclutterMode(),width:this.width_,height:this.height_})}updateScaleFromWidthAndHeight(t,e){const i=this.getImage(1);void 0!==t&&void 0!==e?super.setScale([t/i.width,e/i.height]):void 0!==t?super.setScale([t/i.width,t/i.width]):void 0!==e?super.setScale([e/i.height,e/i.height]):super.setScale([1,1])}getAnchor(){let t=this.normalizedAnchor_;if(!t){t=this.anchor_;const e=this.getSize();if("fraction"==this.anchorXUnits_||"fraction"==this.anchorYUnits_){if(!e)return null;t=this.anchor_.slice(),"fraction"==this.anchorXUnits_&&(t[0]*=e[0]),"fraction"==this.anchorYUnits_&&(t[1]*=e[1])}if("top-left"!=this.anchorOrigin_){if(!e)return null;t===this.anchor_&&(t=this.anchor_.slice()),"top-right"!=this.anchorOrigin_&&"bottom-right"!=this.anchorOrigin_||(t[0]=-t[0]+e[0]),"bottom-left"!=this.anchorOrigin_&&"bottom-right"!=this.anchorOrigin_||(t[1]=-t[1]+e[1])}this.normalizedAnchor_=t}const e=this.getDisplacement(),i=this.getScaleArray();return[t[0]-e[0]/i[0],t[1]+e[1]/i[1]]}setAnchor(t){this.anchor_=t,this.normalizedAnchor_=null}getColor(){return this.color_}getImage(t){return this.iconImage_.getImage(t)}getPixelRatio(t){return this.iconImage_.getPixelRatio(t)}getImageSize(){return this.iconImage_.getSize()}getImageState(){return this.iconImage_.getImageState()}getHitDetectionImage(){return this.iconImage_.getHitDetectionImage()}getOrigin(){if(this.origin_)return this.origin_;let t=this.offset_;if("top-left"!=this.offsetOrigin_){const e=this.getSize(),i=this.iconImage_.getSize();if(!e||!i)return null;t=t.slice(),"top-right"!=this.offsetOrigin_&&"bottom-right"!=this.offsetOrigin_||(t[0]=i[0]-e[0]-t[0]),"bottom-left"!=this.offsetOrigin_&&"bottom-right"!=this.offsetOrigin_||(t[1]=i[1]-e[1]-t[1])}return this.origin_=t,this.origin_}getSrc(){return this.iconImage_.getSrc()}getSize(){return this.size_?this.size_:this.iconImage_.getSize()}getWidth(){return this.width_}getHeight(){return this.height_}setWidth(t){this.width_=t,this.updateScaleFromWidthAndHeight(t,this.height_)}setHeight(t){this.height_=t,this.updateScaleFromWidthAndHeight(this.width_,t)}setScale(t){super.setScale(t);const e=this.getImage(1);if(e){const i=Array.isArray(t)?t[0]:t;void 0!==i&&(this.width_=i*e.width);const n=Array.isArray(t)?t[1]:t;void 0!==n&&(this.height_=n*e.height)}}listenImageChange(t){this.iconImage_.addEventListener(l.Z.CHANGE,t)}load(){this.iconImage_.load()}unlistenImageChange(t){this.iconImage_.removeEventListener(l.Z.CHANGE,t)}}const w=x;var S=i(5393),E=i(8958),b=i(1280);function C(t){return new r.ZP({fill:T(t,""),stroke:R(t,""),text:I(t),image:k(t)})}function T(t,e){const i=t[e+"fill-color"];if(i)return new a.Z({color:i})}function R(t,e){const i=t[e+"stroke-width"],n=t[e+"stroke-color"];if(i||n)return new E.Z({width:i,color:n,lineCap:t[e+"stroke-line-cap"],lineJoin:t[e+"stroke-line-join"],lineDash:t[e+"stroke-line-dash"],lineDashOffset:t[e+"stroke-line-dash-offset"],miterLimit:t[e+"stroke-miter-limit"]})}function I(t){const e=t["text-value"];if(e)return new b.Z({text:e,font:t["text-font"],maxAngle:t["text-max-angle"],offsetX:t["text-offset-x"],offsetY:t["text-offset-y"],overflow:t["text-overflow"],placement:t["text-placement"],scale:t["text-scale"],rotateWithView:t["text-rotate-with-view"],rotation:t["text-rotation"],textAlign:t["text-align"],justify:t["text-justify"],textBaseline:t["text-baseline"],padding:t["text-padding"],fill:T(t,"text-"),backgroundFill:T(t,"text-background-"),stroke:R(t,"text-"),backgroundStroke:R(t,"text-background-")})}function k(t){const e=t["icon-src"],i=t["icon-img"];if(e||i)return new w({src:e,img:i,imgSize:t["icon-img-size"],anchor:t["icon-anchor"],anchorOrigin:t["icon-anchor-origin"],anchorXUnits:t["icon-anchor-x-units"],anchorYUnits:t["icon-anchor-y-units"],color:t["icon-color"],crossOrigin:t["icon-cross-origin"],offset:t["icon-offset"],displacement:t["icon-displacement"],opacity:t["icon-opacity"],scale:t["icon-scale"],rotation:t["icon-rotation"],rotateWithView:t["icon-rotate-with-view"],size:t["icon-size"],declutterMode:t["icon-declutter-mode"]});const n=t["shape-points"];if(n){const e="shape-";return new S.Z({points:n,fill:T(t,e),stroke:R(t,e),radius:t["shape-radius"],radius1:t["shape-radius1"],radius2:t["shape-radius2"],angle:t["shape-angle"],displacement:t["shape-displacement"],rotation:t["shape-rotation"],rotateWithView:t["shape-rotate-with-view"],scale:t["shape-scale"],declutterMode:t["shape-declutter-mode"]})}const s=t["circle-radius"];if(s){const e="circle-";return new o.Z({radius:s,fill:T(t,e),stroke:R(t,e),displacement:t["circle-displacement"],scale:t["circle-scale"],rotation:t["circle-rotation"],rotateWithView:t["circle-rotate-with-view"],declutterMode:t["circle-declutter-mode"]})}}const M="renderOrder";class L extends n.Z{constructor(t){t=t||{};const e=Object.assign({},t);delete e.style,delete e.renderBuffer,delete e.updateWhileAnimating,delete e.updateWhileInteracting,super(e),this.declutter_=void 0!==t.declutter&&t.declutter,this.renderBuffer_=void 0!==t.renderBuffer?t.renderBuffer:100,this.style_=null,this.styleFunction_=void 0,this.setStyle(t.style),this.updateWhileAnimating_=void 0!==t.updateWhileAnimating&&t.updateWhileAnimating,this.updateWhileInteracting_=void 0!==t.updateWhileInteracting&&t.updateWhileInteracting}getDeclutter(){return this.declutter_}getFeatures(t){return super.getFeatures(t)}getRenderBuffer(){return this.renderBuffer_}getRenderOrder(){return this.get(M)}getStyle(){return this.style_}getStyleFunction(){return this.styleFunction_}getUpdateWhileAnimating(){return this.updateWhileAnimating_}getUpdateWhileInteracting(){return this.updateWhileInteracting_}renderDeclutter(t){t.declutterTree||(t.declutterTree=new s(9)),this.getRenderer().renderDeclutter(t)}setRenderOrder(t){this.set(M,t)}setStyle(t){let e;if(void 0===t)e=r.yF;else if(null===t)e=null;else if("function"==typeof t)e=t;else if(t instanceof r.ZP)e=t;else if(Array.isArray(t)){const i=t.length,n=new Array(i);for(let e=0;e<i;++e){const i=t[e];i instanceof r.ZP?n[e]=i:n[e]=C(i)}e=n}else e=C(t);this.style_=e,this.styleFunction_=null===t?void 0:(0,r.J$)(this.style_),this.changed()}}const P=L,O={BEGIN_GEOMETRY:0,BEGIN_PATH:1,CIRCLE:2,CLOSE_PATH:3,CUSTOM:4,DRAW_CHARS:5,DRAW_IMAGE:6,END_GEOMETRY:7,FILL:8,MOVE_TO_LINE_TO:9,SET_FILL_STYLE:10,SET_STROKE_STYLE:11,STROKE:12},A=[O.FILL],Z=[O.STROKE],F=[O.BEGIN_PATH],D=[O.CLOSE_PATH],z=O;var N=i(8716);const G=class{drawCustom(t,e,i,n){}drawGeometry(t){}setStyle(t){}drawCircle(t,e){}drawFeature(t,e){}drawGeometryCollection(t,e){}drawLineString(t,e){}drawMultiLineString(t,e){}drawMultiPoint(t,e){}drawMultiPolygon(t,e){}drawPoint(t,e){}drawPolygon(t,e){}drawText(t,e){}setFillStrokeStyle(t,e){}setImageStyle(t,e){}setTextStyle(t,e){}};var B=i(6620),W=i(8641),j=i(147),U=i(5537),Y=i(9241);const V=class extends G{constructor(t,e,i,n){super(),this.tolerance=t,this.maxExtent=e,this.pixelRatio=n,this.maxLineWidth=0,this.resolution=i,this.beginGeometryInstruction1_=null,this.beginGeometryInstruction2_=null,this.bufferedMaxExtent_=null,this.instructions=[],this.coordinates=[],this.tmpCoordinate_=[],this.hitDetectionInstructions=[],this.state={}}applyPixelRatio(t){const e=this.pixelRatio;return 1==e?t:t.map((function(t){return t*e}))}appendFlatPointCoordinates(t,e){const i=this.getBufferedMaxExtent(),n=this.tmpCoordinate_,s=this.coordinates;let r=s.length;for(let o=0,a=t.length;o<a;o+=e)n[0]=t[o],n[1]=t[o+1],(0,W.b8)(i,n)&&(s[r++]=n[0],s[r++]=n[1]);return r}appendFlatLineCoordinates(t,e,i,n,s,r){const o=this.coordinates;let a=o.length;const l=this.getBufferedMaxExtent();r&&(e+=n);let h=t[e],c=t[e+1];const u=this.tmpCoordinate_;let d,g,_,f=!0;for(d=e+n;d<i;d+=n)u[0]=t[d],u[1]=t[d+1],_=(0,W.pX)(l,u),_!==g?(f&&(o[a++]=h,o[a++]=c,f=!1),o[a++]=u[0],o[a++]=u[1]):_===N.Z.INTERSECTING?(o[a++]=u[0],o[a++]=u[1],f=!1):f=!0,h=u[0],c=u[1],g=_;return(s&&f||d===e+n)&&(o[a++]=h,o[a++]=c),a}drawCustomCoordinates_(t,e,i,n,s){for(let r=0,o=i.length;r<o;++r){const o=i[r],a=this.appendFlatLineCoordinates(t,e,o,n,!1,!1);s.push(a),e=o}return e}drawCustom(t,e,i,n){this.beginGeometry(t,e);const s=t.getType(),r=t.getStride(),o=this.coordinates.length;let a,l,h,c,u;switch(s){case"MultiPolygon":a=t.getOrientedFlatCoordinates(),c=[];const e=t.getEndss();u=0;for(let t=0,i=e.length;t<i;++t){const i=[];u=this.drawCustomCoordinates_(a,u,e[t],r,i),c.push(i)}this.instructions.push([z.CUSTOM,o,c,t,i,Y.ug]),this.hitDetectionInstructions.push([z.CUSTOM,o,c,t,n||i,Y.ug]);break;case"Polygon":case"MultiLineString":h=[],a="Polygon"==s?t.getOrientedFlatCoordinates():t.getFlatCoordinates(),u=this.drawCustomCoordinates_(a,0,t.getEnds(),r,h),this.instructions.push([z.CUSTOM,o,h,t,i,Y.o1]),this.hitDetectionInstructions.push([z.CUSTOM,o,h,t,n||i,Y.o1]);break;case"LineString":case"Circle":a=t.getFlatCoordinates(),l=this.appendFlatLineCoordinates(a,0,a.length,r,!1,!1),this.instructions.push([z.CUSTOM,o,l,t,i,Y.Ml]),this.hitDetectionInstructions.push([z.CUSTOM,o,l,t,n||i,Y.Ml]);break;case"MultiPoint":a=t.getFlatCoordinates(),l=this.appendFlatPointCoordinates(a,r),l>o&&(this.instructions.push([z.CUSTOM,o,l,t,i,Y.Ml]),this.hitDetectionInstructions.push([z.CUSTOM,o,l,t,n||i,Y.Ml]));break;case"Point":a=t.getFlatCoordinates(),this.coordinates.push(a[0],a[1]),l=this.coordinates.length,this.instructions.push([z.CUSTOM,o,l,t,i]),this.hitDetectionInstructions.push([z.CUSTOM,o,l,t,n||i])}this.endGeometry(e)}beginGeometry(t,e){this.beginGeometryInstruction1_=[z.BEGIN_GEOMETRY,e,0,t],this.instructions.push(this.beginGeometryInstruction1_),this.beginGeometryInstruction2_=[z.BEGIN_GEOMETRY,e,0,t],this.hitDetectionInstructions.push(this.beginGeometryInstruction2_)}finish(){return{instructions:this.instructions,hitDetectionInstructions:this.hitDetectionInstructions,coordinates:this.coordinates}}reverseHitDetectionInstructions(){const t=this.hitDetectionInstructions;let e;t.reverse();const i=t.length;let n,s,r=-1;for(e=0;e<i;++e)n=t[e],s=n[0],s==z.END_GEOMETRY?r=e:s==z.BEGIN_GEOMETRY&&(n[2]=e,(0,U.FZ)(this.hitDetectionInstructions,r,e),r=-1)}setFillStrokeStyle(t,e){const i=this.state;if(t){const e=t.getColor();i.fillStyle=(0,B.y)(e||j.bL)}else i.fillStyle=void 0;if(e){const t=e.getColor();i.strokeStyle=(0,B.y)(t||j.Tx);const n=e.getLineCap();i.lineCap=void 0!==n?n:j.mb;const s=e.getLineDash();i.lineDash=s?s.slice():j.X9;const r=e.getLineDashOffset();i.lineDashOffset=r||j.He;const o=e.getLineJoin();i.lineJoin=void 0!==o?o:j.rc;const a=e.getWidth();i.lineWidth=void 0!==a?a:j.yC;const l=e.getMiterLimit();i.miterLimit=void 0!==l?l:j.V4,i.lineWidth>this.maxLineWidth&&(this.maxLineWidth=i.lineWidth,this.bufferedMaxExtent_=null)}else i.strokeStyle=void 0,i.lineCap=void 0,i.lineDash=null,i.lineDashOffset=void 0,i.lineJoin=void 0,i.lineWidth=void 0,i.miterLimit=void 0}createFill(t){const e=t.fillStyle,i=[z.SET_FILL_STYLE,e];return"string"!=typeof e&&i.push(!0),i}applyStroke(t){this.instructions.push(this.createStroke(t))}createStroke(t){return[z.SET_STROKE_STYLE,t.strokeStyle,t.lineWidth*this.pixelRatio,t.lineCap,t.lineJoin,t.miterLimit,this.applyPixelRatio(t.lineDash),t.lineDashOffset*this.pixelRatio]}updateFillStyle(t,e){const i=t.fillStyle;"string"==typeof i&&t.currentFillStyle==i||(void 0!==i&&this.instructions.push(e.call(this,t)),t.currentFillStyle=i)}updateStrokeStyle(t,e){const i=t.strokeStyle,n=t.lineCap,s=t.lineDash,r=t.lineDashOffset,o=t.lineJoin,a=t.lineWidth,l=t.miterLimit;(t.currentStrokeStyle!=i||t.currentLineCap!=n||s!=t.currentLineDash&&!(0,U.fS)(t.currentLineDash,s)||t.currentLineDashOffset!=r||t.currentLineJoin!=o||t.currentLineWidth!=a||t.currentMiterLimit!=l)&&(void 0!==i&&e.call(this,t),t.currentStrokeStyle=i,t.currentLineCap=n,t.currentLineDash=s,t.currentLineDashOffset=r,t.currentLineJoin=o,t.currentLineWidth=a,t.currentMiterLimit=l)}endGeometry(t){this.beginGeometryInstruction1_[2]=this.instructions.length,this.beginGeometryInstruction1_=null,this.beginGeometryInstruction2_[2]=this.hitDetectionInstructions.length,this.beginGeometryInstruction2_=null;const e=[z.END_GEOMETRY,t];this.instructions.push(e),this.hitDetectionInstructions.push(e)}getBufferedMaxExtent(){if(!this.bufferedMaxExtent_&&(this.bufferedMaxExtent_=(0,W.d9)(this.maxExtent),this.maxLineWidth>0)){const t=this.resolution*(this.maxLineWidth+1)/2;(0,W.f3)(this.bufferedMaxExtent_,t,this.bufferedMaxExtent_)}return this.bufferedMaxExtent_}};var X=i(226);const K=class extends V{constructor(t,e,i,n){super(t,e,i,n)}drawFlatCoordinatess_(t,e,i,n){const s=this.state,r=void 0!==s.fillStyle,o=void 0!==s.strokeStyle,a=i.length;this.instructions.push(F),this.hitDetectionInstructions.push(F);for(let s=0;s<a;++s){const r=i[s],a=this.coordinates.length,l=this.appendFlatLineCoordinates(t,e,r,n,!0,!o),h=[z.MOVE_TO_LINE_TO,a,l];this.instructions.push(h),this.hitDetectionInstructions.push(h),o&&(this.instructions.push(D),this.hitDetectionInstructions.push(D)),e=r}return r&&(this.instructions.push(A),this.hitDetectionInstructions.push(A)),o&&(this.instructions.push(Z),this.hitDetectionInstructions.push(Z)),e}drawCircle(t,e){const i=this.state,n=i.fillStyle,s=i.strokeStyle;if(void 0===n&&void 0===s)return;this.setFillStrokeStyles_(),this.beginGeometry(t,e),void 0!==i.fillStyle&&this.hitDetectionInstructions.push([z.SET_FILL_STYLE,j.bL]),void 0!==i.strokeStyle&&this.hitDetectionInstructions.push([z.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,i.lineDash,i.lineDashOffset]);const r=t.getFlatCoordinates(),o=t.getStride(),a=this.coordinates.length;this.appendFlatLineCoordinates(r,0,r.length,o,!1,!1);const l=[z.CIRCLE,a];this.instructions.push(F,l),this.hitDetectionInstructions.push(F,l),void 0!==i.fillStyle&&(this.instructions.push(A),this.hitDetectionInstructions.push(A)),void 0!==i.strokeStyle&&(this.instructions.push(Z),this.hitDetectionInstructions.push(Z)),this.endGeometry(e)}drawPolygon(t,e){const i=this.state,n=i.fillStyle,s=i.strokeStyle;if(void 0===n&&void 0===s)return;this.setFillStrokeStyles_(),this.beginGeometry(t,e),void 0!==i.fillStyle&&this.hitDetectionInstructions.push([z.SET_FILL_STYLE,j.bL]),void 0!==i.strokeStyle&&this.hitDetectionInstructions.push([z.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,i.lineDash,i.lineDashOffset]);const r=t.getEnds(),o=t.getOrientedFlatCoordinates(),a=t.getStride();this.drawFlatCoordinatess_(o,0,r,a),this.endGeometry(e)}drawMultiPolygon(t,e){const i=this.state,n=i.fillStyle,s=i.strokeStyle;if(void 0===n&&void 0===s)return;this.setFillStrokeStyles_(),this.beginGeometry(t,e),void 0!==i.fillStyle&&this.hitDetectionInstructions.push([z.SET_FILL_STYLE,j.bL]),void 0!==i.strokeStyle&&this.hitDetectionInstructions.push([z.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,i.lineDash,i.lineDashOffset]);const r=t.getEndss(),o=t.getOrientedFlatCoordinates(),a=t.getStride();let l=0;for(let t=0,e=r.length;t<e;++t)l=this.drawFlatCoordinatess_(o,l,r[t],a);this.endGeometry(e)}finish(){this.reverseHitDetectionInstructions(),this.state=null;const t=this.tolerance;if(0!==t){const e=this.coordinates;for(let i=0,n=e.length;i<n;++i)e[i]=(0,X.uZ)(e[i],t)}return super.finish()}setFillStrokeStyles_(){const t=this.state;void 0!==t.fillStyle&&this.updateFillStyle(t,this.createFill),void 0!==t.strokeStyle&&this.updateStrokeStyle(t,this.applyStroke)}};function H(t,e,i,n,s){let r,o,a,l,h,c,u,d,g,_,f=i,p=i,m=0,v=0,y=i;for(o=i;o<n;o+=s){const i=e[o],n=e[o+1];void 0!==h&&(g=i-h,_=n-c,l=Math.sqrt(g*g+_*_),void 0!==u&&(v+=a,r=Math.acos((u*g+d*_)/(a*l)),r>t&&(v>m&&(m=v,f=y,p=o),v=0,y=o-s)),a=l,u=g,d=_),h=i,c=n}return v+=l,v>m?[y,o]:[f,p]}const q={left:0,end:0,center:.5,right:1,start:1,top:0,middle:.5,hanging:.2,alphabetic:.8,ideographic:.8,bottom:1},J={Circle:K,Default:V,Image:class extends V{constructor(t,e,i,n){super(t,e,i,n),this.hitDetectionImage_=null,this.image_=null,this.imagePixelRatio_=void 0,this.anchorX_=void 0,this.anchorY_=void 0,this.height_=void 0,this.opacity_=void 0,this.originX_=void 0,this.originY_=void 0,this.rotateWithView_=void 0,this.rotation_=void 0,this.scale_=void 0,this.width_=void 0,this.declutterMode_=void 0,this.declutterImageWithText_=void 0}drawPoint(t,e){if(!this.image_)return;this.beginGeometry(t,e);const i=t.getFlatCoordinates(),n=t.getStride(),s=this.coordinates.length,r=this.appendFlatPointCoordinates(i,n);this.instructions.push([z.DRAW_IMAGE,s,r,this.image_,this.anchorX_*this.imagePixelRatio_,this.anchorY_*this.imagePixelRatio_,Math.ceil(this.height_*this.imagePixelRatio_),this.opacity_,this.originX_*this.imagePixelRatio_,this.originY_*this.imagePixelRatio_,this.rotateWithView_,this.rotation_,[this.scale_[0]*this.pixelRatio/this.imagePixelRatio_,this.scale_[1]*this.pixelRatio/this.imagePixelRatio_],Math.ceil(this.width_*this.imagePixelRatio_),this.declutterMode_,this.declutterImageWithText_]),this.hitDetectionInstructions.push([z.DRAW_IMAGE,s,r,this.hitDetectionImage_,this.anchorX_,this.anchorY_,this.height_,this.opacity_,this.originX_,this.originY_,this.rotateWithView_,this.rotation_,this.scale_,this.width_,this.declutterMode_,this.declutterImageWithText_]),this.endGeometry(e)}drawMultiPoint(t,e){if(!this.image_)return;this.beginGeometry(t,e);const i=t.getFlatCoordinates(),n=t.getStride(),s=this.coordinates.length,r=this.appendFlatPointCoordinates(i,n);this.instructions.push([z.DRAW_IMAGE,s,r,this.image_,this.anchorX_*this.imagePixelRatio_,this.anchorY_*this.imagePixelRatio_,Math.ceil(this.height_*this.imagePixelRatio_),this.opacity_,this.originX_*this.imagePixelRatio_,this.originY_*this.imagePixelRatio_,this.rotateWithView_,this.rotation_,[this.scale_[0]*this.pixelRatio/this.imagePixelRatio_,this.scale_[1]*this.pixelRatio/this.imagePixelRatio_],Math.ceil(this.width_*this.imagePixelRatio_),this.declutterMode_,this.declutterImageWithText_]),this.hitDetectionInstructions.push([z.DRAW_IMAGE,s,r,this.hitDetectionImage_,this.anchorX_,this.anchorY_,this.height_,this.opacity_,this.originX_,this.originY_,this.rotateWithView_,this.rotation_,this.scale_,this.width_,this.declutterMode_,this.declutterImageWithText_]),this.endGeometry(e)}finish(){return this.reverseHitDetectionInstructions(),this.anchorX_=void 0,this.anchorY_=void 0,this.hitDetectionImage_=null,this.image_=null,this.imagePixelRatio_=void 0,this.height_=void 0,this.scale_=void 0,this.opacity_=void 0,this.originX_=void 0,this.originY_=void 0,this.rotateWithView_=void 0,this.rotation_=void 0,this.width_=void 0,super.finish()}setImageStyle(t,e){const i=t.getAnchor(),n=t.getSize(),s=t.getOrigin();this.imagePixelRatio_=t.getPixelRatio(this.pixelRatio),this.anchorX_=i[0],this.anchorY_=i[1],this.hitDetectionImage_=t.getHitDetectionImage(),this.image_=t.getImage(this.pixelRatio),this.height_=n[1],this.opacity_=t.getOpacity(),this.originX_=s[0],this.originY_=s[1],this.rotateWithView_=t.getRotateWithView(),this.rotation_=t.getRotation(),this.scale_=t.getScaleArray(),this.width_=n[0],this.declutterMode_=t.getDeclutterMode(),this.declutterImageWithText_=e}},LineString:class extends V{constructor(t,e,i,n){super(t,e,i,n)}drawFlatCoordinates_(t,e,i,n){const s=this.coordinates.length,r=this.appendFlatLineCoordinates(t,e,i,n,!1,!1),o=[z.MOVE_TO_LINE_TO,s,r];return this.instructions.push(o),this.hitDetectionInstructions.push(o),i}drawLineString(t,e){const i=this.state,n=i.strokeStyle,s=i.lineWidth;if(void 0===n||void 0===s)return;this.updateStrokeStyle(i,this.applyStroke),this.beginGeometry(t,e),this.hitDetectionInstructions.push([z.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,j.X9,j.He],F);const r=t.getFlatCoordinates(),o=t.getStride();this.drawFlatCoordinates_(r,0,r.length,o),this.hitDetectionInstructions.push(Z),this.endGeometry(e)}drawMultiLineString(t,e){const i=this.state,n=i.strokeStyle,s=i.lineWidth;if(void 0===n||void 0===s)return;this.updateStrokeStyle(i,this.applyStroke),this.beginGeometry(t,e),this.hitDetectionInstructions.push([z.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,i.lineDash,i.lineDashOffset],F);const r=t.getEnds(),o=t.getFlatCoordinates(),a=t.getStride();let l=0;for(let t=0,e=r.length;t<e;++t)l=this.drawFlatCoordinates_(o,l,r[t],a);this.hitDetectionInstructions.push(Z),this.endGeometry(e)}finish(){const t=this.state;return null!=t.lastStroke&&t.lastStroke!=this.coordinates.length&&this.instructions.push(Z),this.reverseHitDetectionInstructions(),this.state=null,super.finish()}applyStroke(t){null!=t.lastStroke&&t.lastStroke!=this.coordinates.length&&(this.instructions.push(Z),t.lastStroke=this.coordinates.length),t.lastStroke=0,super.applyStroke(t),this.instructions.push(F)}},Polygon:K,Text:class extends V{constructor(t,e,i,n){super(t,e,i,n),this.labels_=null,this.text_="",this.textOffsetX_=0,this.textOffsetY_=0,this.textRotateWithView_=void 0,this.textRotation_=0,this.textFillState_=null,this.fillStates={},this.textStrokeState_=null,this.strokeStates={},this.textState_={},this.textStates={},this.textKey_="",this.fillKey_="",this.strokeKey_="",this.declutterImageWithText_=void 0}finish(){const t=super.finish();return t.textStates=this.textStates,t.fillStates=this.fillStates,t.strokeStates=this.strokeStates,t}drawText(t,e){const i=this.textFillState_,n=this.textStrokeState_,s=this.textState_;if(""===this.text_||!s||!i&&!n)return;const r=this.coordinates;let o=r.length;const a=t.getType();let l=null,h=t.getStride();if("line"!==s.placement||"LineString"!=a&&"MultiLineString"!=a&&"Polygon"!=a&&"MultiPolygon"!=a){let i=s.overflow?null:[];switch(a){case"Point":case"MultiPoint":l=t.getFlatCoordinates();break;case"LineString":l=t.getFlatMidpoint();break;case"Circle":l=t.getCenter();break;case"MultiLineString":l=t.getFlatMidpoints(),h=2;break;case"Polygon":l=t.getFlatInteriorPoint(),s.overflow||i.push(l[2]/this.resolution),h=3;break;case"MultiPolygon":const e=t.getFlatInteriorPoints();l=[];for(let t=0,n=e.length;t<n;t+=3)s.overflow||i.push(e[t+2]/this.resolution),l.push(e[t],e[t+1]);if(0===l.length)return;h=2}const n=this.appendFlatPointCoordinates(l,h);if(n===o)return;if(i&&(n-o)/2!=l.length/h){let t=o/2;i=i.filter(((e,i)=>{const n=r[2*(t+i)]===l[i*h]&&r[2*(t+i)+1]===l[i*h+1];return n||--t,n}))}this.saveTextStates_(),(s.backgroundFill||s.backgroundStroke)&&(this.setFillStrokeStyle(s.backgroundFill,s.backgroundStroke),s.backgroundFill&&(this.updateFillStyle(this.state,this.createFill),this.hitDetectionInstructions.push(this.createFill(this.state))),s.backgroundStroke&&(this.updateStrokeStyle(this.state,this.applyStroke),this.hitDetectionInstructions.push(this.createStroke(this.state)))),this.beginGeometry(t,e);let c=s.padding;if(c!=j.oB&&(s.scale[0]<0||s.scale[1]<0)){let t=s.padding[0],e=s.padding[1],i=s.padding[2],n=s.padding[3];s.scale[0]<0&&(e=-e,n=-n),s.scale[1]<0&&(t=-t,i=-i),c=[t,e,i,n]}const u=this.pixelRatio;this.instructions.push([z.DRAW_IMAGE,o,n,null,NaN,NaN,NaN,1,0,0,this.textRotateWithView_,this.textRotation_,[1,1],NaN,void 0,this.declutterImageWithText_,c==j.oB?j.oB:c.map((function(t){return t*u})),!!s.backgroundFill,!!s.backgroundStroke,this.text_,this.textKey_,this.strokeKey_,this.fillKey_,this.textOffsetX_,this.textOffsetY_,i]);const d=1/u;this.hitDetectionInstructions.push([z.DRAW_IMAGE,o,n,null,NaN,NaN,NaN,1,0,0,this.textRotateWithView_,this.textRotation_,[d,d],NaN,void 0,this.declutterImageWithText_,c,!!s.backgroundFill,!!s.backgroundStroke,this.text_,this.textKey_,this.strokeKey_,this.fillKey_,this.textOffsetX_,this.textOffsetY_,i]),this.endGeometry(e)}else{if(!(0,W.kK)(this.getBufferedMaxExtent(),t.getExtent()))return;let i;if(l=t.getFlatCoordinates(),"LineString"==a)i=[l.length];else if("MultiLineString"==a)i=t.getEnds();else if("Polygon"==a)i=t.getEnds().slice(0,1);else if("MultiPolygon"==a){const e=t.getEndss();i=[];for(let t=0,n=e.length;t<n;++t)i.push(e[t][0])}this.beginGeometry(t,e);const n=s.textAlign;let c,u=0;for(let t=0,e=i.length;t<e;++t){if(null==n){const e=H(s.maxAngle,l,u,i[t],h);u=e[0],c=e[1]}else c=i[t];for(let t=u;t<c;t+=h)r.push(l[t],l[t+1]);const e=r.length;u=i[t],this.drawChars_(o,e),o=e}this.endGeometry(e)}}saveTextStates_(){const t=this.textStrokeState_,e=this.textState_,i=this.textFillState_,n=this.strokeKey_;t&&(n in this.strokeStates||(this.strokeStates[n]={strokeStyle:t.strokeStyle,lineCap:t.lineCap,lineDashOffset:t.lineDashOffset,lineWidth:t.lineWidth,lineJoin:t.lineJoin,miterLimit:t.miterLimit,lineDash:t.lineDash}));const s=this.textKey_;s in this.textStates||(this.textStates[s]={font:e.font,textAlign:e.textAlign||j.PH,justify:e.justify,textBaseline:e.textBaseline||j.ru,scale:e.scale});const r=this.fillKey_;i&&(r in this.fillStates||(this.fillStates[r]={fillStyle:i.fillStyle}))}drawChars_(t,e){const i=this.textStrokeState_,n=this.textState_,s=this.strokeKey_,r=this.textKey_,o=this.fillKey_;this.saveTextStates_();const a=this.pixelRatio,l=q[n.textBaseline],h=this.textOffsetY_*a,c=this.text_,u=i?i.lineWidth*Math.abs(n.scale[0])/2:0;this.instructions.push([z.DRAW_CHARS,t,e,l,n.overflow,o,n.maxAngle,a,h,s,u*a,c,r,1]),this.hitDetectionInstructions.push([z.DRAW_CHARS,t,e,l,n.overflow,o,n.maxAngle,1,h,s,u,c,r,1/a])}setTextStyle(t,e){let i,n,s;if(t){const e=t.getFill();e?(n=this.textFillState_,n||(n={},this.textFillState_=n),n.fillStyle=(0,B.y)(e.getColor()||j.bL)):(n=null,this.textFillState_=n);const r=t.getStroke();if(r){s=this.textStrokeState_,s||(s={},this.textStrokeState_=s);const t=r.getLineDash(),e=r.getLineDashOffset(),i=r.getWidth(),n=r.getMiterLimit();s.lineCap=r.getLineCap()||j.mb,s.lineDash=t?t.slice():j.X9,s.lineDashOffset=void 0===e?j.He:e,s.lineJoin=r.getLineJoin()||j.rc,s.lineWidth=void 0===i?j.yC:i,s.miterLimit=void 0===n?j.V4:n,s.strokeStyle=(0,B.y)(r.getColor()||j.Tx)}else s=null,this.textStrokeState_=s;i=this.textState_;const o=t.getFont()||j.Df;(0,j.Qx)(o);const a=t.getScaleArray();i.overflow=t.getOverflow(),i.font=o,i.maxAngle=t.getMaxAngle(),i.placement=t.getPlacement(),i.textAlign=t.getTextAlign(),i.justify=t.getJustify(),i.textBaseline=t.getTextBaseline()||j.ru,i.backgroundFill=t.getBackgroundFill(),i.backgroundStroke=t.getBackgroundStroke(),i.padding=t.getPadding()||j.oB,i.scale=void 0===a?[1,1]:a;const l=t.getOffsetX(),h=t.getOffsetY(),c=t.getRotateWithView(),u=t.getRotation();this.text_=t.getText()||"",this.textOffsetX_=void 0===l?0:l,this.textOffsetY_=void 0===h?0:h,this.textRotateWithView_=void 0!==c&&c,this.textRotation_=void 0===u?0:u,this.strokeKey_=s?("string"==typeof s.strokeStyle?s.strokeStyle:(0,y.sq)(s.strokeStyle))+s.lineCap+s.lineDashOffset+"|"+s.lineWidth+s.lineJoin+s.miterLimit+"["+s.lineDash.join()+"]":"",this.textKey_=i.font+i.scale+(i.textAlign||"?")+(i.justify||"?")+(i.textBaseline||"?"),this.fillKey_=n?"string"==typeof n.fillStyle?n.fillStyle:"|"+(0,y.sq)(n.fillStyle):""}else this.text_="";this.declutterImageWithText_=e}}},$=class{constructor(t,e,i,n){this.tolerance_=t,this.maxExtent_=e,this.pixelRatio_=n,this.resolution_=i,this.buildersByZIndex_={}}finish(){const t={};for(const e in this.buildersByZIndex_){t[e]=t[e]||{};const i=this.buildersByZIndex_[e];for(const n in i){const s=i[n].finish();t[e][n]=s}}return t}getBuilder(t,e){const i=void 0!==t?t.toString():"0";let n=this.buildersByZIndex_[i];void 0===n&&(n={},this.buildersByZIndex_[i]=n);let s=n[e];return void 0===s&&(s=new(0,J[e])(this.tolerance_,this.maxExtent_,this.resolution_,this.pixelRatio_),n[e]=s),s}};var Q=i(6101),tt=i(3983),et=i(6442);function it(t,e,i,n,s,r,o,a,l,h,c,u){let d=t[e],g=t[e+1],_=0,f=0,p=0,m=0;function v(){_=d,f=g,d=t[e+=n],g=t[e+1],m+=p,p=Math.sqrt((d-_)*(d-_)+(g-f)*(g-f))}do{v()}while(e<i-n&&m+p<r);let y=0===p?0:(r-m)/p;const x=(0,tt.t7)(_,d,y),w=(0,tt.t7)(f,g,y),S=e-n,E=m,b=r+a*l(h,s,c);for(;e<i-n&&m+p<b;)v();y=0===p?0:(b-m)/p;const C=(0,tt.t7)(_,d,y),T=(0,tt.t7)(f,g,y);let R;if(u){const t=[x,w,C,T];(0,et.U1)(t,0,4,2,u,t,t),R=t[0]>t[2]}else R=x>C;const I=Math.PI,k=[],M=S+n===e;let L;if(p=0,m=E,d=t[e=S],g=t[e+1],M){v(),L=Math.atan2(g-f,d-_),R&&(L+=L>0?-I:I);const t=(C+x)/2,e=(T+w)/2;return k[0]=[t,e,(b-r)/2,L,s],k}for(let t=0,u=(s=s.replace(/\n/g," ")).length;t<u;){v();let x=Math.atan2(g-f,d-_);if(R&&(x+=x>0?-I:I),void 0!==L){let t=x-L;if(t+=t>I?-2*I:t<-I?2*I:0,Math.abs(t)>o)return null}L=x;const w=t;let S=0;for(;t<u;++t){const o=a*l(h,s[R?u-t-1:t],c);if(e+n<i&&m+p<r+S+o/2)break;S+=o}if(t===w)continue;const E=R?s.substring(u-w,u-t):s.substring(w,t);y=0===p?0:(r+S/2-m)/p;const b=(0,tt.t7)(_,d,y),C=(0,tt.t7)(f,g,y);k.push([b,C,S/2,x,E]),r+=S}return k}function nt(t,e,i,n){let s=t[e],r=t[e+1],o=0;for(let a=e+n;a<i;a+=n){const e=t[a],i=t[a+1];o+=Math.sqrt((e-s)*(e-s)+(i-r)*(i-r)),s=e,r=i}return o}const st=(0,W.lJ)(),rt=[],ot=[],at=[],lt=[];function ht(t){return t[3].declutterBox}const ct=new RegExp("["+String.fromCharCode(1425)+"-"+String.fromCharCode(2303)+String.fromCharCode(64285)+"-"+String.fromCharCode(65023)+String.fromCharCode(65136)+"-"+String.fromCharCode(65276)+String.fromCharCode(67584)+"-"+String.fromCharCode(69631)+String.fromCharCode(124928)+"-"+String.fromCharCode(126975)+"]");function ut(t,e){return"start"!==e&&"end"!==e||ct.test(t)||(e="start"===e?"left":"right"),q[e]}function dt(t,e,i){return i>0&&t.push("\n",""),t.push(e,""),t}const gt=class{constructor(t,e,i,n){this.overlaps=i,this.pixelRatio=e,this.resolution=t,this.alignFill_,this.instructions=n.instructions,this.coordinates=n.coordinates,this.coordinateCache_={},this.renderedTransform_=(0,Q.Ue)(),this.hitDetectionInstructions=n.hitDetectionInstructions,this.pixelCoordinates_=null,this.viewRotation_=0,this.fillStates=n.fillStates||{},this.strokeStates=n.strokeStates||{},this.textStates=n.textStates||{},this.widths_={},this.labels_={}}createLabel(t,e,i,n){const s=t+e+i+n;if(this.labels_[s])return this.labels_[s];const r=n?this.strokeStates[n]:null,o=i?this.fillStates[i]:null,a=this.textStates[e],l=this.pixelRatio,h=[a.scale[0]*l,a.scale[1]*l],c=Array.isArray(t),u=a.justify?q[a.justify]:ut(Array.isArray(t)?t[0]:t,a.textAlign||j.PH),d=n&&r.lineWidth?r.lineWidth:0,g=c?t:t.split("\n").reduce(dt,[]),{width:_,height:f,widths:p,heights:m,lineWidths:v}=(0,j.Zw)(a,g),y=_+d,x=[],w=(y+2)*h[0],S=(f+d)*h[1],E={width:w<0?Math.floor(w):Math.ceil(w),height:S<0?Math.floor(S):Math.ceil(S),contextInstructions:x};1==h[0]&&1==h[1]||x.push("scale",h),n&&(x.push("strokeStyle",r.strokeStyle),x.push("lineWidth",d),x.push("lineCap",r.lineCap),x.push("lineJoin",r.lineJoin),x.push("miterLimit",r.miterLimit),x.push("setLineDash",[r.lineDash]),x.push("lineDashOffset",r.lineDashOffset)),i&&x.push("fillStyle",o.fillStyle),x.push("textBaseline","middle"),x.push("textAlign","center");const b=.5-u;let C=u*y+b*d;const T=[],R=[];let I,k=0,M=0,L=0,P=0;for(let t=0,e=g.length;t<e;t+=2){const e=g[t];if("\n"===e){M+=k,k=0,C=u*y+b*d,++P;continue}const s=g[t+1]||a.font;s!==I&&(n&&T.push("font",s),i&&R.push("font",s),I=s),k=Math.max(k,m[L]);const r=[e,C+b*p[L]+u*(p[L]-v[P]),.5*(d+k)+M];C+=p[L],n&&T.push("strokeText",r),i&&R.push("fillText",r),++L}return Array.prototype.push.apply(x,T),Array.prototype.push.apply(x,R),this.labels_[s]=E,E}replayTextBackground_(t,e,i,n,s,r,o){t.beginPath(),t.moveTo.apply(t,e),t.lineTo.apply(t,i),t.lineTo.apply(t,n),t.lineTo.apply(t,s),t.lineTo.apply(t,e),r&&(this.alignFill_=r[2],this.fill_(t)),o&&(this.setStrokeStyle_(t,o),t.stroke())}calculateImageOrLabelDimensions_(t,e,i,n,s,r,o,a,l,h,c,u,d,g,_,f){let p=i-(o*=u[0]),m=n-(a*=u[1]);const v=s+l>t?t-l:s,y=r+h>e?e-h:r,x=g[3]+v*u[0]+g[1],w=g[0]+y*u[1]+g[2],S=p-g[3],E=m-g[0];let b;return(_||0!==c)&&(rt[0]=S,lt[0]=S,rt[1]=E,ot[1]=E,ot[0]=S+x,at[0]=ot[0],at[1]=E+w,lt[1]=at[1]),0!==c?(b=(0,Q.qC)((0,Q.Ue)(),i,n,1,1,c,-i,-n),(0,Q.nn)(b,rt),(0,Q.nn)(b,ot),(0,Q.nn)(b,at),(0,Q.nn)(b,lt),(0,W.T9)(Math.min(rt[0],ot[0],at[0],lt[0]),Math.min(rt[1],ot[1],at[1],lt[1]),Math.max(rt[0],ot[0],at[0],lt[0]),Math.max(rt[1],ot[1],at[1],lt[1]),st)):(0,W.T9)(Math.min(S,S+x),Math.min(E,E+w),Math.max(S,S+x),Math.max(E,E+w),st),d&&(p=Math.round(p),m=Math.round(m)),{drawImageX:p,drawImageY:m,drawImageW:v,drawImageH:y,originX:l,originY:h,declutterBox:{minX:st[0],minY:st[1],maxX:st[2],maxY:st[3],value:f},canvasTransform:b,scale:u}}replayImageOrLabel_(t,e,i,n,s,r,o){const a=!(!r&&!o),l=n.declutterBox,h=t.canvas,c=o?o[2]*n.scale[0]/2:0;return l.minX-c<=h.width/e&&l.maxX+c>=0&&l.minY-c<=h.height/e&&l.maxY+c>=0&&(a&&this.replayTextBackground_(t,rt,ot,at,lt,r,o),(0,j._f)(t,n.canvasTransform,s,i,n.originX,n.originY,n.drawImageW,n.drawImageH,n.drawImageX,n.drawImageY,n.scale)),!0}fill_(t){if(this.alignFill_){const e=(0,Q.nn)(this.renderedTransform_,[0,0]),i=512*this.pixelRatio;t.save(),t.translate(e[0]%i,e[1]%i),t.rotate(this.viewRotation_)}t.fill(),this.alignFill_&&t.restore()}setStrokeStyle_(t,e){t.strokeStyle=e[1],t.lineWidth=e[2],t.lineCap=e[3],t.lineJoin=e[4],t.miterLimit=e[5],t.lineDashOffset=e[7],t.setLineDash(e[6])}drawLabelWithPointPlacement_(t,e,i,n){const s=this.textStates[e],r=this.createLabel(t,e,n,i),o=this.strokeStates[i],a=this.pixelRatio,l=ut(Array.isArray(t)?t[0]:t,s.textAlign||j.PH),h=q[s.textBaseline||j.ru],c=o&&o.lineWidth?o.lineWidth:0;return{label:r,anchorX:l*(r.width/a-2*s.scale[0])+2*(.5-l)*c,anchorY:h*r.height/a+2*(.5-h)*c}}execute_(t,e,i,n,s,r,o,a){let l;this.pixelCoordinates_&&(0,U.fS)(i,this.renderedTransform_)?l=this.pixelCoordinates_:(this.pixelCoordinates_||(this.pixelCoordinates_=[]),l=(0,et.vT)(this.coordinates,0,this.coordinates.length,2,i,this.pixelCoordinates_),(0,Q.lk)(this.renderedTransform_,i));let h=0;const c=n.length;let u,d,g,_,f,p,m,v,y,x,w,S,E=0,b=0,C=0,T=null,R=null;const I=this.coordinateCache_,k=this.viewRotation_,M=Math.round(1e12*Math.atan2(-i[1],i[0]))/1e12,L={context:t,pixelRatio:this.pixelRatio,resolution:this.resolution,rotation:k},P=this.instructions!=n||this.overlaps?0:200;let O,A,Z,F;for(;h<c;){const i=n[h];switch(i[0]){case z.BEGIN_GEOMETRY:O=i[1],F=i[3],O.getGeometry()?void 0===o||(0,W.kK)(o,F.getExtent())?++h:h=i[2]+1:h=i[2];break;case z.BEGIN_PATH:b>P&&(this.fill_(t),b=0),C>P&&(t.stroke(),C=0),b||C||(t.beginPath(),_=NaN,f=NaN),++h;break;case z.CIRCLE:E=i[1];const n=l[E],c=l[E+1],D=l[E+2]-n,N=l[E+3]-c,G=Math.sqrt(D*D+N*N);t.moveTo(n+G,c),t.arc(n,c,G,0,2*Math.PI,!0),++h;break;case z.CLOSE_PATH:t.closePath(),++h;break;case z.CUSTOM:E=i[1],u=i[2];const B=i[3],U=i[4],Y=6==i.length?i[5]:void 0;L.geometry=B,L.feature=O,h in I||(I[h]=[]);const V=I[h];Y?Y(l,E,u,2,V):(V[0]=l[E],V[1]=l[E+1],V.length=2),U(V,L),++h;break;case z.DRAW_IMAGE:E=i[1],u=i[2],v=i[3],d=i[4],g=i[5];let X=i[6];const K=i[7],H=i[8],J=i[9],$=i[10];let Q=i[11];const tt=i[12];let et=i[13];const st=i[14],rt=i[15];if(!v&&i.length>=20){y=i[19],x=i[20],w=i[21],S=i[22];const t=this.drawLabelWithPointPlacement_(y,x,w,S);v=t.label,i[3]=v;const e=i[23];d=(t.anchorX-e)*this.pixelRatio,i[4]=d;const n=i[24];g=(t.anchorY-n)*this.pixelRatio,i[5]=g,X=v.height,i[6]=X,et=v.width,i[13]=et}let ot,at,lt,ct;i.length>25&&(ot=i[25]),i.length>17?(at=i[16],lt=i[17],ct=i[18]):(at=j.oB,lt=!1,ct=!1),$&&M?Q+=k:$||M||(Q-=k);let ut=0;for(;E<u;E+=2){if(ot&&ot[ut++]<et/this.pixelRatio)continue;const i=this.calculateImageOrLabelDimensions_(v.width,v.height,l[E],l[E+1],et,X,d,g,H,J,Q,tt,s,at,lt||ct,O),n=[t,e,v,i,K,lt?T:null,ct?R:null];if(a){if("none"===st)continue;if("obstacle"===st){a.insert(i.declutterBox);continue}{let t,e;if(rt){const i=u-E;if(!rt[i]){rt[i]=n;continue}if(t=rt[i],delete rt[i],e=ht(t),a.collides(e))continue}if(a.collides(i.declutterBox))continue;t&&(a.insert(e),this.replayImageOrLabel_.apply(this,t)),a.insert(i.declutterBox)}}this.replayImageOrLabel_.apply(this,n)}++h;break;case z.DRAW_CHARS:const dt=i[1],gt=i[2],_t=i[3],ft=i[4];S=i[5];const pt=i[6],mt=i[7],vt=i[8];w=i[9];const yt=i[10];y=i[11],x=i[12];const xt=[i[13],i[13]],wt=this.textStates[x],St=wt.font,Et=[wt.scale[0]*mt,wt.scale[1]*mt];let bt;St in this.widths_?bt=this.widths_[St]:(bt={},this.widths_[St]=bt);const Ct=nt(l,dt,gt,2),Tt=Math.abs(Et[0])*(0,j.Kd)(St,y,bt);if(ft||Tt<=Ct){const i=this.textStates[x].textAlign,n=it(l,dt,gt,2,y,(Ct-Tt)*q[i],pt,Math.abs(Et[0]),j.Kd,St,bt,M?0:this.viewRotation_);t:if(n){const i=[];let s,r,o,l,h;if(w)for(s=0,r=n.length;s<r;++s){h=n[s],o=h[4],l=this.createLabel(o,x,"",w),d=h[2]+(Et[0]<0?-yt:yt),g=_t*l.height+2*(.5-_t)*yt*Et[1]/Et[0]-vt;const r=this.calculateImageOrLabelDimensions_(l.width,l.height,h[0],h[1],l.width,l.height,d,g,0,0,h[3],xt,!1,j.oB,!1,O);if(a&&a.collides(r.declutterBox))break t;i.push([t,e,l,r,1,null,null])}if(S)for(s=0,r=n.length;s<r;++s){h=n[s],o=h[4],l=this.createLabel(o,x,S,""),d=h[2],g=_t*l.height-vt;const r=this.calculateImageOrLabelDimensions_(l.width,l.height,h[0],h[1],l.width,l.height,d,g,0,0,h[3],xt,!1,j.oB,!1,O);if(a&&a.collides(r.declutterBox))break t;i.push([t,e,l,r,1,null,null])}a&&a.load(i.map(ht));for(let t=0,e=i.length;t<e;++t)this.replayImageOrLabel_.apply(this,i[t])}}++h;break;case z.END_GEOMETRY:if(void 0!==r){O=i[1];const t=r(O,F);if(t)return t}++h;break;case z.FILL:P?b++:this.fill_(t),++h;break;case z.MOVE_TO_LINE_TO:for(E=i[1],u=i[2],A=l[E],Z=l[E+1],p=A+.5|0,m=Z+.5|0,p===_&&m===f||(t.moveTo(A,Z),_=p,f=m),E+=2;E<u;E+=2)A=l[E],Z=l[E+1],p=A+.5|0,m=Z+.5|0,E!=u-2&&p===_&&m===f||(t.lineTo(A,Z),_=p,f=m);++h;break;case z.SET_FILL_STYLE:T=i,this.alignFill_=i[2],b&&(this.fill_(t),b=0,C&&(t.stroke(),C=0)),t.fillStyle=i[1],++h;break;case z.SET_STROKE_STYLE:R=i,C&&(t.stroke(),C=0),this.setStrokeStyle_(t,i),++h;break;case z.STROKE:P?C++:t.stroke(),++h;break;default:++h}}b&&this.fill_(t),C&&t.stroke()}execute(t,e,i,n,s,r){this.viewRotation_=n,this.execute_(t,e,i,this.instructions,s,void 0,void 0,r)}executeHitDetection(t,e,i,n,s){return this.viewRotation_=i,this.execute_(t,1,e,this.hitDetectionInstructions,!0,n,s)}};var _t=i(9374);const ft=["Polygon","Circle","LineString","Image","Text","Default"],pt={},mt=class{constructor(t,e,i,n,s,r){this.maxExtent_=t,this.overlaps_=n,this.pixelRatio_=i,this.resolution_=e,this.renderBuffer_=r,this.executorsByZIndex_={},this.hitDetectionContext_=null,this.hitDetectionTransform_=(0,Q.Ue)(),this.createExecutors_(s)}clip(t,e){const i=this.getClipCoords(e);t.beginPath(),t.moveTo(i[0],i[1]),t.lineTo(i[2],i[3]),t.lineTo(i[4],i[5]),t.lineTo(i[6],i[7]),t.clip()}createExecutors_(t){for(const e in t){let i=this.executorsByZIndex_[e];void 0===i&&(i={},this.executorsByZIndex_[e]=i);const n=t[e];for(const t in n){const e=n[t];i[t]=new gt(this.resolution_,this.pixelRatio_,this.overlaps_,e)}}}hasExecutors(t){for(const e in this.executorsByZIndex_){const i=this.executorsByZIndex_[e];for(let e=0,n=t.length;e<n;++e)if(t[e]in i)return!0}return!1}forEachFeatureAtCoordinate(t,e,i,n,s,r){const o=2*(n=Math.round(n))+1,a=(0,Q.qC)(this.hitDetectionTransform_,n+.5,n+.5,1/e,-1/e,-i,-t[0],-t[1]),l=!this.hitDetectionContext_;l&&(this.hitDetectionContext_=(0,_.E4)(o,o,void 0,{willReadFrequently:!0}));const h=this.hitDetectionContext_;let c;h.canvas.width!==o||h.canvas.height!==o?(h.canvas.width=o,h.canvas.height=o):l||h.clearRect(0,0,o,o),void 0!==this.renderBuffer_&&(c=(0,W.lJ)(),(0,W.Wj)(c,t),(0,W.f3)(c,e*(this.renderBuffer_+n),c));const u=function(t){if(void 0!==pt[t])return pt[t];const e=2*t+1,i=t*t,n=new Array(i+1);for(let s=0;s<=t;++s)for(let r=0;r<=t;++r){const o=s*s+r*r;if(o>i)break;let a=n[o];a||(a=[],n[o]=a),a.push(4*((t+s)*e+(t+r))+3),s>0&&a.push(4*((t-s)*e+(t+r))+3),r>0&&(a.push(4*((t+s)*e+(t-r))+3),s>0&&a.push(4*((t-s)*e+(t-r))+3))}const s=[];for(let t=0,e=n.length;t<e;++t)n[t]&&s.push(...n[t]);return pt[t]=s,s}(n);let d;function g(t,e){const i=h.getImageData(0,0,o,o).data;for(let a=0,l=u.length;a<l;a++)if(i[u[a]]>0){if(!r||"Image"!==d&&"Text"!==d||r.includes(t)){const i=(u[a]-3)/4,r=n-i%o,l=n-(i/o|0),h=s(t,e,r*r+l*l);if(h)return h}h.clearRect(0,0,o,o);break}}const f=Object.keys(this.executorsByZIndex_).map(Number);let p,m,v,y,x;for(f.sort(U.j2),p=f.length-1;p>=0;--p){const t=f[p].toString();for(v=this.executorsByZIndex_[t],m=ft.length-1;m>=0;--m)if(d=ft[m],y=v[d],void 0!==y&&(x=y.executeHitDetection(h,a,i,g,c),x))return x}}getClipCoords(t){const e=this.maxExtent_;if(!e)return null;const i=e[0],n=e[1],s=e[2],r=e[3],o=[i,n,i,r,s,r,s,n];return(0,et.vT)(o,0,8,2,t,o),o}isEmpty(){return(0,_t.x)(this.executorsByZIndex_)}execute(t,e,i,n,s,r,o){const a=Object.keys(this.executorsByZIndex_).map(Number);let l,h,c,u,d,g;for(a.sort(U.j2),this.maxExtent_&&(t.save(),this.clip(t,i)),r=r||ft,o&&a.reverse(),l=0,h=a.length;l<h;++l){const h=a[l].toString();for(d=this.executorsByZIndex_[h],c=0,u=r.length;c<u;++c)g=d[r[c]],void 0!==g&&g.execute(t,e,i,n,s,o)}this.maxExtent_&&t.restore()}};var vt=i(4708),yt=i(7195),xt=i(7755),wt=i(6762);const St=class extends G{constructor(t,e,i,n,s,r,o){super(),this.context_=t,this.pixelRatio_=e,this.extent_=i,this.transform_=n,this.transformRotation_=n?(0,tt.FH)(Math.atan2(n[1],n[0]),10):0,this.viewRotation_=s,this.squaredTolerance_=r,this.userTransform_=o,this.contextFillState_=null,this.contextStrokeState_=null,this.contextTextState_=null,this.fillState_=null,this.strokeState_=null,this.image_=null,this.imageAnchorX_=0,this.imageAnchorY_=0,this.imageHeight_=0,this.imageOpacity_=0,this.imageOriginX_=0,this.imageOriginY_=0,this.imageRotateWithView_=!1,this.imageRotation_=0,this.imageScale_=[0,0],this.imageWidth_=0,this.text_="",this.textOffsetX_=0,this.textOffsetY_=0,this.textRotateWithView_=!1,this.textRotation_=0,this.textScale_=[0,0],this.textFillState_=null,this.textStrokeState_=null,this.textState_=null,this.pixelCoordinates_=[],this.tmpLocalTransform_=(0,Q.Ue)()}drawImages_(t,e,i,n){if(!this.image_)return;const s=(0,et.vT)(t,e,i,n,this.transform_,this.pixelCoordinates_),r=this.context_,o=this.tmpLocalTransform_,a=r.globalAlpha;1!=this.imageOpacity_&&(r.globalAlpha=a*this.imageOpacity_);let l=this.imageRotation_;0===this.transformRotation_&&(l-=this.viewRotation_),this.imageRotateWithView_&&(l+=this.viewRotation_);for(let t=0,e=s.length;t<e;t+=2){const e=s[t]-this.imageAnchorX_,i=s[t+1]-this.imageAnchorY_;if(0!==l||1!=this.imageScale_[0]||1!=this.imageScale_[1]){const t=e+this.imageAnchorX_,n=i+this.imageAnchorY_;(0,Q.qC)(o,t,n,1,1,l,-t,-n),r.setTransform.apply(r,o),r.translate(t,n),r.scale(this.imageScale_[0],this.imageScale_[1]),r.drawImage(this.image_,this.imageOriginX_,this.imageOriginY_,this.imageWidth_,this.imageHeight_,-this.imageAnchorX_,-this.imageAnchorY_,this.imageWidth_,this.imageHeight_),r.setTransform(1,0,0,1,0,0)}else r.drawImage(this.image_,this.imageOriginX_,this.imageOriginY_,this.imageWidth_,this.imageHeight_,e,i,this.imageWidth_,this.imageHeight_)}1!=this.imageOpacity_&&(r.globalAlpha=a)}drawText_(t,e,i,n){if(!this.textState_||""===this.text_)return;this.textFillState_&&this.setContextFillState_(this.textFillState_),this.textStrokeState_&&this.setContextStrokeState_(this.textStrokeState_),this.setContextTextState_(this.textState_);const s=(0,et.vT)(t,e,i,n,this.transform_,this.pixelCoordinates_),r=this.context_;let o=this.textRotation_;for(0===this.transformRotation_&&(o-=this.viewRotation_),this.textRotateWithView_&&(o+=this.viewRotation_);e<i;e+=n){const t=s[e]+this.textOffsetX_,i=s[e+1]+this.textOffsetY_;0!==o||1!=this.textScale_[0]||1!=this.textScale_[1]?(r.translate(t-this.textOffsetX_,i-this.textOffsetY_),r.rotate(o),r.translate(this.textOffsetX_,this.textOffsetY_),r.scale(this.textScale_[0],this.textScale_[1]),this.textStrokeState_&&r.strokeText(this.text_,0,0),this.textFillState_&&r.fillText(this.text_,0,0),r.setTransform(1,0,0,1,0,0)):(this.textStrokeState_&&r.strokeText(this.text_,t,i),this.textFillState_&&r.fillText(this.text_,t,i))}}moveToLineTo_(t,e,i,n,s){const r=this.context_,o=(0,et.vT)(t,e,i,n,this.transform_,this.pixelCoordinates_);r.moveTo(o[0],o[1]);let a=o.length;s&&(a-=2);for(let t=2;t<a;t+=2)r.lineTo(o[t],o[t+1]);return s&&r.closePath(),i}drawRings_(t,e,i,n){for(let s=0,r=i.length;s<r;++s)e=this.moveToLineTo_(t,e,i[s],n,!0);return e}drawCircle(t){if((0,W.kK)(this.extent_,t.getExtent())){if(this.fillState_||this.strokeState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);const e=(0,wt.Kr)(t,this.transform_,this.pixelCoordinates_),i=e[2]-e[0],n=e[3]-e[1],s=Math.sqrt(i*i+n*n),r=this.context_;r.beginPath(),r.arc(e[0],e[1],s,0,2*Math.PI),this.fillState_&&r.fill(),this.strokeState_&&r.stroke()}""!==this.text_&&this.drawText_(t.getCenter(),0,2,2)}}setStyle(t){this.setFillStrokeStyle(t.getFill(),t.getStroke()),this.setImageStyle(t.getImage()),this.setTextStyle(t.getText())}setTransform(t){this.transform_=t}drawGeometry(t){switch(t.getType()){case"Point":this.drawPoint(t);break;case"LineString":this.drawLineString(t);break;case"Polygon":this.drawPolygon(t);break;case"MultiPoint":this.drawMultiPoint(t);break;case"MultiLineString":this.drawMultiLineString(t);break;case"MultiPolygon":this.drawMultiPolygon(t);break;case"GeometryCollection":this.drawGeometryCollection(t);break;case"Circle":this.drawCircle(t)}}drawFeature(t,e){const i=e.getGeometryFunction()(t);i&&(0,W.kK)(this.extent_,i.getExtent())&&(this.setStyle(e),this.drawGeometry(i))}drawGeometryCollection(t){const e=t.getGeometriesArray();for(let t=0,i=e.length;t<i;++t)this.drawGeometry(e[t])}drawPoint(t){this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_));const e=t.getFlatCoordinates(),i=t.getStride();this.image_&&this.drawImages_(e,0,e.length,i),""!==this.text_&&this.drawText_(e,0,e.length,i)}drawMultiPoint(t){this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_));const e=t.getFlatCoordinates(),i=t.getStride();this.image_&&this.drawImages_(e,0,e.length,i),""!==this.text_&&this.drawText_(e,0,e.length,i)}drawLineString(t){if(this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_)),(0,W.kK)(this.extent_,t.getExtent())){if(this.strokeState_){this.setContextStrokeState_(this.strokeState_);const e=this.context_,i=t.getFlatCoordinates();e.beginPath(),this.moveToLineTo_(i,0,i.length,t.getStride(),!1),e.stroke()}if(""!==this.text_){const e=t.getFlatMidpoint();this.drawText_(e,0,2,2)}}}drawMultiLineString(t){this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_));const e=t.getExtent();if((0,W.kK)(this.extent_,e)){if(this.strokeState_){this.setContextStrokeState_(this.strokeState_);const e=this.context_,i=t.getFlatCoordinates();let n=0;const s=t.getEnds(),r=t.getStride();e.beginPath();for(let t=0,e=s.length;t<e;++t)n=this.moveToLineTo_(i,n,s[t],r,!1);e.stroke()}if(""!==this.text_){const e=t.getFlatMidpoints();this.drawText_(e,0,e.length,2)}}}drawPolygon(t){if(this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_)),(0,W.kK)(this.extent_,t.getExtent())){if(this.strokeState_||this.fillState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);const e=this.context_;e.beginPath(),this.drawRings_(t.getOrientedFlatCoordinates(),0,t.getEnds(),t.getStride()),this.fillState_&&e.fill(),this.strokeState_&&e.stroke()}if(""!==this.text_){const e=t.getFlatInteriorPoint();this.drawText_(e,0,2,2)}}}drawMultiPolygon(t){if(this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_)),(0,W.kK)(this.extent_,t.getExtent())){if(this.strokeState_||this.fillState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);const e=this.context_,i=t.getOrientedFlatCoordinates();let n=0;const s=t.getEndss(),r=t.getStride();e.beginPath();for(let t=0,e=s.length;t<e;++t){const e=s[t];n=this.drawRings_(i,n,e,r)}this.fillState_&&e.fill(),this.strokeState_&&e.stroke()}if(""!==this.text_){const e=t.getFlatInteriorPoints();this.drawText_(e,0,e.length,2)}}}setContextFillState_(t){const e=this.context_,i=this.contextFillState_;i?i.fillStyle!=t.fillStyle&&(i.fillStyle=t.fillStyle,e.fillStyle=t.fillStyle):(e.fillStyle=t.fillStyle,this.contextFillState_={fillStyle:t.fillStyle})}setContextStrokeState_(t){const e=this.context_,i=this.contextStrokeState_;i?(i.lineCap!=t.lineCap&&(i.lineCap=t.lineCap,e.lineCap=t.lineCap),(0,U.fS)(i.lineDash,t.lineDash)||e.setLineDash(i.lineDash=t.lineDash),i.lineDashOffset!=t.lineDashOffset&&(i.lineDashOffset=t.lineDashOffset,e.lineDashOffset=t.lineDashOffset),i.lineJoin!=t.lineJoin&&(i.lineJoin=t.lineJoin,e.lineJoin=t.lineJoin),i.lineWidth!=t.lineWidth&&(i.lineWidth=t.lineWidth,e.lineWidth=t.lineWidth),i.miterLimit!=t.miterLimit&&(i.miterLimit=t.miterLimit,e.miterLimit=t.miterLimit),i.strokeStyle!=t.strokeStyle&&(i.strokeStyle=t.strokeStyle,e.strokeStyle=t.strokeStyle)):(e.lineCap=t.lineCap,e.setLineDash(t.lineDash),e.lineDashOffset=t.lineDashOffset,e.lineJoin=t.lineJoin,e.lineWidth=t.lineWidth,e.miterLimit=t.miterLimit,e.strokeStyle=t.strokeStyle,this.contextStrokeState_={lineCap:t.lineCap,lineDash:t.lineDash,lineDashOffset:t.lineDashOffset,lineJoin:t.lineJoin,lineWidth:t.lineWidth,miterLimit:t.miterLimit,strokeStyle:t.strokeStyle})}setContextTextState_(t){const e=this.context_,i=this.contextTextState_,n=t.textAlign?t.textAlign:j.PH;i?(i.font!=t.font&&(i.font=t.font,e.font=t.font),i.textAlign!=n&&(i.textAlign=n,e.textAlign=n),i.textBaseline!=t.textBaseline&&(i.textBaseline=t.textBaseline,e.textBaseline=t.textBaseline)):(e.font=t.font,e.textAlign=n,e.textBaseline=t.textBaseline,this.contextTextState_={font:t.font,textAlign:n,textBaseline:t.textBaseline})}setFillStrokeStyle(t,e){if(t){const e=t.getColor();this.fillState_={fillStyle:(0,B.y)(e||j.bL)}}else this.fillState_=null;if(e){const t=e.getColor(),i=e.getLineCap(),n=e.getLineDash(),s=e.getLineDashOffset(),r=e.getLineJoin(),o=e.getWidth(),a=e.getMiterLimit(),l=n||j.X9;this.strokeState_={lineCap:void 0!==i?i:j.mb,lineDash:1===this.pixelRatio_?l:l.map((t=>t*this.pixelRatio_)),lineDashOffset:(s||j.He)*this.pixelRatio_,lineJoin:void 0!==r?r:j.rc,lineWidth:(void 0!==o?o:j.yC)*this.pixelRatio_,miterLimit:void 0!==a?a:j.V4,strokeStyle:(0,B.y)(t||j.Tx)}}else this.strokeState_=null}setImageStyle(t){let e;if(!t||!(e=t.getSize()))return void(this.image_=null);const i=t.getPixelRatio(this.pixelRatio_),n=t.getAnchor(),s=t.getOrigin();this.image_=t.getImage(this.pixelRatio_),this.imageAnchorX_=n[0]*i,this.imageAnchorY_=n[1]*i,this.imageHeight_=e[1]*i,this.imageOpacity_=t.getOpacity(),this.imageOriginX_=s[0],this.imageOriginY_=s[1],this.imageRotateWithView_=t.getRotateWithView(),this.imageRotation_=t.getRotation();const r=t.getScaleArray();this.imageScale_=[r[0]*this.pixelRatio_/i,r[1]*this.pixelRatio_/i],this.imageWidth_=e[0]*i}setTextStyle(t){if(t){const e=t.getFill();if(e){const t=e.getColor();this.textFillState_={fillStyle:(0,B.y)(t||j.bL)}}else this.textFillState_=null;const i=t.getStroke();if(i){const t=i.getColor(),e=i.getLineCap(),n=i.getLineDash(),s=i.getLineDashOffset(),r=i.getLineJoin(),o=i.getWidth(),a=i.getMiterLimit();this.textStrokeState_={lineCap:void 0!==e?e:j.mb,lineDash:n||j.X9,lineDashOffset:s||j.He,lineJoin:void 0!==r?r:j.rc,lineWidth:void 0!==o?o:j.yC,miterLimit:void 0!==a?a:j.V4,strokeStyle:(0,B.y)(t||j.Tx)}}else this.textStrokeState_=null;const n=t.getFont(),s=t.getOffsetX(),r=t.getOffsetY(),o=t.getRotateWithView(),a=t.getRotation(),l=t.getScaleArray(),h=t.getText(),c=t.getTextAlign(),u=t.getTextBaseline();this.textState_={font:void 0!==n?n:j.Df,textAlign:void 0!==c?c:j.PH,textBaseline:void 0!==u?u:j.ru},this.text_=void 0!==h?Array.isArray(h)?h.reduce(((t,e,i)=>t+(i%2?" ":e)),""):h:"",this.textOffsetX_=void 0!==s?this.pixelRatio_*s:0,this.textOffsetY_=void 0!==r?this.pixelRatio_*r:0,this.textRotateWithView_=void 0!==o&&o,this.textRotation_=void 0!==a?a:0,this.textScale_=[this.pixelRatio_*l[0],this.pixelRatio_*l[1]]}else this.text_=""}},Et=.5,bt=.5,Ct={Point:function(t,e,i,n,s){const r=i.getImage(),o=i.getText();let a;if(r){if(r.getImageState()!=h.Z.LOADED)return;let l=t;if(s){const h=r.getDeclutterMode();if("none"!==h)if(l=s,"obstacle"===h){const s=t.getBuilder(i.getZIndex(),"Image");s.setImageStyle(r,a),s.drawPoint(e,n)}else o&&o.getText()&&(a={})}const c=l.getBuilder(i.getZIndex(),"Image");c.setImageStyle(r,a),c.drawPoint(e,n)}if(o&&o.getText()){let r=t;s&&(r=s);const l=r.getBuilder(i.getZIndex(),"Text");l.setTextStyle(o,a),l.drawText(e,n)}},LineString:function(t,e,i,n,s){const r=i.getStroke();if(r){const s=t.getBuilder(i.getZIndex(),"LineString");s.setFillStrokeStyle(null,r),s.drawLineString(e,n)}const o=i.getText();if(o&&o.getText()){const r=(s||t).getBuilder(i.getZIndex(),"Text");r.setTextStyle(o),r.drawText(e,n)}},Polygon:function(t,e,i,n,s){const r=i.getFill(),o=i.getStroke();if(r||o){const s=t.getBuilder(i.getZIndex(),"Polygon");s.setFillStrokeStyle(r,o),s.drawPolygon(e,n)}const a=i.getText();if(a&&a.getText()){const r=(s||t).getBuilder(i.getZIndex(),"Text");r.setTextStyle(a),r.drawText(e,n)}},MultiPoint:function(t,e,i,n,s){const r=i.getImage(),o=i.getText();let a;if(r){if(r.getImageState()!=h.Z.LOADED)return;let l=t;if(s){const h=r.getDeclutterMode();if("none"!==h)if(l=s,"obstacle"===h){const s=t.getBuilder(i.getZIndex(),"Image");s.setImageStyle(r,a),s.drawMultiPoint(e,n)}else o&&o.getText()&&(a={})}const c=l.getBuilder(i.getZIndex(),"Image");c.setImageStyle(r,a),c.drawMultiPoint(e,n)}if(o&&o.getText()){let r=t;s&&(r=s);const l=r.getBuilder(i.getZIndex(),"Text");l.setTextStyle(o,a),l.drawText(e,n)}},MultiLineString:function(t,e,i,n,s){const r=i.getStroke();if(r){const s=t.getBuilder(i.getZIndex(),"LineString");s.setFillStrokeStyle(null,r),s.drawMultiLineString(e,n)}const o=i.getText();if(o&&o.getText()){const r=(s||t).getBuilder(i.getZIndex(),"Text");r.setTextStyle(o),r.drawText(e,n)}},MultiPolygon:function(t,e,i,n,s){const r=i.getFill(),o=i.getStroke();if(o||r){const s=t.getBuilder(i.getZIndex(),"Polygon");s.setFillStrokeStyle(r,o),s.drawMultiPolygon(e,n)}const a=i.getText();if(a&&a.getText()){const r=(s||t).getBuilder(i.getZIndex(),"Text");r.setTextStyle(a),r.drawText(e,n)}},GeometryCollection:function(t,e,i,n,s){const r=e.getGeometriesArray();let o,a;for(o=0,a=r.length;o<a;++o)(0,Ct[r[o].getType()])(t,r[o],i,n,s)},Circle:function(t,e,i,n,s){const r=i.getFill(),o=i.getStroke();if(r||o){const s=t.getBuilder(i.getZIndex(),"Circle");s.setFillStrokeStyle(r,o),s.drawCircle(e,n)}const a=i.getText();if(a&&a.getText()){const r=(s||t).getBuilder(i.getZIndex(),"Text");r.setTextStyle(a),r.drawText(e,n)}}};function Tt(t,e){const i=function(t,e){return bt*t/e}(t,e);return i*i}function Rt(t,e,i,n,s,r,o){let a=!1;const l=i.getImage();if(l){const t=l.getImageState();t==h.Z.LOADED||t==h.Z.ERROR?l.unlistenImageChange(s):(t==h.Z.IDLE&&l.load(),l.listenImageChange(s),a=!0)}return function(t,e,i,n,s,r){const o=i.getGeometryFunction()(e);if(!o)return;const a=o.simplifyTransformed(n,s);i.getRenderer()?It(t,a,i,e):(0,Ct[a.getType()])(t,a,i,e,r)}(t,e,i,n,r,o),a}function It(t,e,i,n){if("GeometryCollection"!=e.getType())t.getBuilder(i.getZIndex(),"Default").drawCustom(e,n,i.getRenderer(),i.getHitDetectionRenderer());else{const s=e.getGeometries();for(let e=0,r=s.length;e<r;++e)It(t,s[e],i,n)}}var kt=i(4307),Mt=i(1900);const Lt={image:["Polygon","Circle","LineString","Image","Text"],hybrid:["Polygon","LineString"],vector:[]},Pt={hybrid:["Image","Text","Default"],vector:["Polygon","Circle","LineString","Image","Text","Default"]};class Ot extends vt.Z{constructor(t){super(t),this.boundHandleStyleImageChange_=this.handleStyleImageChange_.bind(this),this.renderedLayerRevision_,this.renderedPixelToCoordinateTransform_=null,this.renderedRotation_,this.tmpTransform_=(0,Q.Ue)()}prepareTile(t,e,i){let n;const s=t.getState();return s!==yt.Z.LOADED&&s!==yt.Z.ERROR||(this.updateExecutorGroup_(t,e,i),this.tileImageNeedsRender_(t)&&(n=!0)),n}getTile(t,e,i,n){const s=n.pixelRatio,r=n.viewState,o=r.resolution,a=r.projection,l=this.getLayer(),h=l.getSource().getTile(t,e,i,s,a),c=n.viewHints,u=!(c[xt.Z.ANIMATING]||c[xt.Z.INTERACTING]);return!u&&h.wantedResolution||(h.wantedResolution=o),this.prepareTile(h,s,a)&&(u||Date.now()-n.time<8)&&"vector"!==l.getRenderMode()&&this.renderTileImage_(h,n),super.getTile(t,e,i,n)}isDrawableTile(t){const e=this.getLayer();return super.isDrawableTile(t)&&("vector"===e.getRenderMode()?(0,y.sq)(e)in t.executorGroups:t.hasContext(e))}getTileImage(t){return t.getImage(this.getLayer())}prepareFrame(t){const e=this.getLayer().getRevision();return this.renderedLayerRevision_!==e&&(this.renderedLayerRevision_=e,this.renderedTiles.length=0),super.prepareFrame(t)}updateExecutorGroup_(t,e,i){const n=this.getLayer(),s=n.getRevision(),r=n.getRenderOrder()||null,o=t.wantedResolution,a=t.getReplayState(n);if(!a.dirty&&a.renderedResolution===o&&a.renderedRevision==s&&a.renderedRenderOrder==r)return;const l=n.getSource(),h=n.getDeclutter(),c=l.getTileGrid(),u=l.getTileGridForProjection(i).getTileCoordExtent(t.wrappedTileCoord),d=l.getSourceTiles(e,i,t),g=(0,y.sq)(n);delete t.hitDetectionImageData[g],t.executorGroups[g]=[],h&&(t.declutterExecutorGroups[g]=[]),a.dirty=!1;for(let i=0,s=d.length;i<s;++i){const s=d[i];if(s.getState()!=yt.Z.LOADED)continue;const _=s.tileCoord,f=c.getTileCoordExtent(_),p=(0,W.Ed)(u,f),m=(0,W.f3)(p,n.getRenderBuffer()*o,this.tmpExtent),v=(0,W.fS)(f,p)?null:m,y=new $(0,m,o,e),x=h?new $(0,p,o,e):void 0,w=Tt(o,e),S=function(t){let e;const i=t.getStyleFunction()||n.getStyleFunction();if(i&&(e=i(t,o)),e){const i=this.renderFeature(t,w,e,y,x);a.dirty=a.dirty||i}},E=s.getFeatures();r&&r!==a.renderedRenderOrder&&E.sort(r);for(let t=0,e=E.length;t<e;++t){const e=E[t];v&&!(0,W.kK)(v,e.getGeometry().getExtent())||S.call(this,e)}const b=y.finish(),C="vector"!==n.getRenderMode()&&h&&1===d.length?null:p,T=new mt(C,o,e,l.getOverlaps(),b,n.getRenderBuffer());if(t.executorGroups[g].push(T),x){const i=new mt(null,o,e,l.getOverlaps(),x.finish(),n.getRenderBuffer());t.declutterExecutorGroups[g].push(i)}}a.renderedRevision=s,a.renderedRenderOrder=r,a.renderedResolution=o}forEachFeatureAtCoordinate(t,e,i,n,s){const r=e.viewState.resolution,o=e.viewState.rotation;i=null==i?0:i;const a=this.getLayer(),l=a.getSource().getTileGridForProjection(e.viewState.projection),h=(0,W.hI)([t]);(0,W.f3)(h,r*i,h);const c={},u=function(t,e,i){let r=t.getId();void 0===r&&(r=(0,y.sq)(t));const o=c[r];if(o){if(!0!==o&&i<o.distanceSq){if(0===i)return c[r]=!0,s.splice(s.lastIndexOf(o),1),n(t,a,e);o.geometry=e,o.distanceSq=i}}else{if(0===i)return c[r]=!0,n(t,a,e);s.push(c[r]={feature:t,layer:a,geometry:e,distanceSq:i,callback:n})}},d=this.renderedTiles;let g;for(let n=0,s=d.length;!g&&n<s;++n){const s=d[n],c=l.getTileCoordExtent(s.wrappedTileCoord);if(!(0,W.kK)(c,h))continue;const _=(0,y.sq)(a),f=[s.executorGroups[_]],p=s.declutterExecutorGroups[_];p&&f.push(p),f.some((n=>{const s=n===p?e.declutterTree.all().map((t=>t.value)):null;for(let e=0,a=n.length;e<a;++e){const a=n[e];if(g=a.forEachFeatureAtCoordinate(t,r,o,i,u,s),g)return!0}}))}return g}getFeatures(t){return new Promise(((e,i)=>{const n=this.getLayer(),s=(0,y.sq)(n),r=n.getSource(),o=this.renderedProjection,a=o.getExtent(),l=this.renderedResolution,h=r.getTileGridForProjection(o),c=(0,Q.nn)(this.renderedPixelToCoordinateTransform_,t.slice()),u=h.getTileCoordForCoordAndResolution(c,l);let d;for(let t=0,e=this.renderedTiles.length;t<e;++t)if(u.toString()===this.renderedTiles[t].tileCoord.toString()){if(d=this.renderedTiles[t],d.getState()===yt.Z.LOADED){const t=h.getTileCoordExtent(d.tileCoord);r.getWrapX()&&o.canWrapX()&&!(0,W.r4)(a,t)&&(0,Mt.Cf)(c,o);break}d=void 0}if(!d||d.loadingSourceTiles>0)return void e([]);const g=h.getTileCoordExtent(d.wrappedTileCoord),f=(0,W.rL)(g),p=[(c[0]-f[0])/l,(f[1]-c[1])/l],m=d.getSourceTiles().reduce((function(t,e){return t.concat(e.getFeatures())}),[]);let v=d.hitDetectionImageData[s];if(!v){const t=(0,kt.Pq)(h.getTileSize(h.getZForResolution(l,r.zDirection))),e=this.renderedRotation_;v=function(t,e,i,n,s,r,o){const a=t[0]*Et,l=t[1]*Et,h=(0,_.E4)(a,l);h.imageSmoothingEnabled=!1;const c=h.canvas,u=new St(h,Et,s,null,o),d=i.length,g=Math.floor(16777215/d),f={};for(let t=1;t<=d;++t){const e=i[t-1],o=e.getStyleFunction()||n;if(!n)continue;let a=o(e,r);if(!a)continue;Array.isArray(a)||(a=[a]);const l=(t*g).toString(16).padStart(7,"#00000");for(let t=0,i=a.length;t<i;++t){const i=a[t],n=i.getGeometryFunction()(e);if(!n||!(0,W.kK)(s,n.getExtent()))continue;const r=i.clone(),o=r.getFill();o&&o.setColor(l);const h=r.getStroke();h&&(h.setColor(l),h.setLineDash(null)),r.setText(void 0);const c=i.getImage();if(c&&0!==c.getOpacity()){const t=c.getImageSize();if(!t)continue;const e=(0,_.E4)(t[0],t[1],void 0,{alpha:!1}),i=e.canvas;e.fillStyle=l,e.fillRect(0,0,i.width,i.height),r.setImage(new w({img:i,imgSize:t,anchor:c.getAnchor(),anchorXUnits:"pixels",anchorYUnits:"pixels",offset:c.getOrigin(),opacity:1,size:c.getSize(),scale:c.getScale(),rotation:c.getRotation(),rotateWithView:c.getRotateWithView()}))}const u=r.getZIndex()||0;let d=f[u];d||(d={},f[u]=d,d.Polygon=[],d.Circle=[],d.LineString=[],d.Point=[]);const g=n.getType();if("GeometryCollection"===g){const t=n.getGeometriesArrayRecursive();for(let e=0,i=t.length;e<i;++e){const i=t[e];d[i.getType().replace("Multi","")].push(i,r)}}else d[g.replace("Multi","")].push(n,r)}}const p=Object.keys(f).map(Number).sort(U.j2);for(let t=0,i=p.length;t<i;++t){const i=f[p[t]];for(const t in i){const n=i[t];for(let t=0,i=n.length;t<i;t+=2){u.setStyle(n[t+1]);for(let i=0,s=e.length;i<s;++i)u.setTransform(e[i]),u.drawGeometry(n[t])}}}return h.getImageData(0,0,c.width,c.height)}(t,[this.getRenderTransform(h.getTileCoordCenter(d.wrappedTileCoord),l,0,Et,t[0]*Et,t[1]*Et,0)],m,n.getStyleFunction(),h.getTileCoordExtent(d.wrappedTileCoord),d.getReplayState(n).renderedResolution,e),d.hitDetectionImageData[s]=v}e(function(t,e,i){const n=[];if(i){const s=Math.floor(Math.round(t[0])*Et),r=Math.floor(Math.round(t[1])*Et),o=4*((0,tt.uZ)(s,0,i.width-1)+(0,tt.uZ)(r,0,i.height-1)*i.width),a=i.data[o],l=i.data[o+1],h=i.data[o+2]+256*(l+256*a),c=Math.floor(16777215/e.length);h&&h%c==0&&n.push(e[h/c-1])}return n}(p,m,v))}))}handleFontsChanged(){const t=this.getLayer();t.getVisible()&&void 0!==this.renderedLayerRevision_&&t.changed()}handleStyleImageChange_(t){this.renderIfReadyAndVisible()}renderDeclutter(t){const e=this.context,i=e.globalAlpha;e.globalAlpha=this.getLayer().getOpacity();const n=t.viewHints,s=!(n[xt.Z.ANIMATING]||n[xt.Z.INTERACTING]),r=this.renderedTiles;for(let e=0,i=r.length;e<i;++e){const i=r[e],n=i.declutterExecutorGroups[(0,y.sq)(this.getLayer())];if(n)for(let e=n.length-1;e>=0;--e)n[e].execute(this.context,1,this.getTileRenderTransform(i,t),t.viewState.rotation,s,void 0,t.declutterTree)}e.globalAlpha=i}getTileRenderTransform(t,e){const i=e.pixelRatio,n=e.viewState,s=n.center,r=n.resolution,o=n.rotation,a=e.size,l=Math.round(a[0]*i),h=Math.round(a[1]*i),c=this.getLayer().getSource().getTileGridForProjection(e.viewState.projection),u=t.tileCoord,d=c.getTileCoordExtent(t.wrappedTileCoord),g=c.getTileCoordExtent(u,this.tmpExtent)[0]-d[0];return(0,Q.Jp)((0,Q.bA)(this.inversePixelTransform.slice(),1/i,1/i),this.getRenderTransform(s,r,o,i,l,h,g))}postRender(t,e){const i=e.viewHints,n=!(i[xt.Z.ANIMATING]||i[xt.Z.INTERACTING]);this.renderedPixelToCoordinateTransform_=e.pixelToCoordinateTransform.slice(),this.renderedRotation_=e.viewState.rotation;const s=this.getLayer(),r=s.getRenderMode(),o=t.globalAlpha;t.globalAlpha=s.getOpacity();const a=Pt[r],l=e.viewState,h=l.rotation,c=s.getSource(),u=c.getTileGridForProjection(l.projection).getZForResolution(l.resolution,c.zDirection),d=this.renderedTiles,g=[],_=[];let f=!0;for(let i=d.length-1;i>=0;--i){const r=d[i];f=f&&!r.getReplayState(s).dirty;const o=r.executorGroups[(0,y.sq)(s)].filter((t=>t.hasExecutors(a)));if(0===o.length)continue;const l=this.getTileRenderTransform(r,e),c=r.tileCoord[0];let p=!1;const m=o[0].getClipCoords(l);if(m){for(let e=0,i=g.length;e<i;++e)if(u!==c&&c<_[e]){const i=g[e];(0,W.kK)([m[0],m[3],m[4],m[7]],[i[0],i[3],i[4],i[7]])&&(p||(t.save(),p=!0),t.beginPath(),t.moveTo(m[0],m[1]),t.lineTo(m[2],m[3]),t.lineTo(m[4],m[5]),t.lineTo(m[6],m[7]),t.moveTo(i[6],i[7]),t.lineTo(i[4],i[5]),t.lineTo(i[2],i[3]),t.lineTo(i[0],i[1]),t.clip())}g.push(m),_.push(c)}for(let e=0,i=o.length;e<i;++e)o[e].execute(t,1,l,h,n,a);p&&t.restore()}t.globalAlpha=o,this.ready=f,super.postRender(t,e)}renderFeature(t,e,i,n,s){if(!i)return!1;let r=!1;if(Array.isArray(i))for(let o=0,a=i.length;o<a;++o)r=Rt(n,t,i[o],e,this.boundHandleStyleImageChange_,void 0,s)||r;else r=Rt(n,t,i,e,this.boundHandleStyleImageChange_,void 0,s);return r}tileImageNeedsRender_(t){const e=this.getLayer();if("vector"===e.getRenderMode())return!1;const i=t.getReplayState(e),n=e.getRevision(),s=t.wantedResolution;return i.renderedTileResolution!==s||i.renderedTileRevision!==n}renderTileImage_(t,e){const i=this.getLayer(),n=t.getReplayState(i),s=i.getRevision(),r=t.executorGroups[(0,y.sq)(i)];n.renderedTileRevision=s;const o=t.wrappedTileCoord,a=o[0],l=i.getSource();let h=e.pixelRatio;const c=e.viewState.projection,u=l.getTileGridForProjection(c),d=u.getResolution(t.tileCoord[0]),g=e.pixelRatio/t.wantedResolution*d,_=u.getResolution(a),f=t.getContext(i);h=Math.round(Math.max(h,g/h));const p=l.getTilePixelSize(a,h,c);f.canvas.width=p[0],f.canvas.height=p[1];const m=h/g;if(1!==m){const t=(0,Q.mc)(this.tmpTransform_);(0,Q.bA)(t,m,m),f.setTransform.apply(f,t)}const v=u.getTileCoordExtent(o,this.tmpExtent),x=g/_,w=(0,Q.mc)(this.tmpTransform_);(0,Q.bA)(w,x,-x),(0,Q.Iu)(w,-v[0],-v[3]);for(let t=0,e=r.length;t<e;++t)r[t].execute(f,m,w,0,!0,Lt[i.getRenderMode()]);n.renderedTileResolution=t.wantedResolution}}const At=Ot;var Zt=i(8280);const Ft=class extends P{constructor(t){t=t||{};const e=Object.assign({},t);delete e.preload,delete e.useInterimTilesOnError,super(e),this.on,this.once,this.un;const i=t.renderMode||"hybrid";(0,d.h)("hybrid"==i||"vector"==i,28),this.renderMode_=i,this.setPreload(t.preload?t.preload:0),this.setUseInterimTilesOnError(void 0===t.useInterimTilesOnError||t.useInterimTilesOnError),this.getBackground,this.setBackground}createRenderer(){return new At(this)}getFeatures(t){return super.getFeatures(t)}getRenderMode(){return this.renderMode_}getPreload(){return this.get(Zt.Z.PRELOAD)}getUseInterimTilesOnError(){return this.get(Zt.Z.USE_INTERIM_TILES_ON_ERROR)}setPreload(t){this.set(Zt.Z.PRELOAD,t)}setUseInterimTilesOnError(t){this.set(Zt.Z.USE_INTERIM_TILES_ON_ERROR,t)}}},3983:(t,e,i)=>{"use strict";function n(t,e,i){return Math.min(Math.max(t,e),i)}function s(t,e,i,n,s,o){const a=s-i,l=o-n;if(0!==a||0!==l){const r=((t-i)*a+(e-n)*l)/(a*a+l*l);r>1?(i=s,n=o):r>0&&(i+=a*r,n+=l*r)}return r(t,e,i,n)}function r(t,e,i,n){const s=i-t,r=n-e;return s*s+r*r}function o(t){const e=t.length;for(let i=0;i<e;i++){let n=i,s=Math.abs(t[i][i]);for(let r=i+1;r<e;r++){const e=Math.abs(t[r][i]);e>s&&(s=e,n=r)}if(0===s)return null;const r=t[n];t[n]=t[i],t[i]=r;for(let n=i+1;n<e;n++){const s=-t[n][i]/t[i][i];for(let r=i;r<e+1;r++)i==r?t[n][r]=0:t[n][r]+=s*t[i][r]}}const i=new Array(e);for(let n=e-1;n>=0;n--){i[n]=t[n][e]/t[n][n];for(let s=n-1;s>=0;s--)t[s][e]-=t[s][n]*i[n]}return i}function a(t){return t*Math.PI/180}function l(t,e){const i=t%e;return i*e<0?i+e:i}function h(t,e,i){return t+i*(e-t)}function c(t,e){const i=Math.pow(10,e);return Math.round(t*i)/i}function u(t,e){return Math.floor(c(t,e))}function d(t,e){return Math.ceil(c(t,e))}i.d(e,{$W:()=>l,FH:()=>c,GW:()=>u,SV:()=>o,Yr:()=>a,bI:()=>r,mD:()=>d,rU:()=>s,t7:()=>h,uZ:()=>n})},9374:(t,e,i)=>{"use strict";function n(t){for(const e in t)delete t[e]}function s(t){let e;for(e in t)return!1;return!e}i.d(e,{Z:()=>n,x:()=>s})},8661:(t,e,i)=>{"use strict";i.d(e,{Wm:()=>f.W,UQ:()=>O,h_:()=>T,OP:()=>Z,mi:()=>A,Vs:()=>j,dY:()=>Y,U2:()=>M,_Q:()=>L,Ck:()=>D,Cs:()=>B,lO:()=>W,Fj:()=>U,vs:()=>z});var n=i(9619);const s=6378137,r=Math.PI*s,o=[-r,-r,r,r],a=[-180,-85,180,85],l=s*Math.log(Math.tan(Math.PI/2));class h extends n.Z{constructor(t){super({code:t,units:"m",extent:o,global:!0,worldExtent:a,getPointResolution:function(t,e){return t/Math.cosh(e[1]/s)}})}}const c=[new h("EPSG:3857"),new h("EPSG:102100"),new h("EPSG:102113"),new h("EPSG:900913"),new h("http://www.opengis.net/def/crs/EPSG/0/3857"),new h("http://www.opengis.net/gml/srs/epsg.xml#3857")];const u=[-180,-90,180,90],d=6378137*Math.PI/180;class g extends n.Z{constructor(t,e){super({code:t,units:"degrees",extent:u,axisOrientation:e,global:!0,metersPerUnit:d,worldExtent:u})}}const _=[new g("CRS:84"),new g("EPSG:4326","neu"),new g("urn:ogc:def:crs:OGC:1.3:CRS84"),new g("urn:ogc:def:crs:OGC:2:84"),new g("http://www.opengis.net/def/crs/OGC/1.3/CRS84"),new g("http://www.opengis.net/gml/srs/epsg.xml#4326","neu"),new g("http://www.opengis.net/def/crs/EPSG/0/4326","neu")];var f=i(8375);let p={},m={};function v(t,e,i){const n=t.getCode(),s=e.getCode();n in m||(m[n]={}),m[n][s]=i}var y=i(8641),x=i(1900),w=i(3983);const S=6371008.8;function E(t,e,i){i=i||S;const n=(0,w.Yr)(t[1]),s=(0,w.Yr)(e[1]),r=(s-n)/2,o=(0,w.Yr)(e[0]-t[0])/2,a=Math.sin(r)*Math.sin(r)+Math.sin(o)*Math.sin(o)*Math.cos(n)*Math.cos(s);return 2*i*Math.atan2(Math.sqrt(a),Math.sqrt(1-a))}var b=i(44);let C=!0;function T(t){C=!(void 0===t||t)}function R(t,e){if(void 0!==e)for(let i=0,n=t.length;i<n;++i)e[i]=t[i];else e=t.slice();return e}function I(t,e){if(void 0!==e&&t!==e){for(let i=0,n=t.length;i<n;++i)e[i]=t[i];t=e}return t}function k(t){!function(t,e){p[t]=e}(t.getCode(),t),v(t,t,R)}function M(t){return"string"==typeof t?p[e=t]||p[e.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\w+)$/,"EPSG:$3")]||null:t||null;var e}function L(t,e,i,n){let s;const r=(t=M(t)).getPointResolutionFunc();if(r){if(s=r(e,i),n&&n!==t.getUnits()){const e=t.getMetersPerUnit();e&&(s=s*e/f.W[n])}}else{const r=t.getUnits();if("degrees"==r&&!n||"degrees"==n)s=e;else{const o=F(t,M("EPSG:4326"));if(o===I&&"degrees"!==r)s=e*t.getMetersPerUnit();else{let t=[i[0]-e/2,i[1],i[0]+e/2,i[1],i[0],i[1]-e/2,i[0],i[1]+e/2];t=o(t,t,2),s=(E(t.slice(0,2),t.slice(2,4))+E(t.slice(4,6),t.slice(6,8)))/2}const a=n?f.W[n]:t.getMetersPerUnit();void 0!==a&&(s/=a)}}return s}function P(t){!function(t){t.forEach(k)}(t),t.forEach((function(e){t.forEach((function(t){e!==t&&v(e,t,R)}))}))}function O(t,e){return t?"string"==typeof t?M(t):t:M(e)}function A(t,e){return T(),z(t,"EPSG:4326",void 0!==e?e:"EPSG:3857")}function Z(t,e){if(t===e)return!0;const i=t.getUnits()===e.getUnits();return(t.getCode()===e.getCode()||F(t,e)===R)&&i}function F(t,e){let i=function(t,e){let i;return t in m&&e in m[t]&&(i=m[t][e]),i}(t.getCode(),e.getCode());return i||(i=I),i}function D(t,e){return F(M(t),M(e))}function z(t,e,i){return D(e,i)(t,void 0,t.length)}function N(t,e,i,n){const s=D(e,i);return(0,y.Ne)(t,s,void 0,n)}let G=null;function B(){return G}function W(t,e){return G?z(t,e,G):t}function j(t,e){return G?z(t,G,e):(C&&!(0,x.fS)(t,[0,0])&&t[0]>=-180&&t[0]<=180&&t[1]>=-90&&t[1]<=90&&(C=!1,(0,b.ZK)("Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.")),t)}function U(t,e){return G?N(t,e,G):t}function Y(t,e){return G?N(t,G,e):t}var V,X,K;P(c),P(_),V=c,X=function(t,e,i){const n=t.length;i=i>1?i:2,void 0===e&&(e=i>2?t.slice():new Array(n));for(let o=0;o<n;o+=i){e[o]=r*t[o]/180;let i=s*Math.log(Math.tan(Math.PI*(+t[o+1]+90)/360));i>l?i=l:i<-l&&(i=-l),e[o+1]=i}return e},K=function(t,e,i){const n=t.length;i=i>1?i:2,void 0===e&&(e=i>2?t.slice():new Array(n));for(let o=0;o<n;o+=i)e[o]=180*t[o]/r,e[o+1]=360*Math.atan(Math.exp(t[o+1]/s))/Math.PI-90;return e},_.forEach((function(t){V.forEach((function(e){v(t,e,X),v(e,t,K)}))}))},9619:(t,e,i)=>{"use strict";i.d(e,{Z:()=>s});var n=i(8375);const s=class{constructor(t){this.code_=t.code,this.units_=t.units,this.extent_=void 0!==t.extent?t.extent:null,this.worldExtent_=void 0!==t.worldExtent?t.worldExtent:null,this.axisOrientation_=void 0!==t.axisOrientation?t.axisOrientation:"enu",this.global_=void 0!==t.global&&t.global,this.canWrapX_=!(!this.global_||!this.extent_),this.getPointResolutionFunc_=t.getPointResolution,this.defaultTileGrid_=null,this.metersPerUnit_=t.metersPerUnit}canWrapX(){return this.canWrapX_}getCode(){return this.code_}getExtent(){return this.extent_}getUnits(){return this.units_}getMetersPerUnit(){return this.metersPerUnit_||n.W[this.units_]}getWorldExtent(){return this.worldExtent_}getAxisOrientation(){return this.axisOrientation_}isGlobal(){return this.global_}setGlobal(t){this.global_=t,this.canWrapX_=!(!t||!this.extent_)}getDefaultTileGrid(){return this.defaultTileGrid_}setDefaultTileGrid(t){this.defaultTileGrid_=t}setExtent(t){this.extent_=t,this.canWrapX_=!(!this.global_||!t)}setWorldExtent(t){this.worldExtent_=t}setGetPointResolution(t){this.getPointResolutionFunc_=t}getPointResolutionFunc(){return this.getPointResolutionFunc_}}},8375:(t,e,i)=>{"use strict";i.d(e,{W:()=>n});const n={radians:6370997/(2*Math.PI),degrees:2*Math.PI*6370997/360,ft:.3048,m:1,"us-ft":1200/3937}},7380:(t,e,i)=>{"use strict";i.d(e,{Z:()=>r});var n=i(291);class s extends n.ZP{constructor(t,e,i,n){super(t),this.inversePixelTransform=e,this.frameState=i,this.context=n}}const r=s},8771:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={PRERENDER:"prerender",POSTRENDER:"postrender",PRECOMPOSE:"precompose",POSTCOMPOSE:"postcompose",RENDERCOMPLETE:"rendercomplete"}},3433:(t,e,i)=>{"use strict";i.d(e,{ZP:()=>g});var n=i(6101),s=i(8641),r=i(5537),o=i(3448),a=i(8661),l=i(3983);function h(t,e,i,n,s,o,a){let h,c;const u=(i-e)/n;if(1===u)h=e;else if(2===u)h=e,c=s;else if(0!==u){let o=t[e],a=t[e+1],l=0;const u=[0];for(let s=e+n;s<i;s+=n){const e=t[s],i=t[s+1];l+=Math.sqrt((e-o)*(e-o)+(i-a)*(i-a)),u.push(l),o=e,a=i}const d=s*l,g=(0,r.ry)(u,d);g<0?(c=(d-u[-g-2])/(u[-g-1]-u[-g-2]),h=e+(-g-2)*n):h=e+g*n}a=a>1?a:2,o=o||new Array(a);for(let e=0;e<a;++e)o[e]=void 0===h?NaN:void 0===c?t[h+e]:(0,l.t7)(t[h+e],t[h+n+e],c);return o}var c=i(6442);const u=(0,n.Ue)();class d{constructor(t,e,i,n,s){this.styleFunction,this.extent_,this.id_=s,this.type_=t,this.flatCoordinates_=e,this.flatInteriorPoints_=null,this.flatMidpoints_=null,this.ends_=i,this.properties_=n}get(t){return this.properties_[t]}getExtent(){return this.extent_||(this.extent_="Point"===this.type_?(0,s.HK)(this.flatCoordinates_):(0,s.GN)(this.flatCoordinates_,0,this.flatCoordinates_.length,2)),this.extent_}getFlatInteriorPoint(){if(!this.flatInteriorPoints_){const t=(0,s.qg)(this.getExtent());this.flatInteriorPoints_=(0,o.X)(this.flatCoordinates_,0,this.ends_,2,t,0)}return this.flatInteriorPoints_}getFlatInteriorPoints(){if(!this.flatInteriorPoints_){const t=function(t,e,i,n){const r=[];let o=(0,s.lJ)();for(let n=0,a=i.length;n<a;++n){const a=i[n];o=(0,s.GN)(t,e,a[0],2),r.push((o[0]+o[2])/2,(o[1]+o[3])/2),e=a[a.length-1]}return r}(this.flatCoordinates_,0,this.ends_);this.flatInteriorPoints_=(0,o.U)(this.flatCoordinates_,0,this.ends_,2,t)}return this.flatInteriorPoints_}getFlatMidpoint(){return this.flatMidpoints_||(this.flatMidpoints_=h(this.flatCoordinates_,0,this.flatCoordinates_.length,2,.5)),this.flatMidpoints_}getFlatMidpoints(){if(!this.flatMidpoints_){this.flatMidpoints_=[];const t=this.flatCoordinates_;let e=0;const i=this.ends_;for(let n=0,s=i.length;n<s;++n){const s=i[n],o=h(t,e,s,2,.5);(0,r.l7)(this.flatMidpoints_,o),e=s}}return this.flatMidpoints_}getId(){return this.id_}getOrientedFlatCoordinates(){return this.flatCoordinates_}getGeometry(){return this}getSimplifiedGeometry(t){return this}simplifyTransformed(t,e){return this}getProperties(){return this.properties_}getStride(){return 2}getStyleFunction(){return this.styleFunction}getType(){return this.type_}transform(t){const e=(t=(0,a.U2)(t)).getExtent(),i=t.getWorldExtent();if(e&&i){const t=(0,s.Cr)(i)/(0,s.Cr)(e);(0,n.qC)(u,i[0],i[3],t,-t,0,0,0),(0,c.vT)(this.flatCoordinates_,0,this.flatCoordinates_.length,2,u,this.flatCoordinates_)}}getEnds(){return this.ends_}}d.prototype.getEndss=d.prototype.getEnds,d.prototype.getFlatCoordinates=d.prototype.getOrientedFlatCoordinates;const g=d},147:(t,e,i)=>{"use strict";i.d(e,{Df:()=>l,He:()=>d,Kd:()=>I,PH:()=>p,Qx:()=>b,Tx:()=>f,V4:()=>_,X9:()=>u,Zw:()=>k,_f:()=>M,bL:()=>h,mb:()=>c,oB:()=>v,rc:()=>g,ru:()=>m,sG:()=>x,yC:()=>y});var n=i(2971),s=i(177),r=i(9374),o=i(8326),a=i(245);const l="10px sans-serif",h="#000",c="round",u=[],d=0,g="round",_=10,f="#000",p="center",m="middle",v=[0,0,0,0],y=1,x=new n.Z;let w,S=null;const E={},b=function(){const t=100,e="32px ",i=["monospace","serif"],n=i.length,s="wmytzilWMYTZIL@#/&?$%10";let o,l;function h(t,r,o){let a=!0;for(let h=0;h<n;++h){const n=i[h];if(l=R(t+" "+r+" "+e+n,s),o!=n){const i=R(t+" "+r+" "+e+o+","+n,s);a=a&&i!=l}}return!!a}function c(){let e=!0;const i=x.getKeys();for(let n=0,s=i.length;n<s;++n){const s=i[n];x.get(s)<t&&(h.apply(this,s.split("\n"))?((0,r.Z)(E),S=null,w=void 0,x.set(s,t)):(x.set(s,x.get(s)+1,!0),e=!1))}e&&(clearInterval(o),o=void 0)}return function(e){const i=(0,a.p)(e);if(!i)return;const n=i.families;for(let e=0,s=n.length;e<s;++e){const s=n[e],r=i.style+"\n"+i.weight+"\n"+s;void 0===x.get(r)&&(x.set(r,t,!0),h(i.style,i.weight,s)||(x.set(r,0,!0),void 0===o&&(o=setInterval(c,32))))}}}(),C=function(){let t;return function(e){let i=E[e];if(null==i){if(s.Id){const t=(0,a.p)(e),n=T(e,"Žg");i=(isNaN(Number(t.lineHeight))?1.2:Number(t.lineHeight))*(n.actualBoundingBoxAscent+n.actualBoundingBoxDescent)}else t||(t=document.createElement("div"),t.innerHTML="M",t.style.minHeight="0",t.style.maxHeight="none",t.style.height="auto",t.style.padding="0",t.style.border="none",t.style.position="absolute",t.style.display="block",t.style.left="-99999px"),t.style.font=e,document.body.appendChild(t),i=t.offsetHeight,document.body.removeChild(t);E[e]=i}return i}}();function T(t,e){return S||(S=(0,o.E4)(1,1)),t!=w&&(S.font=t,w=S.font),S.measureText(e)}function R(t,e){return T(t,e).width}function I(t,e,i){if(e in i)return i[e];const n=e.split("\n").reduce(((e,i)=>Math.max(e,R(t,i))),0);return i[e]=n,n}function k(t,e){const i=[],n=[],s=[];let r=0,o=0,a=0,l=0;for(let h=0,c=e.length;h<=c;h+=2){const u=e[h];if("\n"===u||h===c){r=Math.max(r,o),s.push(o),o=0,a+=l;continue}const d=e[h+1]||t.font,g=R(d,u);i.push(g),o+=g;const _=C(d);n.push(_),l=Math.max(l,_)}return{width:r,height:a,widths:i,heights:n,lineWidths:s}}function M(t,e,i,n,s,r,o,a,l,h,c){t.save(),1!==i&&(t.globalAlpha*=i),e&&t.setTransform.apply(t,e),n.contextInstructions?(t.translate(l,h),t.scale(c[0],c[1]),function(t,e){const i=t.contextInstructions;for(let t=0,n=i.length;t<n;t+=2)Array.isArray(i[t+1])?e[i[t]].apply(e,i[t+1]):e[i[t]]=i[t+1]}(n,t)):c[0]<0||c[1]<0?(t.translate(l,h),t.scale(c[0],c[1]),t.drawImage(n,s,r,o,a,0,0,o,a)):t.drawImage(n,s,r,o,a,l,h,o*c[0],a*c[1]),t.restore()}},4708:(t,e,i)=>{"use strict";i.d(e,{Z:()=>b});var n=i(5487),s=i(553),r=i(2706),o=i(4187);class a extends r.Z{constructor(t){super(),this.ready=!0,this.boundHandleImageChange_=this.handleImageChange_.bind(this),this.layer_=t,this.declutterExecutorGroup=null}getFeatures(t){return(0,o.O3)()}getData(t){return null}prepareFrame(t){return(0,o.O3)()}renderFrame(t,e){return(0,o.O3)()}loadedTileCallback(t,e,i){t[e]||(t[e]={}),t[e][i.tileCoord.toString()]=i}createLoadedTileFinder(t,e,i){return(n,s)=>{const r=this.loadedTileCallback.bind(this,i,n);return t.forEachLoadedTile(e,n,s,r)}}forEachFeatureAtCoordinate(t,e,i,n,s){}getLayer(){return this.layer_}handleFontsChanged(){}handleImageChange_(t){t.target.getState()===s.Z.LOADED&&this.renderIfReadyAndVisible()}loadImage(t){let e=t.getState();return e!=s.Z.LOADED&&e!=s.Z.ERROR&&t.addEventListener(n.Z.CHANGE,this.boundHandleImageChange_),e==s.Z.IDLE&&(t.load(),e=t.getState()),e==s.Z.LOADED}renderIfReadyAndVisible(){const t=this.getLayer();t&&t.getVisible()&&"ready"===t.getSourceState()&&t.changed()}disposeInternal(){delete this.layer_,super.disposeInternal()}}const l=a;var h=i(7380),c=i(8771),u=i(6101),d=i(9706),g=i(8326),_=i(5537),f=i(8641);let p=null;const m=class extends l{constructor(t){super(t),this.container=null,this.renderedResolution,this.tempTransform=(0,u.Ue)(),this.pixelTransform=(0,u.Ue)(),this.inversePixelTransform=(0,u.Ue)(),this.context=null,this.containerReused=!1,this.pixelContext_=null,this.frameState=null}getImageData(t,e,i){let n;p||(p=(0,g.E4)(1,1,void 0,{willReadFrequently:!0})),p.clearRect(0,0,1,1);try{p.drawImage(t,e,i,1,1,0,0,1,1),n=p.getImageData(0,0,1,1).data}catch(t){return p=null,null}return n}getBackground(t){let e=this.getLayer().getBackground();return"function"==typeof e&&(e=e(t.viewState.resolution)),e||void 0}useContainer(t,e,i){const n=this.getLayer().getClassName();let s,r;if(t&&t.className===n&&(!i||t&&t.style.backgroundColor&&(0,_.fS)((0,d._2)(t.style.backgroundColor),(0,d._2)(i)))){const e=t.firstElementChild;e instanceof HTMLCanvasElement&&(r=e.getContext("2d"))}if(r&&r.canvas.style.transform===e?(this.container=t,this.context=r,this.containerReused=!0):this.containerReused&&(this.container=null,this.context=null,this.containerReused=!1),!this.container){s=document.createElement("div"),s.className=n;let t=s.style;t.position="absolute",t.width="100%",t.height="100%",r=(0,g.E4)();const e=r.canvas;s.appendChild(e),t=e.style,t.position="absolute",t.left="0",t.transformOrigin="top left",this.container=s,this.context=r}this.containerReused||!i||this.container.style.backgroundColor||(this.container.style.backgroundColor=i)}clipUnrotated(t,e,i){const n=(0,f.rL)(i),s=(0,f.Xv)(i),r=(0,f.w$)(i),o=(0,f.hC)(i);(0,u.nn)(e.coordinateToPixelTransform,n),(0,u.nn)(e.coordinateToPixelTransform,s),(0,u.nn)(e.coordinateToPixelTransform,r),(0,u.nn)(e.coordinateToPixelTransform,o);const a=this.inversePixelTransform;(0,u.nn)(a,n),(0,u.nn)(a,s),(0,u.nn)(a,r),(0,u.nn)(a,o),t.save(),t.beginPath(),t.moveTo(Math.round(n[0]),Math.round(n[1])),t.lineTo(Math.round(s[0]),Math.round(s[1])),t.lineTo(Math.round(r[0]),Math.round(r[1])),t.lineTo(Math.round(o[0]),Math.round(o[1])),t.clip()}dispatchRenderEvent_(t,e,i){const n=this.getLayer();if(n.hasListener(t)){const s=new h.Z(t,this.inversePixelTransform,i,e);n.dispatchEvent(s)}}preRender(t,e){this.frameState=e,this.dispatchRenderEvent_(c.Z.PRERENDER,t,e)}postRender(t,e){this.dispatchRenderEvent_(c.Z.POSTRENDER,t,e)}getRenderTransform(t,e,i,n,s,r,o){const a=s/2,l=r/2,h=n/e,c=-h,d=-t[0]+o,g=-t[1];return(0,u.qC)(this.tempTransform,a,l,h,c,-i,d,g)}disposeInternal(){delete this.frameState,super.disposeInternal()}};var v=i(825),y=i(3883),x=i(2519),w=i(7195),S=i(8661),E=i(4307);const b=class extends m{constructor(t){super(t),this.extentChanged=!0,this.renderedExtent_=null,this.renderedPixelRatio,this.renderedProjection=null,this.renderedRevision,this.renderedTiles=[],this.newTiles_=!1,this.tmpExtent=(0,f.lJ)(),this.tmpTileRange_=new x.Z(0,0,0,0)}isDrawableTile(t){const e=this.getLayer(),i=t.getState(),n=e.getUseInterimTilesOnError();return i==w.Z.LOADED||i==w.Z.EMPTY||i==w.Z.ERROR&&!n}getTile(t,e,i,n){const s=n.pixelRatio,r=n.viewState.projection,o=this.getLayer();let a=o.getSource().getTile(t,e,i,s,r);return a.getState()==w.Z.ERROR&&o.getUseInterimTilesOnError()&&o.getPreload()>0&&(this.newTiles_=!0),this.isDrawableTile(a)||(a=a.getInterimTile()),a}getData(t){const e=this.frameState;if(!e)return null;const i=this.getLayer(),n=(0,u.nn)(e.pixelToCoordinateTransform,t.slice()),s=i.getExtent();if(s&&!(0,f.b8)(s,n))return null;const r=e.pixelRatio,o=e.viewState.projection,a=e.viewState,l=i.getRenderSource(),h=l.getTileGridForProjection(a.projection),c=l.getTilePixelRatio(e.pixelRatio);for(let t=h.getZForResolution(a.resolution);t>=h.getMinZoom();--t){const e=h.getTileCoordForCoordAndZ(n,t),i=l.getTile(t,e[1],e[2],r,o);if(!(i instanceof v.Z||i instanceof y.Z)||i instanceof y.Z&&i.getState()===w.Z.EMPTY)return null;if(i.getState()!==w.Z.LOADED)continue;const s=h.getOrigin(t),u=(0,E.Pq)(h.getTileSize(t)),d=h.getResolution(t),g=Math.floor(c*((n[0]-s[0])/d-e[1]*u[0])),_=Math.floor(c*((s[1]-n[1])/d-e[2]*u[1])),f=Math.round(c*l.getGutterForProjection(a.projection));return this.getImageData(i.getImage(),g+f,_+f)}return null}loadedTileCallback(t,e,i){return!!this.isDrawableTile(i)&&super.loadedTileCallback(t,e,i)}prepareFrame(t){return!!this.getLayer().getSource()}renderFrame(t,e){const i=t.layerStatesArray[t.layerIndex],n=t.viewState,s=n.projection,r=n.resolution,a=n.center,l=n.rotation,h=t.pixelRatio,c=this.getLayer(),d=c.getSource(),g=d.getRevision(),p=d.getTileGridForProjection(s),m=p.getZForResolution(r,d.zDirection),v=p.getResolution(m);let y=t.extent;const x=t.viewState.resolution,E=d.getTilePixelRatio(h),b=Math.round((0,f.dz)(y)/x*h),C=Math.round((0,f.Cr)(y)/x*h),T=i.extent&&(0,S.dY)(i.extent,s);T&&(y=(0,f.Ed)(y,(0,S.dY)(i.extent,s)));const R=v*b/2/E,I=v*C/2/E,k=[a[0]-R,a[1]-I,a[0]+R,a[1]+I],M=p.getTileRangeForExtentAndZ(y,m),L={};L[m]={};const P=this.createLoadedTileFinder(d,s,L),O=this.tmpExtent,A=this.tmpTileRange_;this.newTiles_=!1;const Z=l?(0,f.dY)(n.center,x,l,t.size):void 0;for(let e=M.minX;e<=M.maxX;++e)for(let n=M.minY;n<=M.maxY;++n){if(l&&!p.tileCoordIntersectsViewport([m,e,n],Z))continue;const s=this.getTile(m,e,n,t);if(this.isDrawableTile(s)){const e=(0,o.sq)(this);if(s.getState()==w.Z.LOADED){L[m][s.tileCoord.toString()]=s;let t=s.inTransition(e);t&&1!==i.opacity&&(s.endTransition(e),t=!1),this.newTiles_||!t&&this.renderedTiles.includes(s)||(this.newTiles_=!0)}if(1===s.getAlpha(e,t.time))continue}const r=p.getTileCoordChildTileRange(s.tileCoord,A,O);let a=!1;r&&(a=P(m+1,r)),a||p.forEachTileCoordParentTileRange(s.tileCoord,P,A,O)}const F=v/r*h/E;(0,u.qC)(this.pixelTransform,t.size[0]/2,t.size[1]/2,1/h,1/h,l,-b/2,-C/2);const D=(0,u.BB)(this.pixelTransform);this.useContainer(e,D,this.getBackground(t));const z=this.context,N=z.canvas;(0,u.nb)(this.inversePixelTransform,this.pixelTransform),(0,u.qC)(this.tempTransform,b/2,C/2,F,F,0,-b/2,-C/2),N.width!=b||N.height!=C?(N.width=b,N.height=C):this.containerReused||z.clearRect(0,0,b,C),T&&this.clipUnrotated(z,t,T),d.getInterpolate()||(z.imageSmoothingEnabled=!1),this.preRender(z,t),this.renderedTiles.length=0;let G,B,W,j=Object.keys(L).map(Number);j.sort(_.j2),1!==i.opacity||this.containerReused&&!d.getOpaque(t.viewState.projection)?(G=[],B=[]):j=j.reverse();for(let e=j.length-1;e>=0;--e){const i=j[e],n=d.getTilePixelSize(i,h,s),r=p.getResolution(i)/v,a=n[0]*r*F,l=n[1]*r*F,c=p.getTileCoordForCoordAndZ((0,f.rL)(k),i),g=p.getTileCoordExtent(c),_=(0,u.nn)(this.tempTransform,[E*(g[0]-k[0])/v,E*(k[3]-g[3])/v]),y=E*d.getGutterForProjection(s),x=L[i];for(const e in x){const n=x[e],s=n.tileCoord,r=c[1]-s[1],h=Math.round(_[0]-(r-1)*a),u=c[2]-s[2],g=Math.round(_[1]-(u-1)*l),p=Math.round(_[0]-r*a),v=Math.round(_[1]-u*l),w=h-p,S=g-v,E=m===i,b=E&&1!==n.getAlpha((0,o.sq)(this),t.time);let C=!1;if(!b)if(G){W=[p,v,p+w,v,p+w,v+S,p,v+S];for(let t=0,e=G.length;t<e;++t)if(m!==i&&i<B[t]){const e=G[t];(0,f.kK)([p,v,p+w,v+S],[e[0],e[3],e[4],e[7]])&&(C||(z.save(),C=!0),z.beginPath(),z.moveTo(W[0],W[1]),z.lineTo(W[2],W[3]),z.lineTo(W[4],W[5]),z.lineTo(W[6],W[7]),z.moveTo(e[6],e[7]),z.lineTo(e[4],e[5]),z.lineTo(e[2],e[3]),z.lineTo(e[0],e[1]),z.clip())}G.push(W),B.push(i)}else z.clearRect(p,v,w,S);this.drawTileImage(n,t,p,v,w,S,y,E),G&&!b?(C&&z.restore(),this.renderedTiles.unshift(n)):this.renderedTiles.push(n),this.updateUsedTiles(t.usedTiles,d,n)}}return this.renderedRevision=g,this.renderedResolution=v,this.extentChanged=!this.renderedExtent_||!(0,f.fS)(this.renderedExtent_,k),this.renderedExtent_=k,this.renderedPixelRatio=h,this.renderedProjection=s,this.manageTilePyramid(t,d,p,h,s,y,m,c.getPreload()),this.scheduleExpireCache(t,d),this.postRender(z,t),i.extent&&z.restore(),z.imageSmoothingEnabled=!0,D!==N.style.transform&&(N.style.transform=D),this.container}drawTileImage(t,e,i,n,s,r,a,l){const h=this.getTileImage(t);if(!h)return;const c=(0,o.sq)(this),u=e.layerStatesArray[e.layerIndex],d=u.opacity*(l?t.getAlpha(c,e.time):1),g=d!==this.context.globalAlpha;g&&(this.context.save(),this.context.globalAlpha=d),this.context.drawImage(h,a,a,h.width-2*a,h.height-2*a,i,n,s,r),g&&this.context.restore(),d!==u.opacity?e.animate=!0:l&&t.endTransition(c)}getImage(){const t=this.context;return t?t.canvas:null}getTileImage(t){return t.getImage()}scheduleExpireCache(t,e){if(e.canExpireCache()){const i=function(t,e,i){const n=(0,o.sq)(t);n in i.usedTiles&&t.expireCache(i.viewState.projection,i.usedTiles[n])}.bind(null,e);t.postRenderFunctions.push(i)}}updateUsedTiles(t,e,i){const n=(0,o.sq)(e);n in t||(t[n]={}),t[n][i.getKey()]=!0}manageTilePyramid(t,e,i,n,s,r,a,l,h){const c=(0,o.sq)(e);c in t.wantedTiles||(t.wantedTiles[c]={});const u=t.wantedTiles[c],d=t.tileQueue,g=i.getMinZoom(),_=t.viewState.rotation,p=_?(0,f.dY)(t.viewState.center,t.viewState.resolution,_,t.size):void 0;let m,v,y,x,S,E,b=0;for(E=g;E<=a;++E)for(v=i.getTileRangeForExtentAndZ(r,E,v),y=i.getResolution(E),x=v.minX;x<=v.maxX;++x)for(S=v.minY;S<=v.maxY;++S)_&&!i.tileCoordIntersectsViewport([E,x,S],p)||(a-E<=l?(++b,m=e.getTile(E,x,S,n,s),m.getState()==w.Z.IDLE&&(u[m.getKey()]=!0,d.isKeyQueued(m.getKey())||d.enqueue([m,c,i.getTileCoordCenter(m.tileCoord),y])),void 0!==h&&h(m)):e.useTile(E,x,S,s));e.updateCacheSize(b,s)}}},3883:(t,e,i)=>{"use strict";i.d(e,{Z:()=>m});var n=i(5487),s=i(4806),r=i(7195),o=i(8641),a=i(8661),l=i(3983);var h=i(8326);let c;const u=[];function d(t,e,i,n,s){t.beginPath(),t.moveTo(0,0),t.lineTo(e,i),t.lineTo(n,s),t.closePath(),t.save(),t.clip(),t.fillRect(0,0,Math.max(e,n)+1,Math.max(i,s)),t.restore()}function g(t,e){return Math.abs(t[4*e]-210)>2||Math.abs(t[4*e+3]-191.25)>2}function _(t,e,i,n){const s=(0,a.vs)(i,e,t);let r=(0,a._Q)(e,n,i);const l=e.getMetersPerUnit();void 0!==l&&(r*=l);const h=t.getMetersPerUnit();void 0!==h&&(r/=h);const c=t.getExtent();if(!c||(0,o.b8)(c,s)){const e=(0,a._Q)(t,r,s)/r;isFinite(e)&&e>0&&(r/=e)}return r}var f=i(5818);class p extends s.Z{constructor(t,e,i,n,s,h,c,u,d,g,f,p){super(s,r.Z.IDLE,{interpolate:!!p}),this.renderEdges_=void 0!==f&&f,this.pixelRatio_=c,this.gutter_=u,this.canvas_=null,this.sourceTileGrid_=e,this.targetTileGrid_=n,this.wrappedTileCoord_=h||s,this.sourceTiles_=[],this.sourcesListenerKeys_=null,this.sourceZ_=0;const m=n.getTileCoordExtent(this.wrappedTileCoord_),v=this.targetTileGrid_.getExtent();let y=this.sourceTileGrid_.getExtent();const x=v?(0,o.Ed)(m,v):m;if(0===(0,o.bg)(x))return void(this.state=r.Z.EMPTY);const w=t.getExtent();w&&(y=y?(0,o.Ed)(y,w):w);const S=n.getResolution(this.wrappedTileCoord_[0]),E=function(t,e,i,n){const s=(0,o.qg)(i);let r=_(t,e,s,n);return(!isFinite(r)||r<=0)&&(0,o.H6)(i,(function(i){return r=_(t,e,i,n),isFinite(r)&&r>0})),r}(t,i,x,S);if(!isFinite(E)||E<=0)return void(this.state=r.Z.EMPTY);const b=void 0!==g?g:.5;if(this.triangulation_=new class{constructor(t,e,i,n,s,r){this.sourceProj_=t,this.targetProj_=e;let l={};const h=(0,a.Ck)(this.targetProj_,this.sourceProj_);this.transformInv_=function(t){const e=t[0]+"/"+t[1];return l[e]||(l[e]=h(t)),l[e]},this.maxSourceExtent_=n,this.errorThresholdSquared_=s*s,this.triangles_=[],this.wrapsXInSource_=!1,this.canWrapXInSource_=this.sourceProj_.canWrapX()&&!!n&&!!this.sourceProj_.getExtent()&&(0,o.dz)(n)==(0,o.dz)(this.sourceProj_.getExtent()),this.sourceWorldWidth_=this.sourceProj_.getExtent()?(0,o.dz)(this.sourceProj_.getExtent()):null,this.targetWorldWidth_=this.targetProj_.getExtent()?(0,o.dz)(this.targetProj_.getExtent()):null;const c=(0,o.rL)(i),u=(0,o.Xv)(i),d=(0,o.w$)(i),g=(0,o.hC)(i),_=this.transformInv_(c),f=this.transformInv_(u),p=this.transformInv_(d),m=this.transformInv_(g),v=10+(r?Math.max(0,Math.ceil(Math.log2((0,o.bg)(i)/(r*r*256*256)))):0);if(this.addQuad_(c,u,d,g,_,f,p,m,v),this.wrapsXInSource_){let t=1/0;this.triangles_.forEach((function(e,i,n){t=Math.min(t,e.source[0][0],e.source[1][0],e.source[2][0])})),this.triangles_.forEach((e=>{if(Math.max(e.source[0][0],e.source[1][0],e.source[2][0])-t>this.sourceWorldWidth_/2){const i=[[e.source[0][0],e.source[0][1]],[e.source[1][0],e.source[1][1]],[e.source[2][0],e.source[2][1]]];i[0][0]-t>this.sourceWorldWidth_/2&&(i[0][0]-=this.sourceWorldWidth_),i[1][0]-t>this.sourceWorldWidth_/2&&(i[1][0]-=this.sourceWorldWidth_),i[2][0]-t>this.sourceWorldWidth_/2&&(i[2][0]-=this.sourceWorldWidth_);const n=Math.min(i[0][0],i[1][0],i[2][0]);Math.max(i[0][0],i[1][0],i[2][0])-n<this.sourceWorldWidth_/2&&(e.source=i)}}))}l={}}addTriangle_(t,e,i,n,s,r){this.triangles_.push({source:[n,s,r],target:[t,e,i]})}addQuad_(t,e,i,n,s,r,a,h,c){const u=(0,o.hI)([s,r,a,h]),d=this.sourceWorldWidth_?(0,o.dz)(u)/this.sourceWorldWidth_:null,g=this.sourceWorldWidth_,_=this.sourceProj_.canWrapX()&&d>.5&&d<1;let f=!1;if(c>0){if(this.targetProj_.isGlobal()&&this.targetWorldWidth_){const s=(0,o.hI)([t,e,i,n]);f=(0,o.dz)(s)/this.targetWorldWidth_>.25||f}!_&&this.sourceProj_.isGlobal()&&d&&(f=d>.25||f)}if(!f&&this.maxSourceExtent_&&isFinite(u[0])&&isFinite(u[1])&&isFinite(u[2])&&isFinite(u[3])&&!(0,o.kK)(u,this.maxSourceExtent_))return;let p=0;if(!(f||isFinite(s[0])&&isFinite(s[1])&&isFinite(r[0])&&isFinite(r[1])&&isFinite(a[0])&&isFinite(a[1])&&isFinite(h[0])&&isFinite(h[1])))if(c>0)f=!0;else if(p=(isFinite(s[0])&&isFinite(s[1])?0:8)+(isFinite(r[0])&&isFinite(r[1])?0:4)+(isFinite(a[0])&&isFinite(a[1])?0:2)+(isFinite(h[0])&&isFinite(h[1])?0:1),1!=p&&2!=p&&4!=p&&8!=p)return;if(c>0){if(!f){const e=[(t[0]+i[0])/2,(t[1]+i[1])/2],n=this.transformInv_(e);let r;r=_?((0,l.$W)(s[0],g)+(0,l.$W)(a[0],g))/2-(0,l.$W)(n[0],g):(s[0]+a[0])/2-n[0];const o=(s[1]+a[1])/2-n[1];f=r*r+o*o>this.errorThresholdSquared_}if(f){if(Math.abs(t[0]-i[0])<=Math.abs(t[1]-i[1])){const o=[(e[0]+i[0])/2,(e[1]+i[1])/2],l=this.transformInv_(o),u=[(n[0]+t[0])/2,(n[1]+t[1])/2],d=this.transformInv_(u);this.addQuad_(t,e,o,u,s,r,l,d,c-1),this.addQuad_(u,o,i,n,d,l,a,h,c-1)}else{const o=[(t[0]+e[0])/2,(t[1]+e[1])/2],l=this.transformInv_(o),u=[(i[0]+n[0])/2,(i[1]+n[1])/2],d=this.transformInv_(u);this.addQuad_(t,o,u,n,s,l,d,h,c-1),this.addQuad_(o,e,i,u,l,r,a,d,c-1)}return}}if(_){if(!this.canWrapXInSource_)return;this.wrapsXInSource_=!0}0==(11&p)&&this.addTriangle_(t,i,n,s,a,h),0==(14&p)&&this.addTriangle_(t,i,e,s,a,r),p&&(0==(13&p)&&this.addTriangle_(e,n,t,r,h,s),0==(7&p)&&this.addTriangle_(e,n,i,r,h,a))}calculateSourceExtent(){const t=(0,o.lJ)();return this.triangles_.forEach((function(e,i,n){const s=e.source;(0,o.Wj)(t,s[0]),(0,o.Wj)(t,s[1]),(0,o.Wj)(t,s[2])})),t}getTriangles(){return this.triangles_}}(t,i,x,y,E*b,S),0===this.triangulation_.getTriangles().length)return void(this.state=r.Z.EMPTY);this.sourceZ_=e.getZForResolution(E);let C=this.triangulation_.calculateSourceExtent();if(y&&(t.canWrapX()?(C[1]=(0,l.uZ)(C[1],y[1],y[3]),C[3]=(0,l.uZ)(C[3],y[1],y[3])):C=(0,o.Ed)(C,y)),(0,o.bg)(C)){const t=e.getTileRangeForExtentAndZ(C,this.sourceZ_);for(let e=t.minX;e<=t.maxX;e++)for(let i=t.minY;i<=t.maxY;i++){const t=d(this.sourceZ_,e,i,c);t&&this.sourceTiles_.push(t)}0===this.sourceTiles_.length&&(this.state=r.Z.EMPTY)}else this.state=r.Z.EMPTY}getImage(){return this.canvas_}reproject_(){const t=[];if(this.sourceTiles_.forEach((e=>{e&&e.getState()==r.Z.LOADED&&t.push({extent:this.sourceTileGrid_.getTileCoordExtent(e.tileCoord),image:e.getImage()})})),this.sourceTiles_.length=0,0===t.length)this.state=r.Z.ERROR;else{const e=this.wrappedTileCoord_[0],i=this.targetTileGrid_.getTileSize(e),n="number"==typeof i?i:i[0],s="number"==typeof i?i:i[1],a=this.targetTileGrid_.getResolution(e),_=this.sourceTileGrid_.getResolution(this.sourceZ_),f=this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);this.canvas_=function(t,e,i,n,s,r,a,_,f,p,m,v){const y=(0,h.E4)(Math.round(i*t),Math.round(i*e),u);if(v||(y.imageSmoothingEnabled=!1),0===f.length)return y.canvas;function x(t){return Math.round(t*i)/i}y.scale(i,i),y.globalCompositeOperation="lighter";const w=(0,o.lJ)();f.forEach((function(t,e,i){(0,o.l7)(w,t.extent)}));const S=(0,o.dz)(w),E=(0,o.Cr)(w),b=(0,h.E4)(Math.round(i*S/n),Math.round(i*E/n),u);v||(b.imageSmoothingEnabled=!1);const C=i/n;f.forEach((function(t,e,i){const n=t.extent[0]-w[0],s=-(t.extent[3]-w[3]),r=(0,o.dz)(t.extent),a=(0,o.Cr)(t.extent);t.image.width>0&&t.image.height>0&&b.drawImage(t.image,p,p,t.image.width-2*p,t.image.height-2*p,n*C,s*C,r*C,a*C)}));const T=(0,o.rL)(a);return _.getTriangles().forEach((function(t,e,s){const o=t.source,a=t.target;let _=o[0][0],f=o[0][1],p=o[1][0],m=o[1][1],S=o[2][0],E=o[2][1];const C=x((a[0][0]-T[0])/r),R=x(-(a[0][1]-T[1])/r),I=x((a[1][0]-T[0])/r),k=x(-(a[1][1]-T[1])/r),M=x((a[2][0]-T[0])/r),L=x(-(a[2][1]-T[1])/r),P=_,O=f;_=0,f=0,p-=P,m-=O,S-=P,E-=O;const A=[[p,m,0,0,I-C],[S,E,0,0,M-C],[0,0,p,m,k-R],[0,0,S,E,L-R]],Z=(0,l.SV)(A);if(Z){if(y.save(),y.beginPath(),function(){if(void 0===c){const t=(0,h.E4)(6,6,u);t.globalCompositeOperation="lighter",t.fillStyle="rgba(210, 0, 0, 0.75)",d(t,4,5,4,0),d(t,4,5,0,5);const e=t.getImageData(0,0,3,3).data;c=g(e,0)||g(e,4)||g(e,8),(0,h.jy)(t),u.push(t.canvas)}return c}()||!v){y.moveTo(I,k);const t=4,e=C-I,i=R-k;for(let n=0;n<t;n++)y.lineTo(I+x((n+1)*e/t),k+x(n*i/(t-1))),n!=t-1&&y.lineTo(I+x((n+1)*e/t),k+x((n+1)*i/(t-1)));y.lineTo(M,L)}else y.moveTo(I,k),y.lineTo(C,R),y.lineTo(M,L);y.clip(),y.transform(Z[0],Z[2],Z[1],Z[3],C,R),y.translate(w[0]-P,w[3]-O),y.scale(n/i,-n/i),y.drawImage(b.canvas,0,0),y.restore()}})),(0,h.jy)(b),u.push(b.canvas),m&&(y.save(),y.globalCompositeOperation="source-over",y.strokeStyle="black",y.lineWidth=1,_.getTriangles().forEach((function(t,e,i){const n=t.target,s=(n[0][0]-T[0])/r,o=-(n[0][1]-T[1])/r,a=(n[1][0]-T[0])/r,l=-(n[1][1]-T[1])/r,h=(n[2][0]-T[0])/r,c=-(n[2][1]-T[1])/r;y.beginPath(),y.moveTo(a,l),y.lineTo(s,o),y.lineTo(h,c),y.closePath(),y.stroke()})),y.restore()),y.canvas}(n,s,this.pixelRatio_,_,this.sourceTileGrid_.getExtent(),a,f,this.triangulation_,t,this.gutter_,this.renderEdges_,this.interpolate),this.state=r.Z.LOADED}this.changed()}load(){if(this.state==r.Z.IDLE){this.state=r.Z.LOADING,this.changed();let t=0;this.sourcesListenerKeys_=[],this.sourceTiles_.forEach((e=>{const i=e.getState();if(i==r.Z.IDLE||i==r.Z.LOADING){t++;const i=(0,f.oL)(e,n.Z.CHANGE,(function(n){const s=e.getState();s!=r.Z.LOADED&&s!=r.Z.ERROR&&s!=r.Z.EMPTY||((0,f.bN)(i),t--,0===t&&(this.unlistenSources_(),this.reproject_()))}),this);this.sourcesListenerKeys_.push(i)}})),0===t?setTimeout(this.reproject_.bind(this),0):this.sourceTiles_.forEach((function(t,e,i){t.getState()==r.Z.IDLE&&t.load()}))}}unlistenSources_(){this.sourcesListenerKeys_.forEach(f.bN),this.sourcesListenerKeys_=null}release(){this.canvas_&&((0,h.jy)(this.canvas_.getContext("2d")),u.push(this.canvas_),this.canvas_=null),super.release()}}const m=p},828:(t,e,i)=>{"use strict";i.d(e,{Gw:()=>a,YP:()=>r,gE:()=>o,h$:()=>s});var n=i(3983);function s(t){if(void 0!==t)return 0}function r(t){if(void 0!==t)return t}function o(t){const e=2*Math.PI/t;return function(t,i){return i?t:void 0!==t?t=Math.floor(t/e+.5)*e:void 0}}function a(t){return t=t||(0,n.Yr)(5),function(e,i){return i?e:void 0!==e?Math.abs(e)<=t?0:e:void 0}}},4307:(t,e,i)=>{"use strict";function n(t){return t[0]>0&&t[1]>0}function s(t,e,i){return void 0===i&&(i=[0,0]),i[0]=t[0]*e+.5|0,i[1]=t[1]*e+.5|0,i}function r(t,e){return Array.isArray(t)?t:(void 0===e?e=[t,t]:(e[0]=t,e[1]=t),e)}i.d(e,{Pq:()=>r,bA:()=>s,py:()=>n})},6263:(t,e,i)=>{"use strict";i.d(e,{Z:()=>a});var n=i(6841),s=i(8326),r=i(4307);class o extends n.Z{constructor(t){super({opaque:!1,projection:(t=t||{}).projection,tileGrid:t.tileGrid,wrapX:void 0===t.wrapX||t.wrapX,zDirection:t.zDirection,url:t.template||"z:{z} x:{x} y:{y}",tileLoadFunction:(t,e)=>{const i=t.getTileCoord()[0],n=(0,r.Pq)(this.tileGrid.getTileSize(i)),o=(0,s.E4)(n[0],n[1]);o.strokeStyle="grey",o.strokeRect(.5,.5,n[0]+.5,n[1]+.5),o.fillStyle="grey",o.strokeStyle="white",o.textAlign="center",o.textBaseline="middle",o.font="24px sans-serif",o.lineWidth=4,o.strokeText(e,n[0]/2,n[1]/2,n[0]),o.fillText(e,n[0]/2,n[1]/2,n[0]),t.setImage(o.canvas)}})}}const a=o},5231:(t,e,i)=>{"use strict";i.d(e,{Z:()=>w});var n=i(291),s=i(2971),r=i(8661);class o extends s.Z{constructor(t){super(),this.projection=(0,r.U2)(t.projection),this.attributions_=a(t.attributions),this.attributionsCollapsible_=void 0===t.attributionsCollapsible||t.attributionsCollapsible,this.loading=!1,this.state_=void 0!==t.state?t.state:"ready",this.wrapX_=void 0!==t.wrapX&&t.wrapX,this.interpolate_=!!t.interpolate,this.viewResolver=null,this.viewRejector=null;const e=this;this.viewPromise_=new Promise((function(t,i){e.viewResolver=t,e.viewRejector=i}))}getAttributions(){return this.attributions_}getAttributionsCollapsible(){return this.attributionsCollapsible_}getProjection(){return this.projection}getResolutions(t){return null}getView(){return this.viewPromise_}getState(){return this.state_}getWrapX(){return this.wrapX_}getInterpolate(){return this.interpolate_}refresh(){this.changed()}setAttributions(t){this.attributions_=a(t),this.changed()}setState(t){this.state_=t,this.changed()}}function a(t){return t?Array.isArray(t)?function(e){return t}:"function"==typeof t?t:function(e){return[t]}:null}const l=o;var h=i(5532),c=i(7195),u=i(4187),d=i(9515),g=i(8634),_=i(7248),f=i(4307);class p extends n.ZP{constructor(t,e){super(t),this.tile=e}}const m=class extends l{constructor(t){super({attributions:t.attributions,attributionsCollapsible:t.attributionsCollapsible,projection:t.projection,state:t.state,wrapX:t.wrapX,interpolate:t.interpolate}),this.on,this.once,this.un,this.opaque_=void 0!==t.opaque&&t.opaque,this.tilePixelRatio_=void 0!==t.tilePixelRatio?t.tilePixelRatio:1,this.tileGrid=void 0!==t.tileGrid?t.tileGrid:null;this.tileGrid&&(0,f.Pq)(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()),[256,256]),this.tileCache=new h.Z(t.cacheSize||0),this.tmpSize=[0,0],this.key_=t.key||"",this.tileOptions={transition:t.transition,interpolate:t.interpolate},this.zDirection=t.zDirection?t.zDirection:0}canExpireCache(){return this.tileCache.canExpireCache()}expireCache(t,e){const i=this.getTileCacheForProjection(t);i&&i.expireCache(e)}forEachLoadedTile(t,e,i,n){const s=this.getTileCacheForProjection(t);if(!s)return!1;let r,o,a,l=!0;for(let t=i.minX;t<=i.maxX;++t)for(let h=i.minY;h<=i.maxY;++h)o=(0,g.lg)(e,t,h),a=!1,s.containsKey(o)&&(r=s.get(o),a=r.getState()===c.Z.LOADED,a&&(a=!1!==n(r))),a||(l=!1);return l}getGutterForProjection(t){return 0}getKey(){return this.key_}setKey(t){this.key_!==t&&(this.key_=t,this.changed())}getOpaque(t){return this.opaque_}getResolutions(t){const e=t?this.getTileGridForProjection(t):this.tileGrid;return e?e.getResolutions():null}getTile(t,e,i,n,s){return(0,u.O3)()}getTileGrid(){return this.tileGrid}getTileGridForProjection(t){return this.tileGrid?this.tileGrid:(0,_.X$)(t)}getTileCacheForProjection(t){const e=this.getProjection();return(0,d.h)(null===e||(0,r.OP)(e,t),68),this.tileCache}getTilePixelRatio(t){return this.tilePixelRatio_}getTilePixelSize(t,e,i){const n=this.getTileGridForProjection(i),s=this.getTilePixelRatio(e),r=(0,f.Pq)(n.getTileSize(t),this.tmpSize);return 1==s?r:(0,f.bA)(r,s,this.tmpSize)}getTileCoordForTileUrlFunction(t,e){e=void 0!==e?e:this.getProjection();const i=this.getTileGridForProjection(e);return this.getWrapX()&&e.isGlobal()&&(t=(0,_.Cf)(i,t,e)),(0,g.tE)(t,i)?t:null}clear(){this.tileCache.clear()}refresh(){this.clear(),super.refresh()}updateCacheSize(t,e){const i=this.getTileCacheForProjection(e);t>i.highWaterMark&&(i.highWaterMark=t)}useTile(t,e,i,n){}};var v=i(3983);function y(t,e){const i=/\{z\}/g,n=/\{x\}/g,s=/\{y\}/g,r=/\{-y\}/g;return function(o,a,l){if(o)return t.replace(i,o[0].toString()).replace(n,o[1].toString()).replace(s,o[2].toString()).replace(r,(function(){const t=o[0],i=e.getFullTileRange(t);return(0,d.h)(i,55),(i.getHeight()-o[2]-1).toString()}))}}class x extends m{constructor(t){super({attributions:t.attributions,cacheSize:t.cacheSize,opaque:t.opaque,projection:t.projection,state:t.state,tileGrid:t.tileGrid,tilePixelRatio:t.tilePixelRatio,wrapX:t.wrapX,transition:t.transition,interpolate:t.interpolate,key:t.key,attributionsCollapsible:t.attributionsCollapsible,zDirection:t.zDirection}),this.generateTileUrlFunction_=this.tileUrlFunction===x.prototype.tileUrlFunction,this.tileLoadFunction=t.tileLoadFunction,t.tileUrlFunction&&(this.tileUrlFunction=t.tileUrlFunction),this.urls=null,t.urls?this.setUrls(t.urls):t.url&&this.setUrl(t.url),this.tileLoadingKeys_={}}getTileLoadFunction(){return this.tileLoadFunction}getTileUrlFunction(){return Object.getPrototypeOf(this).tileUrlFunction===this.tileUrlFunction?this.tileUrlFunction.bind(this):this.tileUrlFunction}getUrls(){return this.urls}handleTileChange(t){const e=t.target,i=(0,u.sq)(e),n=e.getState();let s;n==c.Z.LOADING?(this.tileLoadingKeys_[i]=!0,s="tileloadstart"):i in this.tileLoadingKeys_&&(delete this.tileLoadingKeys_[i],s=n==c.Z.ERROR?"tileloaderror":n==c.Z.LOADED?"tileloadend":void 0),null!=s&&this.dispatchEvent(new p(s,e))}setTileLoadFunction(t){this.tileCache.clear(),this.tileLoadFunction=t,this.changed()}setTileUrlFunction(t,e){this.tileUrlFunction=t,this.tileCache.pruneExceptNewestZ(),void 0!==e?this.setKey(e):this.changed()}setUrl(t){const e=function(t){const e=[];let i=/\{([a-z])-([a-z])\}/.exec(t);if(i){const n=i[1].charCodeAt(0),s=i[2].charCodeAt(0);let r;for(r=n;r<=s;++r)e.push(t.replace(i[0],String.fromCharCode(r)));return e}if(i=/\{(\d+)-(\d+)\}/.exec(t),i){const n=parseInt(i[2],10);for(let s=parseInt(i[1],10);s<=n;s++)e.push(t.replace(i[0],s.toString()));return e}return e.push(t),e}(t);this.urls=e,this.setUrls(e)}setUrls(t){this.urls=t;const e=t.join("\n");this.generateTileUrlFunction_?this.setTileUrlFunction(function(t,e){const i=t.length,n=new Array(i);for(let s=0;s<i;++s)n[s]=y(t[s],e);return function(t){return 1===t.length?t[0]:function(e,i,n){if(!e)return;const s=(0,g.vp)(e),r=(0,v.$W)(s,t.length);return t[r](e,i,n)}}(n)}(t,this.tileGrid),e):this.setKey(e)}tileUrlFunction(t,e,i){}useTile(t,e,i){const n=(0,g.lg)(t,e,i);this.tileCache.containsKey(n)&&this.tileCache.get(n)}}const w=x},7205:(t,e,i)=>{"use strict";i.d(e,{Z:()=>b});var n=i(5487),s=i(4806),r=i(7195);class o extends s.Z{constructor(t,e,i,n,s,r){super(t,e,r),this.extent=null,this.format_=n,this.features_=null,this.loader_,this.projection=null,this.resolution,this.tileLoadFunction_=s,this.url_=i,this.key=i}getFormat(){return this.format_}getFeatures(){return this.features_}load(){this.state==r.Z.IDLE&&(this.setState(r.Z.LOADING),this.tileLoadFunction_(this,this.url_),this.loader_&&this.loader_(this.extent,this.resolution,this.projection))}onLoad(t,e){this.setFeatures(t)}onError(){this.setState(r.Z.ERROR)}setFeatures(t){this.features_=t,this.setState(r.Z.LOADED)}setLoader(t){this.loader_=t}}const a=o;var l=i(5532),h=i(8738),c=i(5231),u=i(8326),d=i(4187);const g=[];class _ extends s.Z{constructor(t,e,i,n){super(t,e,{transition:0}),this.context_={},this.executorGroups={},this.declutterExecutorGroups={},this.loadingSourceTiles=0,this.hitDetectionImageData={},this.replayState_={},this.sourceTiles=[],this.errorTileKeys={},this.wantedResolution,this.getSourceTiles=n.bind(void 0,this),this.wrappedTileCoord=i}getContext(t){const e=(0,d.sq)(t);return e in this.context_||(this.context_[e]=(0,u.E4)(1,1,g)),this.context_[e]}hasContext(t){return(0,d.sq)(t)in this.context_}getImage(t){return this.hasContext(t)?this.getContext(t).canvas:null}getReplayState(t){const e=(0,d.sq)(t);return e in this.replayState_||(this.replayState_[e]={dirty:!1,renderedRenderOrder:null,renderedResolution:NaN,renderedRevision:-1,renderedTileResolution:NaN,renderedTileRevision:-1,renderedTileZ:-1}),this.replayState_[e]}load(){this.getSourceTiles()}release(){for(const t in this.context_){const e=this.context_[t];(0,u.jy)(e),g.push(e.canvas),delete this.context_[t]}super.release()}}const f=_;var p=i(4768),m=i(8641),v=i(7248),y=i(8634),x=i(9374);let w=!1;var S=i(4307);class E extends c.Z{constructor(t){const e=t.projection||"EPSG:3857",i=t.extent||(0,v.Tl)(e),n=t.tileGrid||(0,v.dl)({extent:i,maxResolution:t.maxResolution,maxZoom:void 0!==t.maxZoom?t.maxZoom:22,minZoom:t.minZoom,tileSize:t.tileSize||512});super({attributions:t.attributions,attributionsCollapsible:t.attributionsCollapsible,cacheSize:t.cacheSize,interpolate:!0,opaque:!1,projection:e,state:t.state,tileGrid:n,tileLoadFunction:t.tileLoadFunction?t.tileLoadFunction:C,tileUrlFunction:t.tileUrlFunction,url:t.url,urls:t.urls,wrapX:void 0===t.wrapX||t.wrapX,transition:t.transition,zDirection:void 0===t.zDirection?1:t.zDirection}),this.format_=t.format?t.format:null,this.sourceTileCache=new l.Z(this.tileCache.highWaterMark),this.overlaps_=null==t.overlaps||t.overlaps,this.tileClass=t.tileClass?t.tileClass:a,this.tileGrids_={}}getFeaturesInExtent(t){const e=[],i=this.tileCache;if(0===i.getCount())return e;const n=(0,y.Ul)(i.peekFirstKey())[0],s=this.tileGrid;return i.forEach((function(i){if(i.tileCoord[0]!==n||i.getState()!==r.Z.LOADED)return;const o=i.getSourceTiles();for(let i=0,n=o.length;i<n;++i){const n=o[i],r=n.tileCoord;if((0,m.kK)(t,s.getTileCoordExtent(r))){const i=n.getFeatures();if(i)for(let n=0,s=i.length;n<s;++n){const s=i[n],r=s.getGeometry();(0,m.kK)(t,r.getExtent())&&e.push(s)}}}})),e}getOverlaps(){return this.overlaps_}clear(){this.tileCache.clear(),this.sourceTileCache.clear()}expireCache(t,e){const i=this.getTileCacheForProjection(t),n=Object.keys(e).reduce(((t,e)=>{const n=(0,y.MY)(e),s=i.peek(n);if(s){const e=s.sourceTiles;for(let i=0,n=e.length;i<n;++i)t[e[i].getKey()]=!0}return t}),{});super.expireCache(t,e),this.sourceTileCache.expireCache(n)}getSourceTiles(t,e,i){if(i.getState()===r.Z.IDLE){i.setState(r.Z.LOADING);const s=i.wrappedTileCoord,o=this.getTileGridForProjection(e),a=o.getTileCoordExtent(s),l=s[0],h=o.getResolution(l);(0,m.f3)(a,-h,a);const c=this.tileGrid,u=c.getExtent();u&&(0,m.Ed)(a,u,a);const d=c.getZForResolution(h,this.zDirection);c.forEachTileCoord(a,d,(s=>{const o=this.tileUrlFunction(s,t,e),a=this.sourceTileCache.containsKey(o)?this.sourceTileCache.get(o):new this.tileClass(s,o?r.Z.IDLE:r.Z.EMPTY,o,this.format_,this.tileLoadFunction);i.sourceTiles.push(a);const l=a.getState();if(l<r.Z.LOADED){const t=e=>{this.handleTileChange(e);const s=a.getState();if(s===r.Z.LOADED||s===r.Z.ERROR){const e=a.getKey();e in i.errorTileKeys?a.getState()===r.Z.LOADED&&delete i.errorTileKeys[e]:i.loadingSourceTiles--,s===r.Z.ERROR?i.errorTileKeys[e]=!0:a.removeEventListener(n.Z.CHANGE,t),0===i.loadingSourceTiles&&i.setState((0,x.x)(i.errorTileKeys)?r.Z.LOADED:r.Z.ERROR)}};a.addEventListener(n.Z.CHANGE,t),i.loadingSourceTiles++}l===r.Z.IDLE&&(a.extent=c.getTileCoordExtent(s),a.projection=e,a.resolution=c.getResolution(s[0]),this.sourceTileCache.set(o,a),a.load())})),i.loadingSourceTiles||i.setState(i.sourceTiles.some((t=>t.getState()===r.Z.ERROR))?r.Z.ERROR:r.Z.LOADED)}return i.sourceTiles}getTile(t,e,i,n,s){const o=(0,y.lg)(t,e,i),a=this.getKey();let l;if(this.tileCache.containsKey(o)&&(l=this.tileCache.get(o),l.key===a))return l;const h=[t,e,i];let c=this.getTileCoordForTileUrlFunction(h,s);const u=this.getTileGrid().getExtent(),d=this.getTileGridForProjection(s);if(c&&u){const e=d.getTileCoordExtent(c);(0,m.f3)(e,-d.getResolution(t),e),(0,m.kK)(u,e)||(c=null)}let g=!0;if(null!==c){const e=this.tileGrid,i=d.getResolution(t),r=e.getZForResolution(i,1),o=d.getTileCoordExtent(c);(0,m.f3)(o,-i,o),e.forEachTileCoord(o,r,(t=>{g=g&&!this.tileUrlFunction(t,n,s)}))}const _=new f(h,g?r.Z.EMPTY:r.Z.IDLE,c,this.getSourceTiles.bind(this,n,s));return _.key=a,l?(_.interimTile=l,_.refreshInterimChain(),this.tileCache.replace(o,_)):this.tileCache.set(o,_),_}getTileGridForProjection(t){const e=t.getCode();let i=this.tileGrids_[e];if(!i){const t=this.tileGrid,n=t.getResolutions().slice(),s=n.map((function(e,i){return t.getOrigin(i)})),r=n.map((function(e,i){return t.getTileSize(i)})),o=p.e+1;for(let t=n.length;t<o;++t)n.push(n[t-1]/2),s.push(s[t-1]),r.push(r[t-1]);i=new h.Z({extent:t.getExtent(),origins:s,resolutions:n,tileSizes:r}),this.tileGrids_[e]=i}return i}getTilePixelRatio(t){return t}getTilePixelSize(t,e,i){const n=this.getTileGridForProjection(i),s=(0,S.Pq)(n.getTileSize(t),this.tmpSize);return[Math.round(s[0]*e),Math.round(s[1]*e)]}updateCacheSize(t,e){super.updateCacheSize(2*t,e),this.sourceTileCache.highWaterMark=this.getTileCacheForProjection(e).highWaterMark}}const b=E;function C(t,e){t.setLoader((function(i,n,s){!function(t,e,i,n,s,r,o){const a=new XMLHttpRequest;a.open("GET","function"==typeof t?t(i,n,s):t,!0),"arraybuffer"==e.getType()&&(a.responseType="arraybuffer"),a.withCredentials=w,a.onload=function(t){if(!a.status||a.status>=200&&a.status<300){const t=e.getType();let n;"json"==t||"text"==t?n=a.responseText:"xml"==t?(n=a.responseXML,n||(n=(new DOMParser).parseFromString(a.responseText,"application/xml"))):"arraybuffer"==t&&(n=a.response),n?r(e.readFeatures(n,{extent:i,featureProjection:s}),e.readProjection(n)):o()}else o()},a.onerror=o,a.send()}(e,t.getFormat(),i,n,s,t.onLoad.bind(t),t.onError.bind(t))}))}},6841:(t,e,i)=>{"use strict";i.d(e,{Z:()=>p});var n=i(5487),s=i(825),r=i(3883),o=i(5532),a=i(7195),l=i(5231),h=i(8661),c=i(8634),u=i(7248),d=i(4187);class g extends l.Z{constructor(t){super({attributions:t.attributions,cacheSize:t.cacheSize,opaque:t.opaque,projection:t.projection,state:t.state,tileGrid:t.tileGrid,tileLoadFunction:t.tileLoadFunction?t.tileLoadFunction:_,tilePixelRatio:t.tilePixelRatio,tileUrlFunction:t.tileUrlFunction,url:t.url,urls:t.urls,wrapX:t.wrapX,transition:t.transition,interpolate:void 0===t.interpolate||t.interpolate,key:t.key,attributionsCollapsible:t.attributionsCollapsible,zDirection:t.zDirection}),this.crossOrigin=void 0!==t.crossOrigin?t.crossOrigin:null,this.tileClass=void 0!==t.tileClass?t.tileClass:s.Z,this.tileCacheForProjection={},this.tileGridForProjection={},this.reprojectionErrorThreshold_=t.reprojectionErrorThreshold,this.renderReprojectionEdges_=!1}canExpireCache(){if(this.tileCache.canExpireCache())return!0;for(const t in this.tileCacheForProjection)if(this.tileCacheForProjection[t].canExpireCache())return!0;return!1}expireCache(t,e){const i=this.getTileCacheForProjection(t);this.tileCache.expireCache(this.tileCache==i?e:{});for(const t in this.tileCacheForProjection){const n=this.tileCacheForProjection[t];n.expireCache(n==i?e:{})}}getGutterForProjection(t){return this.getProjection()&&t&&!(0,h.OP)(this.getProjection(),t)?0:this.getGutter()}getGutter(){return 0}getKey(){let t=super.getKey();return this.getInterpolate()||(t+=":disable-interpolation"),t}getOpaque(t){return!(this.getProjection()&&t&&!(0,h.OP)(this.getProjection(),t))&&super.getOpaque(t)}getTileGridForProjection(t){const e=this.getProjection();if(this.tileGrid&&(!e||(0,h.OP)(e,t)))return this.tileGrid;const i=(0,d.sq)(t);return i in this.tileGridForProjection||(this.tileGridForProjection[i]=(0,u.X$)(t)),this.tileGridForProjection[i]}getTileCacheForProjection(t){const e=this.getProjection();if(!e||(0,h.OP)(e,t))return this.tileCache;const i=(0,d.sq)(t);return i in this.tileCacheForProjection||(this.tileCacheForProjection[i]=new o.Z(this.tileCache.highWaterMark)),this.tileCacheForProjection[i]}createTile_(t,e,i,s,r,o){const l=[t,e,i],h=this.getTileCoordForTileUrlFunction(l,r),c=h?this.tileUrlFunction(h,s,r):void 0,u=new this.tileClass(l,void 0!==c?a.Z.IDLE:a.Z.EMPTY,void 0!==c?c:"",this.crossOrigin,this.tileLoadFunction,this.tileOptions);return u.key=o,u.addEventListener(n.Z.CHANGE,this.handleTileChange.bind(this)),u}getTile(t,e,i,n,s){const o=this.getProjection();if(!o||!s||(0,h.OP)(o,s))return this.getTileInternal(t,e,i,n,o||s);const a=this.getTileCacheForProjection(s),l=[t,e,i];let u;const d=(0,c.km)(l);a.containsKey(d)&&(u=a.get(d));const g=this.getKey();if(u&&u.key==g)return u;const _=this.getTileGridForProjection(o),f=this.getTileGridForProjection(s),p=this.getTileCoordForTileUrlFunction(l,s),m=new r.Z(o,_,s,f,l,p,this.getTilePixelRatio(n),this.getGutter(),((t,e,i,n)=>this.getTileInternal(t,e,i,n,o)),this.reprojectionErrorThreshold_,this.renderReprojectionEdges_,this.getInterpolate());return m.key=g,u?(m.interimTile=u,m.refreshInterimChain(),a.replace(d,m)):a.set(d,m),m}getTileInternal(t,e,i,n,s){let r=null;const o=(0,c.lg)(t,e,i),l=this.getKey();if(this.tileCache.containsKey(o)){if(r=this.tileCache.get(o),r.key!=l){const h=r;r=this.createTile_(t,e,i,n,s,l),h.getState()==a.Z.IDLE?r.interimTile=h.interimTile:r.interimTile=h,r.refreshInterimChain(),this.tileCache.replace(o,r)}}else r=this.createTile_(t,e,i,n,s,l),this.tileCache.set(o,r);return r}setRenderReprojectionEdges(t){if(this.renderReprojectionEdges_!=t){this.renderReprojectionEdges_=t;for(const t in this.tileCacheForProjection)this.tileCacheForProjection[t].clear();this.changed()}}setTileGridForProjection(t,e){const i=(0,h.U2)(t);if(i){const t=(0,d.sq)(i);t in this.tileGridForProjection||(this.tileGridForProjection[t]=e)}}clear(){super.clear();for(const t in this.tileCacheForProjection)this.tileCacheForProjection[t].clear()}}function _(t,e){t.getImage().src=e}const f=g,p=class extends f{constructor(t){const e=void 0!==(t=t||{}).projection?t.projection:"EPSG:3857",i=void 0!==t.tileGrid?t.tileGrid:(0,u.dl)({extent:(0,u.Tl)(e),maxResolution:t.maxResolution,maxZoom:t.maxZoom,minZoom:t.minZoom,tileSize:t.tileSize});super({attributions:t.attributions,cacheSize:t.cacheSize,crossOrigin:t.crossOrigin,interpolate:t.interpolate,opaque:t.opaque,projection:e,reprojectionErrorThreshold:t.reprojectionErrorThreshold,tileGrid:i,tileLoadFunction:t.tileLoadFunction,tilePixelRatio:t.tilePixelRatio,tileUrlFunction:t.tileUrlFunction,url:t.url,urls:t.urls,wrapX:void 0===t.wrapX||t.wrapX,transition:t.transition,attributionsCollapsible:t.attributionsCollapsible,zDirection:t.zDirection}),this.gutter_=void 0!==t.gutter?t.gutter:0}getGutter(){return this.gutter_}}},283:(t,e,i)=>{"use strict";i.d(e,{Z:()=>r});var n=i(5393);class s extends n.Z{constructor(t){super({points:1/0,fill:(t=t||{radius:5}).fill,radius:t.radius,stroke:t.stroke,scale:void 0!==t.scale?t.scale:1,rotation:void 0!==t.rotation?t.rotation:0,rotateWithView:void 0!==t.rotateWithView&&t.rotateWithView,displacement:void 0!==t.displacement?t.displacement:[0,0],declutterMode:t.declutterMode})}clone(){const t=this.getScale(),e=new s({fill:this.getFill()?this.getFill().clone():void 0,stroke:this.getStroke()?this.getStroke().clone():void 0,radius:this.getRadius(),scale:Array.isArray(t)?t.slice():t,rotation:this.getRotation(),rotateWithView:this.getRotateWithView(),displacement:this.getDisplacement().slice(),declutterMode:this.getDeclutterMode()});return e.setOpacity(this.getOpacity()),e}setRadius(t){this.radius_=t,this.render()}}const r=s},1345:(t,e,i)=>{"use strict";i.d(e,{Z:()=>s});class n{constructor(t){t=t||{},this.color_=void 0!==t.color?t.color:null}clone(){const t=this.getColor();return new n({color:Array.isArray(t)?t.slice():t||void 0})}getColor(){return this.color_}setColor(t){this.color_=t}}const s=n},2710:(t,e,i)=>{"use strict";i.d(e,{c:()=>r});var n=i(9706);function s(t,e,i){return e+":"+t+":"+(i?(0,n.XC)(i):"null")}const r=new class{constructor(){this.cache_={},this.cacheSize_=0,this.maxCacheSize_=32}clear(){this.cache_={},this.cacheSize_=0}canExpireCache(){return this.cacheSize_>this.maxCacheSize_}expire(){if(this.canExpireCache()){let t=0;for(const e in this.cache_){const i=this.cache_[e];0!=(3&t++)||i.hasListener()||(delete this.cache_[e],--this.cacheSize_)}}}get(t,e,i){const n=s(t,e,i);return n in this.cache_?this.cache_[n]:null}set(t,e,i,n){const r=s(t,e,i);this.cache_[r]=n,++this.cacheSize_}setSize(t){this.maxCacheSize_=t,this.expire()}}},8443:(t,e,i)=>{"use strict";i.d(e,{Z:()=>o});var n=i(4187),s=i(4307);class r{constructor(t){this.opacity_=t.opacity,this.rotateWithView_=t.rotateWithView,this.rotation_=t.rotation,this.scale_=t.scale,this.scaleArray_=(0,s.Pq)(t.scale),this.displacement_=t.displacement,this.declutterMode_=t.declutterMode}clone(){const t=this.getScale();return new r({opacity:this.getOpacity(),scale:Array.isArray(t)?t.slice():t,rotation:this.getRotation(),rotateWithView:this.getRotateWithView(),displacement:this.getDisplacement().slice(),declutterMode:this.getDeclutterMode()})}getOpacity(){return this.opacity_}getRotateWithView(){return this.rotateWithView_}getRotation(){return this.rotation_}getScale(){return this.scale_}getScaleArray(){return this.scaleArray_}getDisplacement(){return this.displacement_}getDeclutterMode(){return this.declutterMode_}getAnchor(){return(0,n.O3)()}getImage(t){return(0,n.O3)()}getHitDetectionImage(){return(0,n.O3)()}getPixelRatio(t){return 1}getImageState(){return(0,n.O3)()}getImageSize(){return(0,n.O3)()}getOrigin(){return(0,n.O3)()}getSize(){return(0,n.O3)()}setDisplacement(t){this.displacement_=t}setOpacity(t){this.opacity_=t}setRotateWithView(t){this.rotateWithView_=t}setRotation(t){this.rotation_=t}setScale(t){this.scale_=t,this.scaleArray_=(0,s.Pq)(t)}listenImageChange(t){(0,n.O3)()}load(){(0,n.O3)()}unlistenImageChange(t){(0,n.O3)()}}const o=r},5393:(t,e,i)=>{"use strict";i.d(e,{Z:()=>c});var n=i(553),s=i(8443),r=i(9706),o=i(6620),a=i(8326),l=i(147);class h extends s.Z{constructor(t){super({opacity:1,rotateWithView:void 0!==t.rotateWithView&&t.rotateWithView,rotation:void 0!==t.rotation?t.rotation:0,scale:void 0!==t.scale?t.scale:1,displacement:void 0!==t.displacement?t.displacement:[0,0],declutterMode:t.declutterMode}),this.canvas_=void 0,this.hitDetectionCanvas_=null,this.fill_=void 0!==t.fill?t.fill:null,this.origin_=[0,0],this.points_=t.points,this.radius_=void 0!==t.radius?t.radius:t.radius1,this.radius2_=t.radius2,this.angle_=void 0!==t.angle?t.angle:0,this.stroke_=void 0!==t.stroke?t.stroke:null,this.size_=null,this.renderOptions_=null,this.render()}clone(){const t=this.getScale(),e=new h({fill:this.getFill()?this.getFill().clone():void 0,points:this.getPoints(),radius:this.getRadius(),radius2:this.getRadius2(),angle:this.getAngle(),stroke:this.getStroke()?this.getStroke().clone():void 0,rotation:this.getRotation(),rotateWithView:this.getRotateWithView(),scale:Array.isArray(t)?t.slice():t,displacement:this.getDisplacement().slice(),declutterMode:this.getDeclutterMode()});return e.setOpacity(this.getOpacity()),e}getAnchor(){const t=this.size_;if(!t)return null;const e=this.getDisplacement(),i=this.getScaleArray();return[t[0]/2-e[0]/i[0],t[1]/2+e[1]/i[1]]}getAngle(){return this.angle_}getFill(){return this.fill_}setFill(t){this.fill_=t,this.render()}getHitDetectionImage(){return this.hitDetectionCanvas_||this.createHitDetectionCanvas_(this.renderOptions_),this.hitDetectionCanvas_}getImage(t){let e=this.canvas_[t];if(!e){const i=this.renderOptions_,n=(0,a.E4)(i.size*t,i.size*t);this.draw_(i,n,t),e=n.canvas,this.canvas_[t]=e}return e}getPixelRatio(t){return t}getImageSize(){return this.size_}getImageState(){return n.Z.LOADED}getOrigin(){return this.origin_}getPoints(){return this.points_}getRadius(){return this.radius_}getRadius2(){return this.radius2_}getSize(){return this.size_}getStroke(){return this.stroke_}setStroke(t){this.stroke_=t,this.render()}listenImageChange(t){}load(){}unlistenImageChange(t){}calculateLineJoinSize_(t,e,i){if(0===e||this.points_===1/0||"bevel"!==t&&"miter"!==t)return e;let n=this.radius_,s=void 0===this.radius2_?n:this.radius2_;if(n<s){const t=n;n=s,s=t}const r=void 0===this.radius2_?this.points_:2*this.points_,o=2*Math.PI/r,a=s*Math.sin(o),l=n-Math.sqrt(s*s-a*a),h=Math.sqrt(a*a+l*l),c=h/a;if("miter"===t&&c<=i)return c*e;const u=e/2/c,d=e/2*(l/h),g=Math.sqrt((n+u)*(n+u)+d*d)-n;if(void 0===this.radius2_||"bevel"===t)return 2*g;const _=n*Math.sin(o),f=s-Math.sqrt(n*n-_*_),p=Math.sqrt(_*_+f*f)/_;if(p<=i){const t=p*e/2-s-n;return 2*Math.max(g,t)}return 2*g}createRenderOptions(){let t,e=l.rc,i=0,n=null,s=0,r=0;this.stroke_&&(t=this.stroke_.getColor(),null===t&&(t=l.Tx),t=(0,o.y)(t),r=this.stroke_.getWidth(),void 0===r&&(r=l.yC),n=this.stroke_.getLineDash(),s=this.stroke_.getLineDashOffset(),e=this.stroke_.getLineJoin(),void 0===e&&(e=l.rc),i=this.stroke_.getMiterLimit(),void 0===i&&(i=l.V4));const a=this.calculateLineJoinSize_(e,r,i),h=Math.max(this.radius_,this.radius2_||0);return{strokeStyle:t,strokeWidth:r,size:Math.ceil(2*h+a),lineDash:n,lineDashOffset:s,lineJoin:e,miterLimit:i}}render(){this.renderOptions_=this.createRenderOptions();const t=this.renderOptions_.size;this.canvas_={},this.size_=[t,t]}draw_(t,e,i){if(e.scale(i,i),e.translate(t.size/2,t.size/2),this.createPath_(e),this.fill_){let t=this.fill_.getColor();null===t&&(t=l.bL),e.fillStyle=(0,o.y)(t),e.fill()}this.stroke_&&(e.strokeStyle=t.strokeStyle,e.lineWidth=t.strokeWidth,t.lineDash&&(e.setLineDash(t.lineDash),e.lineDashOffset=t.lineDashOffset),e.lineJoin=t.lineJoin,e.miterLimit=t.miterLimit,e.stroke())}createHitDetectionCanvas_(t){if(this.fill_){let e=this.fill_.getColor(),i=0;if("string"==typeof e&&(e=(0,r._2)(e)),null===e?i=1:Array.isArray(e)&&(i=4===e.length?e[3]:1),0===i){const e=(0,a.E4)(t.size,t.size);this.hitDetectionCanvas_=e.canvas,this.drawHitDetectionCanvas_(t,e)}}this.hitDetectionCanvas_||(this.hitDetectionCanvas_=this.getImage(1))}createPath_(t){let e=this.points_;const i=this.radius_;if(e===1/0)t.arc(0,0,i,0,2*Math.PI);else{const n=void 0===this.radius2_?i:this.radius2_;void 0!==this.radius2_&&(e*=2);const s=this.angle_-Math.PI/2,r=2*Math.PI/e;for(let o=0;o<e;o++){const e=s+o*r,a=o%2==0?i:n;t.lineTo(a*Math.cos(e),a*Math.sin(e))}t.closePath()}}drawHitDetectionCanvas_(t,e){e.translate(t.size/2,t.size/2),this.createPath_(e),e.fillStyle=l.bL,e.fill(),this.stroke_&&(e.strokeStyle=t.strokeStyle,e.lineWidth=t.strokeWidth,t.lineDash&&(e.setLineDash(t.lineDash),e.lineDashOffset=t.lineDashOffset),e.lineJoin=t.lineJoin,e.miterLimit=t.miterLimit,e.stroke())}}const c=h},8958:(t,e,i)=>{"use strict";i.d(e,{Z:()=>s});class n{constructor(t){t=t||{},this.color_=void 0!==t.color?t.color:null,this.lineCap_=t.lineCap,this.lineDash_=void 0!==t.lineDash?t.lineDash:null,this.lineDashOffset_=t.lineDashOffset,this.lineJoin_=t.lineJoin,this.miterLimit_=t.miterLimit,this.width_=t.width}clone(){const t=this.getColor();return new n({color:Array.isArray(t)?t.slice():t||void 0,lineCap:this.getLineCap(),lineDash:this.getLineDash()?this.getLineDash().slice():void 0,lineDashOffset:this.getLineDashOffset(),lineJoin:this.getLineJoin(),miterLimit:this.getMiterLimit(),width:this.getWidth()})}getColor(){return this.color_}getLineCap(){return this.lineCap_}getLineDash(){return this.lineDash_}getLineDashOffset(){return this.lineDashOffset_}getLineJoin(){return this.lineJoin_}getMiterLimit(){return this.miterLimit_}getWidth(){return this.width_}setColor(t){this.color_=t}setLineCap(t){this.lineCap_=t}setLineDash(t){this.lineDash_=t}setLineDashOffset(t){this.lineDashOffset_=t}setLineJoin(t){this.lineJoin_=t}setMiterLimit(t){this.miterLimit_=t}setWidth(t){this.width_=t}}const s=n},7539:(t,e,i)=>{"use strict";i.d(e,{J$:()=>l,ZP:()=>d,yF:()=>c});var n=i(283),s=i(1345),r=i(8958),o=i(9515);class a{constructor(t){t=t||{},this.geometry_=null,this.geometryFunction_=u,void 0!==t.geometry&&this.setGeometry(t.geometry),this.fill_=void 0!==t.fill?t.fill:null,this.image_=void 0!==t.image?t.image:null,this.renderer_=void 0!==t.renderer?t.renderer:null,this.hitDetectionRenderer_=void 0!==t.hitDetectionRenderer?t.hitDetectionRenderer:null,this.stroke_=void 0!==t.stroke?t.stroke:null,this.text_=void 0!==t.text?t.text:null,this.zIndex_=t.zIndex}clone(){let t=this.getGeometry();return t&&"object"==typeof t&&(t=t.clone()),new a({geometry:t,fill:this.getFill()?this.getFill().clone():void 0,image:this.getImage()?this.getImage().clone():void 0,renderer:this.getRenderer(),stroke:this.getStroke()?this.getStroke().clone():void 0,text:this.getText()?this.getText().clone():void 0,zIndex:this.getZIndex()})}getRenderer(){return this.renderer_}setRenderer(t){this.renderer_=t}setHitDetectionRenderer(t){this.hitDetectionRenderer_=t}getHitDetectionRenderer(){return this.hitDetectionRenderer_}getGeometry(){return this.geometry_}getGeometryFunction(){return this.geometryFunction_}getFill(){return this.fill_}setFill(t){this.fill_=t}getImage(){return this.image_}setImage(t){this.image_=t}getStroke(){return this.stroke_}setStroke(t){this.stroke_=t}getText(){return this.text_}setText(t){this.text_=t}getZIndex(){return this.zIndex_}setGeometry(t){"function"==typeof t?this.geometryFunction_=t:"string"==typeof t?this.geometryFunction_=function(e){return e.get(t)}:t?void 0!==t&&(this.geometryFunction_=function(){return t}):this.geometryFunction_=u,this.geometry_=t}setZIndex(t){this.zIndex_=t}}function l(t){let e;if("function"==typeof t)e=t;else{let i;Array.isArray(t)?i=t:((0,o.h)("function"==typeof t.getZIndex,41),i=[t]),e=function(){return i}}return e}let h=null;function c(t,e){if(!h){const t=new s.Z({color:"rgba(255,255,255,0.4)"}),e=new r.Z({color:"#3399CC",width:1.25});h=[new a({image:new n.Z({fill:t,stroke:e,radius:5}),fill:t,stroke:e})]}return h}function u(t){return t.getGeometry()}const d=a},1280:(t,e,i)=>{"use strict";i.d(e,{Z:()=>o});var n=i(1345),s=i(4307);class r{constructor(t){t=t||{},this.font_=t.font,this.rotation_=t.rotation,this.rotateWithView_=t.rotateWithView,this.scale_=t.scale,this.scaleArray_=(0,s.Pq)(void 0!==t.scale?t.scale:1),this.text_=t.text,this.textAlign_=t.textAlign,this.justify_=t.justify,this.textBaseline_=t.textBaseline,this.fill_=void 0!==t.fill?t.fill:new n.Z({color:"#333"}),this.maxAngle_=void 0!==t.maxAngle?t.maxAngle:Math.PI/4,this.placement_=void 0!==t.placement?t.placement:"point",this.overflow_=!!t.overflow,this.stroke_=void 0!==t.stroke?t.stroke:null,this.offsetX_=void 0!==t.offsetX?t.offsetX:0,this.offsetY_=void 0!==t.offsetY?t.offsetY:0,this.backgroundFill_=t.backgroundFill?t.backgroundFill:null,this.backgroundStroke_=t.backgroundStroke?t.backgroundStroke:null,this.padding_=void 0===t.padding?null:t.padding}clone(){const t=this.getScale();return new r({font:this.getFont(),placement:this.getPlacement(),maxAngle:this.getMaxAngle(),overflow:this.getOverflow(),rotation:this.getRotation(),rotateWithView:this.getRotateWithView(),scale:Array.isArray(t)?t.slice():t,text:this.getText(),textAlign:this.getTextAlign(),justify:this.getJustify(),textBaseline:this.getTextBaseline(),fill:this.getFill()?this.getFill().clone():void 0,stroke:this.getStroke()?this.getStroke().clone():void 0,offsetX:this.getOffsetX(),offsetY:this.getOffsetY(),backgroundFill:this.getBackgroundFill()?this.getBackgroundFill().clone():void 0,backgroundStroke:this.getBackgroundStroke()?this.getBackgroundStroke().clone():void 0,padding:this.getPadding()||void 0})}getOverflow(){return this.overflow_}getFont(){return this.font_}getMaxAngle(){return this.maxAngle_}getPlacement(){return this.placement_}getOffsetX(){return this.offsetX_}getOffsetY(){return this.offsetY_}getFill(){return this.fill_}getRotateWithView(){return this.rotateWithView_}getRotation(){return this.rotation_}getScale(){return this.scale_}getScaleArray(){return this.scaleArray_}getStroke(){return this.stroke_}getText(){return this.text_}getTextAlign(){return this.textAlign_}getJustify(){return this.justify_}getTextBaseline(){return this.textBaseline_}getBackgroundFill(){return this.backgroundFill_}getBackgroundStroke(){return this.backgroundStroke_}getPadding(){return this.padding_}setOverflow(t){this.overflow_=t}setFont(t){this.font_=t}setMaxAngle(t){this.maxAngle_=t}setOffsetX(t){this.offsetX_=t}setOffsetY(t){this.offsetY_=t}setPlacement(t){this.placement_=t}setRotateWithView(t){this.rotateWithView_=t}setFill(t){this.fill_=t}setRotation(t){this.rotation_=t}setScale(t){this.scale_=t,this.scaleArray_=(0,s.Pq)(void 0!==t?t:1)}setStroke(t){this.stroke_=t}setText(t){this.text_=t}setTextAlign(t){this.textAlign_=t}setJustify(t){this.justify_=t}setTextBaseline(t){this.textBaseline_=t}setBackgroundFill(t){this.backgroundFill_=t}setBackgroundStroke(t){this.backgroundStroke_=t}setPadding(t){this.padding_=t}}const o=r},8634:(t,e,i)=>{"use strict";function n(t,e,i,n){return void 0!==n?(n[0]=t,n[1]=e,n[2]=i,n):[t,e,i]}function s(t,e,i){return t+"/"+e+"/"+i}function r(t){return s(t[0],t[1],t[2])}function o(t){const[e,i,n]=t.substring(t.lastIndexOf("/")+1,t.length).split(",").map(Number);return s(e,i,n)}function a(t){return t.split("/").map(Number)}function l(t){return(t[1]<<t[0])+t[2]}function h(t,e){const i=t[0],n=t[1],s=t[2];if(e.getMinZoom()>i||i>e.getMaxZoom())return!1;const r=e.getFullTileRange(i);return!r||r.containsXY(n,s)}i.d(e,{MY:()=>o,T9:()=>n,Ul:()=>a,km:()=>r,lg:()=>s,tE:()=>h,vp:()=>l})},7248:(t,e,i)=>{"use strict";i.d(e,{Cf:()=>h,Tl:()=>d,X$:()=>l,dl:()=>c});var n=i(8738),s=i(4768),r=i(8661),o=i(8641),a=i(4307);function l(t){let e=t.getDefaultTileGrid();return e||(e=function(t,e,i,s){return function(t,e,i,s){s=void 0!==s?s:"top-left";const r=u(t,undefined,i);return new n.Z({extent:t,origin:(0,o.g0)(t,s),resolutions:r,tileSize:i})}(d(t),0,void 0,void 0)}(t),t.setDefaultTileGrid(e)),e}function h(t,e,i){const n=e[0],s=t.getTileCoordCenter(e),r=d(i);if(!(0,o.b8)(r,s)){const e=(0,o.dz)(r),i=Math.ceil((r[0]-s[0])/e);return s[0]+=e*i,t.getTileCoordForCoordAndZ(s,n)}return e}function c(t){const e=t||{},i=e.extent||(0,r.U2)("EPSG:3857").getExtent(),s={extent:i,minZoom:e.minZoom,tileSize:e.tileSize,resolutions:u(i,e.maxZoom,e.tileSize,e.maxResolution)};return new n.Z(s)}function u(t,e,i,n){e=void 0!==e?e:s.e,i=(0,a.Pq)(void 0!==i?i:s.S);const r=(0,o.Cr)(t),l=(0,o.dz)(t);n=n>0?n:Math.max(l/i[0],r/i[1]);const h=e+1,c=new Array(h);for(let t=0;t<h;++t)c[t]=n/Math.pow(2,t);return c}function d(t){let e=(t=(0,r.U2)(t)).getExtent();if(!e){const i=180*r.Wm.degrees/t.getMetersPerUnit();e=(0,o.T9)(-i,-i,i,i)}return e}},8738:(t,e,i)=>{"use strict";i.d(e,{Z:()=>g});var n=i(2519),s=i(4768),r=i(9515),o=i(3983),a=i(8641),l=i(8634),h=i(969),c=i(5537),u=i(4307);const d=[0,0,0],g=class{constructor(t){let e;if(this.minZoom=void 0!==t.minZoom?t.minZoom:0,this.resolutions_=t.resolutions,(0,r.h)((0,c.pT)(this.resolutions_,(function(t,e){return e-t}),!0),17),!t.origins)for(let t=0,i=this.resolutions_.length-1;t<i;++t)if(e){if(this.resolutions_[t]/this.resolutions_[t+1]!==e){e=void 0;break}}else e=this.resolutions_[t]/this.resolutions_[t+1];this.zoomFactor_=e,this.maxZoom=this.resolutions_.length-1,this.origin_=void 0!==t.origin?t.origin:null,this.origins_=null,void 0!==t.origins&&(this.origins_=t.origins,(0,r.h)(this.origins_.length==this.resolutions_.length,20));const i=t.extent;void 0===i||this.origin_||this.origins_||(this.origin_=(0,a.rL)(i)),(0,r.h)(!this.origin_&&this.origins_||this.origin_&&!this.origins_,18),this.tileSizes_=null,void 0!==t.tileSizes&&(this.tileSizes_=t.tileSizes,(0,r.h)(this.tileSizes_.length==this.resolutions_.length,19)),this.tileSize_=void 0!==t.tileSize?t.tileSize:this.tileSizes_?null:s.S,(0,r.h)(!this.tileSize_&&this.tileSizes_||this.tileSize_&&!this.tileSizes_,22),this.extent_=void 0!==i?i:null,this.fullTileRanges_=null,this.tmpSize_=[0,0],this.tmpExtent_=[0,0,0,0],void 0!==t.sizes?this.fullTileRanges_=t.sizes.map((function(t,e){const s=new n.Z(Math.min(0,t[0]),Math.max(t[0]-1,-1),Math.min(0,t[1]),Math.max(t[1]-1,-1));if(i){const t=this.getTileRangeForExtentAndZ(i,e);s.minX=Math.max(t.minX,s.minX),s.maxX=Math.min(t.maxX,s.maxX),s.minY=Math.max(t.minY,s.minY),s.maxY=Math.min(t.maxY,s.maxY)}return s}),this):i&&this.calculateTileRanges_(i)}forEachTileCoord(t,e,i){const n=this.getTileRangeForExtentAndZ(t,e);for(let t=n.minX,s=n.maxX;t<=s;++t)for(let s=n.minY,r=n.maxY;s<=r;++s)i([e,t,s])}forEachTileCoordParentTileRange(t,e,i,s){let r,o,a,l=null,h=t[0]-1;for(2===this.zoomFactor_?(o=t[1],a=t[2]):l=this.getTileCoordExtent(t,s);h>=this.minZoom;){if(2===this.zoomFactor_?(o=Math.floor(o/2),a=Math.floor(a/2),r=(0,n.T)(o,o,a,a,i)):r=this.getTileRangeForExtentAndZ(l,h,i),e(h,r))return!0;--h}return!1}getExtent(){return this.extent_}getMaxZoom(){return this.maxZoom}getMinZoom(){return this.minZoom}getOrigin(t){return this.origin_?this.origin_:this.origins_[t]}getResolution(t){return this.resolutions_[t]}getResolutions(){return this.resolutions_}getTileCoordChildTileRange(t,e,i){if(t[0]<this.maxZoom){if(2===this.zoomFactor_){const i=2*t[1],s=2*t[2];return(0,n.T)(i,i+1,s,s+1,e)}const s=this.getTileCoordExtent(t,i||this.tmpExtent_);return this.getTileRangeForExtentAndZ(s,t[0]+1,e)}return null}getTileRangeForTileCoordAndZ(t,e,i){if(e>this.maxZoom||e<this.minZoom)return null;const s=t[0],r=t[1],o=t[2];if(e===s)return(0,n.T)(r,o,r,o,i);if(this.zoomFactor_){const t=Math.pow(this.zoomFactor_,e-s),a=Math.floor(r*t),l=Math.floor(o*t);if(e<s)return(0,n.T)(a,a,l,l,i);const h=Math.floor(t*(r+1))-1,c=Math.floor(t*(o+1))-1;return(0,n.T)(a,h,l,c,i)}const a=this.getTileCoordExtent(t,this.tmpExtent_);return this.getTileRangeForExtentAndZ(a,e,i)}getTileRangeExtent(t,e,i){const n=this.getOrigin(t),s=this.getResolution(t),r=(0,u.Pq)(this.getTileSize(t),this.tmpSize_),o=n[0]+e.minX*r[0]*s,l=n[0]+(e.maxX+1)*r[0]*s,h=n[1]+e.minY*r[1]*s,c=n[1]+(e.maxY+1)*r[1]*s;return(0,a.T9)(o,h,l,c,i)}getTileRangeForExtentAndZ(t,e,i){this.getTileCoordForXYAndZ_(t[0],t[3],e,!1,d);const s=d[1],r=d[2];this.getTileCoordForXYAndZ_(t[2],t[1],e,!0,d);const o=d[1],a=d[2];return(0,n.T)(s,o,r,a,i)}getTileCoordCenter(t){const e=this.getOrigin(t[0]),i=this.getResolution(t[0]),n=(0,u.Pq)(this.getTileSize(t[0]),this.tmpSize_);return[e[0]+(t[1]+.5)*n[0]*i,e[1]-(t[2]+.5)*n[1]*i]}getTileCoordExtent(t,e){const i=this.getOrigin(t[0]),n=this.getResolution(t[0]),s=(0,u.Pq)(this.getTileSize(t[0]),this.tmpSize_),r=i[0]+t[1]*s[0]*n,o=i[1]-(t[2]+1)*s[1]*n,l=r+s[0]*n,h=o+s[1]*n;return(0,a.T9)(r,o,l,h,e)}getTileCoordForCoordAndResolution(t,e,i){return this.getTileCoordForXYAndResolution_(t[0],t[1],e,!1,i)}getTileCoordForXYAndResolution_(t,e,i,n,s){const r=this.getZForResolution(i),a=i/this.getResolution(r),h=this.getOrigin(r),c=(0,u.Pq)(this.getTileSize(r),this.tmpSize_);let d=a*(t-h[0])/i/c[0],g=a*(h[1]-e)/i/c[1];return n?(d=(0,o.mD)(d,5)-1,g=(0,o.mD)(g,5)-1):(d=(0,o.GW)(d,5),g=(0,o.GW)(g,5)),(0,l.T9)(r,d,g,s)}getTileCoordForXYAndZ_(t,e,i,n,s){const r=this.getOrigin(i),a=this.getResolution(i),h=(0,u.Pq)(this.getTileSize(i),this.tmpSize_);let c=(t-r[0])/a/h[0],d=(r[1]-e)/a/h[1];return n?(c=(0,o.mD)(c,5)-1,d=(0,o.mD)(d,5)-1):(c=(0,o.GW)(c,5),d=(0,o.GW)(d,5)),(0,l.T9)(i,c,d,s)}getTileCoordForCoordAndZ(t,e,i){return this.getTileCoordForXYAndZ_(t[0],t[1],e,!1,i)}getTileCoordResolution(t){return this.resolutions_[t[0]]}getTileSize(t){return this.tileSize_?this.tileSize_:this.tileSizes_[t]}getFullTileRange(t){return this.fullTileRanges_?this.fullTileRanges_[t]:this.extent_?this.getTileRangeForExtentAndZ(this.extent_,t):null}getZForResolution(t,e){const i=(0,c.h7)(this.resolutions_,t,e||0);return(0,o.uZ)(i,this.minZoom,this.maxZoom)}tileCoordIntersectsViewport(t,e){return(0,h.mV)(e,0,e.length,2,this.getTileCoordExtent(t))}calculateTileRanges_(t){const e=this.resolutions_.length,i=new Array(e);for(let n=this.minZoom;n<e;++n)i[n]=this.getTileRangeForExtentAndZ(t,n);this.fullTileRanges_=i}}},4768:(t,e,i)=>{"use strict";i.d(e,{S:()=>s,e:()=>n});const n=42,s=256},6101:(t,e,i)=>{"use strict";i.d(e,{BB:()=>m,Iu:()=>g,Jp:()=>l,Ue:()=>o,bA:()=>d,lk:()=>c,mc:()=>a,nb:()=>f,nn:()=>u,qC:()=>_});var n=i(177),s=i(9515);const r=new Array(6);function o(){return[1,0,0,1,0,0]}function a(t){return h(t,1,0,0,1,0,0)}function l(t,e){const i=t[0],n=t[1],s=t[2],r=t[3],o=t[4],a=t[5],l=e[0],h=e[1],c=e[2],u=e[3],d=e[4],g=e[5];return t[0]=i*l+s*h,t[1]=n*l+r*h,t[2]=i*c+s*u,t[3]=n*c+r*u,t[4]=i*d+s*g+o,t[5]=n*d+r*g+a,t}function h(t,e,i,n,s,r,o){return t[0]=e,t[1]=i,t[2]=n,t[3]=s,t[4]=r,t[5]=o,t}function c(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t}function u(t,e){const i=e[0],n=e[1];return e[0]=t[0]*i+t[2]*n+t[4],e[1]=t[1]*i+t[3]*n+t[5],e}function d(t,e,i){return l(t,h(r,e,0,0,i,0,0))}function g(t,e,i){return l(t,h(r,1,0,0,1,e,i))}function _(t,e,i,n,s,r,o,a){const l=Math.sin(r),h=Math.cos(r);return t[0]=n*h,t[1]=s*l,t[2]=-n*l,t[3]=s*h,t[4]=o*n*h-a*n*l+e,t[5]=o*s*l+a*s*h+i,t}function f(t,e){const i=(n=e)[0]*n[3]-n[1]*n[2];var n;(0,s.h)(0!==i,32);const r=e[0],o=e[1],a=e[2],l=e[3],h=e[4],c=e[5];return t[0]=l/i,t[1]=-o/i,t[2]=-a/i,t[3]=r/i,t[4]=(a*c-l*h)/i,t[5]=-(r*c-o*h)/i,t}let p;function m(t){const e="matrix("+t.join(", ")+")";if(n.Id)return e;const i=p||(p=document.createElement("div"));return i.style.transform=e,i.style.transform}},4187:(t,e,i)=>{"use strict";function n(){throw new Error("Unimplemented abstract method.")}i.d(e,{O3:()=>n,sq:()=>r});let s=0;function r(t){return t.ol_uid||(t.ol_uid=String(++s))}},7885:(t,e,i)=>{"use strict";function n(t){let e=t.length;for(;--e>=0;)t[e]=0}i.d(e,{ec:()=>fi});const s=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),r=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),o=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),a=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),l=new Array(576);n(l);const h=new Array(60);n(h);const c=new Array(512);n(c);const u=new Array(256);n(u);const d=new Array(29);n(d);const g=new Array(30);function _(t,e,i,n,s){this.static_tree=t,this.extra_bits=e,this.extra_base=i,this.elems=n,this.max_length=s,this.has_stree=t&&t.length}let f,p,m;function v(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}n(g);const y=t=>t<256?c[t]:c[256+(t>>>7)],x=(t,e)=>{t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255},w=(t,e,i)=>{t.bi_valid>16-i?(t.bi_buf|=e<<t.bi_valid&65535,x(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=i-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=i)},S=(t,e,i)=>{w(t,i[2*e],i[2*e+1])},E=(t,e)=>{let i=0;do{i|=1&t,t>>>=1,i<<=1}while(--e>0);return i>>>1},b=(t,e,i)=>{const n=new Array(16);let s,r,o=0;for(s=1;s<=15;s++)o=o+i[s-1]<<1,n[s]=o;for(r=0;r<=e;r++){let e=t[2*r+1];0!==e&&(t[2*r]=E(n[e]++,e))}},C=t=>{let e;for(e=0;e<286;e++)t.dyn_ltree[2*e]=0;for(e=0;e<30;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.sym_next=t.matches=0},T=t=>{t.bi_valid>8?x(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},R=(t,e,i,n)=>{const s=2*e,r=2*i;return t[s]<t[r]||t[s]===t[r]&&n[e]<=n[i]},I=(t,e,i)=>{const n=t.heap[i];let s=i<<1;for(;s<=t.heap_len&&(s<t.heap_len&&R(e,t.heap[s+1],t.heap[s],t.depth)&&s++,!R(e,n,t.heap[s],t.depth));)t.heap[i]=t.heap[s],i=s,s<<=1;t.heap[i]=n},k=(t,e,i)=>{let n,o,a,l,h=0;if(0!==t.sym_next)do{n=255&t.pending_buf[t.sym_buf+h++],n+=(255&t.pending_buf[t.sym_buf+h++])<<8,o=t.pending_buf[t.sym_buf+h++],0===n?S(t,o,e):(a=u[o],S(t,a+256+1,e),l=s[a],0!==l&&(o-=d[a],w(t,o,l)),n--,a=y(n),S(t,a,i),l=r[a],0!==l&&(n-=g[a],w(t,n,l)))}while(h<t.sym_next);S(t,256,e)},M=(t,e)=>{const i=e.dyn_tree,n=e.stat_desc.static_tree,s=e.stat_desc.has_stree,r=e.stat_desc.elems;let o,a,l,h=-1;for(t.heap_len=0,t.heap_max=573,o=0;o<r;o++)0!==i[2*o]?(t.heap[++t.heap_len]=h=o,t.depth[o]=0):i[2*o+1]=0;for(;t.heap_len<2;)l=t.heap[++t.heap_len]=h<2?++h:0,i[2*l]=1,t.depth[l]=0,t.opt_len--,s&&(t.static_len-=n[2*l+1]);for(e.max_code=h,o=t.heap_len>>1;o>=1;o--)I(t,i,o);l=r;do{o=t.heap[1],t.heap[1]=t.heap[t.heap_len--],I(t,i,1),a=t.heap[1],t.heap[--t.heap_max]=o,t.heap[--t.heap_max]=a,i[2*l]=i[2*o]+i[2*a],t.depth[l]=(t.depth[o]>=t.depth[a]?t.depth[o]:t.depth[a])+1,i[2*o+1]=i[2*a+1]=l,t.heap[1]=l++,I(t,i,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],((t,e)=>{const i=e.dyn_tree,n=e.max_code,s=e.stat_desc.static_tree,r=e.stat_desc.has_stree,o=e.stat_desc.extra_bits,a=e.stat_desc.extra_base,l=e.stat_desc.max_length;let h,c,u,d,g,_,f=0;for(d=0;d<=15;d++)t.bl_count[d]=0;for(i[2*t.heap[t.heap_max]+1]=0,h=t.heap_max+1;h<573;h++)c=t.heap[h],d=i[2*i[2*c+1]+1]+1,d>l&&(d=l,f++),i[2*c+1]=d,c>n||(t.bl_count[d]++,g=0,c>=a&&(g=o[c-a]),_=i[2*c],t.opt_len+=_*(d+g),r&&(t.static_len+=_*(s[2*c+1]+g)));if(0!==f){do{for(d=l-1;0===t.bl_count[d];)d--;t.bl_count[d]--,t.bl_count[d+1]+=2,t.bl_count[l]--,f-=2}while(f>0);for(d=l;0!==d;d--)for(c=t.bl_count[d];0!==c;)u=t.heap[--h],u>n||(i[2*u+1]!==d&&(t.opt_len+=(d-i[2*u+1])*i[2*u],i[2*u+1]=d),c--)}})(t,e),b(i,h,t.bl_count)},L=(t,e,i)=>{let n,s,r=-1,o=e[1],a=0,l=7,h=4;for(0===o&&(l=138,h=3),e[2*(i+1)+1]=65535,n=0;n<=i;n++)s=o,o=e[2*(n+1)+1],++a<l&&s===o||(a<h?t.bl_tree[2*s]+=a:0!==s?(s!==r&&t.bl_tree[2*s]++,t.bl_tree[32]++):a<=10?t.bl_tree[34]++:t.bl_tree[36]++,a=0,r=s,0===o?(l=138,h=3):s===o?(l=6,h=3):(l=7,h=4))},P=(t,e,i)=>{let n,s,r=-1,o=e[1],a=0,l=7,h=4;for(0===o&&(l=138,h=3),n=0;n<=i;n++)if(s=o,o=e[2*(n+1)+1],!(++a<l&&s===o)){if(a<h)do{S(t,s,t.bl_tree)}while(0!=--a);else 0!==s?(s!==r&&(S(t,s,t.bl_tree),a--),S(t,16,t.bl_tree),w(t,a-3,2)):a<=10?(S(t,17,t.bl_tree),w(t,a-3,3)):(S(t,18,t.bl_tree),w(t,a-11,7));a=0,r=s,0===o?(l=138,h=3):s===o?(l=6,h=3):(l=7,h=4)}};let O=!1;const A=(t,e,i,n)=>{w(t,0+(n?1:0),3),T(t),x(t,i),x(t,~i),i&&t.pending_buf.set(t.window.subarray(e,e+i),t.pending),t.pending+=i};var Z={_tr_init:t=>{O||((()=>{let t,e,i,n,a;const v=new Array(16);for(i=0,n=0;n<28;n++)for(d[n]=i,t=0;t<1<<s[n];t++)u[i++]=n;for(u[i-1]=n,a=0,n=0;n<16;n++)for(g[n]=a,t=0;t<1<<r[n];t++)c[a++]=n;for(a>>=7;n<30;n++)for(g[n]=a<<7,t=0;t<1<<r[n]-7;t++)c[256+a++]=n;for(e=0;e<=15;e++)v[e]=0;for(t=0;t<=143;)l[2*t+1]=8,t++,v[8]++;for(;t<=255;)l[2*t+1]=9,t++,v[9]++;for(;t<=279;)l[2*t+1]=7,t++,v[7]++;for(;t<=287;)l[2*t+1]=8,t++,v[8]++;for(b(l,287,v),t=0;t<30;t++)h[2*t+1]=5,h[2*t]=E(t,5);f=new _(l,s,257,286,15),p=new _(h,r,0,30,15),m=new _(new Array(0),o,0,19,7)})(),O=!0),t.l_desc=new v(t.dyn_ltree,f),t.d_desc=new v(t.dyn_dtree,p),t.bl_desc=new v(t.bl_tree,m),t.bi_buf=0,t.bi_valid=0,C(t)},_tr_stored_block:A,_tr_flush_block:(t,e,i,n)=>{let s,r,o=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=(t=>{let e,i=4093624447;for(e=0;e<=31;e++,i>>>=1)if(1&i&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<256;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0})(t)),M(t,t.l_desc),M(t,t.d_desc),o=(t=>{let e;for(L(t,t.dyn_ltree,t.l_desc.max_code),L(t,t.dyn_dtree,t.d_desc.max_code),M(t,t.bl_desc),e=18;e>=3&&0===t.bl_tree[2*a[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e})(t),s=t.opt_len+3+7>>>3,r=t.static_len+3+7>>>3,r<=s&&(s=r)):s=r=i+5,i+4<=s&&-1!==e?A(t,e,i,n):4===t.strategy||r===s?(w(t,2+(n?1:0),3),k(t,l,h)):(w(t,4+(n?1:0),3),((t,e,i,n)=>{let s;for(w(t,e-257,5),w(t,i-1,5),w(t,n-4,4),s=0;s<n;s++)w(t,t.bl_tree[2*a[s]+1],3);P(t,t.dyn_ltree,e-1),P(t,t.dyn_dtree,i-1)})(t,t.l_desc.max_code+1,t.d_desc.max_code+1,o+1),k(t,t.dyn_ltree,t.dyn_dtree)),C(t),n&&T(t)},_tr_tally:(t,e,i)=>(t.pending_buf[t.sym_buf+t.sym_next++]=e,t.pending_buf[t.sym_buf+t.sym_next++]=e>>8,t.pending_buf[t.sym_buf+t.sym_next++]=i,0===e?t.dyn_ltree[2*i]++:(t.matches++,e--,t.dyn_ltree[2*(u[i]+256+1)]++,t.dyn_dtree[2*y(e)]++),t.sym_next===t.sym_end),_tr_align:t=>{w(t,2,3),S(t,256,l),(t=>{16===t.bi_valid?(x(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)})(t)}},F=(t,e,i,n)=>{let s=65535&t|0,r=t>>>16&65535|0,o=0;for(;0!==i;){o=i>2e3?2e3:i,i-=o;do{s=s+e[n++]|0,r=r+s|0}while(--o);s%=65521,r%=65521}return s|r<<16|0};const D=new Uint32Array((()=>{let t,e=[];for(var i=0;i<256;i++){t=i;for(var n=0;n<8;n++)t=1&t?3988292384^t>>>1:t>>>1;e[i]=t}return e})());var z=(t,e,i,n)=>{const s=D,r=n+i;t^=-1;for(let i=n;i<r;i++)t=t>>>8^s[255&(t^e[i])];return-1^t},N={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},G={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:B,_tr_stored_block:W,_tr_flush_block:j,_tr_tally:U,_tr_align:Y}=Z,{Z_NO_FLUSH:V,Z_PARTIAL_FLUSH:X,Z_FULL_FLUSH:K,Z_FINISH:H,Z_BLOCK:q,Z_OK:J,Z_STREAM_END:$,Z_STREAM_ERROR:Q,Z_DATA_ERROR:tt,Z_BUF_ERROR:et,Z_DEFAULT_COMPRESSION:it,Z_FILTERED:nt,Z_HUFFMAN_ONLY:st,Z_RLE:rt,Z_FIXED:ot,Z_DEFAULT_STRATEGY:at,Z_UNKNOWN:lt,Z_DEFLATED:ht}=G,ct=286,ut=30,dt=19,gt=2*ct+1,_t=15,ft=258,pt=262,mt=42,vt=113,yt=666,xt=(t,e)=>(t.msg=N[e],e),wt=t=>2*t-(t>4?9:0),St=t=>{let e=t.length;for(;--e>=0;)t[e]=0},Et=t=>{let e,i,n,s=t.w_size;e=t.hash_size,n=e;do{i=t.head[--n],t.head[n]=i>=s?i-s:0}while(--e);e=s,n=e;do{i=t.prev[--n],t.prev[n]=i>=s?i-s:0}while(--e)};let bt=(t,e,i)=>(e<<t.hash_shift^i)&t.hash_mask;const Ct=t=>{const e=t.state;let i=e.pending;i>t.avail_out&&(i=t.avail_out),0!==i&&(t.output.set(e.pending_buf.subarray(e.pending_out,e.pending_out+i),t.next_out),t.next_out+=i,e.pending_out+=i,t.total_out+=i,t.avail_out-=i,e.pending-=i,0===e.pending&&(e.pending_out=0))},Tt=(t,e)=>{j(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,Ct(t.strm)},Rt=(t,e)=>{t.pending_buf[t.pending++]=e},It=(t,e)=>{t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e},kt=(t,e,i,n)=>{let s=t.avail_in;return s>n&&(s=n),0===s?0:(t.avail_in-=s,e.set(t.input.subarray(t.next_in,t.next_in+s),i),1===t.state.wrap?t.adler=F(t.adler,e,s,i):2===t.state.wrap&&(t.adler=z(t.adler,e,s,i)),t.next_in+=s,t.total_in+=s,s)},Mt=(t,e)=>{let i,n,s=t.max_chain_length,r=t.strstart,o=t.prev_length,a=t.nice_match;const l=t.strstart>t.w_size-pt?t.strstart-(t.w_size-pt):0,h=t.window,c=t.w_mask,u=t.prev,d=t.strstart+ft;let g=h[r+o-1],_=h[r+o];t.prev_length>=t.good_match&&(s>>=2),a>t.lookahead&&(a=t.lookahead);do{if(i=e,h[i+o]===_&&h[i+o-1]===g&&h[i]===h[r]&&h[++i]===h[r+1]){r+=2,i++;do{}while(h[++r]===h[++i]&&h[++r]===h[++i]&&h[++r]===h[++i]&&h[++r]===h[++i]&&h[++r]===h[++i]&&h[++r]===h[++i]&&h[++r]===h[++i]&&h[++r]===h[++i]&&r<d);if(n=ft-(d-r),r=d-ft,n>o){if(t.match_start=e,o=n,n>=a)break;g=h[r+o-1],_=h[r+o]}}}while((e=u[e&c])>l&&0!=--s);return o<=t.lookahead?o:t.lookahead},Lt=t=>{const e=t.w_size;let i,n,s;do{if(n=t.window_size-t.lookahead-t.strstart,t.strstart>=e+(e-pt)&&(t.window.set(t.window.subarray(e,e+e-n),0),t.match_start-=e,t.strstart-=e,t.block_start-=e,t.insert>t.strstart&&(t.insert=t.strstart),Et(t),n+=e),0===t.strm.avail_in)break;if(i=kt(t.strm,t.window,t.strstart+t.lookahead,n),t.lookahead+=i,t.lookahead+t.insert>=3)for(s=t.strstart-t.insert,t.ins_h=t.window[s],t.ins_h=bt(t,t.ins_h,t.window[s+1]);t.insert&&(t.ins_h=bt(t,t.ins_h,t.window[s+3-1]),t.prev[s&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=s,s++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<pt&&0!==t.strm.avail_in)},Pt=(t,e)=>{let i,n,s,r=t.pending_buf_size-5>t.w_size?t.w_size:t.pending_buf_size-5,o=0,a=t.strm.avail_in;do{if(i=65535,s=t.bi_valid+42>>3,t.strm.avail_out<s)break;if(s=t.strm.avail_out-s,n=t.strstart-t.block_start,i>n+t.strm.avail_in&&(i=n+t.strm.avail_in),i>s&&(i=s),i<r&&(0===i&&e!==H||e===V||i!==n+t.strm.avail_in))break;o=e===H&&i===n+t.strm.avail_in?1:0,W(t,0,0,o),t.pending_buf[t.pending-4]=i,t.pending_buf[t.pending-3]=i>>8,t.pending_buf[t.pending-2]=~i,t.pending_buf[t.pending-1]=~i>>8,Ct(t.strm),n&&(n>i&&(n=i),t.strm.output.set(t.window.subarray(t.block_start,t.block_start+n),t.strm.next_out),t.strm.next_out+=n,t.strm.avail_out-=n,t.strm.total_out+=n,t.block_start+=n,i-=n),i&&(kt(t.strm,t.strm.output,t.strm.next_out,i),t.strm.next_out+=i,t.strm.avail_out-=i,t.strm.total_out+=i)}while(0===o);return a-=t.strm.avail_in,a&&(a>=t.w_size?(t.matches=2,t.window.set(t.strm.input.subarray(t.strm.next_in-t.w_size,t.strm.next_in),0),t.strstart=t.w_size,t.insert=t.strstart):(t.window_size-t.strstart<=a&&(t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,t.insert>t.strstart&&(t.insert=t.strstart)),t.window.set(t.strm.input.subarray(t.strm.next_in-a,t.strm.next_in),t.strstart),t.strstart+=a,t.insert+=a>t.w_size-t.insert?t.w_size-t.insert:a),t.block_start=t.strstart),t.high_water<t.strstart&&(t.high_water=t.strstart),o?4:e!==V&&e!==H&&0===t.strm.avail_in&&t.strstart===t.block_start?2:(s=t.window_size-t.strstart,t.strm.avail_in>s&&t.block_start>=t.w_size&&(t.block_start-=t.w_size,t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,s+=t.w_size,t.insert>t.strstart&&(t.insert=t.strstart)),s>t.strm.avail_in&&(s=t.strm.avail_in),s&&(kt(t.strm,t.window,t.strstart,s),t.strstart+=s,t.insert+=s>t.w_size-t.insert?t.w_size-t.insert:s),t.high_water<t.strstart&&(t.high_water=t.strstart),s=t.bi_valid+42>>3,s=t.pending_buf_size-s>65535?65535:t.pending_buf_size-s,r=s>t.w_size?t.w_size:s,n=t.strstart-t.block_start,(n>=r||(n||e===H)&&e!==V&&0===t.strm.avail_in&&n<=s)&&(i=n>s?s:n,o=e===H&&0===t.strm.avail_in&&i===n?1:0,W(t,t.block_start,i,o),t.block_start+=i,Ct(t.strm)),o?3:1)},Ot=(t,e)=>{let i,n;for(;;){if(t.lookahead<pt){if(Lt(t),t.lookahead<pt&&e===V)return 1;if(0===t.lookahead)break}if(i=0,t.lookahead>=3&&(t.ins_h=bt(t,t.ins_h,t.window[t.strstart+3-1]),i=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==i&&t.strstart-i<=t.w_size-pt&&(t.match_length=Mt(t,i)),t.match_length>=3)if(n=U(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){t.match_length--;do{t.strstart++,t.ins_h=bt(t,t.ins_h,t.window[t.strstart+3-1]),i=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=bt(t,t.ins_h,t.window[t.strstart+1]);else n=U(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(n&&(Tt(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,e===H?(Tt(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(Tt(t,!1),0===t.strm.avail_out)?1:2},At=(t,e)=>{let i,n,s;for(;;){if(t.lookahead<pt){if(Lt(t),t.lookahead<pt&&e===V)return 1;if(0===t.lookahead)break}if(i=0,t.lookahead>=3&&(t.ins_h=bt(t,t.ins_h,t.window[t.strstart+3-1]),i=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==i&&t.prev_length<t.max_lazy_match&&t.strstart-i<=t.w_size-pt&&(t.match_length=Mt(t,i),t.match_length<=5&&(t.strategy===nt||3===t.match_length&&t.strstart-t.match_start>4096)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){s=t.strstart+t.lookahead-3,n=U(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=s&&(t.ins_h=bt(t,t.ins_h,t.window[t.strstart+3-1]),i=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=2,t.strstart++,n&&(Tt(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if(n=U(t,0,t.window[t.strstart-1]),n&&Tt(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(n=U(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,e===H?(Tt(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(Tt(t,!1),0===t.strm.avail_out)?1:2};function Zt(t,e,i,n,s){this.good_length=t,this.max_lazy=e,this.nice_length=i,this.max_chain=n,this.func=s}const Ft=[new Zt(0,0,0,0,Pt),new Zt(4,4,8,4,Ot),new Zt(4,5,16,8,Ot),new Zt(4,6,32,32,Ot),new Zt(4,4,16,16,At),new Zt(8,16,32,32,At),new Zt(8,16,128,128,At),new Zt(8,32,128,256,At),new Zt(32,128,258,1024,At),new Zt(32,258,258,4096,At)];function Dt(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=ht,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(2*gt),this.dyn_dtree=new Uint16Array(2*(2*ut+1)),this.bl_tree=new Uint16Array(2*(2*dt+1)),St(this.dyn_ltree),St(this.dyn_dtree),St(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(_t+1),this.heap=new Uint16Array(2*ct+1),St(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*ct+1),St(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const zt=t=>{if(!t)return 1;const e=t.state;return!e||e.strm!==t||e.status!==mt&&57!==e.status&&69!==e.status&&73!==e.status&&91!==e.status&&103!==e.status&&e.status!==vt&&e.status!==yt?1:0},Nt=t=>{if(zt(t))return xt(t,Q);t.total_in=t.total_out=0,t.data_type=lt;const e=t.state;return e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=2===e.wrap?57:e.wrap?mt:vt,t.adler=2===e.wrap?0:1,e.last_flush=-2,B(e),J},Gt=t=>{const e=Nt(t);var i;return e===J&&((i=t.state).window_size=2*i.w_size,St(i.head),i.max_lazy_match=Ft[i.level].max_lazy,i.good_match=Ft[i.level].good_length,i.nice_match=Ft[i.level].nice_length,i.max_chain_length=Ft[i.level].max_chain,i.strstart=0,i.block_start=0,i.lookahead=0,i.insert=0,i.match_length=i.prev_length=2,i.match_available=0,i.ins_h=0),e},Bt=(t,e,i,n,s,r)=>{if(!t)return Q;let o=1;if(e===it&&(e=6),n<0?(o=0,n=-n):n>15&&(o=2,n-=16),s<1||s>9||i!==ht||n<8||n>15||e<0||e>9||r<0||r>ot||8===n&&1!==o)return xt(t,Q);8===n&&(n=9);const a=new Dt;return t.state=a,a.strm=t,a.status=mt,a.wrap=o,a.gzhead=null,a.w_bits=n,a.w_size=1<<a.w_bits,a.w_mask=a.w_size-1,a.hash_bits=s+7,a.hash_size=1<<a.hash_bits,a.hash_mask=a.hash_size-1,a.hash_shift=~~((a.hash_bits+3-1)/3),a.window=new Uint8Array(2*a.w_size),a.head=new Uint16Array(a.hash_size),a.prev=new Uint16Array(a.w_size),a.lit_bufsize=1<<s+6,a.pending_buf_size=4*a.lit_bufsize,a.pending_buf=new Uint8Array(a.pending_buf_size),a.sym_buf=a.lit_bufsize,a.sym_end=3*(a.lit_bufsize-1),a.level=e,a.strategy=r,a.method=i,Gt(t)};var Wt={deflateInit:(t,e)=>Bt(t,e,ht,15,8,at),deflateInit2:Bt,deflateReset:Gt,deflateResetKeep:Nt,deflateSetHeader:(t,e)=>zt(t)||2!==t.state.wrap?Q:(t.state.gzhead=e,J),deflate:(t,e)=>{if(zt(t)||e>q||e<0)return t?xt(t,Q):Q;const i=t.state;if(!t.output||0!==t.avail_in&&!t.input||i.status===yt&&e!==H)return xt(t,0===t.avail_out?et:Q);const n=i.last_flush;if(i.last_flush=e,0!==i.pending){if(Ct(t),0===t.avail_out)return i.last_flush=-1,J}else if(0===t.avail_in&&wt(e)<=wt(n)&&e!==H)return xt(t,et);if(i.status===yt&&0!==t.avail_in)return xt(t,et);if(i.status===mt&&0===i.wrap&&(i.status=vt),i.status===mt){let e=ht+(i.w_bits-8<<4)<<8,n=-1;if(n=i.strategy>=st||i.level<2?0:i.level<6?1:6===i.level?2:3,e|=n<<6,0!==i.strstart&&(e|=32),e+=31-e%31,It(i,e),0!==i.strstart&&(It(i,t.adler>>>16),It(i,65535&t.adler)),t.adler=1,i.status=vt,Ct(t),0!==i.pending)return i.last_flush=-1,J}if(57===i.status)if(t.adler=0,Rt(i,31),Rt(i,139),Rt(i,8),i.gzhead)Rt(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),Rt(i,255&i.gzhead.time),Rt(i,i.gzhead.time>>8&255),Rt(i,i.gzhead.time>>16&255),Rt(i,i.gzhead.time>>24&255),Rt(i,9===i.level?2:i.strategy>=st||i.level<2?4:0),Rt(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(Rt(i,255&i.gzhead.extra.length),Rt(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(t.adler=z(t.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69;else if(Rt(i,0),Rt(i,0),Rt(i,0),Rt(i,0),Rt(i,0),Rt(i,9===i.level?2:i.strategy>=st||i.level<2?4:0),Rt(i,3),i.status=vt,Ct(t),0!==i.pending)return i.last_flush=-1,J;if(69===i.status){if(i.gzhead.extra){let e=i.pending,n=(65535&i.gzhead.extra.length)-i.gzindex;for(;i.pending+n>i.pending_buf_size;){let s=i.pending_buf_size-i.pending;if(i.pending_buf.set(i.gzhead.extra.subarray(i.gzindex,i.gzindex+s),i.pending),i.pending=i.pending_buf_size,i.gzhead.hcrc&&i.pending>e&&(t.adler=z(t.adler,i.pending_buf,i.pending-e,e)),i.gzindex+=s,Ct(t),0!==i.pending)return i.last_flush=-1,J;e=0,n-=s}let s=new Uint8Array(i.gzhead.extra);i.pending_buf.set(s.subarray(i.gzindex,i.gzindex+n),i.pending),i.pending+=n,i.gzhead.hcrc&&i.pending>e&&(t.adler=z(t.adler,i.pending_buf,i.pending-e,e)),i.gzindex=0}i.status=73}if(73===i.status){if(i.gzhead.name){let e,n=i.pending;do{if(i.pending===i.pending_buf_size){if(i.gzhead.hcrc&&i.pending>n&&(t.adler=z(t.adler,i.pending_buf,i.pending-n,n)),Ct(t),0!==i.pending)return i.last_flush=-1,J;n=0}e=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,Rt(i,e)}while(0!==e);i.gzhead.hcrc&&i.pending>n&&(t.adler=z(t.adler,i.pending_buf,i.pending-n,n)),i.gzindex=0}i.status=91}if(91===i.status){if(i.gzhead.comment){let e,n=i.pending;do{if(i.pending===i.pending_buf_size){if(i.gzhead.hcrc&&i.pending>n&&(t.adler=z(t.adler,i.pending_buf,i.pending-n,n)),Ct(t),0!==i.pending)return i.last_flush=-1,J;n=0}e=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,Rt(i,e)}while(0!==e);i.gzhead.hcrc&&i.pending>n&&(t.adler=z(t.adler,i.pending_buf,i.pending-n,n))}i.status=103}if(103===i.status){if(i.gzhead.hcrc){if(i.pending+2>i.pending_buf_size&&(Ct(t),0!==i.pending))return i.last_flush=-1,J;Rt(i,255&t.adler),Rt(i,t.adler>>8&255),t.adler=0}if(i.status=vt,Ct(t),0!==i.pending)return i.last_flush=-1,J}if(0!==t.avail_in||0!==i.lookahead||e!==V&&i.status!==yt){let n=0===i.level?Pt(i,e):i.strategy===st?((t,e)=>{let i;for(;;){if(0===t.lookahead&&(Lt(t),0===t.lookahead)){if(e===V)return 1;break}if(t.match_length=0,i=U(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,i&&(Tt(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===H?(Tt(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(Tt(t,!1),0===t.strm.avail_out)?1:2})(i,e):i.strategy===rt?((t,e)=>{let i,n,s,r;const o=t.window;for(;;){if(t.lookahead<=ft){if(Lt(t),t.lookahead<=ft&&e===V)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&t.strstart>0&&(s=t.strstart-1,n=o[s],n===o[++s]&&n===o[++s]&&n===o[++s])){r=t.strstart+ft;do{}while(n===o[++s]&&n===o[++s]&&n===o[++s]&&n===o[++s]&&n===o[++s]&&n===o[++s]&&n===o[++s]&&n===o[++s]&&s<r);t.match_length=ft-(r-s),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(i=U(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(i=U(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),i&&(Tt(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===H?(Tt(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(Tt(t,!1),0===t.strm.avail_out)?1:2})(i,e):Ft[i.level].func(i,e);if(3!==n&&4!==n||(i.status=yt),1===n||3===n)return 0===t.avail_out&&(i.last_flush=-1),J;if(2===n&&(e===X?Y(i):e!==q&&(W(i,0,0,!1),e===K&&(St(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),Ct(t),0===t.avail_out))return i.last_flush=-1,J}return e!==H?J:i.wrap<=0?$:(2===i.wrap?(Rt(i,255&t.adler),Rt(i,t.adler>>8&255),Rt(i,t.adler>>16&255),Rt(i,t.adler>>24&255),Rt(i,255&t.total_in),Rt(i,t.total_in>>8&255),Rt(i,t.total_in>>16&255),Rt(i,t.total_in>>24&255)):(It(i,t.adler>>>16),It(i,65535&t.adler)),Ct(t),i.wrap>0&&(i.wrap=-i.wrap),0!==i.pending?J:$)},deflateEnd:t=>{if(zt(t))return Q;const e=t.state.status;return t.state=null,e===vt?xt(t,tt):J},deflateSetDictionary:(t,e)=>{let i=e.length;if(zt(t))return Q;const n=t.state,s=n.wrap;if(2===s||1===s&&n.status!==mt||n.lookahead)return Q;if(1===s&&(t.adler=F(t.adler,e,i,0)),n.wrap=0,i>=n.w_size){0===s&&(St(n.head),n.strstart=0,n.block_start=0,n.insert=0);let t=new Uint8Array(n.w_size);t.set(e.subarray(i-n.w_size,i),0),e=t,i=n.w_size}const r=t.avail_in,o=t.next_in,a=t.input;for(t.avail_in=i,t.next_in=0,t.input=e,Lt(n);n.lookahead>=3;){let t=n.strstart,e=n.lookahead-2;do{n.ins_h=bt(n,n.ins_h,n.window[t+3-1]),n.prev[t&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=t,t++}while(--e);n.strstart=t,n.lookahead=2,Lt(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=2,n.match_available=0,t.next_in=o,t.input=a,t.avail_in=r,n.wrap=s,J},deflateInfo:"pako deflate (from Nodeca project)"};const jt=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var Ut={assign:function(t){const e=Array.prototype.slice.call(arguments,1);for(;e.length;){const i=e.shift();if(i){if("object"!=typeof i)throw new TypeError(i+"must be non-object");for(const e in i)jt(i,e)&&(t[e]=i[e])}}return t},flattenChunks:t=>{let e=0;for(let i=0,n=t.length;i<n;i++)e+=t[i].length;const i=new Uint8Array(e);for(let e=0,n=0,s=t.length;e<s;e++){let s=t[e];i.set(s,n),n+=s.length}return i}};let Yt=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){Yt=!1}const Vt=new Uint8Array(256);for(let t=0;t<256;t++)Vt[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;Vt[254]=Vt[254]=1;var Xt={string2buf:t=>{if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(t);let e,i,n,s,r,o=t.length,a=0;for(s=0;s<o;s++)i=t.charCodeAt(s),55296==(64512&i)&&s+1<o&&(n=t.charCodeAt(s+1),56320==(64512&n)&&(i=65536+(i-55296<<10)+(n-56320),s++)),a+=i<128?1:i<2048?2:i<65536?3:4;for(e=new Uint8Array(a),r=0,s=0;r<a;s++)i=t.charCodeAt(s),55296==(64512&i)&&s+1<o&&(n=t.charCodeAt(s+1),56320==(64512&n)&&(i=65536+(i-55296<<10)+(n-56320),s++)),i<128?e[r++]=i:i<2048?(e[r++]=192|i>>>6,e[r++]=128|63&i):i<65536?(e[r++]=224|i>>>12,e[r++]=128|i>>>6&63,e[r++]=128|63&i):(e[r++]=240|i>>>18,e[r++]=128|i>>>12&63,e[r++]=128|i>>>6&63,e[r++]=128|63&i);return e},buf2string:(t,e)=>{const i=e||t.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(t.subarray(0,e));let n,s;const r=new Array(2*i);for(s=0,n=0;n<i;){let e=t[n++];if(e<128){r[s++]=e;continue}let o=Vt[e];if(o>4)r[s++]=65533,n+=o-1;else{for(e&=2===o?31:3===o?15:7;o>1&&n<i;)e=e<<6|63&t[n++],o--;o>1?r[s++]=65533:e<65536?r[s++]=e:(e-=65536,r[s++]=55296|e>>10&1023,r[s++]=56320|1023&e)}}return((t,e)=>{if(e<65534&&t.subarray&&Yt)return String.fromCharCode.apply(null,t.length===e?t:t.subarray(0,e));let i="";for(let n=0;n<e;n++)i+=String.fromCharCode(t[n]);return i})(r,s)},utf8border:(t,e)=>{(e=e||t.length)>t.length&&(e=t.length);let i=e-1;for(;i>=0&&128==(192&t[i]);)i--;return i<0||0===i?e:i+Vt[t[i]]>e?i:e}},Kt=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};const Ht=Object.prototype.toString,{Z_NO_FLUSH:qt,Z_SYNC_FLUSH:Jt,Z_FULL_FLUSH:$t,Z_FINISH:Qt,Z_OK:te,Z_STREAM_END:ee,Z_DEFAULT_COMPRESSION:ie,Z_DEFAULT_STRATEGY:ne,Z_DEFLATED:se}=G;function re(t){this.options=Ut.assign({level:ie,method:se,chunkSize:16384,windowBits:15,memLevel:8,strategy:ne},t||{});let e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Kt,this.strm.avail_out=0;let i=Wt.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(i!==te)throw new Error(N[i]);if(e.header&&Wt.deflateSetHeader(this.strm,e.header),e.dictionary){let t;if(t="string"==typeof e.dictionary?Xt.string2buf(e.dictionary):"[object ArrayBuffer]"===Ht.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,i=Wt.deflateSetDictionary(this.strm,t),i!==te)throw new Error(N[i]);this._dict_set=!0}}function oe(t,e){const i=new re(e);if(i.push(t,!0),i.err)throw i.msg||N[i.err];return i.result}re.prototype.push=function(t,e){const i=this.strm,n=this.options.chunkSize;let s,r;if(this.ended)return!1;for(r=e===~~e?e:!0===e?Qt:qt,"string"==typeof t?i.input=Xt.string2buf(t):"[object ArrayBuffer]"===Ht.call(t)?i.input=new Uint8Array(t):i.input=t,i.next_in=0,i.avail_in=i.input.length;;)if(0===i.avail_out&&(i.output=new Uint8Array(n),i.next_out=0,i.avail_out=n),(r===Jt||r===$t)&&i.avail_out<=6)this.onData(i.output.subarray(0,i.next_out)),i.avail_out=0;else{if(s=Wt.deflate(i,r),s===ee)return i.next_out>0&&this.onData(i.output.subarray(0,i.next_out)),s=Wt.deflateEnd(this.strm),this.onEnd(s),this.ended=!0,s===te;if(0!==i.avail_out){if(r>0&&i.next_out>0)this.onData(i.output.subarray(0,i.next_out)),i.avail_out=0;else if(0===i.avail_in)break}else this.onData(i.output)}return!0},re.prototype.onData=function(t){this.chunks.push(t)},re.prototype.onEnd=function(t){t===te&&(this.result=Ut.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var ae={Deflate:re,deflate:oe,deflateRaw:function(t,e){return(e=e||{}).raw=!0,oe(t,e)},gzip:function(t,e){return(e=e||{}).gzip=!0,oe(t,e)},constants:G};const le=16209;var he=function(t,e){let i,n,s,r,o,a,l,h,c,u,d,g,_,f,p,m,v,y,x,w,S,E,b,C;const T=t.state;i=t.next_in,b=t.input,n=i+(t.avail_in-5),s=t.next_out,C=t.output,r=s-(e-t.avail_out),o=s+(t.avail_out-257),a=T.dmax,l=T.wsize,h=T.whave,c=T.wnext,u=T.window,d=T.hold,g=T.bits,_=T.lencode,f=T.distcode,p=(1<<T.lenbits)-1,m=(1<<T.distbits)-1;t:do{g<15&&(d+=b[i++]<<g,g+=8,d+=b[i++]<<g,g+=8),v=_[d&p];e:for(;;){if(y=v>>>24,d>>>=y,g-=y,y=v>>>16&255,0===y)C[s++]=65535&v;else{if(!(16&y)){if(0==(64&y)){v=_[(65535&v)+(d&(1<<y)-1)];continue e}if(32&y){T.mode=16191;break t}t.msg="invalid literal/length code",T.mode=le;break t}x=65535&v,y&=15,y&&(g<y&&(d+=b[i++]<<g,g+=8),x+=d&(1<<y)-1,d>>>=y,g-=y),g<15&&(d+=b[i++]<<g,g+=8,d+=b[i++]<<g,g+=8),v=f[d&m];i:for(;;){if(y=v>>>24,d>>>=y,g-=y,y=v>>>16&255,!(16&y)){if(0==(64&y)){v=f[(65535&v)+(d&(1<<y)-1)];continue i}t.msg="invalid distance code",T.mode=le;break t}if(w=65535&v,y&=15,g<y&&(d+=b[i++]<<g,g+=8,g<y&&(d+=b[i++]<<g,g+=8)),w+=d&(1<<y)-1,w>a){t.msg="invalid distance too far back",T.mode=le;break t}if(d>>>=y,g-=y,y=s-r,w>y){if(y=w-y,y>h&&T.sane){t.msg="invalid distance too far back",T.mode=le;break t}if(S=0,E=u,0===c){if(S+=l-y,y<x){x-=y;do{C[s++]=u[S++]}while(--y);S=s-w,E=C}}else if(c<y){if(S+=l+c-y,y-=c,y<x){x-=y;do{C[s++]=u[S++]}while(--y);if(S=0,c<x){y=c,x-=y;do{C[s++]=u[S++]}while(--y);S=s-w,E=C}}}else if(S+=c-y,y<x){x-=y;do{C[s++]=u[S++]}while(--y);S=s-w,E=C}for(;x>2;)C[s++]=E[S++],C[s++]=E[S++],C[s++]=E[S++],x-=3;x&&(C[s++]=E[S++],x>1&&(C[s++]=E[S++]))}else{S=s-w;do{C[s++]=C[S++],C[s++]=C[S++],C[s++]=C[S++],x-=3}while(x>2);x&&(C[s++]=C[S++],x>1&&(C[s++]=C[S++]))}break}}break}}while(i<n&&s<o);x=g>>3,i-=x,g-=x<<3,d&=(1<<g)-1,t.next_in=i,t.next_out=s,t.avail_in=i<n?n-i+5:5-(i-n),t.avail_out=s<o?o-s+257:257-(s-o),T.hold=d,T.bits=g};const ce=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),ue=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),de=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),ge=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var _e=(t,e,i,n,s,r,o,a)=>{const l=a.bits;let h,c,u,d,g,_,f=0,p=0,m=0,v=0,y=0,x=0,w=0,S=0,E=0,b=0,C=null;const T=new Uint16Array(16),R=new Uint16Array(16);let I,k,M,L=null;for(f=0;f<=15;f++)T[f]=0;for(p=0;p<n;p++)T[e[i+p]]++;for(y=l,v=15;v>=1&&0===T[v];v--);if(y>v&&(y=v),0===v)return s[r++]=20971520,s[r++]=20971520,a.bits=1,0;for(m=1;m<v&&0===T[m];m++);for(y<m&&(y=m),S=1,f=1;f<=15;f++)if(S<<=1,S-=T[f],S<0)return-1;if(S>0&&(0===t||1!==v))return-1;for(R[1]=0,f=1;f<15;f++)R[f+1]=R[f]+T[f];for(p=0;p<n;p++)0!==e[i+p]&&(o[R[e[i+p]]++]=p);if(0===t?(C=L=o,_=20):1===t?(C=ce,L=ue,_=257):(C=de,L=ge,_=0),b=0,p=0,f=m,g=r,x=y,w=0,u=-1,E=1<<y,d=E-1,1===t&&E>852||2===t&&E>592)return 1;for(;;){I=f-w,o[p]+1<_?(k=0,M=o[p]):o[p]>=_?(k=L[o[p]-_],M=C[o[p]-_]):(k=96,M=0),h=1<<f-w,c=1<<x,m=c;do{c-=h,s[g+(b>>w)+c]=I<<24|k<<16|M|0}while(0!==c);for(h=1<<f-1;b&h;)h>>=1;if(0!==h?(b&=h-1,b+=h):b=0,p++,0==--T[f]){if(f===v)break;f=e[i+o[p]]}if(f>y&&(b&d)!==u){for(0===w&&(w=y),g+=m,x=f-w,S=1<<x;x+w<v&&(S-=T[x+w],!(S<=0));)x++,S<<=1;if(E+=1<<x,1===t&&E>852||2===t&&E>592)return 1;u=b&d,s[u]=y<<24|x<<16|g-r|0}}return 0!==b&&(s[g+b]=f-w<<24|64<<16|0),a.bits=y,0};const{Z_FINISH:fe,Z_BLOCK:pe,Z_TREES:me,Z_OK:ve,Z_STREAM_END:ye,Z_NEED_DICT:xe,Z_STREAM_ERROR:we,Z_DATA_ERROR:Se,Z_MEM_ERROR:Ee,Z_BUF_ERROR:be,Z_DEFLATED:Ce}=G,Te=16180,Re=16190,Ie=16191,ke=16192,Me=16194,Le=16199,Pe=16200,Oe=16206,Ae=16209,Ze=t=>(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24);function Fe(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const De=t=>{if(!t)return 1;const e=t.state;return!e||e.strm!==t||e.mode<Te||e.mode>16211?1:0},ze=t=>{if(De(t))return we;const e=t.state;return t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=Te,e.last=0,e.havedict=0,e.flags=-1,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new Int32Array(852),e.distcode=e.distdyn=new Int32Array(592),e.sane=1,e.back=-1,ve},Ne=t=>{if(De(t))return we;const e=t.state;return e.wsize=0,e.whave=0,e.wnext=0,ze(t)},Ge=(t,e)=>{let i;if(De(t))return we;const n=t.state;return e<0?(i=0,e=-e):(i=5+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?we:(null!==n.window&&n.wbits!==e&&(n.window=null),n.wrap=i,n.wbits=e,Ne(t))},Be=(t,e)=>{if(!t)return we;const i=new Fe;t.state=i,i.strm=t,i.window=null,i.mode=Te;const n=Ge(t,e);return n!==ve&&(t.state=null),n};let We,je,Ue=!0;const Ye=t=>{if(Ue){We=new Int32Array(512),je=new Int32Array(32);let e=0;for(;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(_e(1,t.lens,0,288,We,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;_e(2,t.lens,0,32,je,0,t.work,{bits:5}),Ue=!1}t.lencode=We,t.lenbits=9,t.distcode=je,t.distbits=5},Ve=(t,e,i,n)=>{let s;const r=t.state;return null===r.window&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new Uint8Array(r.wsize)),n>=r.wsize?(r.window.set(e.subarray(i-r.wsize,i),0),r.wnext=0,r.whave=r.wsize):(s=r.wsize-r.wnext,s>n&&(s=n),r.window.set(e.subarray(i-n,i-n+s),r.wnext),(n-=s)?(r.window.set(e.subarray(i-n,i),0),r.wnext=n,r.whave=r.wsize):(r.wnext+=s,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=s))),0};var Xe={inflateReset:Ne,inflateReset2:Ge,inflateResetKeep:ze,inflateInit:t=>Be(t,15),inflateInit2:Be,inflate:(t,e)=>{let i,n,s,r,o,a,l,h,c,u,d,g,_,f,p,m,v,y,x,w,S,E,b=0;const C=new Uint8Array(4);let T,R;const I=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(De(t)||!t.output||!t.input&&0!==t.avail_in)return we;i=t.state,i.mode===Ie&&(i.mode=ke),o=t.next_out,s=t.output,l=t.avail_out,r=t.next_in,n=t.input,a=t.avail_in,h=i.hold,c=i.bits,u=a,d=l,E=ve;t:for(;;)switch(i.mode){case Te:if(0===i.wrap){i.mode=ke;break}for(;c<16;){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}if(2&i.wrap&&35615===h){0===i.wbits&&(i.wbits=15),i.check=0,C[0]=255&h,C[1]=h>>>8&255,i.check=z(i.check,C,2,0),h=0,c=0,i.mode=16181;break}if(i.head&&(i.head.done=!1),!(1&i.wrap)||(((255&h)<<8)+(h>>8))%31){t.msg="incorrect header check",i.mode=Ae;break}if((15&h)!==Ce){t.msg="unknown compression method",i.mode=Ae;break}if(h>>>=4,c-=4,S=8+(15&h),0===i.wbits&&(i.wbits=S),S>15||S>i.wbits){t.msg="invalid window size",i.mode=Ae;break}i.dmax=1<<i.wbits,i.flags=0,t.adler=i.check=1,i.mode=512&h?16189:Ie,h=0,c=0;break;case 16181:for(;c<16;){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}if(i.flags=h,(255&i.flags)!==Ce){t.msg="unknown compression method",i.mode=Ae;break}if(57344&i.flags){t.msg="unknown header flags set",i.mode=Ae;break}i.head&&(i.head.text=h>>8&1),512&i.flags&&4&i.wrap&&(C[0]=255&h,C[1]=h>>>8&255,i.check=z(i.check,C,2,0)),h=0,c=0,i.mode=16182;case 16182:for(;c<32;){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}i.head&&(i.head.time=h),512&i.flags&&4&i.wrap&&(C[0]=255&h,C[1]=h>>>8&255,C[2]=h>>>16&255,C[3]=h>>>24&255,i.check=z(i.check,C,4,0)),h=0,c=0,i.mode=16183;case 16183:for(;c<16;){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}i.head&&(i.head.xflags=255&h,i.head.os=h>>8),512&i.flags&&4&i.wrap&&(C[0]=255&h,C[1]=h>>>8&255,i.check=z(i.check,C,2,0)),h=0,c=0,i.mode=16184;case 16184:if(1024&i.flags){for(;c<16;){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}i.length=h,i.head&&(i.head.extra_len=h),512&i.flags&&4&i.wrap&&(C[0]=255&h,C[1]=h>>>8&255,i.check=z(i.check,C,2,0)),h=0,c=0}else i.head&&(i.head.extra=null);i.mode=16185;case 16185:if(1024&i.flags&&(g=i.length,g>a&&(g=a),g&&(i.head&&(S=i.head.extra_len-i.length,i.head.extra||(i.head.extra=new Uint8Array(i.head.extra_len)),i.head.extra.set(n.subarray(r,r+g),S)),512&i.flags&&4&i.wrap&&(i.check=z(i.check,n,g,r)),a-=g,r+=g,i.length-=g),i.length))break t;i.length=0,i.mode=16186;case 16186:if(2048&i.flags){if(0===a)break t;g=0;do{S=n[r+g++],i.head&&S&&i.length<65536&&(i.head.name+=String.fromCharCode(S))}while(S&&g<a);if(512&i.flags&&4&i.wrap&&(i.check=z(i.check,n,g,r)),a-=g,r+=g,S)break t}else i.head&&(i.head.name=null);i.length=0,i.mode=16187;case 16187:if(4096&i.flags){if(0===a)break t;g=0;do{S=n[r+g++],i.head&&S&&i.length<65536&&(i.head.comment+=String.fromCharCode(S))}while(S&&g<a);if(512&i.flags&&4&i.wrap&&(i.check=z(i.check,n,g,r)),a-=g,r+=g,S)break t}else i.head&&(i.head.comment=null);i.mode=16188;case 16188:if(512&i.flags){for(;c<16;){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}if(4&i.wrap&&h!==(65535&i.check)){t.msg="header crc mismatch",i.mode=Ae;break}h=0,c=0}i.head&&(i.head.hcrc=i.flags>>9&1,i.head.done=!0),t.adler=i.check=0,i.mode=Ie;break;case 16189:for(;c<32;){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}t.adler=i.check=Ze(h),h=0,c=0,i.mode=Re;case Re:if(0===i.havedict)return t.next_out=o,t.avail_out=l,t.next_in=r,t.avail_in=a,i.hold=h,i.bits=c,xe;t.adler=i.check=1,i.mode=Ie;case Ie:if(e===pe||e===me)break t;case ke:if(i.last){h>>>=7&c,c-=7&c,i.mode=Oe;break}for(;c<3;){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}switch(i.last=1&h,h>>>=1,c-=1,3&h){case 0:i.mode=16193;break;case 1:if(Ye(i),i.mode=Le,e===me){h>>>=2,c-=2;break t}break;case 2:i.mode=16196;break;case 3:t.msg="invalid block type",i.mode=Ae}h>>>=2,c-=2;break;case 16193:for(h>>>=7&c,c-=7&c;c<32;){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}if((65535&h)!=(h>>>16^65535)){t.msg="invalid stored block lengths",i.mode=Ae;break}if(i.length=65535&h,h=0,c=0,i.mode=Me,e===me)break t;case Me:i.mode=16195;case 16195:if(g=i.length,g){if(g>a&&(g=a),g>l&&(g=l),0===g)break t;s.set(n.subarray(r,r+g),o),a-=g,r+=g,l-=g,o+=g,i.length-=g;break}i.mode=Ie;break;case 16196:for(;c<14;){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}if(i.nlen=257+(31&h),h>>>=5,c-=5,i.ndist=1+(31&h),h>>>=5,c-=5,i.ncode=4+(15&h),h>>>=4,c-=4,i.nlen>286||i.ndist>30){t.msg="too many length or distance symbols",i.mode=Ae;break}i.have=0,i.mode=16197;case 16197:for(;i.have<i.ncode;){for(;c<3;){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}i.lens[I[i.have++]]=7&h,h>>>=3,c-=3}for(;i.have<19;)i.lens[I[i.have++]]=0;if(i.lencode=i.lendyn,i.lenbits=7,T={bits:i.lenbits},E=_e(0,i.lens,0,19,i.lencode,0,i.work,T),i.lenbits=T.bits,E){t.msg="invalid code lengths set",i.mode=Ae;break}i.have=0,i.mode=16198;case 16198:for(;i.have<i.nlen+i.ndist;){for(;b=i.lencode[h&(1<<i.lenbits)-1],p=b>>>24,m=b>>>16&255,v=65535&b,!(p<=c);){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}if(v<16)h>>>=p,c-=p,i.lens[i.have++]=v;else{if(16===v){for(R=p+2;c<R;){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}if(h>>>=p,c-=p,0===i.have){t.msg="invalid bit length repeat",i.mode=Ae;break}S=i.lens[i.have-1],g=3+(3&h),h>>>=2,c-=2}else if(17===v){for(R=p+3;c<R;){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}h>>>=p,c-=p,S=0,g=3+(7&h),h>>>=3,c-=3}else{for(R=p+7;c<R;){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}h>>>=p,c-=p,S=0,g=11+(127&h),h>>>=7,c-=7}if(i.have+g>i.nlen+i.ndist){t.msg="invalid bit length repeat",i.mode=Ae;break}for(;g--;)i.lens[i.have++]=S}}if(i.mode===Ae)break;if(0===i.lens[256]){t.msg="invalid code -- missing end-of-block",i.mode=Ae;break}if(i.lenbits=9,T={bits:i.lenbits},E=_e(1,i.lens,0,i.nlen,i.lencode,0,i.work,T),i.lenbits=T.bits,E){t.msg="invalid literal/lengths set",i.mode=Ae;break}if(i.distbits=6,i.distcode=i.distdyn,T={bits:i.distbits},E=_e(2,i.lens,i.nlen,i.ndist,i.distcode,0,i.work,T),i.distbits=T.bits,E){t.msg="invalid distances set",i.mode=Ae;break}if(i.mode=Le,e===me)break t;case Le:i.mode=Pe;case Pe:if(a>=6&&l>=258){t.next_out=o,t.avail_out=l,t.next_in=r,t.avail_in=a,i.hold=h,i.bits=c,he(t,d),o=t.next_out,s=t.output,l=t.avail_out,r=t.next_in,n=t.input,a=t.avail_in,h=i.hold,c=i.bits,i.mode===Ie&&(i.back=-1);break}for(i.back=0;b=i.lencode[h&(1<<i.lenbits)-1],p=b>>>24,m=b>>>16&255,v=65535&b,!(p<=c);){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}if(m&&0==(240&m)){for(y=p,x=m,w=v;b=i.lencode[w+((h&(1<<y+x)-1)>>y)],p=b>>>24,m=b>>>16&255,v=65535&b,!(y+p<=c);){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}h>>>=y,c-=y,i.back+=y}if(h>>>=p,c-=p,i.back+=p,i.length=v,0===m){i.mode=16205;break}if(32&m){i.back=-1,i.mode=Ie;break}if(64&m){t.msg="invalid literal/length code",i.mode=Ae;break}i.extra=15&m,i.mode=16201;case 16201:if(i.extra){for(R=i.extra;c<R;){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}i.length+=h&(1<<i.extra)-1,h>>>=i.extra,c-=i.extra,i.back+=i.extra}i.was=i.length,i.mode=16202;case 16202:for(;b=i.distcode[h&(1<<i.distbits)-1],p=b>>>24,m=b>>>16&255,v=65535&b,!(p<=c);){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}if(0==(240&m)){for(y=p,x=m,w=v;b=i.distcode[w+((h&(1<<y+x)-1)>>y)],p=b>>>24,m=b>>>16&255,v=65535&b,!(y+p<=c);){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}h>>>=y,c-=y,i.back+=y}if(h>>>=p,c-=p,i.back+=p,64&m){t.msg="invalid distance code",i.mode=Ae;break}i.offset=v,i.extra=15&m,i.mode=16203;case 16203:if(i.extra){for(R=i.extra;c<R;){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}i.offset+=h&(1<<i.extra)-1,h>>>=i.extra,c-=i.extra,i.back+=i.extra}if(i.offset>i.dmax){t.msg="invalid distance too far back",i.mode=Ae;break}i.mode=16204;case 16204:if(0===l)break t;if(g=d-l,i.offset>g){if(g=i.offset-g,g>i.whave&&i.sane){t.msg="invalid distance too far back",i.mode=Ae;break}g>i.wnext?(g-=i.wnext,_=i.wsize-g):_=i.wnext-g,g>i.length&&(g=i.length),f=i.window}else f=s,_=o-i.offset,g=i.length;g>l&&(g=l),l-=g,i.length-=g;do{s[o++]=f[_++]}while(--g);0===i.length&&(i.mode=Pe);break;case 16205:if(0===l)break t;s[o++]=i.length,l--,i.mode=Pe;break;case Oe:if(i.wrap){for(;c<32;){if(0===a)break t;a--,h|=n[r++]<<c,c+=8}if(d-=l,t.total_out+=d,i.total+=d,4&i.wrap&&d&&(t.adler=i.check=i.flags?z(i.check,s,d,o-d):F(i.check,s,d,o-d)),d=l,4&i.wrap&&(i.flags?h:Ze(h))!==i.check){t.msg="incorrect data check",i.mode=Ae;break}h=0,c=0}i.mode=16207;case 16207:if(i.wrap&&i.flags){for(;c<32;){if(0===a)break t;a--,h+=n[r++]<<c,c+=8}if(4&i.wrap&&h!==(4294967295&i.total)){t.msg="incorrect length check",i.mode=Ae;break}h=0,c=0}i.mode=16208;case 16208:E=ye;break t;case Ae:E=Se;break t;case 16210:return Ee;default:return we}return t.next_out=o,t.avail_out=l,t.next_in=r,t.avail_in=a,i.hold=h,i.bits=c,(i.wsize||d!==t.avail_out&&i.mode<Ae&&(i.mode<Oe||e!==fe))&&Ve(t,t.output,t.next_out,d-t.avail_out),u-=t.avail_in,d-=t.avail_out,t.total_in+=u,t.total_out+=d,i.total+=d,4&i.wrap&&d&&(t.adler=i.check=i.flags?z(i.check,s,d,t.next_out-d):F(i.check,s,d,t.next_out-d)),t.data_type=i.bits+(i.last?64:0)+(i.mode===Ie?128:0)+(i.mode===Le||i.mode===Me?256:0),(0===u&&0===d||e===fe)&&E===ve&&(E=be),E},inflateEnd:t=>{if(De(t))return we;let e=t.state;return e.window&&(e.window=null),t.state=null,ve},inflateGetHeader:(t,e)=>{if(De(t))return we;const i=t.state;return 0==(2&i.wrap)?we:(i.head=e,e.done=!1,ve)},inflateSetDictionary:(t,e)=>{const i=e.length;let n,s,r;return De(t)?we:(n=t.state,0!==n.wrap&&n.mode!==Re?we:n.mode===Re&&(s=1,s=F(s,e,i,0),s!==n.check)?Se:(r=Ve(t,e,i,i),r?(n.mode=16210,Ee):(n.havedict=1,ve)))},inflateInfo:"pako inflate (from Nodeca project)"},Ke=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1};const He=Object.prototype.toString,{Z_NO_FLUSH:qe,Z_FINISH:Je,Z_OK:$e,Z_STREAM_END:Qe,Z_NEED_DICT:ti,Z_STREAM_ERROR:ei,Z_DATA_ERROR:ii,Z_MEM_ERROR:ni}=G;function si(t){this.options=Ut.assign({chunkSize:65536,windowBits:15,to:""},t||{});const e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Kt,this.strm.avail_out=0;let i=Xe.inflateInit2(this.strm,e.windowBits);if(i!==$e)throw new Error(N[i]);if(this.header=new Ke,Xe.inflateGetHeader(this.strm,this.header),e.dictionary&&("string"==typeof e.dictionary?e.dictionary=Xt.string2buf(e.dictionary):"[object ArrayBuffer]"===He.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(i=Xe.inflateSetDictionary(this.strm,e.dictionary),i!==$e)))throw new Error(N[i])}function ri(t,e){const i=new si(e);if(i.push(t),i.err)throw i.msg||N[i.err];return i.result}si.prototype.push=function(t,e){const i=this.strm,n=this.options.chunkSize,s=this.options.dictionary;let r,o,a;if(this.ended)return!1;for(o=e===~~e?e:!0===e?Je:qe,"[object ArrayBuffer]"===He.call(t)?i.input=new Uint8Array(t):i.input=t,i.next_in=0,i.avail_in=i.input.length;;){for(0===i.avail_out&&(i.output=new Uint8Array(n),i.next_out=0,i.avail_out=n),r=Xe.inflate(i,o),r===ti&&s&&(r=Xe.inflateSetDictionary(i,s),r===$e?r=Xe.inflate(i,o):r===ii&&(r=ti));i.avail_in>0&&r===Qe&&i.state.wrap>0&&0!==t[i.next_in];)Xe.inflateReset(i),r=Xe.inflate(i,o);switch(r){case ei:case ii:case ti:case ni:return this.onEnd(r),this.ended=!0,!1}if(a=i.avail_out,i.next_out&&(0===i.avail_out||r===Qe))if("string"===this.options.to){let t=Xt.utf8border(i.output,i.next_out),e=i.next_out-t,s=Xt.buf2string(i.output,t);i.next_out=e,i.avail_out=n-e,e&&i.output.set(i.output.subarray(t,t+e),0),this.onData(s)}else this.onData(i.output.length===i.next_out?i.output:i.output.subarray(0,i.next_out));if(r!==$e||0!==a){if(r===Qe)return r=Xe.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,!0;if(0===i.avail_in)break}}return!0},si.prototype.onData=function(t){this.chunks.push(t)},si.prototype.onEnd=function(t){t===$e&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=Ut.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var oi={Inflate:si,inflate:ri,inflateRaw:function(t,e){return(e=e||{}).raw=!0,ri(t,e)},ungzip:ri,constants:G};const{Deflate:ai,deflate:li,deflateRaw:hi,gzip:ci}=ae,{Inflate:ui,inflate:di,inflateRaw:gi,ungzip:_i}=oi;var fi=_i}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,