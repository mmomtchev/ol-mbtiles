/*! For license information please see 586.bundle.js.LICENSE.txt */
(self.webpackChunkol_mbtiles=self.webpackChunkol_mbtiles||[]).push([[586],{5550:t=>{"use strict";function e(t,e){this.x=t,this.y=e}t.exports=e,e.prototype={clone:function(){return new e(this.x,this.y)},add:function(t){return this.clone()._add(t)},sub:function(t){return this.clone()._sub(t)},multByPoint:function(t){return this.clone()._multByPoint(t)},divByPoint:function(t){return this.clone()._divByPoint(t)},mult:function(t){return this.clone()._mult(t)},div:function(t){return this.clone()._div(t)},rotate:function(t){return this.clone()._rotate(t)},rotateAround:function(t,e){return this.clone()._rotateAround(t,e)},matMult:function(t){return this.clone()._matMult(t)},unit:function(){return this.clone()._unit()},perp:function(){return this.clone()._perp()},round:function(){return this.clone()._round()},mag:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},equals:function(t){return this.x===t.x&&this.y===t.y},dist:function(t){return Math.sqrt(this.distSqr(t))},distSqr:function(t){var e=t.x-this.x,n=t.y-this.y;return e*e+n*n},angle:function(){return Math.atan2(this.y,this.x)},angleTo:function(t){return Math.atan2(this.y-t.y,this.x-t.x)},angleWith:function(t){return this.angleWithSep(t.x,t.y)},angleWithSep:function(t,e){return Math.atan2(this.x*e-this.y*t,this.x*t+this.y*e)},_matMult:function(t){var e=t[0]*this.x+t[1]*this.y,n=t[2]*this.x+t[3]*this.y;return this.x=e,this.y=n,this},_add:function(t){return this.x+=t.x,this.y+=t.y,this},_sub:function(t){return this.x-=t.x,this.y-=t.y,this},_mult:function(t){return this.x*=t,this.y*=t,this},_div:function(t){return this.x/=t,this.y/=t,this},_multByPoint:function(t){return this.x*=t.x,this.y*=t.y,this},_divByPoint:function(t){return this.x/=t.x,this.y/=t.y,this},_unit:function(){return this._div(this.mag()),this},_perp:function(){var t=this.y;return this.y=this.x,this.x=-t,this},_rotate:function(t){var e=Math.cos(t),n=Math.sin(t),i=e*this.x-n*this.y,s=n*this.x+e*this.y;return this.x=i,this.y=s,this},_rotateAround:function(t,e){var n=Math.cos(t),i=Math.sin(t),s=e.x+n*(this.x-e.x)-i*(this.y-e.y),r=e.y+i*(this.x-e.x)+n*(this.y-e.y);return this.x=s,this.y=r,this},_round:function(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}},e.convert=function(t){return t instanceof e?t:Array.isArray(t)?new e(t[0],t[1]):t}},8929:(t,e,n)=>{t.exports.VectorTile=n(2779),n(6024),n(9701)},2779:(t,e,n)=>{"use strict";var i=n(9701);function s(t,e,n){if(3===t){var s=new i(n,n.readVarint()+n.pos);s.length&&(e[s.name]=s)}}t.exports=function(t,e){this.layers=t.readFields(s,{},e)}},6024:(t,e,n)=>{"use strict";var i=n(5550);function s(t,e,n,i,s){this.properties={},this.extent=n,this.type=0,this._pbf=t,this._geometry=-1,this._keys=i,this._values=s,t.readFields(r,this,e)}function r(t,e,n){1==t?e.id=n.readVarint():2==t?function(t,e){for(var n=t.readVarint()+t.pos;t.pos<n;){var i=e._keys[t.readVarint()],s=e._values[t.readVarint()];e.properties[i]=s}}(n,e):3==t?e.type=n.readVarint():4==t&&(e._geometry=n.pos)}function o(t){for(var e,n,i=0,s=0,r=t.length,o=r-1;s<r;o=s++)e=t[s],i+=((n=t[o]).x-e.x)*(e.y+n.y);return i}t.exports=s,s.types=["Unknown","Point","LineString","Polygon"],s.prototype.loadGeometry=function(){var t=this._pbf;t.pos=this._geometry;for(var e,n=t.readVarint()+t.pos,s=1,r=0,o=0,a=0,l=[];t.pos<n;){if(r<=0){var c=t.readVarint();s=7&c,r=c>>3}if(r--,1===s||2===s)o+=t.readSVarint(),a+=t.readSVarint(),1===s&&(e&&l.push(e),e=[]),e.push(new i(o,a));else{if(7!==s)throw new Error("unknown command "+s);e&&e.push(e[0].clone())}}return e&&l.push(e),l},s.prototype.bbox=function(){var t=this._pbf;t.pos=this._geometry;for(var e=t.readVarint()+t.pos,n=1,i=0,s=0,r=0,o=1/0,a=-1/0,l=1/0,c=-1/0;t.pos<e;){if(i<=0){var u=t.readVarint();n=7&u,i=u>>3}if(i--,1===n||2===n)(s+=t.readSVarint())<o&&(o=s),s>a&&(a=s),(r+=t.readSVarint())<l&&(l=r),r>c&&(c=r);else if(7!==n)throw new Error("unknown command "+n)}return[o,l,a,c]},s.prototype.toGeoJSON=function(t,e,n){var i,r,a=this.extent*Math.pow(2,n),l=this.extent*t,c=this.extent*e,u=this.loadGeometry(),h=s.types[this.type];function d(t){for(var e=0;e<t.length;e++){var n=t[e],i=180-360*(n.y+c)/a;t[e]=[360*(n.x+l)/a-180,360/Math.PI*Math.atan(Math.exp(i*Math.PI/180))-90]}}switch(this.type){case 1:var _=[];for(i=0;i<u.length;i++)_[i]=u[i][0];d(u=_);break;case 2:for(i=0;i<u.length;i++)d(u[i]);break;case 3:for(u=function(t){var e=t.length;if(e<=1)return[t];for(var n,i,s=[],r=0;r<e;r++){var a=o(t[r]);0!==a&&(void 0===i&&(i=a<0),i===a<0?(n&&s.push(n),n=[t[r]]):n.push(t[r]))}return n&&s.push(n),s}(u),i=0;i<u.length;i++)for(r=0;r<u[i].length;r++)d(u[i][r])}1===u.length?u=u[0]:h="Multi"+h;var p={type:"Feature",geometry:{type:h,coordinates:u},properties:this.properties};return"id"in this&&(p.id=this.id),p}},9701:(t,e,n)=>{"use strict";var i=n(6024);function s(t,e){this.version=1,this.name=null,this.extent=4096,this.length=0,this._pbf=t,this._keys=[],this._values=[],this._features=[],t.readFields(r,this,e),this.length=this._features.length}function r(t,e,n){15===t?e.version=n.readVarint():1===t?e.name=n.readString():5===t?e.extent=n.readVarint():2===t?e._features.push(n.pos):3===t?e._keys.push(n.readString()):4===t&&e._values.push(function(t){for(var e=null,n=t.readVarint()+t.pos;t.pos<n;){var i=t.readVarint()>>3;e=1===i?t.readString():2===i?t.readFloat():3===i?t.readDouble():4===i?t.readVarint64():5===i?t.readVarint():6===i?t.readSVarint():7===i?t.readBoolean():null}return e}(n))}t.exports=s,s.prototype.feature=function(t){if(t<0||t>=this._features.length)throw new Error("feature index out of bounds");this._pbf.pos=this._features[t];var e=this._pbf.readVarint()+this._pbf.pos;return new i(this._pbf,e,this.extent,this._keys,this._values)}},645:(t,e)=>{e.read=function(t,e,n,i,s){var r,o,a=8*s-i-1,l=(1<<a)-1,c=l>>1,u=-7,h=n?s-1:0,d=n?-1:1,_=t[e+h];for(h+=d,r=_&(1<<-u)-1,_>>=-u,u+=a;u>0;r=256*r+t[e+h],h+=d,u-=8);for(o=r&(1<<-u)-1,r>>=-u,u+=i;u>0;o=256*o+t[e+h],h+=d,u-=8);if(0===r)r=1-c;else{if(r===l)return o?NaN:1/0*(_?-1:1);o+=Math.pow(2,i),r-=c}return(_?-1:1)*o*Math.pow(2,r-i)},e.write=function(t,e,n,i,s,r){var o,a,l,c=8*r-s-1,u=(1<<c)-1,h=u>>1,d=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,_=i?0:r-1,p=i?1:-1,f=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,o=u):(o=Math.floor(Math.log(e)/Math.LN2),e*(l=Math.pow(2,-o))<1&&(o--,l*=2),(e+=o+h>=1?d/l:d*Math.pow(2,1-h))*l>=2&&(o++,l/=2),o+h>=u?(a=0,o=u):o+h>=1?(a=(e*l-1)*Math.pow(2,s),o+=h):(a=e*Math.pow(2,h-1)*Math.pow(2,s),o=0));s>=8;t[n+_]=255&a,_+=p,a/=256,s-=8);for(o=o<<s|a,c+=s;c>0;t[n+_]=255&o,_+=p,o/=256,c-=8);t[n+_-p]|=128*f}},3614:(t,e,n)=>{"use strict";t.exports=s;var i=n(645);function s(t){this.buf=ArrayBuffer.isView&&ArrayBuffer.isView(t)?t:new Uint8Array(t||0),this.pos=0,this.type=0,this.length=this.buf.length}s.Varint=0,s.Fixed64=1,s.Bytes=2,s.Fixed32=5;var r=4294967296,o=1/r,a="undefined"==typeof TextDecoder?null:new TextDecoder("utf8");function l(t){return t.type===s.Bytes?t.readVarint()+t.pos:t.pos+1}function c(t,e,n){return n?4294967296*e+(t>>>0):4294967296*(e>>>0)+(t>>>0)}function u(t,e,n){var i=e<=16383?1:e<=2097151?2:e<=268435455?3:Math.floor(Math.log(e)/(7*Math.LN2));n.realloc(i);for(var s=n.pos-1;s>=t;s--)n.buf[s+i]=n.buf[s]}function h(t,e){for(var n=0;n<t.length;n++)e.writeVarint(t[n])}function d(t,e){for(var n=0;n<t.length;n++)e.writeSVarint(t[n])}function _(t,e){for(var n=0;n<t.length;n++)e.writeFloat(t[n])}function p(t,e){for(var n=0;n<t.length;n++)e.writeDouble(t[n])}function f(t,e){for(var n=0;n<t.length;n++)e.writeBoolean(t[n])}function g(t,e){for(var n=0;n<t.length;n++)e.writeFixed32(t[n])}function m(t,e){for(var n=0;n<t.length;n++)e.writeSFixed32(t[n])}function y(t,e){for(var n=0;n<t.length;n++)e.writeFixed64(t[n])}function v(t,e){for(var n=0;n<t.length;n++)e.writeSFixed64(t[n])}function b(t,e){return(t[e]|t[e+1]<<8|t[e+2]<<16)+16777216*t[e+3]}function w(t,e,n){t[n]=e,t[n+1]=e>>>8,t[n+2]=e>>>16,t[n+3]=e>>>24}function E(t,e){return(t[e]|t[e+1]<<8|t[e+2]<<16)+(t[e+3]<<24)}s.prototype={destroy:function(){this.buf=null},readFields:function(t,e,n){for(n=n||this.length;this.pos<n;){var i=this.readVarint(),s=i>>3,r=this.pos;this.type=7&i,t(s,e,this),this.pos===r&&this.skip(i)}return e},readMessage:function(t,e){return this.readFields(t,e,this.readVarint()+this.pos)},readFixed32:function(){var t=b(this.buf,this.pos);return this.pos+=4,t},readSFixed32:function(){var t=E(this.buf,this.pos);return this.pos+=4,t},readFixed64:function(){var t=b(this.buf,this.pos)+b(this.buf,this.pos+4)*r;return this.pos+=8,t},readSFixed64:function(){var t=b(this.buf,this.pos)+E(this.buf,this.pos+4)*r;return this.pos+=8,t},readFloat:function(){var t=i.read(this.buf,this.pos,!0,23,4);return this.pos+=4,t},readDouble:function(){var t=i.read(this.buf,this.pos,!0,52,8);return this.pos+=8,t},readVarint:function(t){var e,n,i=this.buf;return e=127&(n=i[this.pos++]),n<128?e:(e|=(127&(n=i[this.pos++]))<<7,n<128?e:(e|=(127&(n=i[this.pos++]))<<14,n<128?e:(e|=(127&(n=i[this.pos++]))<<21,n<128?e:function(t,e,n){var i,s,r=n.buf;if(i=(112&(s=r[n.pos++]))>>4,s<128)return c(t,i,e);if(i|=(127&(s=r[n.pos++]))<<3,s<128)return c(t,i,e);if(i|=(127&(s=r[n.pos++]))<<10,s<128)return c(t,i,e);if(i|=(127&(s=r[n.pos++]))<<17,s<128)return c(t,i,e);if(i|=(127&(s=r[n.pos++]))<<24,s<128)return c(t,i,e);if(i|=(1&(s=r[n.pos++]))<<31,s<128)return c(t,i,e);throw new Error("Expected varint not more than 10 bytes")}(e|=(15&(n=i[this.pos]))<<28,t,this))))},readVarint64:function(){return this.readVarint(!0)},readSVarint:function(){var t=this.readVarint();return t%2==1?(t+1)/-2:t/2},readBoolean:function(){return Boolean(this.readVarint())},readString:function(){var t=this.readVarint()+this.pos,e=this.pos;return this.pos=t,t-e>=12&&a?function(t,e,n){return a.decode(t.subarray(e,n))}(this.buf,e,t):function(t,e,n){for(var i="",s=e;s<n;){var r,o,a,l=t[s],c=null,u=l>239?4:l>223?3:l>191?2:1;if(s+u>n)break;1===u?l<128&&(c=l):2===u?128==(192&(r=t[s+1]))&&(c=(31&l)<<6|63&r)<=127&&(c=null):3===u?(r=t[s+1],o=t[s+2],128==(192&r)&&128==(192&o)&&((c=(15&l)<<12|(63&r)<<6|63&o)<=2047||c>=55296&&c<=57343)&&(c=null)):4===u&&(r=t[s+1],o=t[s+2],a=t[s+3],128==(192&r)&&128==(192&o)&&128==(192&a)&&((c=(15&l)<<18|(63&r)<<12|(63&o)<<6|63&a)<=65535||c>=1114112)&&(c=null)),null===c?(c=65533,u=1):c>65535&&(c-=65536,i+=String.fromCharCode(c>>>10&1023|55296),c=56320|1023&c),i+=String.fromCharCode(c),s+=u}return i}(this.buf,e,t)},readBytes:function(){var t=this.readVarint()+this.pos,e=this.buf.subarray(this.pos,t);return this.pos=t,e},readPackedVarint:function(t,e){if(this.type!==s.Bytes)return t.push(this.readVarint(e));var n=l(this);for(t=t||[];this.pos<n;)t.push(this.readVarint(e));return t},readPackedSVarint:function(t){if(this.type!==s.Bytes)return t.push(this.readSVarint());var e=l(this);for(t=t||[];this.pos<e;)t.push(this.readSVarint());return t},readPackedBoolean:function(t){if(this.type!==s.Bytes)return t.push(this.readBoolean());var e=l(this);for(t=t||[];this.pos<e;)t.push(this.readBoolean());return t},readPackedFloat:function(t){if(this.type!==s.Bytes)return t.push(this.readFloat());var e=l(this);for(t=t||[];this.pos<e;)t.push(this.readFloat());return t},readPackedDouble:function(t){if(this.type!==s.Bytes)return t.push(this.readDouble());var e=l(this);for(t=t||[];this.pos<e;)t.push(this.readDouble());return t},readPackedFixed32:function(t){if(this.type!==s.Bytes)return t.push(this.readFixed32());var e=l(this);for(t=t||[];this.pos<e;)t.push(this.readFixed32());return t},readPackedSFixed32:function(t){if(this.type!==s.Bytes)return t.push(this.readSFixed32());var e=l(this);for(t=t||[];this.pos<e;)t.push(this.readSFixed32());return t},readPackedFixed64:function(t){if(this.type!==s.Bytes)return t.push(this.readFixed64());var e=l(this);for(t=t||[];this.pos<e;)t.push(this.readFixed64());return t},readPackedSFixed64:function(t){if(this.type!==s.Bytes)return t.push(this.readSFixed64());var e=l(this);for(t=t||[];this.pos<e;)t.push(this.readSFixed64());return t},skip:function(t){var e=7&t;if(e===s.Varint)for(;this.buf[this.pos++]>127;);else if(e===s.Bytes)this.pos=this.readVarint()+this.pos;else if(e===s.Fixed32)this.pos+=4;else{if(e!==s.Fixed64)throw new Error("Unimplemented type: "+e);this.pos+=8}},writeTag:function(t,e){this.writeVarint(t<<3|e)},realloc:function(t){for(var e=this.length||16;e<this.pos+t;)e*=2;if(e!==this.length){var n=new Uint8Array(e);n.set(this.buf),this.buf=n,this.length=e}},finish:function(){return this.length=this.pos,this.pos=0,this.buf.subarray(0,this.length)},writeFixed32:function(t){this.realloc(4),w(this.buf,t,this.pos),this.pos+=4},writeSFixed32:function(t){this.realloc(4),w(this.buf,t,this.pos),this.pos+=4},writeFixed64:function(t){this.realloc(8),w(this.buf,-1&t,this.pos),w(this.buf,Math.floor(t*o),this.pos+4),this.pos+=8},writeSFixed64:function(t){this.realloc(8),w(this.buf,-1&t,this.pos),w(this.buf,Math.floor(t*o),this.pos+4),this.pos+=8},writeVarint:function(t){(t=+t||0)>268435455||t<0?function(t,e){var n,i;if(t>=0?(n=t%4294967296|0,i=t/4294967296|0):(i=~(-t/4294967296),4294967295^(n=~(-t%4294967296))?n=n+1|0:(n=0,i=i+1|0)),t>=0x10000000000000000||t<-0x10000000000000000)throw new Error("Given varint doesn't fit into 10 bytes");e.realloc(10),function(t,e,n){n.buf[n.pos++]=127&t|128,t>>>=7,n.buf[n.pos++]=127&t|128,t>>>=7,n.buf[n.pos++]=127&t|128,t>>>=7,n.buf[n.pos++]=127&t|128,t>>>=7,n.buf[n.pos]=127&t}(n,0,e),function(t,e){var n=(7&t)<<4;e.buf[e.pos++]|=n|((t>>>=3)?128:0),t&&(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),t&&(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),t&&(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),t&&(e.buf[e.pos++]=127&t|((t>>>=7)?128:0),t&&(e.buf[e.pos++]=127&t)))))}(i,e)}(t,this):(this.realloc(4),this.buf[this.pos++]=127&t|(t>127?128:0),t<=127||(this.buf[this.pos++]=127&(t>>>=7)|(t>127?128:0),t<=127||(this.buf[this.pos++]=127&(t>>>=7)|(t>127?128:0),t<=127||(this.buf[this.pos++]=t>>>7&127))))},writeSVarint:function(t){this.writeVarint(t<0?2*-t-1:2*t)},writeBoolean:function(t){this.writeVarint(Boolean(t))},writeString:function(t){t=String(t),this.realloc(4*t.length),this.pos++;var e=this.pos;this.pos=function(t,e,n){for(var i,s,r=0;r<e.length;r++){if((i=e.charCodeAt(r))>55295&&i<57344){if(!s){i>56319||r+1===e.length?(t[n++]=239,t[n++]=191,t[n++]=189):s=i;continue}if(i<56320){t[n++]=239,t[n++]=191,t[n++]=189,s=i;continue}i=s-55296<<10|i-56320|65536,s=null}else s&&(t[n++]=239,t[n++]=191,t[n++]=189,s=null);i<128?t[n++]=i:(i<2048?t[n++]=i>>6|192:(i<65536?t[n++]=i>>12|224:(t[n++]=i>>18|240,t[n++]=i>>12&63|128),t[n++]=i>>6&63|128),t[n++]=63&i|128)}return n}(this.buf,t,this.pos);var n=this.pos-e;n>=128&&u(e,n,this),this.pos=e-1,this.writeVarint(n),this.pos+=n},writeFloat:function(t){this.realloc(4),i.write(this.buf,t,this.pos,!0,23,4),this.pos+=4},writeDouble:function(t){this.realloc(8),i.write(this.buf,t,this.pos,!0,52,8),this.pos+=8},writeBytes:function(t){var e=t.length;this.writeVarint(e),this.realloc(e);for(var n=0;n<e;n++)this.buf[this.pos++]=t[n]},writeRawMessage:function(t,e){this.pos++;var n=this.pos;t(e,this);var i=this.pos-n;i>=128&&u(n,i,this),this.pos=n-1,this.writeVarint(i),this.pos+=i},writeMessage:function(t,e,n){this.writeTag(t,s.Bytes),this.writeRawMessage(e,n)},writePackedVarint:function(t,e){e.length&&this.writeMessage(t,h,e)},writePackedSVarint:function(t,e){e.length&&this.writeMessage(t,d,e)},writePackedBoolean:function(t,e){e.length&&this.writeMessage(t,f,e)},writePackedFloat:function(t,e){e.length&&this.writeMessage(t,_,e)},writePackedDouble:function(t,e){e.length&&this.writeMessage(t,p,e)},writePackedFixed32:function(t,e){e.length&&this.writeMessage(t,g,e)},writePackedSFixed32:function(t,e){e.length&&this.writeMessage(t,m,e)},writePackedFixed64:function(t,e){e.length&&this.writeMessage(t,y,e)},writePackedSFixed64:function(t,e){e.length&&this.writeMessage(t,v,e)},writeBytesField:function(t,e){this.writeTag(t,s.Bytes),this.writeBytes(e)},writeFixed32Field:function(t,e){this.writeTag(t,s.Fixed32),this.writeFixed32(e)},writeSFixed32Field:function(t,e){this.writeTag(t,s.Fixed32),this.writeSFixed32(e)},writeFixed64Field:function(t,e){this.writeTag(t,s.Fixed64),this.writeFixed64(e)},writeSFixed64Field:function(t,e){this.writeTag(t,s.Fixed64),this.writeSFixed64(e)},writeVarintField:function(t,e){this.writeTag(t,s.Varint),this.writeVarint(e)},writeSVarintField:function(t,e){this.writeTag(t,s.Varint),this.writeSVarint(e)},writeStringField:function(t,e){this.writeTag(t,s.Bytes),this.writeString(e)},writeFloatField:function(t,e){this.writeTag(t,s.Fixed32),this.writeFloat(e)},writeDoubleField:function(t,e){this.writeTag(t,s.Fixed64),this.writeDouble(e)},writeBooleanField:function(t,e){this.writeVarintField(t,Boolean(e))}}},662:(t,e,n)=>{"use strict";t.exports=n.p+"ac952857b7bd9187e4ba.wasm"},6813:(t,e,n)=>{"use strict";n.d(e,{Z:()=>r});const i={1:"The view center is not defined",2:"The view resolution is not defined",3:"The view rotation is not defined",4:"`image` and `src` cannot be provided at the same time",5:"`imgSize` must be set when `image` is provided",7:"`format` must be set when `url` is set",8:"Unknown `serverType` configured",9:"`url` must be configured or set using `#setUrl()`",10:"The default `geometryFunction` can only handle `Point` geometries",11:"`options.featureTypes` must be an Array",12:"`options.geometryName` must also be provided when `options.bbox` is set",13:"Invalid corner",14:"Invalid color",15:"Tried to get a value for a key that does not exist in the cache",16:"Tried to set a value for a key that is used already",17:"`resolutions` must be sorted in descending order",18:"Either `origin` or `origins` must be configured, never both",19:"Number of `tileSizes` and `resolutions` must be equal",20:"Number of `origins` and `resolutions` must be equal",22:"Either `tileSize` or `tileSizes` must be configured, never both",24:"Invalid extent or geometry provided as `geometry`",25:"Cannot fit empty extent provided as `geometry`",26:"Features must have an id set",27:"Features must have an id set",28:'`renderMode` must be `"hybrid"` or `"vector"`',30:"The passed `feature` was already added to the source",31:"Tried to enqueue an `element` that was already added to the queue",32:"Transformation matrix cannot be inverted",33:"Invalid units",34:"Invalid geometry layout",36:"Unknown SRS type",37:"Unknown geometry type found",38:"`styleMapValue` has an unknown type",39:"Unknown geometry type",40:"Expected `feature` to have a geometry",41:"Expected an `ol/style/Style` or an array of `ol/style/Style.js`",42:"Question unknown, the answer is 42",43:"Expected `layers` to be an array or a `Collection`",47:"Expected `controls` to be an array or an `ol/Collection`",48:"Expected `interactions` to be an array or an `ol/Collection`",49:"Expected `overlays` to be an array or an `ol/Collection`",50:"`options.featureTypes` should be an Array",51:"Either `url` or `tileJSON` options must be provided",52:"Unknown `serverType` configured",53:"Unknown `tierSizeCalculation` configured",55:"The {-y} placeholder requires a tile grid with extent",56:"mapBrowserEvent must originate from a pointer event",57:"At least 2 conditions are required",59:"Invalid command found in the PBF",60:"Missing or invalid `size`",61:"Cannot determine IIIF Image API version from provided image information JSON",62:"A `WebGLArrayBuffer` must either be of type `ELEMENT_ARRAY_BUFFER` or `ARRAY_BUFFER`",64:"Layer opacity must be a number",66:"`forEachFeatureAtCoordinate` cannot be used on a WebGL layer if the hit detection logic has not been enabled. This is done by providing adequate shaders using the `hitVertexShader` and `hitFragmentShader` properties of `WebGLPointsLayerRenderer`",67:"A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both",68:"A VectorTile source can only be rendered if it has a projection compatible with the view projection",69:"`width` or `height` cannot be provided together with `scale`"};class s extends Error{constructor(t){const e=i[t];super(e),this.code=t,this.name="AssertionError",this.message=e}}const r=s},5431:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});const i=class{constructor(){this.disposed=!1}dispose(){this.disposed||(this.disposed=!0,this.disposeInternal())}disposeInternal(){}}},8096:(t,e,n)=>{"use strict";n.d(e,{K:()=>o});var i=n(5487),s=n(177),r=n(5818);function o(t,e,n){const o=t;let a=!0,l=!1,c=!1;const u=[(0,r.Vx)(o,i.Z.LOAD,(function(){c=!0,l||e()}))];return o.src&&s.Tp?(l=!0,o.decode().then((function(){a&&e()})).catch((function(t){a&&(c?e():n())}))):u.push((0,r.Vx)(o,i.Z.ERROR,n)),function(){a=!1,u.forEach(r.bN)}}},553:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});const i={IDLE:0,LOADING:1,LOADED:2,ERROR:3,EMPTY:4}},825:(t,e,n)=>{"use strict";n.d(e,{Z:()=>l});var i=n(4806),s=n(7195),r=n(8326),o=n(8096);class a extends i.Z{constructor(t,e,n,i,s,r){super(t,e,r),this.crossOrigin_=i,this.src_=n,this.key=n,this.image_=new Image,null!==i&&(this.image_.crossOrigin=i),this.unlisten_=null,this.tileLoadFunction_=s}getImage(){return this.image_}setImage(t){this.image_=t,this.state=s.Z.LOADED,this.unlistenImage_(),this.changed()}handleImageError_(){this.state=s.Z.ERROR,this.unlistenImage_(),this.image_=function(){const t=(0,r.E4)(1,1);return t.fillStyle="rgba(0,0,0,0)",t.fillRect(0,0,1,1),t.canvas}(),this.changed()}handleImageLoad_(){const t=this.image_;t.naturalWidth&&t.naturalHeight?this.state=s.Z.LOADED:this.state=s.Z.EMPTY,this.unlistenImage_(),this.changed()}load(){this.state==s.Z.ERROR&&(this.state=s.Z.IDLE,this.image_=new Image,null!==this.crossOrigin_&&(this.image_.crossOrigin=this.crossOrigin_)),this.state==s.Z.IDLE&&(this.state=s.Z.LOADING,this.changed(),this.tileLoadFunction_(this,this.src_),this.unlisten_=(0,o.K)(this.image_,this.handleImageLoad_.bind(this),this.handleImageError_.bind(this)))}unlistenImage_(){this.unlisten_&&(this.unlisten_(),this.unlisten_=null)}}const l=a},8854:(t,e,n)=>{"use strict";n.d(e,{Z:()=>$t});var i=n(2971),s=n(6813);const r="add",o="remove";var a=n(291);const l="length";class c extends a.ZP{constructor(t,e,n){super(t),this.element=e,this.index=n}}class u extends i.Z{constructor(t,e){if(super(),this.on,this.once,this.un,e=e||{},this.unique_=!!e.unique,this.array_=t||[],this.unique_)for(let t=0,e=this.array_.length;t<e;++t)this.assertUnique_(this.array_[t],t);this.updateLength_()}clear(){for(;this.getLength()>0;)this.pop()}extend(t){for(let e=0,n=t.length;e<n;++e)this.push(t[e]);return this}forEach(t){const e=this.array_;for(let n=0,i=e.length;n<i;++n)t(e[n],n,e)}getArray(){return this.array_}item(t){return this.array_[t]}getLength(){return this.get(l)}insertAt(t,e){if(t<0||t>this.getLength())throw new Error("Index out of bounds: "+t);this.unique_&&this.assertUnique_(e),this.array_.splice(t,0,e),this.updateLength_(),this.dispatchEvent(new c(r,e,t))}pop(){return this.removeAt(this.getLength()-1)}push(t){this.unique_&&this.assertUnique_(t);const e=this.getLength();return this.insertAt(e,t),this.getLength()}remove(t){const e=this.array_;for(let n=0,i=e.length;n<i;++n)if(e[n]===t)return this.removeAt(n)}removeAt(t){if(t<0||t>=this.getLength())return;const e=this.array_[t];return this.array_.splice(t,1),this.updateLength_(),this.dispatchEvent(new c(o,e,t)),e}setAt(t,e){if(t>=this.getLength())return void this.insertAt(t,e);if(t<0)throw new Error("Index out of bounds: "+t);this.unique_&&this.assertUnique_(e,t);const n=this.array_[t];this.array_[t]=e,this.dispatchEvent(new c(o,n,t)),this.dispatchEvent(new c(r,e,t))}updateLength_(){this.set(l,this.array_.length)}assertUnique_(t,e){for(let n=0,i=this.array_.length;n<i;++n)if(this.array_[n]===t&&n!==e)throw new s.Z(58)}}const h=u;var d=n(5431),_=n(6885),p=n(4187),f=n(6101),g=n(8641),m=n(2710),y=n(1295),v=n(1900);class b extends d.Z{constructor(t){super(),this.map_=t}dispatchRenderEvent(t,e){(0,p.O3)()}calculateMatrices2D(t){const e=t.viewState,n=t.coordinateToPixelTransform,i=t.pixelToCoordinateTransform;(0,f.qC)(n,t.size[0]/2,t.size[1]/2,1/e.resolution,-1/e.resolution,-e.rotation,-e.center[0],-e.center[1]),(0,f.nb)(i,n)}forEachFeatureAtCoordinate(t,e,n,i,s,r,o,a){let l;const c=e.viewState;function u(t,e,n,i){return s.call(r,e,t?n:null,i)}const h=c.projection,d=(0,v.Cf)(t.slice(),h),_=[[0,0]];if(h.canWrapX()&&i){const t=h.getExtent(),e=(0,g.dz)(t);_.push([-e,0],[e,0])}const p=e.layerStatesArray,f=p.length,m=[],b=[];for(let i=0;i<_.length;i++)for(let s=f-1;s>=0;--s){const r=p[s],h=r.layer;if(h.hasRenderer()&&(0,y.j)(r,c)&&o.call(a,h)){const s=h.getRenderer(),o=h.getSource();if(s&&o){const a=o.getWrapX()?d:t,c=u.bind(null,r.managed);b[0]=a[0]+_[i][0],b[1]=a[1]+_[i][1],l=s.forEachFeatureAtCoordinate(b,e,n,c,m)}if(l)return l}}if(0===m.length)return;const w=1/m.length;return m.forEach(((t,e)=>t.distanceSq+=e*w)),m.sort(((t,e)=>t.distanceSq-e.distanceSq)),m.some((t=>l=t.callback(t.feature,t.layer,t.geometry))),l}hasFeatureAtCoordinate(t,e,n,i,s,r){return void 0!==this.forEachFeatureAtCoordinate(t,e,n,i,_.uX,this,s,r)}getMap(){return this.map_}renderFrame(t){(0,p.O3)()}scheduleExpireIconCache(t){m.c.canExpireCache()&&t.postRenderFunctions.push(w)}}function w(t,e){m.c.expire()}const E=b;var x=n(5990),q=n(7380),T=n(8771),S=n(245),C=n(147),I=n(5818),A=n(8326);const k=class extends E{constructor(t){super(t),this.fontChangeListenerKey_=(0,I.oL)(C.sG,x.Z.PROPERTYCHANGE,t.redrawText.bind(t)),this.element_=document.createElement("div");const e=this.element_.style;e.position="absolute",e.width="100%",e.height="100%",e.zIndex="0",this.element_.className=S.XV+" ol-layers";const n=t.getViewport();n.insertBefore(this.element_,n.firstChild||null),this.children_=[],this.renderedVisible_=!0}dispatchRenderEvent(t,e){const n=this.getMap();if(n.hasListener(t)){const i=new q.Z(t,void 0,e);n.dispatchEvent(i)}}disposeInternal(){(0,I.bN)(this.fontChangeListenerKey_),this.element_.parentNode.removeChild(this.element_),super.disposeInternal()}renderFrame(t){if(!t)return void(this.renderedVisible_&&(this.element_.style.display="none",this.renderedVisible_=!1));this.calculateMatrices2D(t),this.dispatchRenderEvent(T.Z.PRECOMPOSE,t);const e=t.layerStatesArray.sort((function(t,e){return t.zIndex-e.zIndex})),n=t.viewState;this.children_.length=0;const i=[];let s=null;for(let r=0,o=e.length;r<o;++r){const o=e[r];t.layerIndex=r;const a=o.layer,l=a.getSourceState();if(!(0,y.j)(o,n)||"ready"!=l&&"undefined"!=l){a.unrender();continue}const c=a.render(t,s);c&&(c!==s&&(this.children_.push(c),s=c),"getDeclutter"in a&&i.push(a))}for(let e=i.length-1;e>=0;--e)i[e].renderDeclutter(t);(0,A.hF)(this.element_,this.children_),this.dispatchRenderEvent(T.Z.POSTCOMPOSE,t),this.renderedVisible_||(this.element_.style.display="",this.renderedVisible_=!0),this.scheduleExpireIconCache(t)}};var R=n(5487),P=n(947),F=n(9515),O=n(9374);class L extends a.ZP{constructor(t,e){super(t),this.layer=e}}const M="layers";class D extends P.Z{constructor(t){t=t||{};const e=Object.assign({},t);delete e.layers;let n=t.layers;super(e),this.on,this.once,this.un,this.layersListenerKeys_=[],this.listenerKeys_={},this.addChangeListener(M,this.handleLayersChanged_),n?Array.isArray(n)?n=new h(n.slice(),{unique:!0}):(0,F.h)("function"==typeof n.getArray,43):n=new h(void 0,{unique:!0}),this.setLayers(n)}handleLayerChange_(){this.changed()}handleLayersChanged_(){this.layersListenerKeys_.forEach(I.bN),this.layersListenerKeys_.length=0;const t=this.getLayers();this.layersListenerKeys_.push((0,I.oL)(t,r,this.handleLayersAdd_,this),(0,I.oL)(t,o,this.handleLayersRemove_,this));for(const t in this.listenerKeys_)this.listenerKeys_[t].forEach(I.bN);(0,O.Z)(this.listenerKeys_);const e=t.getArray();for(let t=0,n=e.length;t<n;t++){const n=e[t];this.registerLayerListeners_(n),this.dispatchEvent(new L("addlayer",n))}this.changed()}registerLayerListeners_(t){const e=[(0,I.oL)(t,x.Z.PROPERTYCHANGE,this.handleLayerChange_,this),(0,I.oL)(t,R.Z.CHANGE,this.handleLayerChange_,this)];t instanceof D&&e.push((0,I.oL)(t,"addlayer",this.handleLayerGroupAdd_,this),(0,I.oL)(t,"removelayer",this.handleLayerGroupRemove_,this)),this.listenerKeys_[(0,p.sq)(t)]=e}handleLayerGroupAdd_(t){this.dispatchEvent(new L("addlayer",t.layer))}handleLayerGroupRemove_(t){this.dispatchEvent(new L("removelayer",t.layer))}handleLayersAdd_(t){const e=t.element;this.registerLayerListeners_(e),this.dispatchEvent(new L("addlayer",e)),this.changed()}handleLayersRemove_(t){const e=t.element,n=(0,p.sq)(e);this.listenerKeys_[n].forEach(I.bN),delete this.listenerKeys_[n],this.dispatchEvent(new L("removelayer",e)),this.changed()}getLayers(){return this.get(M)}setLayers(t){const e=this.getLayers();if(e){const t=e.getArray();for(let e=0,n=t.length;e<n;++e)this.dispatchEvent(new L("removelayer",t[e]))}this.set(M,t)}getLayersArray(t){return t=void 0!==t?t:[],this.getLayers().forEach((function(e){e.getLayersArray(t)})),t}getLayerStatesArray(t){const e=void 0!==t?t:[],n=e.length;this.getLayers().forEach((function(t){t.getLayerStatesArray(e)}));const i=this.getLayerState();let s=i.zIndex;t||void 0!==i.zIndex||(s=0);for(let t=n,r=e.length;t<r;t++){const n=e[t];n.opacity*=i.opacity,n.visible=n.visible&&i.visible,n.maxResolution=Math.min(n.maxResolution,i.maxResolution),n.minResolution=Math.max(n.minResolution,i.minResolution),n.minZoom=Math.max(n.minZoom,i.minZoom),n.maxZoom=Math.min(n.maxZoom,i.maxZoom),void 0!==i.extent&&(void 0!==n.extent?n.extent=(0,g.Ed)(n.extent,i.extent):n.extent=i.extent),void 0===n.zIndex&&(n.zIndex=s)}return e}getSourceState(){return"ready"}}const N=D;class z extends a.ZP{constructor(t,e,n){super(t),this.map=e,this.frameState=void 0!==n?n:null}}const Z=z,j=class extends Z{constructor(t,e,n,i,s,r){super(t,e,s),this.originalEvent=n,this.pixel_=null,this.coordinate_=null,this.dragging=void 0!==i&&i,this.activePointers=r}get pixel(){return this.pixel_||(this.pixel_=this.map.getEventPixel(this.originalEvent)),this.pixel_}set pixel(t){this.pixel_=t}get coordinate(){return this.coordinate_||(this.coordinate_=this.map.getCoordinateFromPixel(this.pixel)),this.coordinate_}set coordinate(t){this.coordinate_=t}preventDefault(){super.preventDefault(),"preventDefault"in this.originalEvent&&this.originalEvent.preventDefault()}stopPropagation(){super.stopPropagation(),"stopPropagation"in this.originalEvent&&this.originalEvent.stopPropagation()}},U={SINGLECLICK:"singleclick",CLICK:R.Z.CLICK,DBLCLICK:R.Z.DBLCLICK,POINTERDRAG:"pointerdrag",POINTERMOVE:"pointermove",POINTERDOWN:"pointerdown",POINTERUP:"pointerup",POINTEROVER:"pointerover",POINTEROUT:"pointerout",POINTERENTER:"pointerenter",POINTERLEAVE:"pointerleave",POINTERCANCEL:"pointercancel"},B="pointerdown";var G=n(208),W=n(177);class V extends G.Z{constructor(t,e){super(t),this.map_=t,this.clickTimeoutId_,this.emulateClicks_=!1,this.dragging_=!1,this.dragListenerKeys_=[],this.moveTolerance_=void 0===e?1:e,this.down_=null;const n=this.map_.getViewport();this.activePointers_=[],this.trackedTouches_={},this.element_=n,this.pointerdownListenerKey_=(0,I.oL)(n,B,this.handlePointerDown_,this),this.originalPointerMoveEvent_,this.relayedListenerKey_=(0,I.oL)(n,"pointermove",this.relayMoveEvent_,this),this.boundHandleTouchMove_=this.handleTouchMove_.bind(this),this.element_.addEventListener(R.Z.TOUCHMOVE,this.boundHandleTouchMove_,!!W.bM&&{passive:!1})}emulateClick_(t){let e=new j(U.CLICK,this.map_,t);this.dispatchEvent(e),void 0!==this.clickTimeoutId_?(clearTimeout(this.clickTimeoutId_),this.clickTimeoutId_=void 0,e=new j(U.DBLCLICK,this.map_,t),this.dispatchEvent(e)):this.clickTimeoutId_=setTimeout((()=>{this.clickTimeoutId_=void 0;const e=new j(U.SINGLECLICK,this.map_,t);this.dispatchEvent(e)}),250)}updateActivePointers_(t){const e=t,n=e.pointerId;if(e.type==U.POINTERUP||e.type==U.POINTERCANCEL){delete this.trackedTouches_[n];for(const t in this.trackedTouches_)if(this.trackedTouches_[t].target!==e.target){delete this.trackedTouches_[t];break}}else e.type!=U.POINTERDOWN&&e.type!=U.POINTERMOVE||(this.trackedTouches_[n]=e);this.activePointers_=Object.values(this.trackedTouches_)}handlePointerUp_(t){this.updateActivePointers_(t);const e=new j(U.POINTERUP,this.map_,t,void 0,void 0,this.activePointers_);this.dispatchEvent(e),this.emulateClicks_&&!e.defaultPrevented&&!this.dragging_&&this.isMouseActionButton_(t)&&this.emulateClick_(this.down_),0===this.activePointers_.length&&(this.dragListenerKeys_.forEach(I.bN),this.dragListenerKeys_.length=0,this.dragging_=!1,this.down_=null)}isMouseActionButton_(t){return 0===t.button}handlePointerDown_(t){this.emulateClicks_=0===this.activePointers_.length,this.updateActivePointers_(t);const e=new j(U.POINTERDOWN,this.map_,t,void 0,void 0,this.activePointers_);this.dispatchEvent(e),this.down_={};for(const e in t){const n=t[e];this.down_[e]="function"==typeof n?_.Zn:n}if(0===this.dragListenerKeys_.length){const t=this.map_.getOwnerDocument();this.dragListenerKeys_.push((0,I.oL)(t,U.POINTERMOVE,this.handlePointerMove_,this),(0,I.oL)(t,U.POINTERUP,this.handlePointerUp_,this),(0,I.oL)(this.element_,U.POINTERCANCEL,this.handlePointerUp_,this)),this.element_.getRootNode&&this.element_.getRootNode()!==t&&this.dragListenerKeys_.push((0,I.oL)(this.element_.getRootNode(),U.POINTERUP,this.handlePointerUp_,this))}}handlePointerMove_(t){if(this.isMoving_(t)){this.updateActivePointers_(t),this.dragging_=!0;const e=new j(U.POINTERDRAG,this.map_,t,this.dragging_,void 0,this.activePointers_);this.dispatchEvent(e)}}relayMoveEvent_(t){this.originalPointerMoveEvent_=t;const e=!(!this.down_||!this.isMoving_(t));this.dispatchEvent(new j(U.POINTERMOVE,this.map_,t,e))}handleTouchMove_(t){const e=this.originalPointerMoveEvent_;e&&!e.defaultPrevented||"boolean"==typeof t.cancelable&&!0!==t.cancelable||t.preventDefault()}isMoving_(t){return this.dragging_||Math.abs(t.clientX-this.down_.clientX)>this.moveTolerance_||Math.abs(t.clientY-this.down_.clientY)>this.moveTolerance_}disposeInternal(){this.relayedListenerKey_&&((0,I.bN)(this.relayedListenerKey_),this.relayedListenerKey_=null),this.element_.removeEventListener(R.Z.TOUCHMOVE,this.boundHandleTouchMove_),this.pointerdownListenerKey_&&((0,I.bN)(this.pointerdownListenerKey_),this.pointerdownListenerKey_=null),this.dragListenerKeys_.forEach(I.bN),this.dragListenerKeys_.length=0,this.element_=null,super.disposeInternal()}}const K=V,H="postrender",Q="loadstart",X="loadend",Y="layergroup",$="size",J="target",tt="view",et=1/0,nt=class{constructor(t,e){this.priorityFunction_=t,this.keyFunction_=e,this.elements_=[],this.priorities_=[],this.queuedElements_={}}clear(){this.elements_.length=0,this.priorities_.length=0,(0,O.Z)(this.queuedElements_)}dequeue(){const t=this.elements_,e=this.priorities_,n=t[0];1==t.length?(t.length=0,e.length=0):(t[0]=t.pop(),e[0]=e.pop(),this.siftUp_(0));const i=this.keyFunction_(n);return delete this.queuedElements_[i],n}enqueue(t){(0,F.h)(!(this.keyFunction_(t)in this.queuedElements_),31);const e=this.priorityFunction_(t);return e!=et&&(this.elements_.push(t),this.priorities_.push(e),this.queuedElements_[this.keyFunction_(t)]=!0,this.siftDown_(0,this.elements_.length-1),!0)}getCount(){return this.elements_.length}getLeftChildIndex_(t){return 2*t+1}getRightChildIndex_(t){return 2*t+2}getParentIndex_(t){return t-1>>1}heapify_(){let t;for(t=(this.elements_.length>>1)-1;t>=0;t--)this.siftUp_(t)}isEmpty(){return 0===this.elements_.length}isKeyQueued(t){return t in this.queuedElements_}isQueued(t){return this.isKeyQueued(this.keyFunction_(t))}siftUp_(t){const e=this.elements_,n=this.priorities_,i=e.length,s=e[t],r=n[t],o=t;for(;t<i>>1;){const s=this.getLeftChildIndex_(t),r=this.getRightChildIndex_(t),o=r<i&&n[r]<n[s]?r:s;e[t]=e[o],n[t]=n[o],t=o}e[t]=s,n[t]=r,this.siftDown_(o,t)}siftDown_(t,e){const n=this.elements_,i=this.priorities_,s=n[e],r=i[e];for(;e>t;){const t=this.getParentIndex_(e);if(!(i[t]>r))break;n[e]=n[t],i[e]=i[t],e=t}n[e]=s,i[e]=r}reprioritize(){const t=this.priorityFunction_,e=this.elements_,n=this.priorities_;let i=0;const s=e.length;let r,o,a;for(o=0;o<s;++o)r=e[o],a=t(r),a==et?delete this.queuedElements_[this.keyFunction_(r)]:(n[i]=a,e[i++]=r);e.length=i,n.length=i,this.heapify_()}};var it=n(7195);const st=class extends nt{constructor(t,e){super((function(e){return t.apply(null,e)}),(function(t){return t[0].getKey()})),this.boundHandleTileChange_=this.handleTileChange.bind(this),this.tileChangeCallback_=e,this.tilesLoading_=0,this.tilesLoadingKeys_={}}enqueue(t){const e=super.enqueue(t);return e&&t[0].addEventListener(R.Z.CHANGE,this.boundHandleTileChange_),e}getTilesLoading(){return this.tilesLoading_}handleTileChange(t){const e=t.target,n=e.getState();if(n===it.Z.LOADED||n===it.Z.ERROR||n===it.Z.EMPTY){n!==it.Z.ERROR&&e.removeEventListener(R.Z.CHANGE,this.boundHandleTileChange_);const t=e.getKey();t in this.tilesLoadingKeys_&&(delete this.tilesLoadingKeys_[t],--this.tilesLoading_),this.tileChangeCallback_()}}loadMoreTiles(t,e){let n,i,s,r=0;for(;this.tilesLoading_<t&&r<e&&this.getCount()>0;)i=this.dequeue()[0],s=i.getKey(),n=i.getState(),n!==it.Z.IDLE||s in this.tilesLoadingKeys_||(this.tilesLoadingKeys_[s]=!0,++this.tilesLoading_,++r,i.load())}};var rt=n(9090),ot=n(7755);class at extends i.Z{constructor(t){super();const e=t.element;!e||t.target||e.style.pointerEvents||(e.style.pointerEvents="auto"),this.element=e||null,this.target_=null,this.map_=null,this.listenerKeys=[],t.render&&(this.render=t.render),t.target&&this.setTarget(t.target)}disposeInternal(){(0,A.ZF)(this.element),super.disposeInternal()}getMap(){return this.map_}setMap(t){this.map_&&(0,A.ZF)(this.element);for(let t=0,e=this.listenerKeys.length;t<e;++t)(0,I.bN)(this.listenerKeys[t]);this.listenerKeys.length=0,this.map_=t,t&&((this.target_?this.target_:t.getOverlayContainerStopEvent()).appendChild(this.element),this.render!==_.Zn&&this.listenerKeys.push((0,I.oL)(t,H,this.render,this)),t.render())}render(t){}setTarget(t){this.target_="string"==typeof t?document.getElementById(t):t}}const lt=at;var ct=n(5537);const ut=class extends lt{constructor(t){t=t||{},super({element:document.createElement("div"),render:t.render,target:t.target}),this.ulElement_=document.createElement("ul"),this.collapsed_=void 0===t.collapsed||t.collapsed,this.userCollapsed_=this.collapsed_,this.overrideCollapsible_=void 0!==t.collapsible,this.collapsible_=void 0===t.collapsible||t.collapsible,this.collapsible_||(this.collapsed_=!1);const e=void 0!==t.className?t.className:"ol-attribution",n=void 0!==t.tipLabel?t.tipLabel:"Attributions",i=void 0!==t.expandClassName?t.expandClassName:e+"-expand",s=void 0!==t.collapseLabel?t.collapseLabel:"›",r=void 0!==t.collapseClassName?t.collapseClassName:e+"-collapse";"string"==typeof s?(this.collapseLabel_=document.createElement("span"),this.collapseLabel_.textContent=s,this.collapseLabel_.className=r):this.collapseLabel_=s;const o=void 0!==t.label?t.label:"i";"string"==typeof o?(this.label_=document.createElement("span"),this.label_.textContent=o,this.label_.className=i):this.label_=o;const a=this.collapsible_&&!this.collapsed_?this.collapseLabel_:this.label_;this.toggleButton_=document.createElement("button"),this.toggleButton_.setAttribute("type","button"),this.toggleButton_.setAttribute("aria-expanded",String(!this.collapsed_)),this.toggleButton_.title=n,this.toggleButton_.appendChild(a),this.toggleButton_.addEventListener(R.Z.CLICK,this.handleClick_.bind(this),!1);const l=e+" "+S.XV+" "+S.hg+(this.collapsed_&&this.collapsible_?" "+S.hN:"")+(this.collapsible_?"":" ol-uncollapsible"),c=this.element;c.className=l,c.appendChild(this.toggleButton_),c.appendChild(this.ulElement_),this.renderedAttributions_=[],this.renderedVisible_=!0}collectSourceAttributions_(t){const e={},n=[];let i=!0;const s=t.layerStatesArray;for(let r=0,o=s.length;r<o;++r){const o=s[r];if(!(0,y.j)(o,t.viewState))continue;const a=o.layer.getSource();if(!a)continue;const l=a.getAttributions();if(!l)continue;const c=l(t);if(c)if(i=i&&!1!==a.getAttributionsCollapsible(),Array.isArray(c))for(let t=0,i=c.length;t<i;++t)c[t]in e||(n.push(c[t]),e[c[t]]=!0);else c in e||(n.push(c),e[c]=!0)}return this.overrideCollapsible_||this.setCollapsible(i),n}updateElement_(t){if(!t)return void(this.renderedVisible_&&(this.element.style.display="none",this.renderedVisible_=!1));const e=this.collectSourceAttributions_(t),n=e.length>0;if(this.renderedVisible_!=n&&(this.element.style.display=n?"":"none",this.renderedVisible_=n),!(0,ct.fS)(e,this.renderedAttributions_)){(0,A.ep)(this.ulElement_);for(let t=0,n=e.length;t<n;++t){const n=document.createElement("li");n.innerHTML=e[t],this.ulElement_.appendChild(n)}this.renderedAttributions_=e}}handleClick_(t){t.preventDefault(),this.handleToggle_(),this.userCollapsed_=this.collapsed_}handleToggle_(){this.element.classList.toggle(S.hN),this.collapsed_?(0,A.$H)(this.collapseLabel_,this.label_):(0,A.$H)(this.label_,this.collapseLabel_),this.collapsed_=!this.collapsed_,this.toggleButton_.setAttribute("aria-expanded",String(!this.collapsed_))}getCollapsible(){return this.collapsible_}setCollapsible(t){this.collapsible_!==t&&(this.collapsible_=t,this.element.classList.toggle("ol-uncollapsible"),this.userCollapsed_&&this.handleToggle_())}setCollapsed(t){this.userCollapsed_=t,this.collapsible_&&this.collapsed_!==t&&this.handleToggle_()}getCollapsed(){return this.collapsed_}render(t){this.updateElement_(t.frameState)}};var ht=n(1015);const dt=class extends lt{constructor(t){t=t||{},super({element:document.createElement("div"),render:t.render,target:t.target});const e=void 0!==t.className?t.className:"ol-rotate",n=void 0!==t.label?t.label:"⇧",i=void 0!==t.compassClassName?t.compassClassName:"ol-compass";this.label_=null,"string"==typeof n?(this.label_=document.createElement("span"),this.label_.className=i,this.label_.textContent=n):(this.label_=n,this.label_.classList.add(i));const s=t.tipLabel?t.tipLabel:"Reset rotation",r=document.createElement("button");r.className=e+"-reset",r.setAttribute("type","button"),r.title=s,r.appendChild(this.label_),r.addEventListener(R.Z.CLICK,this.handleClick_.bind(this),!1);const o=e+" "+S.XV+" "+S.hg,a=this.element;a.className=o,a.appendChild(r),this.callResetNorth_=t.resetNorth?t.resetNorth:void 0,this.duration_=void 0!==t.duration?t.duration:250,this.autoHide_=void 0===t.autoHide||t.autoHide,this.rotation_=void 0,this.autoHide_&&this.element.classList.add(S.oj)}handleClick_(t){t.preventDefault(),void 0!==this.callResetNorth_?this.callResetNorth_():this.resetNorth_()}resetNorth_(){const t=this.getMap().getView();if(!t)return;const e=t.getRotation();void 0!==e&&(this.duration_>0&&e%(2*Math.PI)!=0?t.animate({rotation:0,duration:this.duration_,easing:ht.Vv}):t.setRotation(0))}render(t){const e=t.frameState;if(!e)return;const n=e.viewState.rotation;if(n!=this.rotation_){const t="rotate("+n+"rad)";if(this.autoHide_){const t=this.element.classList.contains(S.oj);t||0!==n?t&&0!==n&&this.element.classList.remove(S.oj):this.element.classList.add(S.oj)}this.label_.style.transform=t}this.rotation_=n}},_t=class extends lt{constructor(t){t=t||{},super({element:document.createElement("div"),target:t.target});const e=void 0!==t.className?t.className:"ol-zoom",n=void 0!==t.delta?t.delta:1,i=void 0!==t.zoomInClassName?t.zoomInClassName:e+"-in",s=void 0!==t.zoomOutClassName?t.zoomOutClassName:e+"-out",r=void 0!==t.zoomInLabel?t.zoomInLabel:"+",o=void 0!==t.zoomOutLabel?t.zoomOutLabel:"–",a=void 0!==t.zoomInTipLabel?t.zoomInTipLabel:"Zoom in",l=void 0!==t.zoomOutTipLabel?t.zoomOutTipLabel:"Zoom out",c=document.createElement("button");c.className=i,c.setAttribute("type","button"),c.title=a,c.appendChild("string"==typeof r?document.createTextNode(r):r),c.addEventListener(R.Z.CLICK,this.handleClick_.bind(this,n),!1);const u=document.createElement("button");u.className=s,u.setAttribute("type","button"),u.title=l,u.appendChild("string"==typeof o?document.createTextNode(o):o),u.addEventListener(R.Z.CLICK,this.handleClick_.bind(this,-n),!1);const h=e+" "+S.XV+" "+S.hg,d=this.element;d.className=h,d.appendChild(c),d.appendChild(u),this.duration_=void 0!==t.duration?t.duration:250}handleClick_(t,e){e.preventDefault(),this.zoomByDelta_(t)}zoomByDelta_(t){const e=this.getMap().getView();if(!e)return;const n=e.getZoom();if(void 0!==n){const i=e.getConstrainedZoom(n+t);this.duration_>0?(e.getAnimating()&&e.cancelAnimations(),e.animate({zoom:i,duration:this.duration_,easing:ht.Vv})):e.setZoom(i)}}},pt="active";class ft extends i.Z{constructor(t){super(),this.on,this.once,this.un,t&&t.handleEvent&&(this.handleEvent=t.handleEvent),this.map_=null,this.setActive(!0)}getActive(){return this.get(pt)}getMap(){return this.map_}handleEvent(t){return!0}setActive(t){this.set(pt,t)}setMap(t){this.map_=t}}function gt(t,e,n,i){const s=t.getZoom();if(void 0===s)return;const r=t.getConstrainedZoom(s+e),o=t.getResolutionForZoom(r);t.getAnimating()&&t.cancelAnimations(),t.animate({resolution:o,anchor:n,duration:void 0!==i?i:250,easing:ht.Vv})}const mt=ft,yt=class extends mt{constructor(t){super(),t=t||{},this.delta_=t.delta?t.delta:1,this.duration_=void 0!==t.duration?t.duration:250}handleEvent(t){let e=!1;if(t.type==U.DBLCLICK){const n=t.originalEvent,i=t.map,s=t.coordinate,r=n.shiftKey?-this.delta_:this.delta_;gt(i.getView(),r,s,this.duration_),n.preventDefault(),e=!0}return!e}};function vt(t){const e=t.length;let n=0,i=0;for(let s=0;s<e;s++)n+=t[s].clientX,i+=t[s].clientY;return{clientX:n/e,clientY:i/e}}const bt=class extends mt{constructor(t){super(t=t||{}),t.handleDownEvent&&(this.handleDownEvent=t.handleDownEvent),t.handleDragEvent&&(this.handleDragEvent=t.handleDragEvent),t.handleMoveEvent&&(this.handleMoveEvent=t.handleMoveEvent),t.handleUpEvent&&(this.handleUpEvent=t.handleUpEvent),t.stopDown&&(this.stopDown=t.stopDown),this.handlingDownUpSequence=!1,this.targetPointers=[]}getPointerCount(){return this.targetPointers.length}handleDownEvent(t){return!1}handleDragEvent(t){}handleEvent(t){if(!t.originalEvent)return!0;let e=!1;if(this.updateTrackedPointers_(t),this.handlingDownUpSequence){if(t.type==U.POINTERDRAG)this.handleDragEvent(t),t.originalEvent.preventDefault();else if(t.type==U.POINTERUP){const e=this.handleUpEvent(t);this.handlingDownUpSequence=e&&this.targetPointers.length>0}}else if(t.type==U.POINTERDOWN){const n=this.handleDownEvent(t);this.handlingDownUpSequence=n,e=this.stopDown(n)}else t.type==U.POINTERMOVE&&this.handleMoveEvent(t);return!e}handleMoveEvent(t){}handleUpEvent(t){return!1}stopDown(t){return t}updateTrackedPointers_(t){t.activePointers&&(this.targetPointers=t.activePointers)}};function wt(t){const e=arguments;return function(t){let n=!0;for(let i=0,s=e.length;i<s&&(n=n&&e[i](t),n);++i);return n}}const Et=function(t){const e=t.originalEvent;return e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},xt=function(t){return!t.map.getTargetElement().hasAttribute("tabindex")||function(t){const e=t.map.getTargetElement(),n=t.map.getOwnerDocument().activeElement;return e.contains(n)}(t)},qt=_.uX,Tt=function(t){const e=t.originalEvent;return 0==e.button&&!(W.G$&&W.tK&&e.ctrlKey)},St=function(t){const e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&!e.shiftKey},Ct=function(t){const e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},It=function(t){const e=t.originalEvent,n=e.target.tagName;return"INPUT"!==n&&"SELECT"!==n&&"TEXTAREA"!==n&&!e.target.isContentEditable},At=function(t){const e=t.originalEvent;return(0,F.h)(void 0!==e,56),"mouse"==e.pointerType},kt=function(t){const e=t.originalEvent;return(0,F.h)(void 0!==e,56),e.isPrimary&&0===e.button},Rt=class extends bt{constructor(t){super({stopDown:_.Dv}),t=t||{},this.kinetic_=t.kinetic,this.lastCentroid=null,this.lastPointersCount_,this.panning_=!1;const e=t.condition?t.condition:wt(St,kt);this.condition_=t.onFocusOnly?wt(xt,e):e,this.noKinetic_=!1}handleDragEvent(t){const e=t.map;this.panning_||(this.panning_=!0,e.getView().beginInteraction());const n=this.targetPointers,i=e.getEventPixel(vt(n));if(n.length==this.lastPointersCount_){if(this.kinetic_&&this.kinetic_.update(i[0],i[1]),this.lastCentroid){const e=[this.lastCentroid[0]-i[0],i[1]-this.lastCentroid[1]],n=t.map.getView();(0,v.bA)(e,n.getResolution()),(0,v.U1)(e,n.getRotation()),n.adjustCenterInternal(e)}}else this.kinetic_&&this.kinetic_.begin();this.lastCentroid=i,this.lastPointersCount_=n.length,t.originalEvent.preventDefault()}handleUpEvent(t){const e=t.map,n=e.getView();if(0===this.targetPointers.length){if(!this.noKinetic_&&this.kinetic_&&this.kinetic_.end()){const t=this.kinetic_.getDistance(),i=this.kinetic_.getAngle(),s=n.getCenterInternal(),r=e.getPixelFromCoordinateInternal(s),o=e.getCoordinateFromPixelInternal([r[0]-t*Math.cos(i),r[1]-t*Math.sin(i)]);n.animateInternal({center:n.getConstrainedCenter(o),duration:500,easing:ht.Vv})}return this.panning_&&(this.panning_=!1,n.endInteraction()),!1}return this.kinetic_&&this.kinetic_.begin(),this.lastCentroid=null,!0}handleDownEvent(t){if(this.targetPointers.length>0&&this.condition_(t)){const e=t.map.getView();return this.lastCentroid=null,e.getAnimating()&&e.cancelAnimations(),this.kinetic_&&this.kinetic_.begin(),this.noKinetic_=this.targetPointers.length>1,!0}return!1}};var Pt=n(828);const Ft=class extends bt{constructor(t){t=t||{},super({stopDown:_.Dv}),this.condition_=t.condition?t.condition:Et,this.lastAngle_=void 0,this.duration_=void 0!==t.duration?t.duration:250}handleDragEvent(t){if(!At(t))return;const e=t.map,n=e.getView();if(n.getConstraints().rotation===Pt.h$)return;const i=e.getSize(),s=t.pixel,r=Math.atan2(i[1]/2-s[1],s[0]-i[0]/2);if(void 0!==this.lastAngle_){const t=r-this.lastAngle_;n.adjustRotationInternal(-t)}this.lastAngle_=r}handleUpEvent(t){return!At(t)||(t.map.getView().endInteraction(this.duration_),!1)}handleDownEvent(t){return!!At(t)&&(!(!Tt(t)||!this.condition_(t))&&(t.map.getView().beginInteraction(),this.lastAngle_=void 0,!0))}};var Ot=n(1082);class Lt extends d.Z{constructor(t){super(),this.geometry_=null,this.element_=document.createElement("div"),this.element_.style.position="absolute",this.element_.style.pointerEvents="auto",this.element_.className="ol-box "+t,this.map_=null,this.startPixel_=null,this.endPixel_=null}disposeInternal(){this.setMap(null)}render_(){const t=this.startPixel_,e=this.endPixel_,n="px",i=this.element_.style;i.left=Math.min(t[0],e[0])+n,i.top=Math.min(t[1],e[1])+n,i.width=Math.abs(e[0]-t[0])+n,i.height=Math.abs(e[1]-t[1])+n}setMap(t){if(this.map_){this.map_.getOverlayContainer().removeChild(this.element_);const t=this.element_.style;t.left="inherit",t.top="inherit",t.width="inherit",t.height="inherit"}this.map_=t,this.map_&&this.map_.getOverlayContainer().appendChild(this.element_)}setPixels(t,e){this.startPixel_=t,this.endPixel_=e,this.createOrUpdateGeometry(),this.render_()}createOrUpdateGeometry(){const t=this.startPixel_,e=this.endPixel_,n=[t,[t[0],e[1]],e,[e[0],t[1]]].map(this.map_.getCoordinateFromPixelInternal,this.map_);n[4]=n[0].slice(),this.geometry_?this.geometry_.setCoordinates([n]):this.geometry_=new Ot.ZP([n])}getGeometry(){return this.geometry_}}const Mt=Lt;class Dt extends a.ZP{constructor(t,e,n){super(t),this.coordinate=e,this.mapBrowserEvent=n}}const Nt=class extends bt{constructor(t){super(),this.on,this.once,this.un,t=t||{},this.box_=new Mt(t.className||"ol-dragbox"),this.minArea_=void 0!==t.minArea?t.minArea:64,t.onBoxEnd&&(this.onBoxEnd=t.onBoxEnd),this.startPixel_=null,this.condition_=t.condition?t.condition:Tt,this.boxEndCondition_=t.boxEndCondition?t.boxEndCondition:this.defaultBoxEndCondition}defaultBoxEndCondition(t,e,n){const i=n[0]-e[0],s=n[1]-e[1];return i*i+s*s>=this.minArea_}getGeometry(){return this.box_.getGeometry()}handleDragEvent(t){this.box_.setPixels(this.startPixel_,t.pixel),this.dispatchEvent(new Dt("boxdrag",t.coordinate,t))}handleUpEvent(t){this.box_.setMap(null);const e=this.boxEndCondition_(t,this.startPixel_,t.pixel);return e&&this.onBoxEnd(t),this.dispatchEvent(new Dt(e?"boxend":"boxcancel",t.coordinate,t)),!1}handleDownEvent(t){return!!this.condition_(t)&&(this.startPixel_=t.pixel,this.box_.setMap(t.map),this.box_.setPixels(this.startPixel_,this.startPixel_),this.dispatchEvent(new Dt("boxstart",t.coordinate,t)),!0)}onBoxEnd(t){}},zt=class extends Nt{constructor(t){super({condition:(t=t||{}).condition?t.condition:Ct,className:t.className||"ol-dragzoom",minArea:t.minArea}),this.duration_=void 0!==t.duration?t.duration:200,this.out_=void 0!==t.out&&t.out}onBoxEnd(t){const e=this.getMap().getView();let n=this.getGeometry();if(this.out_){const t=e.rotatedExtentForGeometry(n),i=e.getResolutionForExtentInternal(t),s=e.getResolution()/i;n=n.clone(),n.scale(s*s)}e.fitInternal(n,{duration:this.duration_,easing:ht.Vv})}},Zt=class extends mt{constructor(t){super(),t=t||{},this.defaultCondition_=function(t){return St(t)&&It(t)},this.condition_=void 0!==t.condition?t.condition:this.defaultCondition_,this.duration_=void 0!==t.duration?t.duration:100,this.pixelDelta_=void 0!==t.pixelDelta?t.pixelDelta:128}handleEvent(t){let e=!1;if(t.type==R.Z.KEYDOWN){const n=t.originalEvent,i=n.keyCode;if(this.condition_(t)&&(40==i||37==i||39==i||38==i)){const s=t.map.getView(),r=s.getResolution()*this.pixelDelta_;let o=0,a=0;40==i?a=-r:37==i?o=-r:39==i?o=r:a=r;const l=[o,a];(0,v.U1)(l,s.getRotation()),function(t,e,n){const i=t.getCenterInternal();if(i){const s=[i[0]+e[0],i[1]+e[1]];t.animateInternal({duration:void 0!==n?n:250,easing:ht.GE,center:t.getConstrainedCenter(s)})}}(s,l,this.duration_),n.preventDefault(),e=!0}}return!e}},jt=class extends mt{constructor(t){super(),t=t||{},this.condition_=t.condition?t.condition:It,this.delta_=t.delta?t.delta:1,this.duration_=void 0!==t.duration?t.duration:100}handleEvent(t){let e=!1;if(t.type==R.Z.KEYDOWN||t.type==R.Z.KEYPRESS){const n=t.originalEvent,i=n.charCode;if(this.condition_(t)&&(i=="+".charCodeAt(0)||i=="-".charCodeAt(0))){const s=t.map,r=i=="+".charCodeAt(0)?this.delta_:-this.delta_;gt(s.getView(),r,void 0,this.duration_),n.preventDefault(),e=!0}}return!e}};var Ut=n(3983);const Bt=class extends mt{constructor(t){super(t=t||{}),this.totalDelta_=0,this.lastDelta_=0,this.maxDelta_=void 0!==t.maxDelta?t.maxDelta:1,this.duration_=void 0!==t.duration?t.duration:250,this.timeout_=void 0!==t.timeout?t.timeout:80,this.useAnchor_=void 0===t.useAnchor||t.useAnchor,this.constrainResolution_=void 0!==t.constrainResolution&&t.constrainResolution;const e=t.condition?t.condition:qt;this.condition_=t.onFocusOnly?wt(xt,e):e,this.lastAnchor_=null,this.startTime_=void 0,this.timeoutId_,this.mode_=void 0,this.trackpadEventGap_=400,this.trackpadTimeoutId_,this.deltaPerZoom_=300}endInteraction_(){this.trackpadTimeoutId_=void 0;const t=this.getMap();t&&t.getView().endInteraction(void 0,this.lastDelta_?this.lastDelta_>0?1:-1:0,this.lastAnchor_)}handleEvent(t){if(!this.condition_(t))return!0;if(t.type!==R.Z.WHEEL)return!0;const e=t.map,n=t.originalEvent;let i;if(n.preventDefault(),this.useAnchor_&&(this.lastAnchor_=t.coordinate),t.type==R.Z.WHEEL&&(i=n.deltaY,W.V&&n.deltaMode===WheelEvent.DOM_DELTA_PIXEL&&(i/=W.MP),n.deltaMode===WheelEvent.DOM_DELTA_LINE&&(i*=40)),0===i)return!1;this.lastDelta_=i;const s=Date.now();void 0===this.startTime_&&(this.startTime_=s),(!this.mode_||s-this.startTime_>this.trackpadEventGap_)&&(this.mode_=Math.abs(i)<4?"trackpad":"wheel");const r=e.getView();if("trackpad"===this.mode_&&!r.getConstrainResolution()&&!this.constrainResolution_)return this.trackpadTimeoutId_?clearTimeout(this.trackpadTimeoutId_):(r.getAnimating()&&r.cancelAnimations(),r.beginInteraction()),this.trackpadTimeoutId_=setTimeout(this.endInteraction_.bind(this),this.timeout_),r.adjustZoom(-i/this.deltaPerZoom_,this.lastAnchor_),this.startTime_=s,!1;this.totalDelta_+=i;const o=Math.max(this.timeout_-(s-this.startTime_),0);return clearTimeout(this.timeoutId_),this.timeoutId_=setTimeout(this.handleWheelZoom_.bind(this,e),o),!1}handleWheelZoom_(t){const e=t.getView();e.getAnimating()&&e.cancelAnimations();let n=-(0,Ut.uZ)(this.totalDelta_,-this.maxDelta_*this.deltaPerZoom_,this.maxDelta_*this.deltaPerZoom_)/this.deltaPerZoom_;(e.getConstrainResolution()||this.constrainResolution_)&&(n=n?n>0?1:-1:0),gt(e,n,this.lastAnchor_,this.duration_),this.mode_=void 0,this.totalDelta_=0,this.lastAnchor_=null,this.startTime_=void 0,this.timeoutId_=void 0}setMouseAnchor(t){this.useAnchor_=t,t||(this.lastAnchor_=null)}},Gt=class extends bt{constructor(t){const e=t=t||{};e.stopDown||(e.stopDown=_.Dv),super(e),this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.threshold_=void 0!==t.threshold?t.threshold:.3,this.duration_=void 0!==t.duration?t.duration:250}handleDragEvent(t){let e=0;const n=this.targetPointers[0],i=this.targetPointers[1],s=Math.atan2(i.clientY-n.clientY,i.clientX-n.clientX);if(void 0!==this.lastAngle_){const t=s-this.lastAngle_;this.rotationDelta_+=t,!this.rotating_&&Math.abs(this.rotationDelta_)>this.threshold_&&(this.rotating_=!0),e=t}this.lastAngle_=s;const r=t.map,o=r.getView();o.getConstraints().rotation!==Pt.h$&&(this.anchor_=r.getCoordinateFromPixelInternal(r.getEventPixel(vt(this.targetPointers))),this.rotating_&&(r.render(),o.adjustRotationInternal(e,this.anchor_)))}handleUpEvent(t){return!(this.targetPointers.length<2)||(t.map.getView().endInteraction(this.duration_),!1)}handleDownEvent(t){if(this.targetPointers.length>=2){const e=t.map;return this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.handlingDownUpSequence||e.getView().beginInteraction(),!0}return!1}},Wt=class extends bt{constructor(t){const e=t=t||{};e.stopDown||(e.stopDown=_.Dv),super(e),this.anchor_=null,this.duration_=void 0!==t.duration?t.duration:400,this.lastDistance_=void 0,this.lastScaleDelta_=1}handleDragEvent(t){let e=1;const n=this.targetPointers[0],i=this.targetPointers[1],s=n.clientX-i.clientX,r=n.clientY-i.clientY,o=Math.sqrt(s*s+r*r);void 0!==this.lastDistance_&&(e=this.lastDistance_/o),this.lastDistance_=o;const a=t.map,l=a.getView();1!=e&&(this.lastScaleDelta_=e),this.anchor_=a.getCoordinateFromPixelInternal(a.getEventPixel(vt(this.targetPointers))),a.render(),l.adjustResolutionInternal(e,this.anchor_)}handleUpEvent(t){if(this.targetPointers.length<2){const e=t.map.getView(),n=this.lastScaleDelta_>1?1:-1;return e.endInteraction(this.duration_,n),!1}return!0}handleDownEvent(t){if(this.targetPointers.length>=2){const e=t.map;return this.anchor_=null,this.lastDistance_=void 0,this.lastScaleDelta_=1,this.handlingDownUpSequence||e.getView().beginInteraction(),!0}return!1}};var Vt=n(8661),Kt=n(4307),Ht=n(44);function Qt(t){t instanceof y.Z?t.setMapInternal(null):t instanceof N&&t.getLayers().forEach(Qt)}function Xt(t,e){if(t instanceof y.Z)t.setMapInternal(e);else if(t instanceof N){const n=t.getLayers().getArray();for(let t=0,i=n.length;t<i;++t)Xt(n[t],e)}}class Yt extends i.Z{constructor(t){super(),t=t||{},this.on,this.once,this.un;const e=function(t){let e=null;void 0!==t.keyboardEventTarget&&(e="string"==typeof t.keyboardEventTarget?document.getElementById(t.keyboardEventTarget):t.keyboardEventTarget);const n={},i=t.layers&&"function"==typeof t.layers.getLayers?t.layers:new N({layers:t.layers});let s,r,o;return n[Y]=i,n[J]=t.target,n[tt]=t.view instanceof rt.ZP?t.view:new rt.ZP,void 0!==t.controls&&(Array.isArray(t.controls)?s=new h(t.controls.slice()):((0,F.h)("function"==typeof t.controls.getArray,47),s=t.controls)),void 0!==t.interactions&&(Array.isArray(t.interactions)?r=new h(t.interactions.slice()):((0,F.h)("function"==typeof t.interactions.getArray,48),r=t.interactions)),void 0!==t.overlays?Array.isArray(t.overlays)?o=new h(t.overlays.slice()):((0,F.h)("function"==typeof t.overlays.getArray,49),o=t.overlays):o=new h,{controls:s,interactions:r,keyboardEventTarget:e,overlays:o,values:n}}(t);this.renderComplete_,this.loaded_=!0,this.boundHandleBrowserEvent_=this.handleBrowserEvent.bind(this),this.maxTilesLoading_=void 0!==t.maxTilesLoading?t.maxTilesLoading:16,this.pixelRatio_=void 0!==t.pixelRatio?t.pixelRatio:W.MP,this.postRenderTimeoutHandle_,this.animationDelayKey_,this.animationDelay_=this.animationDelay_.bind(this),this.coordinateToPixelTransform_=(0,f.Ue)(),this.pixelToCoordinateTransform_=(0,f.Ue)(),this.frameIndex_=0,this.frameState_=null,this.previousExtent_=null,this.viewPropertyListenerKey_=null,this.viewChangeListenerKey_=null,this.layerGroupPropertyListenerKeys_=null,this.viewport_=document.createElement("div"),this.viewport_.className="ol-viewport"+("ontouchstart"in window?" ol-touch":""),this.viewport_.style.position="relative",this.viewport_.style.overflow="hidden",this.viewport_.style.width="100%",this.viewport_.style.height="100%",this.overlayContainer_=document.createElement("div"),this.overlayContainer_.style.position="absolute",this.overlayContainer_.style.zIndex="0",this.overlayContainer_.style.width="100%",this.overlayContainer_.style.height="100%",this.overlayContainer_.style.pointerEvents="none",this.overlayContainer_.className="ol-overlaycontainer",this.viewport_.appendChild(this.overlayContainer_),this.overlayContainerStopEvent_=document.createElement("div"),this.overlayContainerStopEvent_.style.position="absolute",this.overlayContainerStopEvent_.style.zIndex="0",this.overlayContainerStopEvent_.style.width="100%",this.overlayContainerStopEvent_.style.height="100%",this.overlayContainerStopEvent_.style.pointerEvents="none",this.overlayContainerStopEvent_.className="ol-overlaycontainer-stopevent",this.viewport_.appendChild(this.overlayContainerStopEvent_),this.mapBrowserEventHandler_=null,this.moveTolerance_=t.moveTolerance,this.keyboardEventTarget_=e.keyboardEventTarget,this.targetChangeHandlerKeys_=null,this.targetElement_=null,this.resizeObserver_=new ResizeObserver((()=>this.updateSize())),this.controls=e.controls||function(t){t=t||{};const e=new h;return(void 0===t.zoom||t.zoom)&&e.push(new _t(t.zoomOptions)),(void 0===t.rotate||t.rotate)&&e.push(new dt(t.rotateOptions)),(void 0===t.attribution||t.attribution)&&e.push(new ut(t.attributionOptions)),e}(),this.interactions=e.interactions||function(t){t=t||{};const e=new h,n=new class{constructor(t,e,n){this.decay_=t,this.minVelocity_=e,this.delay_=n,this.points_=[],this.angle_=0,this.initialVelocity_=0}begin(){this.points_.length=0,this.angle_=0,this.initialVelocity_=0}update(t,e){this.points_.push(t,e,Date.now())}end(){if(this.points_.length<6)return!1;const t=Date.now()-this.delay_,e=this.points_.length-3;if(this.points_[e+2]<t)return!1;let n=e-3;for(;n>0&&this.points_[n+2]>t;)n-=3;const i=this.points_[e+2]-this.points_[n+2];if(i<1e3/60)return!1;const s=this.points_[e]-this.points_[n],r=this.points_[e+1]-this.points_[n+1];return this.angle_=Math.atan2(r,s),this.initialVelocity_=Math.sqrt(s*s+r*r)/i,this.initialVelocity_>this.minVelocity_}getDistance(){return(this.minVelocity_-this.initialVelocity_)/this.decay_}getAngle(){return this.angle_}}(-.005,.05,100);return(void 0===t.altShiftDragRotate||t.altShiftDragRotate)&&e.push(new Ft),(void 0===t.doubleClickZoom||t.doubleClickZoom)&&e.push(new yt({delta:t.zoomDelta,duration:t.zoomDuration})),(void 0===t.dragPan||t.dragPan)&&e.push(new Rt({onFocusOnly:t.onFocusOnly,kinetic:n})),(void 0===t.pinchRotate||t.pinchRotate)&&e.push(new Gt),(void 0===t.pinchZoom||t.pinchZoom)&&e.push(new Wt({duration:t.zoomDuration})),(void 0===t.keyboard||t.keyboard)&&(e.push(new Zt),e.push(new jt({delta:t.zoomDelta,duration:t.zoomDuration}))),(void 0===t.mouseWheelZoom||t.mouseWheelZoom)&&e.push(new Bt({onFocusOnly:t.onFocusOnly,duration:t.zoomDuration})),(void 0===t.shiftDragZoom||t.shiftDragZoom)&&e.push(new zt({duration:t.zoomDuration})),e}({onFocusOnly:!0}),this.overlays_=e.overlays,this.overlayIdIndex_={},this.renderer_=null,this.postRenderFunctions_=[],this.tileQueue_=new st(this.getTilePriority.bind(this),this.handleTileChange_.bind(this)),this.addChangeListener(Y,this.handleLayerGroupChanged_),this.addChangeListener(tt,this.handleViewChanged_),this.addChangeListener($,this.handleSizeChanged_),this.addChangeListener(J,this.handleTargetChanged_),this.setProperties(e.values);const n=this;!t.view||t.view instanceof rt.ZP||t.view.then((function(t){n.setView(new rt.ZP(t))})),this.controls.addEventListener(r,(t=>{t.element.setMap(this)})),this.controls.addEventListener(o,(t=>{t.element.setMap(null)})),this.interactions.addEventListener(r,(t=>{t.element.setMap(this)})),this.interactions.addEventListener(o,(t=>{t.element.setMap(null)})),this.overlays_.addEventListener(r,(t=>{this.addOverlayInternal_(t.element)})),this.overlays_.addEventListener(o,(t=>{const e=t.element.getId();void 0!==e&&delete this.overlayIdIndex_[e.toString()],t.element.setMap(null)})),this.controls.forEach((t=>{t.setMap(this)})),this.interactions.forEach((t=>{t.setMap(this)})),this.overlays_.forEach(this.addOverlayInternal_.bind(this))}addControl(t){this.getControls().push(t)}addInteraction(t){this.getInteractions().push(t)}addLayer(t){this.getLayerGroup().getLayers().push(t)}handleLayerAdd_(t){Xt(t.layer,this)}addOverlay(t){this.getOverlays().push(t)}addOverlayInternal_(t){const e=t.getId();void 0!==e&&(this.overlayIdIndex_[e.toString()]=t),t.setMap(this)}disposeInternal(){this.controls.clear(),this.interactions.clear(),this.overlays_.clear(),this.resizeObserver_.disconnect(),this.setTarget(null),super.disposeInternal()}forEachFeatureAtPixel(t,e,n){if(!this.frameState_||!this.renderer_)return;const i=this.getCoordinateFromPixelInternal(t),s=void 0!==(n=void 0!==n?n:{}).hitTolerance?n.hitTolerance:0,r=void 0!==n.layerFilter?n.layerFilter:_.uX,o=!1!==n.checkWrapped;return this.renderer_.forEachFeatureAtCoordinate(i,this.frameState_,s,o,e,null,r,null)}getFeaturesAtPixel(t,e){const n=[];return this.forEachFeatureAtPixel(t,(function(t){n.push(t)}),e),n}getAllLayers(){const t=[];return function e(n){n.forEach((function(n){n instanceof N?e(n.getLayers()):t.push(n)}))}(this.getLayers()),t}hasFeatureAtPixel(t,e){if(!this.frameState_||!this.renderer_)return!1;const n=this.getCoordinateFromPixelInternal(t),i=void 0!==(e=void 0!==e?e:{}).layerFilter?e.layerFilter:_.uX,s=void 0!==e.hitTolerance?e.hitTolerance:0,r=!1!==e.checkWrapped;return this.renderer_.hasFeatureAtCoordinate(n,this.frameState_,s,r,i,null)}getEventCoordinate(t){return this.getCoordinateFromPixel(this.getEventPixel(t))}getEventCoordinateInternal(t){return this.getCoordinateFromPixelInternal(this.getEventPixel(t))}getEventPixel(t){const e=this.viewport_.getBoundingClientRect(),n=this.getSize(),i=e.width/n[0],s=e.height/n[1],r="changedTouches"in t?t.changedTouches[0]:t;return[(r.clientX-e.left)/i,(r.clientY-e.top)/s]}getTarget(){return this.get(J)}getTargetElement(){return this.targetElement_}getCoordinateFromPixel(t){return(0,Vt.lO)(this.getCoordinateFromPixelInternal(t),this.getView().getProjection())}getCoordinateFromPixelInternal(t){const e=this.frameState_;return e?(0,f.nn)(e.pixelToCoordinateTransform,t.slice()):null}getControls(){return this.controls}getOverlays(){return this.overlays_}getOverlayById(t){const e=this.overlayIdIndex_[t.toString()];return void 0!==e?e:null}getInteractions(){return this.interactions}getLayerGroup(){return this.get(Y)}setLayers(t){const e=this.getLayerGroup();if(t instanceof h)return void e.setLayers(t);const n=e.getLayers();n.clear(),n.extend(t)}getLayers(){return this.getLayerGroup().getLayers()}getLoadingOrNotReady(){const t=this.getLayerGroup().getLayerStatesArray();for(let e=0,n=t.length;e<n;++e){const n=t[e];if(!n.visible)continue;const i=n.layer.getRenderer();if(i&&!i.ready)return!0;const s=n.layer.getSource();if(s&&s.loading)return!0}return!1}getPixelFromCoordinate(t){const e=(0,Vt.Vs)(t,this.getView().getProjection());return this.getPixelFromCoordinateInternal(e)}getPixelFromCoordinateInternal(t){const e=this.frameState_;return e?(0,f.nn)(e.coordinateToPixelTransform,t.slice(0,2)):null}getRenderer(){return this.renderer_}getSize(){return this.get($)}getView(){return this.get(tt)}getViewport(){return this.viewport_}getOverlayContainer(){return this.overlayContainer_}getOverlayContainerStopEvent(){return this.overlayContainerStopEvent_}getOwnerDocument(){const t=this.getTargetElement();return t?t.ownerDocument:document}getTilePriority(t,e,n,i){return function(t,e,n,i,s){if(!t||!(n in t.wantedTiles))return et;if(!t.wantedTiles[n][e.getKey()])return et;const r=t.viewState.center,o=i[0]-r[0],a=i[1]-r[1];return 65536*Math.log(s)+Math.sqrt(o*o+a*a)/s}(this.frameState_,t,e,n,i)}handleBrowserEvent(t,e){e=e||t.type;const n=new j(e,this,t);this.handleMapBrowserEvent(n)}handleMapBrowserEvent(t){if(!this.frameState_)return;const e=t.originalEvent,n=e.type;if(n===B||n===R.Z.WHEEL||n===R.Z.KEYDOWN){const t=this.getOwnerDocument(),n=this.viewport_.getRootNode?this.viewport_.getRootNode():t,i=e.target;if(this.overlayContainerStopEvent_.contains(i)||!(n===t?t.documentElement:n).contains(i))return}if(t.frameState=this.frameState_,!1!==this.dispatchEvent(t)){const e=this.getInteractions().getArray().slice();for(let n=e.length-1;n>=0;n--){const i=e[n];if(i.getMap()===this&&i.getActive()&&this.getTargetElement()&&(!i.handleEvent(t)||t.propagationStopped))break}}}handlePostRender(){const t=this.frameState_,e=this.tileQueue_;if(!e.isEmpty()){let n=this.maxTilesLoading_,i=n;if(t){const e=t.viewHints;if(e[ot.Z.ANIMATING]||e[ot.Z.INTERACTING]){const e=Date.now()-t.time>8;n=e?0:8,i=e?0:2}}e.getTilesLoading()<n&&(e.reprioritize(),e.loadMoreTiles(n,i))}t&&this.renderer_&&!t.animate&&(!0===this.renderComplete_?(this.hasListener(T.Z.RENDERCOMPLETE)&&this.renderer_.dispatchRenderEvent(T.Z.RENDERCOMPLETE,t),!1===this.loaded_&&(this.loaded_=!0,this.dispatchEvent(new Z(X,this,t)))):!0===this.loaded_&&(this.loaded_=!1,this.dispatchEvent(new Z(Q,this,t))));const n=this.postRenderFunctions_;for(let e=0,i=n.length;e<i;++e)n[e](this,t);n.length=0}handleSizeChanged_(){this.getView()&&!this.getView().getAnimating()&&this.getView().resolveConstraints(0),this.render()}handleTargetChanged_(){if(this.mapBrowserEventHandler_){for(let t=0,e=this.targetChangeHandlerKeys_.length;t<e;++t)(0,I.bN)(this.targetChangeHandlerKeys_[t]);this.targetChangeHandlerKeys_=null,this.viewport_.removeEventListener(R.Z.CONTEXTMENU,this.boundHandleBrowserEvent_),this.viewport_.removeEventListener(R.Z.WHEEL,this.boundHandleBrowserEvent_),this.mapBrowserEventHandler_.dispose(),this.mapBrowserEventHandler_=null,(0,A.ZF)(this.viewport_)}if(this.targetElement_){this.resizeObserver_.unobserve(this.targetElement_);const t=this.targetElement_.getRootNode();t instanceof ShadowRoot&&this.resizeObserver_.unobserve(t.host)}const t=this.getTarget(),e="string"==typeof t?document.getElementById(t):t;if(this.targetElement_=e,e){e.appendChild(this.viewport_),this.renderer_||(this.renderer_=new k(this)),this.mapBrowserEventHandler_=new K(this,this.moveTolerance_);for(const t in U)this.mapBrowserEventHandler_.addEventListener(U[t],this.handleMapBrowserEvent.bind(this));this.viewport_.addEventListener(R.Z.CONTEXTMENU,this.boundHandleBrowserEvent_,!1),this.viewport_.addEventListener(R.Z.WHEEL,this.boundHandleBrowserEvent_,!!W.bM&&{passive:!1});const t=this.keyboardEventTarget_?this.keyboardEventTarget_:e;this.targetChangeHandlerKeys_=[(0,I.oL)(t,R.Z.KEYDOWN,this.handleBrowserEvent,this),(0,I.oL)(t,R.Z.KEYPRESS,this.handleBrowserEvent,this)];const n=e.getRootNode();n instanceof ShadowRoot&&this.resizeObserver_.observe(n.host),this.resizeObserver_.observe(e)}else this.renderer_&&(clearTimeout(this.postRenderTimeoutHandle_),this.postRenderTimeoutHandle_=void 0,this.postRenderFunctions_.length=0,this.renderer_.dispose(),this.renderer_=null),this.animationDelayKey_&&(cancelAnimationFrame(this.animationDelayKey_),this.animationDelayKey_=void 0);this.updateSize()}handleTileChange_(){this.render()}handleViewPropertyChanged_(){this.render()}handleViewChanged_(){this.viewPropertyListenerKey_&&((0,I.bN)(this.viewPropertyListenerKey_),this.viewPropertyListenerKey_=null),this.viewChangeListenerKey_&&((0,I.bN)(this.viewChangeListenerKey_),this.viewChangeListenerKey_=null);const t=this.getView();t&&(this.updateViewportSize_(),this.viewPropertyListenerKey_=(0,I.oL)(t,x.Z.PROPERTYCHANGE,this.handleViewPropertyChanged_,this),this.viewChangeListenerKey_=(0,I.oL)(t,R.Z.CHANGE,this.handleViewPropertyChanged_,this),t.resolveConstraints(0)),this.render()}handleLayerGroupChanged_(){this.layerGroupPropertyListenerKeys_&&(this.layerGroupPropertyListenerKeys_.forEach(I.bN),this.layerGroupPropertyListenerKeys_=null);const t=this.getLayerGroup();t&&(this.handleLayerAdd_(new L("addlayer",t)),this.layerGroupPropertyListenerKeys_=[(0,I.oL)(t,x.Z.PROPERTYCHANGE,this.render,this),(0,I.oL)(t,R.Z.CHANGE,this.render,this),(0,I.oL)(t,"addlayer",this.handleLayerAdd_,this),(0,I.oL)(t,"removelayer",this.handleLayerRemove_,this)]),this.render()}isRendered(){return!!this.frameState_}animationDelay_(){this.animationDelayKey_=void 0,this.renderFrame_(Date.now())}renderSync(){this.animationDelayKey_&&cancelAnimationFrame(this.animationDelayKey_),this.animationDelay_()}redrawText(){const t=this.getLayerGroup().getLayerStatesArray();for(let e=0,n=t.length;e<n;++e){const n=t[e].layer;n.hasRenderer()&&n.getRenderer().handleFontsChanged()}}render(){this.renderer_&&void 0===this.animationDelayKey_&&(this.animationDelayKey_=requestAnimationFrame(this.animationDelay_))}removeControl(t){return this.getControls().remove(t)}removeInteraction(t){return this.getInteractions().remove(t)}removeLayer(t){return this.getLayerGroup().getLayers().remove(t)}handleLayerRemove_(t){Qt(t.layer)}removeOverlay(t){return this.getOverlays().remove(t)}renderFrame_(t){const e=this.getSize(),n=this.getView(),i=this.frameState_;let s=null;if(void 0!==e&&(0,Kt.py)(e)&&n&&n.isDef()){const i=n.getHints(this.frameState_?this.frameState_.viewHints:void 0),r=n.getState();if(s={animate:!1,coordinateToPixelTransform:this.coordinateToPixelTransform_,declutterTree:null,extent:(0,g.p8)(r.center,r.resolution,r.rotation,e),index:this.frameIndex_++,layerIndex:0,layerStatesArray:this.getLayerGroup().getLayerStatesArray(),pixelRatio:this.pixelRatio_,pixelToCoordinateTransform:this.pixelToCoordinateTransform_,postRenderFunctions:[],size:e,tileQueue:this.tileQueue_,time:t,usedTiles:{},viewState:r,viewHints:i,wantedTiles:{},mapId:(0,p.sq)(this),renderTargets:{}},r.nextCenter&&r.nextResolution){const t=isNaN(r.nextRotation)?r.rotation:r.nextRotation;s.nextExtent=(0,g.p8)(r.nextCenter,r.nextResolution,t,e)}}this.frameState_=s,this.renderer_.renderFrame(s),s&&(s.animate&&this.render(),Array.prototype.push.apply(this.postRenderFunctions_,s.postRenderFunctions),i&&(!this.previousExtent_||!(0,g.xb)(this.previousExtent_)&&!(0,g.fS)(s.extent,this.previousExtent_))&&(this.dispatchEvent(new Z("movestart",this,i)),this.previousExtent_=(0,g.YN)(this.previousExtent_)),this.previousExtent_&&!s.viewHints[ot.Z.ANIMATING]&&!s.viewHints[ot.Z.INTERACTING]&&!(0,g.fS)(s.extent,this.previousExtent_)&&(this.dispatchEvent(new Z("moveend",this,s)),(0,g.d9)(s.extent,this.previousExtent_))),this.dispatchEvent(new Z(H,this,s)),this.renderComplete_=this.hasListener(Q)||this.hasListener(X)||this.hasListener(T.Z.RENDERCOMPLETE)?!this.tileQueue_.getTilesLoading()&&!this.tileQueue_.getCount()&&!this.getLoadingOrNotReady():void 0,this.postRenderTimeoutHandle_||(this.postRenderTimeoutHandle_=setTimeout((()=>{this.postRenderTimeoutHandle_=void 0,this.handlePostRender()}),0))}setLayerGroup(t){const e=this.getLayerGroup();e&&this.handleLayerRemove_(new L("removelayer",e)),this.set(Y,t)}setSize(t){this.set($,t)}setTarget(t){this.set(J,t)}setView(t){if(!t||t instanceof rt.ZP)return void this.set(tt,t);this.set(tt,new rt.ZP);const e=this;t.then((function(t){e.setView(new rt.ZP(t))}))}updateSize(){const t=this.getTargetElement();let e;if(t){const n=getComputedStyle(t),i=t.offsetWidth-parseFloat(n.borderLeftWidth)-parseFloat(n.paddingLeft)-parseFloat(n.paddingRight)-parseFloat(n.borderRightWidth),s=t.offsetHeight-parseFloat(n.borderTopWidth)-parseFloat(n.paddingTop)-parseFloat(n.paddingBottom)-parseFloat(n.borderBottomWidth);isNaN(i)||isNaN(s)||(e=[i,s],!(0,Kt.py)(e)&&(t.offsetWidth||t.offsetHeight||t.getClientRects().length)&&(0,Ht.ZK)("No map visible because the map container's width or height are 0."))}const n=this.getSize();!e||n&&(0,ct.fS)(e,n)||(this.setSize(e),this.updateViewportSize_())}updateViewportSize_(){const t=this.getView();if(t){let e;const n=getComputedStyle(this.viewport_);n.width&&n.height&&(e=[parseInt(n.width,10),parseInt(n.height,10)]),t.setViewportSize(e)}}}const $t=Yt},2971:(t,e,n)=>{"use strict";n.d(e,{Z:()=>u});var i=n(291),s=n(5990),r=n(2706),o=n(4187),a=n(9374);class l extends i.ZP{constructor(t,e,n){super(t),this.key=e,this.oldValue=n}}class c extends r.Z{constructor(t){super(),this.on,this.once,this.un,(0,o.sq)(this),this.values_=null,void 0!==t&&this.setProperties(t)}get(t){let e;return this.values_&&this.values_.hasOwnProperty(t)&&(e=this.values_[t]),e}getKeys(){return this.values_&&Object.keys(this.values_)||[]}getProperties(){return this.values_&&Object.assign({},this.values_)||{}}hasProperties(){return!!this.values_}notify(t,e){let n;n=`change:${t}`,this.hasListener(n)&&this.dispatchEvent(new l(n,t,e)),n=s.Z.PROPERTYCHANGE,this.hasListener(n)&&this.dispatchEvent(new l(n,t,e))}addChangeListener(t,e){this.addEventListener(`change:${t}`,e)}removeChangeListener(t,e){this.removeEventListener(`change:${t}`,e)}set(t,e,n){const i=this.values_||(this.values_={});if(n)i[t]=e;else{const n=i[t];i[t]=e,n!==e&&this.notify(t,n)}}setProperties(t,e){for(const n in t)this.set(n,t[n],e)}applyProperties(t){t.values_&&Object.assign(this.values_||(this.values_={}),t.values_)}unset(t,e){if(this.values_&&t in this.values_){const n=this.values_[t];delete this.values_[t],(0,a.x)(this.values_)&&(this.values_=null),e||this.notify(t,n)}}}const u=c},5990:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});const i={PROPERTYCHANGE:"propertychange"}},2706:(t,e,n)=>{"use strict";n.d(e,{Z:()=>a});var i=n(208),s=n(5487),r=n(5818);class o extends i.Z{constructor(){super(),this.on=this.onInternal,this.once=this.onceInternal,this.un=this.unInternal,this.revision_=0}changed(){++this.revision_,this.dispatchEvent(s.Z.CHANGE)}getRevision(){return this.revision_}onInternal(t,e){if(Array.isArray(t)){const n=t.length,i=new Array(n);for(let s=0;s<n;++s)i[s]=(0,r.oL)(this,t[s],e);return i}return(0,r.oL)(this,t,e)}onceInternal(t,e){let n;if(Array.isArray(t)){const i=t.length;n=new Array(i);for(let s=0;s<i;++s)n[s]=(0,r.Vx)(this,t[s],e)}else n=(0,r.Vx)(this,t,e);return e.ol_key=n,n}unInternal(t,e){const n=e.ol_key;if(n)!function(t){if(Array.isArray(t))for(let e=0,n=t.length;e<n;++e)(0,r.bN)(t[e]);else(0,r.bN)(t)}(n);else if(Array.isArray(t))for(let n=0,i=t.length;n<i;++n)this.removeEventListener(t[n],e);else this.removeEventListener(t,e)}}o.prototype.on,o.prototype.once,o.prototype.un;const a=o},4806:(t,e,n)=>{"use strict";n.d(e,{Z:()=>c});var i=n(208),s=n(5487),r=n(7195),o=n(4187),a=n(1015);class l extends i.Z{constructor(t,e,n){super(),n=n||{},this.tileCoord=t,this.state=e,this.interimTile=null,this.key="",this.transition_=void 0===n.transition?250:n.transition,this.transitionStarts_={},this.interpolate=!!n.interpolate}changed(){this.dispatchEvent(s.Z.CHANGE)}release(){this.state===r.Z.ERROR&&this.setState(r.Z.EMPTY)}getKey(){return this.key+"/"+this.tileCoord}getInterimTile(){if(!this.interimTile)return this;let t=this.interimTile;do{if(t.getState()==r.Z.LOADED)return this.transition_=0,t;t=t.interimTile}while(t);return this}refreshInterimChain(){if(!this.interimTile)return;let t=this.interimTile,e=this;do{if(t.getState()==r.Z.LOADED){t.interimTile=null;break}t.getState()==r.Z.LOADING?e=t:t.getState()==r.Z.IDLE?e.interimTile=t.interimTile:e=t,t=e.interimTile}while(t)}getTileCoord(){return this.tileCoord}getState(){return this.state}setState(t){if(this.state!==r.Z.ERROR&&this.state>t)throw new Error("Tile load sequence violation");this.state=t,this.changed()}load(){(0,o.O3)()}getAlpha(t,e){if(!this.transition_)return 1;let n=this.transitionStarts_[t];if(n){if(-1===n)return 1}else n=e,this.transitionStarts_[t]=n;const i=e-n+1e3/60;return i>=this.transition_?1:(0,a.YQ)(i/this.transition_)}inTransition(t){return!!this.transition_&&-1!==this.transitionStarts_[t]}endTransition(t){this.transition_&&(this.transitionStarts_[t]=-1)}}const c=l},5532:(t,e,n)=>{"use strict";n.d(e,{Z:()=>o});var i=n(9515);const s=class{constructor(t){this.highWaterMark=void 0!==t?t:2048,this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null}canExpireCache(){return this.highWaterMark>0&&this.getCount()>this.highWaterMark}expireCache(t){for(;this.canExpireCache();)this.pop()}clear(){this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null}containsKey(t){return this.entries_.hasOwnProperty(t)}forEach(t){let e=this.oldest_;for(;e;)t(e.value_,e.key_,this),e=e.newer}get(t,e){const n=this.entries_[t];return(0,i.h)(void 0!==n,15),n===this.newest_||(n===this.oldest_?(this.oldest_=this.oldest_.newer,this.oldest_.older=null):(n.newer.older=n.older,n.older.newer=n.newer),n.newer=null,n.older=this.newest_,this.newest_.newer=n,this.newest_=n),n.value_}remove(t){const e=this.entries_[t];return(0,i.h)(void 0!==e,15),e===this.newest_?(this.newest_=e.older,this.newest_&&(this.newest_.newer=null)):e===this.oldest_?(this.oldest_=e.newer,this.oldest_&&(this.oldest_.older=null)):(e.newer.older=e.older,e.older.newer=e.newer),delete this.entries_[t],--this.count_,e.value_}getCount(){return this.count_}getKeys(){const t=new Array(this.count_);let e,n=0;for(e=this.newest_;e;e=e.older)t[n++]=e.key_;return t}getValues(){const t=new Array(this.count_);let e,n=0;for(e=this.newest_;e;e=e.older)t[n++]=e.value_;return t}peekLast(){return this.oldest_.value_}peekLastKey(){return this.oldest_.key_}peekFirstKey(){return this.newest_.key_}peek(t){if(this.containsKey(t))return this.entries_[t].value_}pop(){const t=this.oldest_;return delete this.entries_[t.key_],t.newer&&(t.newer.older=null),this.oldest_=t.newer,this.oldest_||(this.newest_=null),--this.count_,t.value_}replace(t,e){this.get(t),this.entries_[t].value_=e}set(t,e){(0,i.h)(!(t in this.entries_),16);const n={key_:t,newer:null,older:this.newest_,value_:e};this.newest_?this.newest_.newer=n:this.oldest_=n,this.newest_=n,this.entries_[t]=n,++this.count_}setSize(t){this.highWaterMark=t}};var r=n(8634);const o=class extends s{clear(){for(;this.getCount()>0;)this.pop().release();super.clear()}expireCache(t){for(;this.canExpireCache()&&!(this.peekLast().getKey()in t);)this.pop().release()}pruneExceptNewestZ(){if(0===this.getCount())return;const t=this.peekFirstKey(),e=(0,r.Ul)(t)[0];this.forEach((t=>{t.tileCoord[0]!==e&&(this.remove((0,r.km)(t.tileCoord)),t.release())}))}}},2519:(t,e,n)=>{"use strict";n.d(e,{T:()=>s,Z:()=>r});class i{constructor(t,e,n,i){this.minX=t,this.maxX=e,this.minY=n,this.maxY=i}contains(t){return this.containsXY(t[1],t[2])}containsTileRange(t){return this.minX<=t.minX&&t.maxX<=this.maxX&&this.minY<=t.minY&&t.maxY<=this.maxY}containsXY(t,e){return this.minX<=t&&t<=this.maxX&&this.minY<=e&&e<=this.maxY}equals(t){return this.minX==t.minX&&this.minY==t.minY&&this.maxX==t.maxX&&this.maxY==t.maxY}extend(t){t.minX<this.minX&&(this.minX=t.minX),t.maxX>this.maxX&&(this.maxX=t.maxX),t.minY<this.minY&&(this.minY=t.minY),t.maxY>this.maxY&&(this.maxY=t.maxY)}getHeight(){return this.maxY-this.minY+1}getSize(){return[this.getWidth(),this.getHeight()]}getWidth(){return this.maxX-this.minX+1}intersects(t){return this.minX<=t.maxX&&this.maxX>=t.minX&&this.minY<=t.maxY&&this.maxY>=t.minY}}function s(t,e,n,s,r){return void 0!==r?(r.minX=t,r.maxX=e,r.minY=n,r.maxY=s,r):new i(t,e,n,s)}const r=i},7195:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});const i={IDLE:0,LOADING:1,LOADED:2,ERROR:3,EMPTY:4}},9090:(t,e,n)=>{"use strict";n.d(e,{ZP:()=>S});var i=n(2971),s=n(7755);const r={CENTER:"center",RESOLUTION:"resolution",ROTATION:"rotation"};var o=n(4768),a=n(8661),l=n(6885),c=n(1900),u=n(9515),h=n(3983);function d(t,e,n){return function(i,s,r,o,a){if(!i)return;if(!s&&!e)return i;const l=e?0:r[0]*s,c=e?0:r[1]*s,u=a?a[0]:0,d=a?a[1]:0;let _=t[0]+l/2+u,p=t[2]-l/2+u,f=t[1]+c/2+d,g=t[3]-c/2+d;_>p&&(_=(p+_)/2,p=_),f>g&&(f=(g+f)/2,g=f);let m=(0,h.uZ)(i[0],_,p),y=(0,h.uZ)(i[1],f,g);if(o&&n&&s){const t=30*s;m+=-t*Math.log(1+Math.max(0,_-i[0])/t)+t*Math.log(1+Math.max(0,i[0]-p)/t),y+=-t*Math.log(1+Math.max(0,f-i[1])/t)+t*Math.log(1+Math.max(0,i[1]-g)/t)}return[m,y]}}function _(t){return t}var p=n(8641),f=n(5537);function g(t,e,n,i){const s=(0,p.dz)(e)/n[0],r=(0,p.Cr)(e)/n[1];return i?Math.min(t,Math.max(s,r)):Math.min(t,Math.min(s,r))}function m(t,e,n){let i=Math.min(t,e);return i*=Math.log(1+50*Math.max(0,t/e-1))/50+1,n&&(i=Math.max(i,n),i/=Math.log(1+50*Math.max(0,n/t-1))/50+1),(0,h.uZ)(i,n/2,2*e)}function y(t,e,n,i,s){return n=void 0===n||n,function(r,o,a,l){if(void 0!==r){const o=i?g(t,i,a,s):t;return n&&l?m(r,o,e):(0,h.uZ)(r,e,o)}}}var v=n(828),b=n(1015),w=n(1082);class E extends i.Z{constructor(t){super(),this.on,this.once,this.un,t=Object.assign({},t),this.hints_=[0,0],this.animations_=[],this.updateAnimationKey_,this.projection_=(0,a.UQ)(t.projection,"EPSG:3857"),this.viewportSize_=[100,100],this.targetCenter_=null,this.targetResolution_,this.targetRotation_,this.nextCenter_=null,this.nextResolution_,this.nextRotation_,this.cancelAnchor_=void 0,t.projection&&(0,a.h_)(),t.center&&(t.center=(0,a.Vs)(t.center,this.projection_)),t.extent&&(t.extent=(0,a.dY)(t.extent,this.projection_)),this.applyOptions_(t)}applyOptions_(t){const e=Object.assign({},t);for(const t in r)delete e[t];this.setProperties(e,!0);const n=function(t){let e,n,i;let s=void 0!==t.minZoom?t.minZoom:0,r=void 0!==t.maxZoom?t.maxZoom:28;const l=void 0!==t.zoomFactor?t.zoomFactor:2,c=void 0!==t.multiWorld&&t.multiWorld,u=void 0===t.smoothResolutionConstraint||t.smoothResolutionConstraint,d=void 0!==t.showFullExtent&&t.showFullExtent,_=(0,a.UQ)(t.projection,"EPSG:3857"),v=_.getExtent();let b=t.constrainOnlyCenter,w=t.extent;if(c||w||!_.isGlobal()||(b=!1,w=v),void 0!==t.resolutions){const o=t.resolutions;n=o[s],i=void 0!==o[r]?o[r]:o[o.length-1],e=t.constrainResolution?function(t,e,n,i){return e=void 0===e||e,function(s,r,o,a){if(void 0!==s){const l=t[0],c=t[t.length-1],u=n?g(l,n,o,i):l;if(a)return e?m(s,u,c):(0,h.uZ)(s,c,u);const d=Math.min(u,s),_=Math.floor((0,f.h7)(t,d,r));return t[_]>u&&_<t.length-1?t[_+1]:t[_]}}}(o,u,!b&&w,d):y(n,i,u,!b&&w,d)}else{const c=(v?Math.max((0,p.dz)(v),(0,p.Cr)(v)):360*a.Wm.degrees/_.getMetersPerUnit())/o.S/Math.pow(2,0),f=c/Math.pow(2,28);n=t.maxResolution,void 0!==n?s=0:n=c/Math.pow(l,s),i=t.minResolution,void 0===i&&(i=void 0!==t.maxZoom?void 0!==t.maxResolution?n/Math.pow(l,r):c/Math.pow(l,r):f),r=s+Math.floor(Math.log(n/i)/Math.log(l)),i=n/Math.pow(l,r-s),e=t.constrainResolution?function(t,e,n,i,s,r){return i=void 0===i||i,n=void 0!==n?n:0,function(o,a,l,c){if(void 0!==o){const u=s?g(e,s,l,r):e;if(c)return i?m(o,u,n):(0,h.uZ)(o,n,u);const d=1e-9,_=Math.ceil(Math.log(e/u)/Math.log(t)-d),p=-a*(.5-d)+.5,f=Math.min(u,o),y=Math.floor(Math.log(e/f)/Math.log(t)+p),v=Math.max(_,y),b=e/Math.pow(t,v);return(0,h.uZ)(b,n,u)}}}(l,n,i,u,!b&&w,d):y(n,i,u,!b&&w,d)}return{constraint:e,maxResolution:n,minResolution:i,minZoom:s,zoomFactor:l}}(t);this.maxResolution_=n.maxResolution,this.minResolution_=n.minResolution,this.zoomFactor_=n.zoomFactor,this.resolutions_=t.resolutions,this.padding_=t.padding,this.minZoom_=n.minZoom;const i=function(t){if(void 0!==t.extent){const e=void 0===t.smoothExtentConstraint||t.smoothExtentConstraint;return d(t.extent,t.constrainOnlyCenter,e)}const e=(0,a.UQ)(t.projection,"EPSG:3857");if(!0!==t.multiWorld&&e.isGlobal()){const t=e.getExtent().slice();return t[0]=-1/0,t[2]=1/0,d(t,!1,!1)}return _}(t),s=n.constraint,l=function(t){if(void 0===t.enableRotation||t.enableRotation){const e=t.constrainRotation;return void 0===e||!0===e?(0,v.Gw)():!1===e?v.YP:"number"==typeof e?(0,v.gE)(e):v.YP}return v.h$}(t);this.constraints_={center:i,resolution:s,rotation:l},this.setRotation(void 0!==t.rotation?t.rotation:0),this.setCenterInternal(void 0!==t.center?t.center:null),void 0!==t.resolution?this.setResolution(t.resolution):void 0!==t.zoom&&this.setZoom(t.zoom)}get padding(){return this.padding_}set padding(t){let e=this.padding_;this.padding_=t;const n=this.getCenter();if(n){const i=t||[0,0,0,0];e=e||[0,0,0,0];const s=this.getResolution(),r=s/2*(i[3]-e[3]+e[1]-i[1]),o=s/2*(i[0]-e[0]+e[2]-i[2]);this.setCenterInternal([n[0]+r,n[1]-o])}}getUpdatedOptions_(t){const e=this.getProperties();return void 0!==e.resolution?e.resolution=this.getResolution():e.zoom=this.getZoom(),e.center=this.getCenterInternal(),e.rotation=this.getRotation(),Object.assign({},e,t)}animate(t){this.isDef()&&!this.getAnimating()&&this.resolveConstraints(0);const e=new Array(arguments.length);for(let t=0;t<e.length;++t){let n=arguments[t];n.center&&(n=Object.assign({},n),n.center=(0,a.Vs)(n.center,this.getProjection())),n.anchor&&(n=Object.assign({},n),n.anchor=(0,a.Vs)(n.anchor,this.getProjection())),e[t]=n}this.animateInternal.apply(this,e)}animateInternal(t){let e,n=arguments.length;n>1&&"function"==typeof arguments[n-1]&&(e=arguments[n-1],--n);let i=0;for(;i<n&&!this.isDef();++i){const t=arguments[i];t.center&&this.setCenterInternal(t.center),void 0!==t.zoom?this.setZoom(t.zoom):t.resolution&&this.setResolution(t.resolution),void 0!==t.rotation&&this.setRotation(t.rotation)}if(i===n)return void(e&&x(e,!0));let r=Date.now(),o=this.targetCenter_.slice(),a=this.targetResolution_,l=this.targetRotation_;const c=[];for(;i<n;++i){const t=arguments[i],n={start:r,complete:!1,anchor:t.anchor,duration:void 0!==t.duration?t.duration:1e3,easing:t.easing||b.rd,callback:e};if(t.center&&(n.sourceCenter=o,n.targetCenter=t.center.slice(),o=n.targetCenter),void 0!==t.zoom?(n.sourceResolution=a,n.targetResolution=this.getResolutionForZoom(t.zoom),a=n.targetResolution):t.resolution&&(n.sourceResolution=a,n.targetResolution=t.resolution,a=n.targetResolution),void 0!==t.rotation){n.sourceRotation=l;const e=(0,h.$W)(t.rotation-l+Math.PI,2*Math.PI)-Math.PI;n.targetRotation=l+e,l=n.targetRotation}q(n)?n.complete=!0:r+=n.duration,c.push(n)}this.animations_.push(c),this.setHint(s.Z.ANIMATING,1),this.updateAnimations_()}getAnimating(){return this.hints_[s.Z.ANIMATING]>0}getInteracting(){return this.hints_[s.Z.INTERACTING]>0}cancelAnimations(){let t;this.setHint(s.Z.ANIMATING,-this.hints_[s.Z.ANIMATING]);for(let e=0,n=this.animations_.length;e<n;++e){const n=this.animations_[e];if(n[0].callback&&x(n[0].callback,!1),!t)for(let e=0,i=n.length;e<i;++e){const i=n[e];if(!i.complete){t=i.anchor;break}}}this.animations_.length=0,this.cancelAnchor_=t,this.nextCenter_=null,this.nextResolution_=NaN,this.nextRotation_=NaN}updateAnimations_(){if(void 0!==this.updateAnimationKey_&&(cancelAnimationFrame(this.updateAnimationKey_),this.updateAnimationKey_=void 0),!this.getAnimating())return;const t=Date.now();let e=!1;for(let n=this.animations_.length-1;n>=0;--n){const i=this.animations_[n];let r=!0;for(let n=0,s=i.length;n<s;++n){const s=i[n];if(s.complete)continue;const o=t-s.start;let a=s.duration>0?o/s.duration:1;a>=1?(s.complete=!0,a=1):r=!1;const l=s.easing(a);if(s.sourceCenter){const t=s.sourceCenter[0],e=s.sourceCenter[1],n=s.targetCenter[0],i=s.targetCenter[1];this.nextCenter_=s.targetCenter;const r=t+l*(n-t),o=e+l*(i-e);this.targetCenter_=[r,o]}if(s.sourceResolution&&s.targetResolution){const t=1===l?s.targetResolution:s.sourceResolution+l*(s.targetResolution-s.sourceResolution);if(s.anchor){const e=this.getViewportSize_(this.getRotation()),n=this.constraints_.resolution(t,0,e,!0);this.targetCenter_=this.calculateCenterZoom(n,s.anchor)}this.nextResolution_=s.targetResolution,this.targetResolution_=t,this.applyTargetState_(!0)}if(void 0!==s.sourceRotation&&void 0!==s.targetRotation){const t=1===l?(0,h.$W)(s.targetRotation+Math.PI,2*Math.PI)-Math.PI:s.sourceRotation+l*(s.targetRotation-s.sourceRotation);if(s.anchor){const e=this.constraints_.rotation(t,!0);this.targetCenter_=this.calculateCenterRotate(e,s.anchor)}this.nextRotation_=s.targetRotation,this.targetRotation_=t}if(this.applyTargetState_(!0),e=!0,!s.complete)break}if(r){this.animations_[n]=null,this.setHint(s.Z.ANIMATING,-1),this.nextCenter_=null,this.nextResolution_=NaN,this.nextRotation_=NaN;const t=i[0].callback;t&&x(t,!0)}}this.animations_=this.animations_.filter(Boolean),e&&void 0===this.updateAnimationKey_&&(this.updateAnimationKey_=requestAnimationFrame(this.updateAnimations_.bind(this)))}calculateCenterRotate(t,e){let n;const i=this.getCenterInternal();return void 0!==i&&(n=[i[0]-e[0],i[1]-e[1]],(0,c.U1)(n,t-this.getRotation()),(0,c.IH)(n,e)),n}calculateCenterZoom(t,e){let n;const i=this.getCenterInternal(),s=this.getResolution();return void 0!==i&&void 0!==s&&(n=[e[0]-t*(e[0]-i[0])/s,e[1]-t*(e[1]-i[1])/s]),n}getViewportSize_(t){const e=this.viewportSize_;if(t){const n=e[0],i=e[1];return[Math.abs(n*Math.cos(t))+Math.abs(i*Math.sin(t)),Math.abs(n*Math.sin(t))+Math.abs(i*Math.cos(t))]}return e}setViewportSize(t){this.viewportSize_=Array.isArray(t)?t.slice():[100,100],this.getAnimating()||this.resolveConstraints(0)}getCenter(){const t=this.getCenterInternal();return t?(0,a.lO)(t,this.getProjection()):t}getCenterInternal(){return this.get(r.CENTER)}getConstraints(){return this.constraints_}getConstrainResolution(){return this.get("constrainResolution")}getHints(t){return void 0!==t?(t[0]=this.hints_[0],t[1]=this.hints_[1],t):this.hints_.slice()}calculateExtent(t){const e=this.calculateExtentInternal(t);return(0,a.Fj)(e,this.getProjection())}calculateExtentInternal(t){t=t||this.getViewportSizeMinusPadding_();const e=this.getCenterInternal();(0,u.h)(e,1);const n=this.getResolution();(0,u.h)(void 0!==n,2);const i=this.getRotation();return(0,u.h)(void 0!==i,3),(0,p.p8)(e,n,i,t)}getMaxResolution(){return this.maxResolution_}getMinResolution(){return this.minResolution_}getMaxZoom(){return this.getZoomForResolution(this.minResolution_)}setMaxZoom(t){this.applyOptions_(this.getUpdatedOptions_({maxZoom:t}))}getMinZoom(){return this.getZoomForResolution(this.maxResolution_)}setMinZoom(t){this.applyOptions_(this.getUpdatedOptions_({minZoom:t}))}setConstrainResolution(t){this.applyOptions_(this.getUpdatedOptions_({constrainResolution:t}))}getProjection(){return this.projection_}getResolution(){return this.get(r.RESOLUTION)}getResolutions(){return this.resolutions_}getResolutionForExtent(t,e){return this.getResolutionForExtentInternal((0,a.dY)(t,this.getProjection()),e)}getResolutionForExtentInternal(t,e){e=e||this.getViewportSizeMinusPadding_();const n=(0,p.dz)(t)/e[0],i=(0,p.Cr)(t)/e[1];return Math.max(n,i)}getResolutionForValueFunction(t){t=t||2;const e=this.getConstrainedResolution(this.maxResolution_),n=this.minResolution_,i=Math.log(e/n)/Math.log(t);return function(n){return e/Math.pow(t,n*i)}}getRotation(){return this.get(r.ROTATION)}getValueForResolutionFunction(t){const e=Math.log(t||2),n=this.getConstrainedResolution(this.maxResolution_),i=this.minResolution_,s=Math.log(n/i)/e;return function(t){return Math.log(n/t)/e/s}}getViewportSizeMinusPadding_(t){let e=this.getViewportSize_(t);const n=this.padding_;return n&&(e=[e[0]-n[1]-n[3],e[1]-n[0]-n[2]]),e}getState(){const t=this.getProjection(),e=this.getResolution(),n=this.getRotation();let i=this.getCenterInternal();const s=this.padding_;if(s){const t=this.getViewportSizeMinusPadding_();i=T(i,this.getViewportSize_(),[t[0]/2+s[3],t[1]/2+s[0]],e,n)}return{center:i.slice(0),projection:void 0!==t?t:null,resolution:e,nextCenter:this.nextCenter_,nextResolution:this.nextResolution_,nextRotation:this.nextRotation_,rotation:n,zoom:this.getZoom()}}getZoom(){let t;const e=this.getResolution();return void 0!==e&&(t=this.getZoomForResolution(e)),t}getZoomForResolution(t){let e,n,i=this.minZoom_||0;if(this.resolutions_){const s=(0,f.h7)(this.resolutions_,t,1);i=s,e=this.resolutions_[s],n=s==this.resolutions_.length-1?2:e/this.resolutions_[s+1]}else e=this.maxResolution_,n=this.zoomFactor_;return i+Math.log(e/t)/Math.log(n)}getResolutionForZoom(t){if(this.resolutions_){if(this.resolutions_.length<=1)return 0;const e=(0,h.uZ)(Math.floor(t),0,this.resolutions_.length-2),n=this.resolutions_[e]/this.resolutions_[e+1];return this.resolutions_[e]/Math.pow(n,(0,h.uZ)(t-e,0,1))}return this.maxResolution_/Math.pow(this.zoomFactor_,t-this.minZoom_)}fit(t,e){let n;if((0,u.h)(Array.isArray(t)||"function"==typeof t.getSimplifiedGeometry,24),Array.isArray(t)){(0,u.h)(!(0,p.xb)(t),25);const e=(0,a.dY)(t,this.getProjection());n=(0,w.oJ)(e)}else if("Circle"===t.getType()){const e=(0,a.dY)(t.getExtent(),this.getProjection());n=(0,w.oJ)(e),n.rotate(this.getRotation(),(0,p.qg)(e))}else{const e=(0,a.Cs)();n=e?t.clone().transform(e,this.getProjection()):t}this.fitInternal(n,e)}rotatedExtentForGeometry(t){const e=this.getRotation(),n=Math.cos(e),i=Math.sin(-e),s=t.getFlatCoordinates(),r=t.getStride();let o=1/0,a=1/0,l=-1/0,c=-1/0;for(let t=0,e=s.length;t<e;t+=r){const e=s[t]*n-s[t+1]*i,r=s[t]*i+s[t+1]*n;o=Math.min(o,e),a=Math.min(a,r),l=Math.max(l,e),c=Math.max(c,r)}return[o,a,l,c]}fitInternal(t,e){let n=(e=e||{}).size;n||(n=this.getViewportSizeMinusPadding_());const i=void 0!==e.padding?e.padding:[0,0,0,0],s=void 0!==e.nearest&&e.nearest;let r;r=void 0!==e.minResolution?e.minResolution:void 0!==e.maxZoom?this.getResolutionForZoom(e.maxZoom):0;const o=this.rotatedExtentForGeometry(t);let a=this.getResolutionForExtentInternal(o,[n[0]-i[1]-i[3],n[1]-i[0]-i[2]]);a=isNaN(a)?r:Math.max(a,r),a=this.getConstrainedResolution(a,s?0:1);const c=this.getRotation(),u=Math.sin(c),h=Math.cos(c),d=(0,p.qg)(o);d[0]+=(i[1]-i[3])/2*a,d[1]+=(i[0]-i[2])/2*a;const _=d[0]*h-d[1]*u,f=d[1]*h+d[0]*u,g=this.getConstrainedCenter([_,f],a),m=e.callback?e.callback:l.Zn;void 0!==e.duration?this.animateInternal({resolution:a,center:g,duration:e.duration,easing:e.easing},m):(this.targetResolution_=a,this.targetCenter_=g,this.applyTargetState_(!1,!0),x(m,!0))}centerOn(t,e,n){this.centerOnInternal((0,a.Vs)(t,this.getProjection()),e,n)}centerOnInternal(t,e,n){this.setCenterInternal(T(t,e,n,this.getResolution(),this.getRotation()))}calculateCenterShift(t,e,n,i){let s;const r=this.padding_;if(r&&t){const o=this.getViewportSizeMinusPadding_(-n),a=T(t,i,[o[0]/2+r[3],o[1]/2+r[0]],e,n);s=[t[0]-a[0],t[1]-a[1]]}return s}isDef(){return!!this.getCenterInternal()&&void 0!==this.getResolution()}adjustCenter(t){const e=(0,a.lO)(this.targetCenter_,this.getProjection());this.setCenter([e[0]+t[0],e[1]+t[1]])}adjustCenterInternal(t){const e=this.targetCenter_;this.setCenterInternal([e[0]+t[0],e[1]+t[1]])}adjustResolution(t,e){e=e&&(0,a.Vs)(e,this.getProjection()),this.adjustResolutionInternal(t,e)}adjustResolutionInternal(t,e){const n=this.getAnimating()||this.getInteracting(),i=this.getViewportSize_(this.getRotation()),s=this.constraints_.resolution(this.targetResolution_*t,0,i,n);e&&(this.targetCenter_=this.calculateCenterZoom(s,e)),this.targetResolution_*=t,this.applyTargetState_()}adjustZoom(t,e){this.adjustResolution(Math.pow(this.zoomFactor_,-t),e)}adjustRotation(t,e){e&&(e=(0,a.Vs)(e,this.getProjection())),this.adjustRotationInternal(t,e)}adjustRotationInternal(t,e){const n=this.getAnimating()||this.getInteracting(),i=this.constraints_.rotation(this.targetRotation_+t,n);e&&(this.targetCenter_=this.calculateCenterRotate(i,e)),this.targetRotation_+=t,this.applyTargetState_()}setCenter(t){this.setCenterInternal(t?(0,a.Vs)(t,this.getProjection()):t)}setCenterInternal(t){this.targetCenter_=t,this.applyTargetState_()}setHint(t,e){return this.hints_[t]+=e,this.changed(),this.hints_[t]}setResolution(t){this.targetResolution_=t,this.applyTargetState_()}setRotation(t){this.targetRotation_=t,this.applyTargetState_()}setZoom(t){this.setResolution(this.getResolutionForZoom(t))}applyTargetState_(t,e){const n=this.getAnimating()||this.getInteracting()||e,i=this.constraints_.rotation(this.targetRotation_,n),s=this.getViewportSize_(i),o=this.constraints_.resolution(this.targetResolution_,0,s,n),a=this.constraints_.center(this.targetCenter_,o,s,n,this.calculateCenterShift(this.targetCenter_,o,i,s));this.get(r.ROTATION)!==i&&this.set(r.ROTATION,i),this.get(r.RESOLUTION)!==o&&(this.set(r.RESOLUTION,o),this.set("zoom",this.getZoom(),!0)),a&&this.get(r.CENTER)&&(0,c.fS)(this.get(r.CENTER),a)||this.set(r.CENTER,a),this.getAnimating()&&!t&&this.cancelAnimations(),this.cancelAnchor_=void 0}resolveConstraints(t,e,n){t=void 0!==t?t:200;const i=e||0,s=this.constraints_.rotation(this.targetRotation_),r=this.getViewportSize_(s),o=this.constraints_.resolution(this.targetResolution_,i,r),a=this.constraints_.center(this.targetCenter_,o,r,!1,this.calculateCenterShift(this.targetCenter_,o,s,r));if(0===t&&!this.cancelAnchor_)return this.targetResolution_=o,this.targetRotation_=s,this.targetCenter_=a,void this.applyTargetState_();n=n||(0===t?this.cancelAnchor_:void 0),this.cancelAnchor_=void 0,this.getResolution()===o&&this.getRotation()===s&&this.getCenterInternal()&&(0,c.fS)(this.getCenterInternal(),a)||(this.getAnimating()&&this.cancelAnimations(),this.animateInternal({rotation:s,center:a,resolution:o,duration:t,easing:b.Vv,anchor:n}))}beginInteraction(){this.resolveConstraints(0),this.setHint(s.Z.INTERACTING,1)}endInteraction(t,e,n){n=n&&(0,a.Vs)(n,this.getProjection()),this.endInteractionInternal(t,e,n)}endInteractionInternal(t,e,n){this.setHint(s.Z.INTERACTING,-1),this.resolveConstraints(t,e,n)}getConstrainedCenter(t,e){const n=this.getViewportSize_(this.getRotation());return this.constraints_.center(t,e||this.getResolution(),n)}getConstrainedZoom(t,e){const n=this.getResolutionForZoom(t);return this.getZoomForResolution(this.getConstrainedResolution(n,e))}getConstrainedResolution(t,e){e=e||0;const n=this.getViewportSize_(this.getRotation());return this.constraints_.resolution(t,e,n)}}function x(t,e){setTimeout((function(){t(e)}),0)}function q(t){return!(t.sourceCenter&&t.targetCenter&&!(0,c.fS)(t.sourceCenter,t.targetCenter))&&t.sourceResolution===t.targetResolution&&t.sourceRotation===t.targetRotation}function T(t,e,n,i,s){const r=Math.cos(-s);let o=Math.sin(-s),a=t[0]*r-t[1]*o,l=t[1]*r+t[0]*o;return a+=(e[0]/2-n[0])*i,l+=(n[1]-e[1]/2)*i,o=-o,[a*r-l*o,l*r+a*o]}const S=E},7755:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});const i={ANIMATING:0,INTERACTING:1}},5537:(t,e,n)=>{"use strict";function i(t,e,n){let i,r;n=n||s;let o=0,a=t.length,l=!1;for(;o<a;)i=o+(a-o>>1),r=+n(t[i],e),r<0?o=i+1:(a=i,l=!r);return l?o:~o}function s(t,e){return t>e?1:t<e?-1:0}function r(t,e,n){const i=t.length;if(t[0]<=e)return 0;if(e<=t[i-1])return i-1;let s;if(n>0){for(s=1;s<i;++s)if(t[s]<e)return s-1}else if(n<0){for(s=1;s<i;++s)if(t[s]<=e)return s}else for(s=1;s<i;++s){if(t[s]==e)return s;if(t[s]<e)return"function"==typeof n?n(e,t[s-1],t[s])>0?s-1:s:t[s-1]-e<e-t[s]?s-1:s}return i-1}function o(t,e,n){for(;e<n;){const i=t[e];t[e]=t[n],t[n]=i,++e,--n}}function a(t,e){const n=Array.isArray(e)?e:[e],i=n.length;for(let e=0;e<i;e++)t[t.length]=n[e]}function l(t,e){const n=t.length;if(n!==e.length)return!1;for(let i=0;i<n;i++)if(t[i]!==e[i])return!1;return!0}function c(t,e,n){const i=e||s;return t.every((function(e,s){if(0===s)return!0;const r=i(t[s-1],e);return!(r>0||n&&0===r)}))}n.d(e,{FZ:()=>o,fS:()=>l,h7:()=>r,j2:()=>s,l7:()=>a,pT:()=>c,ry:()=>i})},9515:(t,e,n)=>{"use strict";n.d(e,{h:()=>s});var i=n(6813);function s(t,e){if(!t)throw new i.Z(e)}},9706:(t,e,n)=>{"use strict";n.d(e,{BB:()=>h,XC:()=>a,_2:()=>c});var i=n(9515),s=n(3983);const r=/^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i,o=/^([a-z]*)$|^hsla?\(.*\)$/i;function a(t){return"string"==typeof t?t:h(t)}const l=function(){const t={};let e=0;return function(n){let s;if(t.hasOwnProperty(n))s=t[n];else{if(e>=1024){let n=0;for(const i in t)0==(3&n++)&&(delete t[i],--e)}s=function(t){let e,n,s,a,l;if(o.exec(t)&&(t=function(t){const e=document.createElement("div");if(e.style.color=t,""!==e.style.color){document.body.appendChild(e);const t=getComputedStyle(e).color;return document.body.removeChild(e),t}return""}(t)),r.exec(t)){const i=t.length-1;let r;r=i<=4?1:2;const o=4===i||8===i;e=parseInt(t.substr(1+0*r,r),16),n=parseInt(t.substr(1+1*r,r),16),s=parseInt(t.substr(1+2*r,r),16),a=o?parseInt(t.substr(1+3*r,r),16):255,1==r&&(e=(e<<4)+e,n=(n<<4)+n,s=(s<<4)+s,o&&(a=(a<<4)+a)),l=[e,n,s,a/255]}else t.startsWith("rgba(")?(l=t.slice(5,-1).split(",").map(Number),u(l)):t.startsWith("rgb(")?(l=t.slice(4,-1).split(",").map(Number),l.push(1),u(l)):(0,i.h)(!1,14);return l}(n),t[n]=s,++e}return s}}();function c(t){return Array.isArray(t)?t:l(t)}function u(t){return t[0]=(0,s.uZ)(t[0]+.5|0,0,255),t[1]=(0,s.uZ)(t[1]+.5|0,0,255),t[2]=(0,s.uZ)(t[2]+.5|0,0,255),t[3]=(0,s.uZ)(t[3],0,1),t}function h(t){let e=t[0];e!=(0|e)&&(e=e+.5|0);let n=t[1];n!=(0|n)&&(n=n+.5|0);let i=t[2];return i!=(0|i)&&(i=i+.5|0),"rgba("+e+","+n+","+i+","+(void 0===t[3]?1:Math.round(100*t[3])/100)+")"}},44:(t,e,n)=>{"use strict";n.d(e,{ZK:()=>r});const i={info:1,warn:2,error:3,none:4};let s=i.info;function r(...t){s>i.warn||console.warn(...t)}},1900:(t,e,n)=>{"use strict";n.d(e,{Cf:()=>l,IH:()=>s,U1:()=>o,bA:()=>a,fS:()=>r});var i=n(8641);function s(t,e){return t[0]+=+e[0],t[1]+=+e[1],t}function r(t,e){let n=!0;for(let i=t.length-1;i>=0;--i)if(t[i]!=e[i]){n=!1;break}return n}function o(t,e){const n=Math.cos(e),i=Math.sin(e),s=t[0]*n-t[1]*i,r=t[1]*n+t[0]*i;return t[0]=s,t[1]=r,t}function a(t,e){return t[0]*=e,t[1]*=e,t}function l(t,e){if(e.canWrapX()){const n=(0,i.dz)(e.getExtent()),s=function(t,e,n){const s=e.getExtent();let r=0;return e.canWrapX()&&(t[0]<s[0]||t[0]>s[2])&&(n=n||(0,i.dz)(s),r=Math.floor((t[0]-s[0])/n)),r}(t,e,n);s&&(t[0]-=s*n)}return t}},245:(t,e,n)=>{"use strict";n.d(e,{XV:()=>s,hN:()=>o,hg:()=>r,oj:()=>i,p:()=>c});const i="ol-hidden",s="ol-unselectable",r="ol-control",o="ol-collapsed",a=new RegExp(["^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)","(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)","(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)","(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?","(?:small|large)|medium|smaller|larger|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))","(?:\\s*\\/\\s*(normal|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])?))","?\\s*([-,\\\"\\'\\sa-z]+?)\\s*$"].join(""),"i"),l=["style","variant","weight","size","lineHeight","family"],c=function(t){const e=t.match(a);if(!e)return null;const n={lineHeight:"normal",size:"1.2em",style:"normal",weight:"normal",variant:"normal"};for(let t=0,i=l.length;t<i;++t){const i=e[t+1];void 0!==i&&(n[l[t]]=i)}return n.families=n.family.split(/,\s?/),n}},8326:(t,e,n)=>{"use strict";n.d(e,{$H:()=>o,E4:()=>s,ZF:()=>a,ep:()=>l,hF:()=>c,jy:()=>r});var i=n(177);function s(t,e,n,s){let r;return r=n&&n.length?n.shift():i.Id?new OffscreenCanvas(t||300,e||300):document.createElement("canvas"),t&&(r.width=t),e&&(r.height=e),r.getContext("2d",s)}function r(t){const e=t.canvas;e.width=1,e.height=1,t.clearRect(0,0,1,1)}function o(t,e){const n=e.parentNode;n&&n.replaceChild(t,e)}function a(t){return t&&t.parentNode?t.parentNode.removeChild(t):null}function l(t){for(;t.lastChild;)t.removeChild(t.lastChild)}function c(t,e){const n=t.childNodes;for(let i=0;;++i){const s=n[i],r=e[i];if(!s&&!r)break;s!==r&&(s?r?t.insertBefore(r,s):(t.removeChild(s),--i):t.appendChild(r))}}},1015:(t,e,n)=>{"use strict";function i(t){return Math.pow(t,3)}function s(t){return 1-i(1-t)}function r(t){return 3*t*t-2*t*t*t}function o(t){return t}n.d(e,{GE:()=>o,Vv:()=>s,YQ:()=>i,rd:()=>r})},5818:(t,e,n)=>{"use strict";n.d(e,{Vx:()=>r,bN:()=>o,oL:()=>s});var i=n(9374);function s(t,e,n,i,s){if(i&&i!==t&&(n=n.bind(i)),s){const i=n;n=function(){t.removeEventListener(e,n),i.apply(this,arguments)}}const r={target:t,type:e,listener:n};return t.addEventListener(e,n),r}function r(t,e,n,i){return s(t,e,n,i,!0)}function o(t){t&&t.target&&(t.target.removeEventListener(t.type,t.listener),(0,i.Z)(t))}},291:(t,e,n)=>{"use strict";n.d(e,{ZP:()=>i});const i=class{constructor(t){this.propagationStopped,this.defaultPrevented,this.type=t,this.target=null}preventDefault(){this.defaultPrevented=!0}stopPropagation(){this.propagationStopped=!0}}},5487:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});const i={CHANGE:"change",ERROR:"error",BLUR:"blur",CLEAR:"clear",CONTEXTMENU:"contextmenu",CLICK:"click",DBLCLICK:"dblclick",DRAGENTER:"dragenter",DRAGOVER:"dragover",DROP:"drop",FOCUS:"focus",KEYDOWN:"keydown",KEYPRESS:"keypress",LOAD:"load",RESIZE:"resize",TOUCHMOVE:"touchmove",WHEEL:"wheel"}},208:(t,e,n)=>{"use strict";n.d(e,{Z:()=>l});var i=n(5431),s=n(291),r=n(6885),o=n(9374);class a extends i.Z{constructor(t){super(),this.eventTarget_=t,this.pendingRemovals_=null,this.dispatching_=null,this.listeners_=null}addEventListener(t,e){if(!t||!e)return;const n=this.listeners_||(this.listeners_={}),i=n[t]||(n[t]=[]);i.includes(e)||i.push(e)}dispatchEvent(t){const e="string"==typeof t,n=e?t:t.type,i=this.listeners_&&this.listeners_[n];if(!i)return;const o=e?new s.ZP(t):t;o.target||(o.target=this.eventTarget_||this);const a=this.dispatching_||(this.dispatching_={}),l=this.pendingRemovals_||(this.pendingRemovals_={});let c;n in a||(a[n]=0,l[n]=0),++a[n];for(let t=0,e=i.length;t<e;++t)if(c="handleEvent"in i[t]?i[t].handleEvent(o):i[t].call(this,o),!1===c||o.propagationStopped){c=!1;break}if(0==--a[n]){let t=l[n];for(delete l[n];t--;)this.removeEventListener(n,r.Zn);delete a[n]}return c}disposeInternal(){this.listeners_&&(0,o.Z)(this.listeners_)}getListeners(t){return this.listeners_&&this.listeners_[t]||void 0}hasListener(t){return!!this.listeners_&&(t?t in this.listeners_:Object.keys(this.listeners_).length>0)}removeEventListener(t,e){const n=this.listeners_&&this.listeners_[t];if(n){const i=n.indexOf(e);-1!==i&&(this.pendingRemovals_&&t in this.pendingRemovals_?(n[i]=r.Zn,++this.pendingRemovals_[t]):(n.splice(i,1),0===n.length&&delete this.listeners_[t]))}}}const l=a},8641:(t,e,n)=>{"use strict";n.d(e,{Cr:()=>R,EO:()=>N,Ed:()=>P,GN:()=>m,H6:()=>x,HK:()=>g,I7:()=>z,Ne:()=>Z,T9:()=>p,Wj:()=>b,Xv:()=>O,YN:()=>f,b8:()=>c,bg:()=>q,d9:()=>a,dY:()=>k,dz:()=>L,f3:()=>o,fS:()=>y,g0:()=>I,hC:()=>T,hI:()=>r,jE:()=>h,kK:()=>M,l7:()=>v,lJ:()=>_,p8:()=>A,pX:()=>d,qP:()=>w,qf:()=>l,qg:()=>C,r4:()=>u,rL:()=>F,w$:()=>S,xb:()=>D});var i=n(8716),s=n(9515);function r(t){const e=[1/0,1/0,-1/0,-1/0];for(let n=0,i=t.length;n<i;++n)b(e,t[n]);return e}function o(t,e,n){return n?(n[0]=t[0]-e,n[1]=t[1]-e,n[2]=t[2]+e,n[3]=t[3]+e,n):[t[0]-e,t[1]-e,t[2]+e,t[3]+e]}function a(t,e){return e?(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e):t.slice()}function l(t,e,n){let i,s;return i=e<t[0]?t[0]-e:t[2]<e?e-t[2]:0,s=n<t[1]?t[1]-n:t[3]<n?n-t[3]:0,i*i+s*s}function c(t,e){return h(t,e[0],e[1])}function u(t,e){return t[0]<=e[0]&&e[2]<=t[2]&&t[1]<=e[1]&&e[3]<=t[3]}function h(t,e,n){return t[0]<=e&&e<=t[2]&&t[1]<=n&&n<=t[3]}function d(t,e){const n=t[0],s=t[1],r=t[2],o=t[3],a=e[0],l=e[1];let c=i.Z.UNKNOWN;return a<n?c|=i.Z.LEFT:a>r&&(c|=i.Z.RIGHT),l<s?c|=i.Z.BELOW:l>o&&(c|=i.Z.ABOVE),c===i.Z.UNKNOWN&&(c=i.Z.INTERSECTING),c}function _(){return[1/0,1/0,-1/0,-1/0]}function p(t,e,n,i,s){return s?(s[0]=t,s[1]=e,s[2]=n,s[3]=i,s):[t,e,n,i]}function f(t){return p(1/0,1/0,-1/0,-1/0,t)}function g(t,e){const n=t[0],i=t[1];return p(n,i,n,i,e)}function m(t,e,n,i,s){return w(f(s),t,e,n,i)}function y(t,e){return t[0]==e[0]&&t[2]==e[2]&&t[1]==e[1]&&t[3]==e[3]}function v(t,e){return e[0]<t[0]&&(t[0]=e[0]),e[2]>t[2]&&(t[2]=e[2]),e[1]<t[1]&&(t[1]=e[1]),e[3]>t[3]&&(t[3]=e[3]),t}function b(t,e){e[0]<t[0]&&(t[0]=e[0]),e[0]>t[2]&&(t[2]=e[0]),e[1]<t[1]&&(t[1]=e[1]),e[1]>t[3]&&(t[3]=e[1])}function w(t,e,n,i,s){for(;n<i;n+=s)E(t,e[n],e[n+1]);return t}function E(t,e,n){t[0]=Math.min(t[0],e),t[1]=Math.min(t[1],n),t[2]=Math.max(t[2],e),t[3]=Math.max(t[3],n)}function x(t,e){let n;return n=e(T(t)),n||(n=e(S(t)),n||(n=e(O(t)),n||(n=e(F(t)),n||!1)))}function q(t){let e=0;return D(t)||(e=L(t)*R(t)),e}function T(t){return[t[0],t[1]]}function S(t){return[t[2],t[1]]}function C(t){return[(t[0]+t[2])/2,(t[1]+t[3])/2]}function I(t,e){let n;return"bottom-left"===e?n=T(t):"bottom-right"===e?n=S(t):"top-left"===e?n=F(t):"top-right"===e?n=O(t):(0,s.h)(!1,13),n}function A(t,e,n,i,s){const[r,o,a,l,c,u,h,d]=k(t,e,n,i);return p(Math.min(r,a,c,h),Math.min(o,l,u,d),Math.max(r,a,c,h),Math.max(o,l,u,d),s)}function k(t,e,n,i){const s=e*i[0]/2,r=e*i[1]/2,o=Math.cos(n),a=Math.sin(n),l=s*o,c=s*a,u=r*o,h=r*a,d=t[0],_=t[1];return[d-l+h,_-c-u,d-l-h,_-c+u,d+l-h,_+c+u,d+l+h,_+c-u,d-l+h,_-c-u]}function R(t){return t[3]-t[1]}function P(t,e,n){const i=n||[1/0,1/0,-1/0,-1/0];return M(t,e)?(t[0]>e[0]?i[0]=t[0]:i[0]=e[0],t[1]>e[1]?i[1]=t[1]:i[1]=e[1],t[2]<e[2]?i[2]=t[2]:i[2]=e[2],t[3]<e[3]?i[3]=t[3]:i[3]=e[3]):f(i),i}function F(t){return[t[0],t[3]]}function O(t){return[t[2],t[3]]}function L(t){return t[2]-t[0]}function M(t,e){return t[0]<=e[2]&&t[2]>=e[0]&&t[1]<=e[3]&&t[3]>=e[1]}function D(t){return t[2]<t[0]||t[3]<t[1]}function N(t,e){return e?(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e):t}function z(t,e,n){let s=!1;const r=d(t,e),o=d(t,n);if(r===i.Z.INTERSECTING||o===i.Z.INTERSECTING)s=!0;else{const a=t[0],l=t[1],c=t[2],u=t[3],h=e[0],d=e[1],_=n[0],p=n[1],f=(p-d)/(_-h);let g,m;o&i.Z.ABOVE&&!(r&i.Z.ABOVE)&&(g=_-(p-u)/f,s=g>=a&&g<=c),s||!(o&i.Z.RIGHT)||r&i.Z.RIGHT||(m=p-(_-c)*f,s=m>=l&&m<=u),s||!(o&i.Z.BELOW)||r&i.Z.BELOW||(g=_-(p-l)/f,s=g>=a&&g<=c),s||!(o&i.Z.LEFT)||r&i.Z.LEFT||(m=p-(_-a)*f,s=m>=l&&m<=u)}return s}function Z(t,e,n,i){let s=[];if(i>1){const e=t[2]-t[0],n=t[3]-t[1];for(let r=0;r<i;++r)s.push(t[0]+e*r/i,t[1],t[2],t[1]+n*r/i,t[2]-e*r/i,t[3],t[0],t[3]-n*r/i)}else s=[t[0],t[1],t[2],t[1],t[2],t[3],t[0],t[3]];e(s,s,2);const r=[],o=[];for(let t=0,e=s.length;t<e;t+=2)r.push(s[t]),o.push(s[t+1]);return function(t,e,n){return p(Math.min.apply(null,t),Math.min.apply(null,e),Math.max.apply(null,t),Math.max.apply(null,e),n)}(r,o,n)}},8716:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});const i={UNKNOWN:0,INTERSECTING:1,ABOVE:2,RIGHT:4,BELOW:8,LEFT:16}},9646:(t,e,n)=>{"use strict";n.d(e,{ZP:()=>r});var i=n(4187),s=n(8661);const r=class{constructor(){this.dataProjection=void 0,this.defaultFeatureProjection=void 0,this.supportedMediaTypes=null}getReadOptions(t,e){if(e){let n=e.dataProjection?(0,s.U2)(e.dataProjection):this.readProjection(t);e.extent&&n&&"tile-pixels"===n.getUnits()&&(n=(0,s.U2)(n),n.setWorldExtent(e.extent)),e={dataProjection:n,featureProjection:e.featureProjection}}return this.adaptOptions(e)}adaptOptions(t){return Object.assign({dataProjection:this.dataProjection,featureProjection:this.defaultFeatureProjection},t)}getType(){return(0,i.O3)()}readFeature(t,e){return(0,i.O3)()}readFeatures(t,e){return(0,i.O3)()}readGeometry(t,e){return(0,i.O3)()}readProjection(t){return(0,i.O3)()}writeFeature(t,e){return(0,i.O3)()}writeFeatures(t,e){return(0,i.O3)()}writeGeometry(t,e){return(0,i.O3)()}}},6885:(t,e,n)=>{"use strict";n.d(e,{Dv:()=>r,Zn:()=>o,qe:()=>a,uX:()=>s});var i=n(5537);function s(){return!0}function r(){return!1}function o(){}function a(t){let e,n,s,r=!1;return function(){const o=Array.prototype.slice.call(arguments);return r&&this===s&&(0,i.fS)(o,n)||(r=!0,s=this,n=o,e=t.apply(this,arguments)),e}}},1082:(t,e,n)=>{"use strict";n.d(e,{ZP:()=>T,oJ:()=>S});var i=n(6762),s=n(3983);function r(t,e,n,i,r,o,a){const l=t[e],c=t[e+1],u=t[n]-l,h=t[n+1]-c;let d;if(0===u&&0===h)d=e;else{const _=((r-l)*u+(o-c)*h)/(u*u+h*h);if(_>1)d=n;else{if(_>0){for(let r=0;r<i;++r)a[r]=(0,s.t7)(t[e+r],t[n+r],_);return void(a.length=i)}d=e}}for(let e=0;e<i;++e)a[e]=t[d+e];a.length=i}function o(t,e,n,i,r){let o=t[e],a=t[e+1];for(e+=i;e<n;e+=i){const n=t[e],i=t[e+1],l=(0,s.bI)(o,a,n,i);l>r&&(r=l),o=n,a=i}return r}function a(t,e,n,i,o,a,l,c,u,h,d){if(e==n)return h;let _,p;if(0===o){if(p=(0,s.bI)(l,c,t[e],t[e+1]),p<h){for(_=0;_<i;++_)u[_]=t[e+_];return u.length=i,p}return h}d=d||[NaN,NaN];let f=e+i;for(;f<n;)if(r(t,f-i,f,i,l,c,d),p=(0,s.bI)(l,c,d[0],d[1]),p<h){for(h=p,_=0;_<i;++_)u[_]=d[_];u.length=i,f+=i}else f+=i*Math.max((Math.sqrt(p)-Math.sqrt(h))/o|0,1);if(a&&(r(t,n-i,e,i,l,c,d),p=(0,s.bI)(l,c,d[0],d[1]),p<h)){for(h=p,_=0;_<i;++_)u[_]=d[_];u.length=i}return h}var l=n(8641);function c(t,e,n,i){for(let s=0,r=n.length;s<r;++s){const r=n[s];for(let n=0;n<i;++n)t[e++]=r[n]}return e}var u=n(226),h=n(9241);function d(t,e,n,i){let s=0,r=t[n-i],o=t[n-i+1];for(;e<n;e+=i){const n=t[e],i=t[e+1];s+=o*n-r*i,r=n,o=i}return s/2}class _ extends i.ZP{constructor(t,e){super(),this.maxDelta_=-1,this.maxDeltaRevision_=-1,void 0===e||Array.isArray(t[0])?this.setCoordinates(t,e):this.setFlatCoordinates(e,t)}clone(){return new _(this.flatCoordinates.slice(),this.layout)}closestPointXY(t,e,n,i){return i<(0,l.qf)(this.getExtent(),t,e)?i:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(o(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),a(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,this.maxDelta_,!0,t,e,n,i))}getArea(){return d(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)}getCoordinates(){return(0,h.Ml)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)}getSimplifiedGeometryInternal(t){const e=[];return e.length=(0,u.dt)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,e,0),new _(e,"XY")}getType(){return"LinearRing"}intersectsExtent(t){return!1}setCoordinates(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=c(this.flatCoordinates,0,t,this.stride),this.changed()}}const p=_;class f extends i.ZP{constructor(t,e){super(),this.setCoordinates(t,e)}clone(){const t=new f(this.flatCoordinates.slice(),this.layout);return t.applyProperties(this),t}closestPointXY(t,e,n,i){const r=this.flatCoordinates,o=(0,s.bI)(t,e,r[0],r[1]);if(o<i){const t=this.stride;for(let e=0;e<t;++e)n[e]=r[e];return n.length=t,o}return i}getCoordinates(){return this.flatCoordinates?this.flatCoordinates.slice():[]}computeExtent(t){return(0,l.HK)(this.flatCoordinates,t)}getType(){return"Point"}intersectsExtent(t){return(0,l.jE)(t,this.flatCoordinates[0],this.flatCoordinates[1])}setCoordinates(t,e){this.setLayout(e,t,0),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=function(t,e,n,i){for(let i=0,s=n.length;i<s;++i)t[e++]=n[i];return e}(this.flatCoordinates,0,t,this.stride),this.changed()}}const g=f;var m=n(5537),y=n(3448),v=n(969);function b(t,e,n,i){for(;e<n-i;){for(let s=0;s<i;++s){const r=t[e+s];t[e+s]=t[n-i+s],t[n-i+s]=r}e+=i,n-=i}}function w(t,e,n,i){let s=0,r=t[n-i],o=t[n-i+1];for(;e<n;e+=i){const n=t[e],i=t[e+1];s+=(n-r)*(i+o),r=n,o=i}return 0===s?void 0:s>0}function E(t,e,n,i,s){s=void 0!==s&&s;for(let r=0,o=n.length;r<o;++r){const o=n[r],a=w(t,e,o,i);(0===r?s&&a||!s&&!a:s&&!a||!s&&a)&&b(t,e,o,i),e=o}return e}var x=n(9679);class q extends i.ZP{constructor(t,e,n){super(),this.ends_=[],this.flatInteriorPointRevision_=-1,this.flatInteriorPoint_=null,this.maxDelta_=-1,this.maxDeltaRevision_=-1,this.orientedRevision_=-1,this.orientedFlatCoordinates_=null,void 0!==e&&n?(this.setFlatCoordinates(e,t),this.ends_=n):this.setCoordinates(t,e)}appendLinearRing(t){this.flatCoordinates?(0,m.l7)(this.flatCoordinates,t.getFlatCoordinates()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.ends_.push(this.flatCoordinates.length),this.changed()}clone(){const t=new q(this.flatCoordinates.slice(),this.layout,this.ends_.slice());return t.applyProperties(this),t}closestPointXY(t,e,n,i){return i<(0,l.qf)(this.getExtent(),t,e)?i:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(function(t,e,n,i,s){for(let r=0,a=n.length;r<a;++r){const a=n[r];s=o(t,e,a,i,s),e=a}return s}(this.flatCoordinates,0,this.ends_,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),function(t,e,n,i,s,r,o,l,c,u,h){h=h||[NaN,NaN];for(let d=0,_=n.length;d<_;++d){const _=n[d];u=a(t,e,_,i,s,r,o,l,c,u,h),e=_}return u}(this.flatCoordinates,0,this.ends_,this.stride,this.maxDelta_,!0,t,e,n,i))}containsXY(t,e){return(0,x.wY)(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,e)}getArea(){return function(t,e,n,i){let s=0;for(let r=0,o=n.length;r<o;++r){const o=n[r];s+=d(t,e,o,i),e=o}return s}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride)}getCoordinates(t){let e;return void 0!==t?(e=this.getOrientedFlatCoordinates().slice(),E(e,0,this.ends_,this.stride,t)):e=this.flatCoordinates,(0,h.o1)(e,0,this.ends_,this.stride)}getEnds(){return this.ends_}getFlatInteriorPoint(){if(this.flatInteriorPointRevision_!=this.getRevision()){const t=(0,l.qg)(this.getExtent());this.flatInteriorPoint_=(0,y.X)(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,0),this.flatInteriorPointRevision_=this.getRevision()}return this.flatInteriorPoint_}getInteriorPoint(){return new g(this.getFlatInteriorPoint(),"XYM")}getLinearRingCount(){return this.ends_.length}getLinearRing(t){return t<0||this.ends_.length<=t?null:new p(this.flatCoordinates.slice(0===t?0:this.ends_[t-1],this.ends_[t]),this.layout)}getLinearRings(){const t=this.layout,e=this.flatCoordinates,n=this.ends_,i=[];let s=0;for(let r=0,o=n.length;r<o;++r){const o=n[r],a=new p(e.slice(s,o),t);i.push(a),s=o}return i}getOrientedFlatCoordinates(){if(this.orientedRevision_!=this.getRevision()){const t=this.flatCoordinates;!function(t,e,n,i,s){s=void 0!==s&&s;for(let r=0,o=n.length;r<o;++r){const o=n[r],a=w(t,e,o,i);if(0===r){if(s&&a||!s&&!a)return!1}else if(s&&!a||!s&&a)return!1;e=o}return!0}(t,0,this.ends_,this.stride)?(this.orientedFlatCoordinates_=t.slice(),this.orientedFlatCoordinates_.length=E(this.orientedFlatCoordinates_,0,this.ends_,this.stride)):this.orientedFlatCoordinates_=t,this.orientedRevision_=this.getRevision()}return this.orientedFlatCoordinates_}getSimplifiedGeometryInternal(t){const e=[],n=[];return e.length=(0,u.Zh)(this.flatCoordinates,0,this.ends_,this.stride,Math.sqrt(t),e,0,n),new q(e,"XY",n)}getType(){return"Polygon"}intersectsExtent(t){return(0,v.ac)(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t)}setCoordinates(t,e){this.setLayout(e,t,2),this.flatCoordinates||(this.flatCoordinates=[]);const n=function(t,e,n,i,s){s=s||[];let r=0;for(let o=0,a=n.length;o<a;++o){const a=c(t,e,n[o],i);s[r++]=a,e=a}return s.length=r,s}(this.flatCoordinates,0,t,this.stride,this.ends_);this.flatCoordinates.length=0===n.length?0:n[n.length-1],this.changed()}}const T=q;function S(t){const e=t[0],n=t[1],i=t[2],s=t[3],r=[e,n,e,s,i,s,i,n,e,n];return new q(r,"XY",[r.length])}},6762:(t,e,n)=>{"use strict";n.d(e,{ZP:()=>f,Kr:()=>p});var i=n(2971),s=n(4187),r=n(6101),o=n(8641),a=n(8661),l=n(6885),c=n(6442);const u=(0,r.Ue)();class h extends i.Z{constructor(){super(),this.extent_=(0,o.lJ)(),this.extentRevision_=-1,this.simplifiedGeometryMaxMinSquaredTolerance=0,this.simplifiedGeometryRevision=0,this.simplifyTransformedInternal=(0,l.qe)((function(t,e,n){if(!n)return this.getSimplifiedGeometry(e);const i=this.clone();return i.applyTransform(n),i.getSimplifiedGeometry(e)}))}simplifyTransformed(t,e){return this.simplifyTransformedInternal(this.getRevision(),t,e)}clone(){return(0,s.O3)()}closestPointXY(t,e,n,i){return(0,s.O3)()}containsXY(t,e){const n=this.getClosestPoint([t,e]);return n[0]===t&&n[1]===e}getClosestPoint(t,e){return e=e||[NaN,NaN],this.closestPointXY(t[0],t[1],e,1/0),e}intersectsCoordinate(t){return this.containsXY(t[0],t[1])}computeExtent(t){return(0,s.O3)()}getExtent(t){if(this.extentRevision_!=this.getRevision()){const t=this.computeExtent(this.extent_);(isNaN(t[0])||isNaN(t[1]))&&(0,o.YN)(t),this.extentRevision_=this.getRevision()}return(0,o.EO)(this.extent_,t)}rotate(t,e){(0,s.O3)()}scale(t,e,n){(0,s.O3)()}simplify(t){return this.getSimplifiedGeometry(t*t)}getSimplifiedGeometry(t){return(0,s.O3)()}getType(){return(0,s.O3)()}applyTransform(t){(0,s.O3)()}intersectsExtent(t){return(0,s.O3)()}translate(t,e){(0,s.O3)()}transform(t,e){const n=(0,a.U2)(t),i="tile-pixels"==n.getUnits()?function(t,i,s){const l=n.getExtent(),h=n.getWorldExtent(),d=(0,o.Cr)(h)/(0,o.Cr)(l);return(0,r.qC)(u,h[0],h[3],d,-d,0,0,0),(0,c.vT)(t,0,t.length,s,u,i),(0,a.Ck)(n,e)(t,i,s)}:(0,a.Ck)(n,e);return this.applyTransform(i),this}}const d=h;function _(t){let e;return"XY"==t?e=2:"XYZ"==t||"XYM"==t?e=3:"XYZM"==t&&(e=4),e}function p(t,e,n){const i=t.getFlatCoordinates();if(!i)return null;const s=t.getStride();return(0,c.vT)(i,0,i.length,s,e,n)}const f=class extends d{constructor(){super(),this.layout="XY",this.stride=2,this.flatCoordinates=null}computeExtent(t){return(0,o.GN)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t)}getCoordinates(){return(0,s.O3)()}getFirstCoordinate(){return this.flatCoordinates.slice(0,this.stride)}getFlatCoordinates(){return this.flatCoordinates}getLastCoordinate(){return this.flatCoordinates.slice(this.flatCoordinates.length-this.stride)}getLayout(){return this.layout}getSimplifiedGeometry(t){if(this.simplifiedGeometryRevision!==this.getRevision()&&(this.simplifiedGeometryMaxMinSquaredTolerance=0,this.simplifiedGeometryRevision=this.getRevision()),t<0||0!==this.simplifiedGeometryMaxMinSquaredTolerance&&t<=this.simplifiedGeometryMaxMinSquaredTolerance)return this;const e=this.getSimplifiedGeometryInternal(t);return e.getFlatCoordinates().length<this.flatCoordinates.length?e:(this.simplifiedGeometryMaxMinSquaredTolerance=t,this)}getSimplifiedGeometryInternal(t){return this}getStride(){return this.stride}setFlatCoordinates(t,e){this.stride=_(t),this.layout=t,this.flatCoordinates=e}setCoordinates(t,e){(0,s.O3)()}setLayout(t,e,n){let i;if(t)i=_(t);else{for(let t=0;t<n;++t){if(0===e.length)return this.layout="XY",void(this.stride=2);e=e[0]}i=e.length,t=function(t){let e;return 2==t?e="XY":3==t?e="XYZ":4==t&&(e="XYZM"),e}(i)}this.layout=t,this.stride=i}applyTransform(t){this.flatCoordinates&&(t(this.flatCoordinates,this.flatCoordinates,this.stride),this.changed())}rotate(t,e){const n=this.getFlatCoordinates();if(n){const i=this.getStride();(0,c.U1)(n,0,n.length,i,t,e,n),this.changed()}}scale(t,e,n){void 0===e&&(e=t),n||(n=(0,o.qg)(this.getExtent()));const i=this.getFlatCoordinates();if(i){const s=this.getStride();(0,c.bA)(i,0,i.length,s,t,e,n,i),this.changed()}}translate(t,e){const n=this.getFlatCoordinates();if(n){const i=this.getStride();(0,c.Iu)(n,0,n.length,i,t,e,n),this.changed()}}}},9679:(t,e,n)=>{"use strict";n.d(e,{TG:()=>r,uG:()=>s,wY:()=>o});var i=n(8641);function s(t,e,n,s,o){return!(0,i.H6)(o,(function(i){return!r(t,e,n,s,i[0],i[1])}))}function r(t,e,n,i,s,r){let o=0,a=t[n-i],l=t[n-i+1];for(;e<n;e+=i){const n=t[e],i=t[e+1];l<=r?i>r&&(n-a)*(r-l)-(s-a)*(i-l)>0&&o++:i<=r&&(n-a)*(r-l)-(s-a)*(i-l)<0&&o--,a=n,l=i}return 0!==o}function o(t,e,n,i,s,o){if(0===n.length)return!1;if(!r(t,e,n[0],i,s,o))return!1;for(let e=1,a=n.length;e<a;++e)if(r(t,n[e-1],n[e],i,s,o))return!1;return!0}},9241:(t,e,n)=>{"use strict";function i(t,e,n,i,s){s=void 0!==s?s:[];let r=0;for(let o=e;o<n;o+=i)s[r++]=t.slice(o,o+i);return s.length=r,s}function s(t,e,n,s,r){r=void 0!==r?r:[];let o=0;for(let a=0,l=n.length;a<l;++a){const l=n[a];r[o++]=i(t,e,l,s,r[o]),e=l}return r.length=o,r}function r(t,e,n,i,r){r=void 0!==r?r:[];let o=0;for(let a=0,l=n.length;a<l;++a){const l=n[a];r[o++]=1===l.length&&l[0]===e?[]:s(t,e,l,i,r[o]),e=l[l.length-1]}return r.length=o,r}n.d(e,{Ml:()=>i,o1:()=>s,ug:()=>r})},3448:(t,e,n)=>{"use strict";n.d(e,{U:()=>o,X:()=>r});var i=n(5537),s=n(9679);function r(t,e,n,r,o,a,l){let c,u,h,d,_,p,f;const g=o[a+1],m=[];for(let i=0,s=n.length;i<s;++i){const s=n[i];for(d=t[s-r],p=t[s-r+1],c=e;c<s;c+=r)_=t[c],f=t[c+1],(g<=p&&f<=g||p<=g&&g<=f)&&(h=(g-p)/(f-p)*(_-d)+d,m.push(h)),d=_,p=f}let y=NaN,v=-1/0;for(m.sort(i.j2),d=m[0],c=1,u=m.length;c<u;++c){_=m[c];const i=Math.abs(_-d);i>v&&(h=(d+_)/2,(0,s.wY)(t,e,n,r,h,g)&&(y=h,v=i)),d=_}return isNaN(y)&&(y=o[a]),l?(l.push(y,g,v),l):[y,g,v]}function o(t,e,n,i,s){let o=[];for(let a=0,l=n.length;a<l;++a){const l=n[a];o=r(t,e,l,i,s,2*a,o),e=l[l.length-1]}return o}},969:(t,e,n)=>{"use strict";n.d(e,{mV:()=>o,ac:()=>a});var i=n(8641),s=n(9679);function r(t,e,n,s,r){const o=(0,i.qP)((0,i.lJ)(),t,e,n,s);return!!(0,i.kK)(r,o)&&(!!(0,i.r4)(r,o)||o[0]>=r[0]&&o[2]<=r[2]||o[1]>=r[1]&&o[3]<=r[3]||function(t,e,n,s,o){let a;for(e+=s;e<n;e+=s)if(l=t.slice(e-s,e),c=t.slice(e,e+s),a=(0,i.I7)(r,l,c),a)return a;var l,c;return!1}(t,e,n,s))}function o(t,e,n,i,o){return!!(r(t,e,n,i,o)||(0,s.TG)(t,e,n,i,o[0],o[1])||(0,s.TG)(t,e,n,i,o[0],o[3])||(0,s.TG)(t,e,n,i,o[2],o[1])||(0,s.TG)(t,e,n,i,o[2],o[3]))}function a(t,e,n,i,a){if(!o(t,e,n[0],i,a))return!1;if(1===n.length)return!0;for(let e=1,o=n.length;e<o;++e)if((0,s.uG)(t,n[e-1],n[e],i,a)&&!r(t,n[e-1],n[e],i,a))return!1;return!0}},226:(t,e,n)=>{"use strict";n.d(e,{Zh:()=>a,dt:()=>s,uZ:()=>r});var i=n(3983);function s(t,e,n,s,r,o,a){const l=(n-e)/s;if(l<3){for(;e<n;e+=s)o[a++]=t[e],o[a++]=t[e+1];return a}const c=new Array(l);c[0]=1,c[l-1]=1;const u=[e,n-s];let h=0;for(;u.length>0;){const n=u.pop(),o=u.pop();let a=0;const l=t[o],d=t[o+1],_=t[n],p=t[n+1];for(let e=o+s;e<n;e+=s){const n=t[e],s=t[e+1],r=(0,i.rU)(n,s,l,d,_,p);r>a&&(h=e,a=r)}a>r&&(c[(h-e)/s]=1,o+s<h&&u.push(o,h),h+s<n&&u.push(h,n))}for(let n=0;n<l;++n)c[n]&&(o[a++]=t[e+n*s],o[a++]=t[e+n*s+1]);return a}function r(t,e){return e*Math.round(t/e)}function o(t,e,n,i,s,o,a){if(e==n)return a;let l,c,u=r(t[e],s),h=r(t[e+1],s);e+=i,o[a++]=u,o[a++]=h;do{if(l=r(t[e],s),c=r(t[e+1],s),(e+=i)==n)return o[a++]=l,o[a++]=c,a}while(l==u&&c==h);for(;e<n;){const n=r(t[e],s),d=r(t[e+1],s);if(e+=i,n==l&&d==c)continue;const _=l-u,p=c-h,f=n-u,g=d-h;_*g==p*f&&(_<0&&f<_||_==f||_>0&&f>_)&&(p<0&&g<p||p==g||p>0&&g>p)?(l=n,c=d):(o[a++]=l,o[a++]=c,u=l,h=c,l=n,c=d)}return o[a++]=l,o[a++]=c,a}function a(t,e,n,i,s,r,a,l){for(let c=0,u=n.length;c<u;++c){const u=n[c];a=o(t,e,u,i,s,r,a),l.push(a),e=u}return a}},6442:(t,e,n)=>{"use strict";function i(t,e,n,i,s,r){r=r||[];let o=0;for(let a=e;a<n;a+=i){const e=t[a],n=t[a+1];r[o++]=s[0]*e+s[2]*n+s[4],r[o++]=s[1]*e+s[3]*n+s[5]}return r&&r.length!=o&&(r.length=o),r}function s(t,e,n,i,s,r,o){o=o||[];const a=Math.cos(s),l=Math.sin(s),c=r[0],u=r[1];let h=0;for(let s=e;s<n;s+=i){const e=t[s]-c,n=t[s+1]-u;o[h++]=c+e*a-n*l,o[h++]=u+e*l+n*a;for(let e=s+2;e<s+i;++e)o[h++]=t[e]}return o&&o.length!=h&&(o.length=h),o}function r(t,e,n,i,s,r,o,a){a=a||[];const l=o[0],c=o[1];let u=0;for(let o=e;o<n;o+=i){const e=t[o]-l,n=t[o+1]-c;a[u++]=l+s*e,a[u++]=c+r*n;for(let e=o+2;e<o+i;++e)a[u++]=t[e]}return a&&a.length!=u&&(a.length=u),a}function o(t,e,n,i,s,r,o){o=o||[];let a=0;for(let l=e;l<n;l+=i){o[a++]=t[l]+s,o[a++]=t[l+1]+r;for(let e=l+2;e<l+i;++e)o[a++]=t[e]}return o&&o.length!=a&&(o.length=a),o}n.d(e,{Iu:()=>o,U1:()=>s,bA:()=>r,vT:()=>i})},177:(t,e,n)=>{"use strict";n.d(e,{G$:()=>r,Id:()=>l,MP:()=>a,Tp:()=>c,V:()=>s,bM:()=>u,tK:()=>o});const i="undefined"!=typeof navigator&&void 0!==navigator.userAgent?navigator.userAgent.toLowerCase():"",s=i.includes("firefox"),r=(i.includes("safari")&&!i.includes("chrom")&&(i.includes("version/15.4")||/cpu (os|iphone os) 15_4 like mac os x/.test(i)),i.includes("webkit")&&!i.includes("edge")),o=i.includes("macintosh"),a="undefined"!=typeof devicePixelRatio?devicePixelRatio:1,l="undefined"!=typeof WorkerGlobalScope&&"undefined"!=typeof OffscreenCanvas&&self instanceof WorkerGlobalScope,c="undefined"!=typeof Image&&Image.prototype.decode,u=function(){let t=!1;try{const e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("_",null,e),window.removeEventListener("_",null,e)}catch(t){}return t}()},947:(t,e,n)=>{"use strict";n.d(e,{Z:()=>c});var i=n(2971),s=n(1912),r=n(4187),o=n(9515),a=n(3983);class l extends i.Z{constructor(t){super(),this.on,this.once,this.un,this.background_=t.background;const e=Object.assign({},t);"object"==typeof t.properties&&(delete e.properties,Object.assign(e,t.properties)),e[s.Z.OPACITY]=void 0!==t.opacity?t.opacity:1,(0,o.h)("number"==typeof e[s.Z.OPACITY],64),e[s.Z.VISIBLE]=void 0===t.visible||t.visible,e[s.Z.Z_INDEX]=t.zIndex,e[s.Z.MAX_RESOLUTION]=void 0!==t.maxResolution?t.maxResolution:1/0,e[s.Z.MIN_RESOLUTION]=void 0!==t.minResolution?t.minResolution:0,e[s.Z.MIN_ZOOM]=void 0!==t.minZoom?t.minZoom:-1/0,e[s.Z.MAX_ZOOM]=void 0!==t.maxZoom?t.maxZoom:1/0,this.className_=void 0!==e.className?e.className:"ol-layer",delete e.className,this.setProperties(e),this.state_=null}getBackground(){return this.background_}getClassName(){return this.className_}getLayerState(t){const e=this.state_||{layer:this,managed:void 0===t||t},n=this.getZIndex();return e.opacity=(0,a.uZ)(Math.round(100*this.getOpacity())/100,0,1),e.visible=this.getVisible(),e.extent=this.getExtent(),e.zIndex=void 0!==n||e.managed?n:1/0,e.maxResolution=this.getMaxResolution(),e.minResolution=Math.max(this.getMinResolution(),0),e.minZoom=this.getMinZoom(),e.maxZoom=this.getMaxZoom(),this.state_=e,e}getLayersArray(t){return(0,r.O3)()}getLayerStatesArray(t){return(0,r.O3)()}getExtent(){return this.get(s.Z.EXTENT)}getMaxResolution(){return this.get(s.Z.MAX_RESOLUTION)}getMinResolution(){return this.get(s.Z.MIN_RESOLUTION)}getMinZoom(){return this.get(s.Z.MIN_ZOOM)}getMaxZoom(){return this.get(s.Z.MAX_ZOOM)}getOpacity(){return this.get(s.Z.OPACITY)}getSourceState(){return(0,r.O3)()}getVisible(){return this.get(s.Z.VISIBLE)}getZIndex(){return this.get(s.Z.Z_INDEX)}setBackground(t){this.background_=t,this.changed()}setExtent(t){this.set(s.Z.EXTENT,t)}setMaxResolution(t){this.set(s.Z.MAX_RESOLUTION,t)}setMinResolution(t){this.set(s.Z.MIN_RESOLUTION,t)}setMaxZoom(t){this.set(s.Z.MAX_ZOOM,t)}setMinZoom(t){this.set(s.Z.MIN_ZOOM,t)}setOpacity(t){(0,o.h)("number"==typeof t,64),this.set(s.Z.OPACITY,t)}setVisible(t){this.set(s.Z.VISIBLE,t)}setZIndex(t){this.set(s.Z.Z_INDEX,t)}disposeInternal(){this.state_&&(this.state_.layer=null,this.state_=null),super.disposeInternal()}}const c=l},1295:(t,e,n)=>{"use strict";n.d(e,{Z:()=>h,j:()=>u});var i=n(947),s=n(5487),r=n(1912),o=n(8771),a=n(9515),l=n(5818);class c extends i.Z{constructor(t){const e=Object.assign({},t);delete e.source,super(e),this.on,this.once,this.un,this.mapPrecomposeKey_=null,this.mapRenderKey_=null,this.sourceChangeKey_=null,this.renderer_=null,this.sourceReady_=!1,this.rendered=!1,t.render&&(this.render=t.render),t.map&&this.setMap(t.map),this.addChangeListener(r.Z.SOURCE,this.handleSourcePropertyChange_);const n=t.source?t.source:null;this.setSource(n)}getLayersArray(t){return(t=t||[]).push(this),t}getLayerStatesArray(t){return(t=t||[]).push(this.getLayerState()),t}getSource(){return this.get(r.Z.SOURCE)||null}getRenderSource(){return this.getSource()}getSourceState(){const t=this.getSource();return t?t.getState():"undefined"}handleSourceChange_(){this.changed(),this.sourceReady_||"ready"!==this.getSource().getState()||(this.sourceReady_=!0,this.dispatchEvent("sourceready"))}handleSourcePropertyChange_(){this.sourceChangeKey_&&((0,l.bN)(this.sourceChangeKey_),this.sourceChangeKey_=null),this.sourceReady_=!1;const t=this.getSource();t&&(this.sourceChangeKey_=(0,l.oL)(t,s.Z.CHANGE,this.handleSourceChange_,this),"ready"===t.getState()&&(this.sourceReady_=!0,setTimeout((()=>{this.dispatchEvent("sourceready")}),0))),this.changed()}getFeatures(t){return this.renderer_?this.renderer_.getFeatures(t):Promise.resolve([])}getData(t){return this.renderer_&&this.rendered?this.renderer_.getData(t):null}render(t,e){const n=this.getRenderer();if(n.prepareFrame(t))return this.rendered=!0,n.renderFrame(t,e)}unrender(){this.rendered=!1}setMapInternal(t){t||this.unrender(),this.set(r.Z.MAP,t)}getMapInternal(){return this.get(r.Z.MAP)}setMap(t){this.mapPrecomposeKey_&&((0,l.bN)(this.mapPrecomposeKey_),this.mapPrecomposeKey_=null),t||this.changed(),this.mapRenderKey_&&((0,l.bN)(this.mapRenderKey_),this.mapRenderKey_=null),t&&(this.mapPrecomposeKey_=(0,l.oL)(t,o.Z.PRECOMPOSE,(function(t){const e=t.frameState.layerStatesArray,n=this.getLayerState(!1);(0,a.h)(!e.some((function(t){return t.layer===n.layer})),67),e.push(n)}),this),this.mapRenderKey_=(0,l.oL)(this,s.Z.CHANGE,t.render,t),this.changed())}setSource(t){this.set(r.Z.SOURCE,t)}getRenderer(){return this.renderer_||(this.renderer_=this.createRenderer()),this.renderer_}hasRenderer(){return!!this.renderer_}createRenderer(){return null}disposeInternal(){this.renderer_&&(this.renderer_.dispose(),delete this.renderer_),this.setSource(null),super.disposeInternal()}}function u(t,e){if(!t.visible)return!1;const n=e.resolution;if(n<t.minResolution||n>=t.maxResolution)return!1;const i=e.zoom;return i>t.minZoom&&i<=t.maxZoom}const h=c},1912:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});const i={OPACITY:"opacity",VISIBLE:"visible",EXTENT:"extent",Z_INDEX:"zIndex",MAX_RESOLUTION:"maxResolution",MIN_RESOLUTION:"minResolution",MAX_ZOOM:"maxZoom",MIN_ZOOM:"minZoom",SOURCE:"source",MAP:"map"}},2479:(t,e,n)=>{"use strict";n.d(e,{Z:()=>l});var i=n(1295),s=n(8280);class r extends i.Z{constructor(t){t=t||{};const e=Object.assign({},t);delete e.preload,delete e.useInterimTilesOnError,super(e),this.on,this.once,this.un,this.setPreload(void 0!==t.preload?t.preload:0),this.setUseInterimTilesOnError(void 0===t.useInterimTilesOnError||t.useInterimTilesOnError)}getPreload(){return this.get(s.Z.PRELOAD)}setPreload(t){this.set(s.Z.PRELOAD,t)}getUseInterimTilesOnError(){return this.get(s.Z.USE_INTERIM_TILES_ON_ERROR)}setUseInterimTilesOnError(t){this.set(s.Z.USE_INTERIM_TILES_ON_ERROR,t)}getData(t){return super.getData(t)}}const o=r;var a=n(4708);const l=class extends o{constructor(t){super(t)}createRenderer(){return new a.Z(this)}}},8280:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});const i={PRELOAD:"preload",USE_INTERIM_TILES_ON_ERROR:"useInterimTilesOnError"}},3983:(t,e,n)=>{"use strict";function i(t,e,n){return Math.min(Math.max(t,e),n)}function s(t,e,n,i,s,o){const a=s-n,l=o-i;if(0!==a||0!==l){const r=((t-n)*a+(e-i)*l)/(a*a+l*l);r>1?(n=s,i=o):r>0&&(n+=a*r,i+=l*r)}return r(t,e,n,i)}function r(t,e,n,i){const s=n-t,r=i-e;return s*s+r*r}function o(t){const e=t.length;for(let n=0;n<e;n++){let i=n,s=Math.abs(t[n][n]);for(let r=n+1;r<e;r++){const e=Math.abs(t[r][n]);e>s&&(s=e,i=r)}if(0===s)return null;const r=t[i];t[i]=t[n],t[n]=r;for(let i=n+1;i<e;i++){const s=-t[i][n]/t[n][n];for(let r=n;r<e+1;r++)n==r?t[i][r]=0:t[i][r]+=s*t[n][r]}}const n=new Array(e);for(let i=e-1;i>=0;i--){n[i]=t[i][e]/t[i][i];for(let s=i-1;s>=0;s--)t[s][e]-=t[s][i]*n[i]}return n}function a(t){return t*Math.PI/180}function l(t,e){const n=t%e;return n*e<0?n+e:n}function c(t,e,n){return t+n*(e-t)}function u(t,e){const n=Math.pow(10,e);return Math.round(t*n)/n}function h(t,e){return Math.floor(u(t,e))}function d(t,e){return Math.ceil(u(t,e))}n.d(e,{$W:()=>l,FH:()=>u,GW:()=>h,SV:()=>o,Yr:()=>a,bI:()=>r,mD:()=>d,rU:()=>s,t7:()=>c,uZ:()=>i})},9374:(t,e,n)=>{"use strict";function i(t){for(const e in t)delete t[e]}function s(t){let e;for(e in t)return!1;return!e}n.d(e,{Z:()=>i,x:()=>s})},8661:(t,e,n)=>{"use strict";n.d(e,{Wm:()=>f.W,UQ:()=>F,h_:()=>S,OP:()=>L,mi:()=>O,Vs:()=>B,dY:()=>W,U2:()=>k,_Q:()=>R,Ck:()=>D,Cs:()=>j,lO:()=>U,Fj:()=>G,vs:()=>N,$A:()=>z});var i=n(9619);const s=6378137,r=Math.PI*s,o=[-r,-r,r,r],a=[-180,-85,180,85],l=s*Math.log(Math.tan(Math.PI/2));class c extends i.Z{constructor(t){super({code:t,units:"m",extent:o,global:!0,worldExtent:a,getPointResolution:function(t,e){return t/Math.cosh(e[1]/s)}})}}const u=[new c("EPSG:3857"),new c("EPSG:102100"),new c("EPSG:102113"),new c("EPSG:900913"),new c("http://www.opengis.net/def/crs/EPSG/0/3857"),new c("http://www.opengis.net/gml/srs/epsg.xml#3857")];const h=[-180,-90,180,90],d=6378137*Math.PI/180;class _ extends i.Z{constructor(t,e){super({code:t,units:"degrees",extent:h,axisOrientation:e,global:!0,metersPerUnit:d,worldExtent:h})}}const p=[new _("CRS:84"),new _("EPSG:4326","neu"),new _("urn:ogc:def:crs:OGC:1.3:CRS84"),new _("urn:ogc:def:crs:OGC:2:84"),new _("http://www.opengis.net/def/crs/OGC/1.3/CRS84"),new _("http://www.opengis.net/gml/srs/epsg.xml#4326","neu"),new _("http://www.opengis.net/def/crs/EPSG/0/4326","neu")];var f=n(8375);let g={},m={};function y(t,e,n){const i=t.getCode(),s=e.getCode();i in m||(m[i]={}),m[i][s]=n}var v=n(8641),b=n(1900),w=n(3983);const E=6371008.8;function x(t,e,n){n=n||E;const i=(0,w.Yr)(t[1]),s=(0,w.Yr)(e[1]),r=(s-i)/2,o=(0,w.Yr)(e[0]-t[0])/2,a=Math.sin(r)*Math.sin(r)+Math.sin(o)*Math.sin(o)*Math.cos(i)*Math.cos(s);return 2*n*Math.atan2(Math.sqrt(a),Math.sqrt(1-a))}var q=n(44);let T=!0;function S(t){T=!(void 0===t||t)}function C(t,e){if(void 0!==e)for(let n=0,i=t.length;n<i;++n)e[n]=t[n];else e=t.slice();return e}function I(t,e){if(void 0!==e&&t!==e){for(let n=0,i=t.length;n<i;++n)e[n]=t[n];t=e}return t}function A(t){!function(t,e){g[t]=e}(t.getCode(),t),y(t,t,C)}function k(t){return"string"==typeof t?g[e=t]||g[e.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\w+)$/,"EPSG:$3")]||null:t||null;var e}function R(t,e,n,i){let s;const r=(t=k(t)).getPointResolutionFunc();if(r){if(s=r(e,n),i&&i!==t.getUnits()){const e=t.getMetersPerUnit();e&&(s=s*e/f.W[i])}}else{const r=t.getUnits();if("degrees"==r&&!i||"degrees"==i)s=e;else{const o=M(t,k("EPSG:4326"));if(o===I&&"degrees"!==r)s=e*t.getMetersPerUnit();else{let t=[n[0]-e/2,n[1],n[0]+e/2,n[1],n[0],n[1]-e/2,n[0],n[1]+e/2];t=o(t,t,2),s=(x(t.slice(0,2),t.slice(2,4))+x(t.slice(4,6),t.slice(6,8)))/2}const a=i?f.W[i]:t.getMetersPerUnit();void 0!==a&&(s/=a)}}return s}function P(t){!function(t){t.forEach(A)}(t),t.forEach((function(e){t.forEach((function(t){e!==t&&y(e,t,C)}))}))}function F(t,e){return t?"string"==typeof t?k(t):t:k(e)}function O(t,e){return S(),N(t,"EPSG:4326",void 0!==e?e:"EPSG:3857")}function L(t,e){if(t===e)return!0;const n=t.getUnits()===e.getUnits();return(t.getCode()===e.getCode()||M(t,e)===C)&&n}function M(t,e){let n=function(t,e){let n;return t in m&&e in m[t]&&(n=m[t][e]),n}(t.getCode(),e.getCode());return n||(n=I),n}function D(t,e){return M(k(t),k(e))}function N(t,e,n){return D(e,n)(t,void 0,t.length)}function z(t,e,n,i){const s=D(e,n);return(0,v.Ne)(t,s,void 0,i)}let Z=null;function j(){return Z}function U(t,e){return Z?N(t,e,Z):t}function B(t,e){return Z?N(t,Z,e):(T&&!(0,b.fS)(t,[0,0])&&t[0]>=-180&&t[0]<=180&&t[1]>=-90&&t[1]<=90&&(T=!1,(0,q.ZK)("Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.")),t)}function G(t,e){return Z?z(t,e,Z):t}function W(t,e){return Z?z(t,Z,e):t}var V,K,H;P(u),P(p),V=u,K=function(t,e,n){const i=t.length;n=n>1?n:2,void 0===e&&(e=n>2?t.slice():new Array(i));for(let o=0;o<i;o+=n){e[o]=r*t[o]/180;let n=s*Math.log(Math.tan(Math.PI*(+t[o+1]+90)/360));n>l?n=l:n<-l&&(n=-l),e[o+1]=n}return e},H=function(t,e,n){const i=t.length;n=n>1?n:2,void 0===e&&(e=n>2?t.slice():new Array(i));for(let o=0;o<i;o+=n)e[o]=180*t[o]/r,e[o+1]=360*Math.atan(Math.exp(t[o+1]/s))/Math.PI-90;return e},p.forEach((function(t){V.forEach((function(e){y(t,e,K),y(e,t,H)}))}))},9619:(t,e,n)=>{"use strict";n.d(e,{Z:()=>s});var i=n(8375);const s=class{constructor(t){this.code_=t.code,this.units_=t.units,this.extent_=void 0!==t.extent?t.extent:null,this.worldExtent_=void 0!==t.worldExtent?t.worldExtent:null,this.axisOrientation_=void 0!==t.axisOrientation?t.axisOrientation:"enu",this.global_=void 0!==t.global&&t.global,this.canWrapX_=!(!this.global_||!this.extent_),this.getPointResolutionFunc_=t.getPointResolution,this.defaultTileGrid_=null,this.metersPerUnit_=t.metersPerUnit}canWrapX(){return this.canWrapX_}getCode(){return this.code_}getExtent(){return this.extent_}getUnits(){return this.units_}getMetersPerUnit(){return this.metersPerUnit_||i.W[this.units_]}getWorldExtent(){return this.worldExtent_}getAxisOrientation(){return this.axisOrientation_}isGlobal(){return this.global_}setGlobal(t){this.global_=t,this.canWrapX_=!(!t||!this.extent_)}getDefaultTileGrid(){return this.defaultTileGrid_}setDefaultTileGrid(t){this.defaultTileGrid_=t}setExtent(t){this.extent_=t,this.canWrapX_=!(!this.global_||!t)}setWorldExtent(t){this.worldExtent_=t}setGetPointResolution(t){this.getPointResolutionFunc_=t}getPointResolutionFunc(){return this.getPointResolutionFunc_}}},8375:(t,e,n)=>{"use strict";n.d(e,{W:()=>i});const i={radians:6370997/(2*Math.PI),degrees:2*Math.PI*6370997/360,ft:.3048,m:1,"us-ft":1200/3937}},7380:(t,e,n)=>{"use strict";n.d(e,{Z:()=>r});var i=n(291);class s extends i.ZP{constructor(t,e,n,i){super(t),this.inversePixelTransform=e,this.frameState=n,this.context=i}}const r=s},8771:(t,e,n)=>{"use strict";n.d(e,{Z:()=>i});const i={PRERENDER:"prerender",POSTRENDER:"postrender",PRECOMPOSE:"precompose",POSTCOMPOSE:"postcompose",RENDERCOMPLETE:"rendercomplete"}},3433:(t,e,n)=>{"use strict";n.d(e,{ZP:()=>_});var i=n(6101),s=n(8641),r=n(5537),o=n(3448),a=n(8661),l=n(3983);function c(t,e,n,i,s,o,a){let c,u;const h=(n-e)/i;if(1===h)c=e;else if(2===h)c=e,u=s;else if(0!==h){let o=t[e],a=t[e+1],l=0;const h=[0];for(let s=e+i;s<n;s+=i){const e=t[s],n=t[s+1];l+=Math.sqrt((e-o)*(e-o)+(n-a)*(n-a)),h.push(l),o=e,a=n}const d=s*l,_=(0,r.ry)(h,d);_<0?(u=(d-h[-_-2])/(h[-_-1]-h[-_-2]),c=e+(-_-2)*i):c=e+_*i}a=a>1?a:2,o=o||new Array(a);for(let e=0;e<a;++e)o[e]=void 0===c?NaN:void 0===u?t[c+e]:(0,l.t7)(t[c+e],t[c+i+e],u);return o}var u=n(6442);const h=(0,i.Ue)();class d{constructor(t,e,n,i,s){this.styleFunction,this.extent_,this.id_=s,this.type_=t,this.flatCoordinates_=e,this.flatInteriorPoints_=null,this.flatMidpoints_=null,this.ends_=n,this.properties_=i}get(t){return this.properties_[t]}getExtent(){return this.extent_||(this.extent_="Point"===this.type_?(0,s.HK)(this.flatCoordinates_):(0,s.GN)(this.flatCoordinates_,0,this.flatCoordinates_.length,2)),this.extent_}getFlatInteriorPoint(){if(!this.flatInteriorPoints_){const t=(0,s.qg)(this.getExtent());this.flatInteriorPoints_=(0,o.X)(this.flatCoordinates_,0,this.ends_,2,t,0)}return this.flatInteriorPoints_}getFlatInteriorPoints(){if(!this.flatInteriorPoints_){const t=function(t,e,n,i){const r=[];let o=(0,s.lJ)();for(let i=0,a=n.length;i<a;++i){const a=n[i];o=(0,s.GN)(t,e,a[0],2),r.push((o[0]+o[2])/2,(o[1]+o[3])/2),e=a[a.length-1]}return r}(this.flatCoordinates_,0,this.ends_);this.flatInteriorPoints_=(0,o.U)(this.flatCoordinates_,0,this.ends_,2,t)}return this.flatInteriorPoints_}getFlatMidpoint(){return this.flatMidpoints_||(this.flatMidpoints_=c(this.flatCoordinates_,0,this.flatCoordinates_.length,2,.5)),this.flatMidpoints_}getFlatMidpoints(){if(!this.flatMidpoints_){this.flatMidpoints_=[];const t=this.flatCoordinates_;let e=0;const n=this.ends_;for(let i=0,s=n.length;i<s;++i){const s=n[i],o=c(t,e,s,2,.5);(0,r.l7)(this.flatMidpoints_,o),e=s}}return this.flatMidpoints_}getId(){return this.id_}getOrientedFlatCoordinates(){return this.flatCoordinates_}getGeometry(){return this}getSimplifiedGeometry(t){return this}simplifyTransformed(t,e){return this}getProperties(){return this.properties_}getStride(){return 2}getStyleFunction(){return this.styleFunction}getType(){return this.type_}transform(t){const e=(t=(0,a.U2)(t)).getExtent(),n=t.getWorldExtent();if(e&&n){const t=(0,s.Cr)(n)/(0,s.Cr)(e);(0,i.qC)(h,n[0],n[3],t,-t,0,0,0),(0,u.vT)(this.flatCoordinates_,0,this.flatCoordinates_.length,2,h,this.flatCoordinates_)}}getEnds(){return this.ends_}}d.prototype.getEndss=d.prototype.getEnds,d.prototype.getFlatCoordinates=d.prototype.getOrientedFlatCoordinates;const _=d},147:(t,e,n)=>{"use strict";n.d(e,{Df:()=>l,He:()=>d,Kd:()=>I,PH:()=>g,Qx:()=>q,Tx:()=>f,V4:()=>p,X9:()=>h,Zw:()=>A,_f:()=>k,bL:()=>c,mb:()=>u,oB:()=>y,rc:()=>_,ru:()=>m,sG:()=>b,yC:()=>v});var i=n(2971),s=n(177),r=n(9374),o=n(8326),a=n(245);const l="10px sans-serif",c="#000",u="round",h=[],d=0,_="round",p=10,f="#000",g="center",m="middle",y=[0,0,0,0],v=1,b=new i.Z;let w,E=null;const x={},q=function(){const t=100,e="32px ",n=["monospace","serif"],i=n.length,s="wmytzilWMYTZIL@#/&?$%10";let o,l;function c(t,r,o){let a=!0;for(let c=0;c<i;++c){const i=n[c];if(l=C(t+" "+r+" "+e+i,s),o!=i){const n=C(t+" "+r+" "+e+o+","+i,s);a=a&&n!=l}}return!!a}function u(){let e=!0;const n=b.getKeys();for(let i=0,s=n.length;i<s;++i){const s=n[i];b.get(s)<t&&(c.apply(this,s.split("\n"))?((0,r.Z)(x),E=null,w=void 0,b.set(s,t)):(b.set(s,b.get(s)+1,!0),e=!1))}e&&(clearInterval(o),o=void 0)}return function(e){const n=(0,a.p)(e);if(!n)return;const i=n.families;for(let e=0,s=i.length;e<s;++e){const s=i[e],r=n.style+"\n"+n.weight+"\n"+s;void 0===b.get(r)&&(b.set(r,t,!0),c(n.style,n.weight,s)||(b.set(r,0,!0),void 0===o&&(o=setInterval(u,32))))}}}(),T=function(){let t;return function(e){let n=x[e];if(null==n){if(s.Id){const t=(0,a.p)(e),i=S(e,"Žg");n=(isNaN(Number(t.lineHeight))?1.2:Number(t.lineHeight))*(i.actualBoundingBoxAscent+i.actualBoundingBoxDescent)}else t||(t=document.createElement("div"),t.innerHTML="M",t.style.minHeight="0",t.style.maxHeight="none",t.style.height="auto",t.style.padding="0",t.style.border="none",t.style.position="absolute",t.style.display="block",t.style.left="-99999px"),t.style.font=e,document.body.appendChild(t),n=t.offsetHeight,document.body.removeChild(t);x[e]=n}return n}}();function S(t,e){return E||(E=(0,o.E4)(1,1)),t!=w&&(E.font=t,w=E.font),E.measureText(e)}function C(t,e){return S(t,e).width}function I(t,e,n){if(e in n)return n[e];const i=e.split("\n").reduce(((e,n)=>Math.max(e,C(t,n))),0);return n[e]=i,i}function A(t,e){const n=[],i=[],s=[];let r=0,o=0,a=0,l=0;for(let c=0,u=e.length;c<=u;c+=2){const h=e[c];if("\n"===h||c===u){r=Math.max(r,o),s.push(o),o=0,a+=l;continue}const d=e[c+1]||t.font,_=C(d,h);n.push(_),o+=_;const p=T(d);i.push(p),l=Math.max(l,p)}return{width:r,height:a,widths:n,heights:i,lineWidths:s}}function k(t,e,n,i,s,r,o,a,l,c,u){t.save(),1!==n&&(t.globalAlpha*=n),e&&t.setTransform.apply(t,e),i.contextInstructions?(t.translate(l,c),t.scale(u[0],u[1]),function(t,e){const n=t.contextInstructions;for(let t=0,i=n.length;t<i;t+=2)Array.isArray(n[t+1])?e[n[t]].apply(e,n[t+1]):e[n[t]]=n[t+1]}(i,t)):u[0]<0||u[1]<0?(t.translate(l,c),t.scale(u[0],u[1]),t.drawImage(i,s,r,o,a,0,0,o,a)):t.drawImage(i,s,r,o,a,l,c,o*u[0],a*u[1]),t.restore()}},4708:(t,e,n)=>{"use strict";n.d(e,{Z:()=>q});var i=n(5487),s=n(553),r=n(2706),o=n(4187);class a extends r.Z{constructor(t){super(),this.ready=!0,this.boundHandleImageChange_=this.handleImageChange_.bind(this),this.layer_=t,this.declutterExecutorGroup=null}getFeatures(t){return(0,o.O3)()}getData(t){return null}prepareFrame(t){return(0,o.O3)()}renderFrame(t,e){return(0,o.O3)()}loadedTileCallback(t,e,n){t[e]||(t[e]={}),t[e][n.tileCoord.toString()]=n}createLoadedTileFinder(t,e,n){return(i,s)=>{const r=this.loadedTileCallback.bind(this,n,i);return t.forEachLoadedTile(e,i,s,r)}}forEachFeatureAtCoordinate(t,e,n,i,s){}getLayer(){return this.layer_}handleFontsChanged(){}handleImageChange_(t){t.target.getState()===s.Z.LOADED&&this.renderIfReadyAndVisible()}loadImage(t){let e=t.getState();return e!=s.Z.LOADED&&e!=s.Z.ERROR&&t.addEventListener(i.Z.CHANGE,this.boundHandleImageChange_),e==s.Z.IDLE&&(t.load(),e=t.getState()),e==s.Z.LOADED}renderIfReadyAndVisible(){const t=this.getLayer();t&&t.getVisible()&&"ready"===t.getSourceState()&&t.changed()}disposeInternal(){delete this.layer_,super.disposeInternal()}}const l=a;var c=n(7380),u=n(8771),h=n(6101),d=n(9706),_=n(8326),p=n(5537),f=n(8641);let g=null;const m=class extends l{constructor(t){super(t),this.container=null,this.renderedResolution,this.tempTransform=(0,h.Ue)(),this.pixelTransform=(0,h.Ue)(),this.inversePixelTransform=(0,h.Ue)(),this.context=null,this.containerReused=!1,this.pixelContext_=null,this.frameState=null}getImageData(t,e,n){let i;g||(g=(0,_.E4)(1,1,void 0,{willReadFrequently:!0})),g.clearRect(0,0,1,1);try{g.drawImage(t,e,n,1,1,0,0,1,1),i=g.getImageData(0,0,1,1).data}catch(t){return g=null,null}return i}getBackground(t){let e=this.getLayer().getBackground();return"function"==typeof e&&(e=e(t.viewState.resolution)),e||void 0}useContainer(t,e,n){const i=this.getLayer().getClassName();let s,r;if(t&&t.className===i&&(!n||t&&t.style.backgroundColor&&(0,p.fS)((0,d._2)(t.style.backgroundColor),(0,d._2)(n)))){const e=t.firstElementChild;e instanceof HTMLCanvasElement&&(r=e.getContext("2d"))}if(r&&r.canvas.style.transform===e?(this.container=t,this.context=r,this.containerReused=!0):this.containerReused&&(this.container=null,this.context=null,this.containerReused=!1),!this.container){s=document.createElement("div"),s.className=i;let t=s.style;t.position="absolute",t.width="100%",t.height="100%",r=(0,_.E4)();const e=r.canvas;s.appendChild(e),t=e.style,t.position="absolute",t.left="0",t.transformOrigin="top left",this.container=s,this.context=r}this.containerReused||!n||this.container.style.backgroundColor||(this.container.style.backgroundColor=n)}clipUnrotated(t,e,n){const i=(0,f.rL)(n),s=(0,f.Xv)(n),r=(0,f.w$)(n),o=(0,f.hC)(n);(0,h.nn)(e.coordinateToPixelTransform,i),(0,h.nn)(e.coordinateToPixelTransform,s),(0,h.nn)(e.coordinateToPixelTransform,r),(0,h.nn)(e.coordinateToPixelTransform,o);const a=this.inversePixelTransform;(0,h.nn)(a,i),(0,h.nn)(a,s),(0,h.nn)(a,r),(0,h.nn)(a,o),t.save(),t.beginPath(),t.moveTo(Math.round(i[0]),Math.round(i[1])),t.lineTo(Math.round(s[0]),Math.round(s[1])),t.lineTo(Math.round(r[0]),Math.round(r[1])),t.lineTo(Math.round(o[0]),Math.round(o[1])),t.clip()}dispatchRenderEvent_(t,e,n){const i=this.getLayer();if(i.hasListener(t)){const s=new c.Z(t,this.inversePixelTransform,n,e);i.dispatchEvent(s)}}preRender(t,e){this.frameState=e,this.dispatchRenderEvent_(u.Z.PRERENDER,t,e)}postRender(t,e){this.dispatchRenderEvent_(u.Z.POSTRENDER,t,e)}getRenderTransform(t,e,n,i,s,r,o){const a=s/2,l=r/2,c=i/e,u=-c,d=-t[0]+o,_=-t[1];return(0,h.qC)(this.tempTransform,a,l,c,u,-n,d,_)}disposeInternal(){delete this.frameState,super.disposeInternal()}};var y=n(825),v=n(3883),b=n(2519),w=n(7195),E=n(8661),x=n(4307);const q=class extends m{constructor(t){super(t),this.extentChanged=!0,this.renderedExtent_=null,this.renderedPixelRatio,this.renderedProjection=null,this.renderedRevision,this.renderedTiles=[],this.newTiles_=!1,this.tmpExtent=(0,f.lJ)(),this.tmpTileRange_=new b.Z(0,0,0,0)}isDrawableTile(t){const e=this.getLayer(),n=t.getState(),i=e.getUseInterimTilesOnError();return n==w.Z.LOADED||n==w.Z.EMPTY||n==w.Z.ERROR&&!i}getTile(t,e,n,i){const s=i.pixelRatio,r=i.viewState.projection,o=this.getLayer();let a=o.getSource().getTile(t,e,n,s,r);return a.getState()==w.Z.ERROR&&o.getUseInterimTilesOnError()&&o.getPreload()>0&&(this.newTiles_=!0),this.isDrawableTile(a)||(a=a.getInterimTile()),a}getData(t){const e=this.frameState;if(!e)return null;const n=this.getLayer(),i=(0,h.nn)(e.pixelToCoordinateTransform,t.slice()),s=n.getExtent();if(s&&!(0,f.b8)(s,i))return null;const r=e.pixelRatio,o=e.viewState.projection,a=e.viewState,l=n.getRenderSource(),c=l.getTileGridForProjection(a.projection),u=l.getTilePixelRatio(e.pixelRatio);for(let t=c.getZForResolution(a.resolution);t>=c.getMinZoom();--t){const e=c.getTileCoordForCoordAndZ(i,t),n=l.getTile(t,e[1],e[2],r,o);if(!(n instanceof y.Z||n instanceof v.Z)||n instanceof v.Z&&n.getState()===w.Z.EMPTY)return null;if(n.getState()!==w.Z.LOADED)continue;const s=c.getOrigin(t),h=(0,x.Pq)(c.getTileSize(t)),d=c.getResolution(t),_=Math.floor(u*((i[0]-s[0])/d-e[1]*h[0])),p=Math.floor(u*((s[1]-i[1])/d-e[2]*h[1])),f=Math.round(u*l.getGutterForProjection(a.projection));return this.getImageData(n.getImage(),_+f,p+f)}return null}loadedTileCallback(t,e,n){return!!this.isDrawableTile(n)&&super.loadedTileCallback(t,e,n)}prepareFrame(t){return!!this.getLayer().getSource()}renderFrame(t,e){const n=t.layerStatesArray[t.layerIndex],i=t.viewState,s=i.projection,r=i.resolution,a=i.center,l=i.rotation,c=t.pixelRatio,u=this.getLayer(),d=u.getSource(),_=d.getRevision(),g=d.getTileGridForProjection(s),m=g.getZForResolution(r,d.zDirection),y=g.getResolution(m);let v=t.extent;const b=t.viewState.resolution,x=d.getTilePixelRatio(c),q=Math.round((0,f.dz)(v)/b*c),T=Math.round((0,f.Cr)(v)/b*c),S=n.extent&&(0,E.dY)(n.extent,s);S&&(v=(0,f.Ed)(v,(0,E.dY)(n.extent,s)));const C=y*q/2/x,I=y*T/2/x,A=[a[0]-C,a[1]-I,a[0]+C,a[1]+I],k=g.getTileRangeForExtentAndZ(v,m),R={};R[m]={};const P=this.createLoadedTileFinder(d,s,R),F=this.tmpExtent,O=this.tmpTileRange_;this.newTiles_=!1;const L=l?(0,f.dY)(i.center,b,l,t.size):void 0;for(let e=k.minX;e<=k.maxX;++e)for(let i=k.minY;i<=k.maxY;++i){if(l&&!g.tileCoordIntersectsViewport([m,e,i],L))continue;const s=this.getTile(m,e,i,t);if(this.isDrawableTile(s)){const e=(0,o.sq)(this);if(s.getState()==w.Z.LOADED){R[m][s.tileCoord.toString()]=s;let t=s.inTransition(e);t&&1!==n.opacity&&(s.endTransition(e),t=!1),this.newTiles_||!t&&this.renderedTiles.includes(s)||(this.newTiles_=!0)}if(1===s.getAlpha(e,t.time))continue}const r=g.getTileCoordChildTileRange(s.tileCoord,O,F);let a=!1;r&&(a=P(m+1,r)),a||g.forEachTileCoordParentTileRange(s.tileCoord,P,O,F)}const M=y/r*c/x;(0,h.qC)(this.pixelTransform,t.size[0]/2,t.size[1]/2,1/c,1/c,l,-q/2,-T/2);const D=(0,h.BB)(this.pixelTransform);this.useContainer(e,D,this.getBackground(t));const N=this.context,z=N.canvas;(0,h.nb)(this.inversePixelTransform,this.pixelTransform),(0,h.qC)(this.tempTransform,q/2,T/2,M,M,0,-q/2,-T/2),z.width!=q||z.height!=T?(z.width=q,z.height=T):this.containerReused||N.clearRect(0,0,q,T),S&&this.clipUnrotated(N,t,S),d.getInterpolate()||(N.imageSmoothingEnabled=!1),this.preRender(N,t),this.renderedTiles.length=0;let Z,j,U,B=Object.keys(R).map(Number);B.sort(p.j2),1!==n.opacity||this.containerReused&&!d.getOpaque(t.viewState.projection)?(Z=[],j=[]):B=B.reverse();for(let e=B.length-1;e>=0;--e){const n=B[e],i=d.getTilePixelSize(n,c,s),r=g.getResolution(n)/y,a=i[0]*r*M,l=i[1]*r*M,u=g.getTileCoordForCoordAndZ((0,f.rL)(A),n),_=g.getTileCoordExtent(u),p=(0,h.nn)(this.tempTransform,[x*(_[0]-A[0])/y,x*(A[3]-_[3])/y]),v=x*d.getGutterForProjection(s),b=R[n];for(const e in b){const i=b[e],s=i.tileCoord,r=u[1]-s[1],c=Math.round(p[0]-(r-1)*a),h=u[2]-s[2],_=Math.round(p[1]-(h-1)*l),g=Math.round(p[0]-r*a),y=Math.round(p[1]-h*l),w=c-g,E=_-y,x=m===n,q=x&&1!==i.getAlpha((0,o.sq)(this),t.time);let T=!1;if(!q)if(Z){U=[g,y,g+w,y,g+w,y+E,g,y+E];for(let t=0,e=Z.length;t<e;++t)if(m!==n&&n<j[t]){const e=Z[t];(0,f.kK)([g,y,g+w,y+E],[e[0],e[3],e[4],e[7]])&&(T||(N.save(),T=!0),N.beginPath(),N.moveTo(U[0],U[1]),N.lineTo(U[2],U[3]),N.lineTo(U[4],U[5]),N.lineTo(U[6],U[7]),N.moveTo(e[6],e[7]),N.lineTo(e[4],e[5]),N.lineTo(e[2],e[3]),N.lineTo(e[0],e[1]),N.clip())}Z.push(U),j.push(n)}else N.clearRect(g,y,w,E);this.drawTileImage(i,t,g,y,w,E,v,x),Z&&!q?(T&&N.restore(),this.renderedTiles.unshift(i)):this.renderedTiles.push(i),this.updateUsedTiles(t.usedTiles,d,i)}}return this.renderedRevision=_,this.renderedResolution=y,this.extentChanged=!this.renderedExtent_||!(0,f.fS)(this.renderedExtent_,A),this.renderedExtent_=A,this.renderedPixelRatio=c,this.renderedProjection=s,this.manageTilePyramid(t,d,g,c,s,v,m,u.getPreload()),this.scheduleExpireCache(t,d),this.postRender(N,t),n.extent&&N.restore(),N.imageSmoothingEnabled=!0,D!==z.style.transform&&(z.style.transform=D),this.container}drawTileImage(t,e,n,i,s,r,a,l){const c=this.getTileImage(t);if(!c)return;const u=(0,o.sq)(this),h=e.layerStatesArray[e.layerIndex],d=h.opacity*(l?t.getAlpha(u,e.time):1),_=d!==this.context.globalAlpha;_&&(this.context.save(),this.context.globalAlpha=d),this.context.drawImage(c,a,a,c.width-2*a,c.height-2*a,n,i,s,r),_&&this.context.restore(),d!==h.opacity?e.animate=!0:l&&t.endTransition(u)}getImage(){const t=this.context;return t?t.canvas:null}getTileImage(t){return t.getImage()}scheduleExpireCache(t,e){if(e.canExpireCache()){const n=function(t,e,n){const i=(0,o.sq)(t);i in n.usedTiles&&t.expireCache(n.viewState.projection,n.usedTiles[i])}.bind(null,e);t.postRenderFunctions.push(n)}}updateUsedTiles(t,e,n){const i=(0,o.sq)(e);i in t||(t[i]={}),t[i][n.getKey()]=!0}manageTilePyramid(t,e,n,i,s,r,a,l,c){const u=(0,o.sq)(e);u in t.wantedTiles||(t.wantedTiles[u]={});const h=t.wantedTiles[u],d=t.tileQueue,_=n.getMinZoom(),p=t.viewState.rotation,g=p?(0,f.dY)(t.viewState.center,t.viewState.resolution,p,t.size):void 0;let m,y,v,b,E,x,q=0;for(x=_;x<=a;++x)for(y=n.getTileRangeForExtentAndZ(r,x,y),v=n.getResolution(x),b=y.minX;b<=y.maxX;++b)for(E=y.minY;E<=y.maxY;++E)p&&!n.tileCoordIntersectsViewport([x,b,E],g)||(a-x<=l?(++q,m=e.getTile(x,b,E,i,s),m.getState()==w.Z.IDLE&&(h[m.getKey()]=!0,d.isKeyQueued(m.getKey())||d.enqueue([m,u,n.getTileCoordCenter(m.tileCoord),v])),void 0!==c&&c(m)):e.useTile(x,b,E,s));e.updateCacheSize(q,s)}}},3883:(t,e,n)=>{"use strict";n.d(e,{Z:()=>m});var i=n(5487),s=n(4806),r=n(7195),o=n(8641),a=n(8661),l=n(3983);var c=n(8326);let u;const h=[];function d(t,e,n,i,s){t.beginPath(),t.moveTo(0,0),t.lineTo(e,n),t.lineTo(i,s),t.closePath(),t.save(),t.clip(),t.fillRect(0,0,Math.max(e,i)+1,Math.max(n,s)),t.restore()}function _(t,e){return Math.abs(t[4*e]-210)>2||Math.abs(t[4*e+3]-191.25)>2}function p(t,e,n,i){const s=(0,a.vs)(n,e,t);let r=(0,a._Q)(e,i,n);const l=e.getMetersPerUnit();void 0!==l&&(r*=l);const c=t.getMetersPerUnit();void 0!==c&&(r/=c);const u=t.getExtent();if(!u||(0,o.b8)(u,s)){const e=(0,a._Q)(t,r,s)/r;isFinite(e)&&e>0&&(r/=e)}return r}var f=n(5818);class g extends s.Z{constructor(t,e,n,i,s,c,u,h,d,_,f,g){super(s,r.Z.IDLE,{interpolate:!!g}),this.renderEdges_=void 0!==f&&f,this.pixelRatio_=u,this.gutter_=h,this.canvas_=null,this.sourceTileGrid_=e,this.targetTileGrid_=i,this.wrappedTileCoord_=c||s,this.sourceTiles_=[],this.sourcesListenerKeys_=null,this.sourceZ_=0;const m=i.getTileCoordExtent(this.wrappedTileCoord_),y=this.targetTileGrid_.getExtent();let v=this.sourceTileGrid_.getExtent();const b=y?(0,o.Ed)(m,y):m;if(0===(0,o.bg)(b))return void(this.state=r.Z.EMPTY);const w=t.getExtent();w&&(v=v?(0,o.Ed)(v,w):w);const E=i.getResolution(this.wrappedTileCoord_[0]),x=function(t,e,n,i){const s=(0,o.qg)(n);let r=p(t,e,s,i);return(!isFinite(r)||r<=0)&&(0,o.H6)(n,(function(n){return r=p(t,e,n,i),isFinite(r)&&r>0})),r}(t,n,b,E);if(!isFinite(x)||x<=0)return void(this.state=r.Z.EMPTY);const q=void 0!==_?_:.5;if(this.triangulation_=new class{constructor(t,e,n,i,s,r){this.sourceProj_=t,this.targetProj_=e;let l={};const c=(0,a.Ck)(this.targetProj_,this.sourceProj_);this.transformInv_=function(t){const e=t[0]+"/"+t[1];return l[e]||(l[e]=c(t)),l[e]},this.maxSourceExtent_=i,this.errorThresholdSquared_=s*s,this.triangles_=[],this.wrapsXInSource_=!1,this.canWrapXInSource_=this.sourceProj_.canWrapX()&&!!i&&!!this.sourceProj_.getExtent()&&(0,o.dz)(i)==(0,o.dz)(this.sourceProj_.getExtent()),this.sourceWorldWidth_=this.sourceProj_.getExtent()?(0,o.dz)(this.sourceProj_.getExtent()):null,this.targetWorldWidth_=this.targetProj_.getExtent()?(0,o.dz)(this.targetProj_.getExtent()):null;const u=(0,o.rL)(n),h=(0,o.Xv)(n),d=(0,o.w$)(n),_=(0,o.hC)(n),p=this.transformInv_(u),f=this.transformInv_(h),g=this.transformInv_(d),m=this.transformInv_(_),y=10+(r?Math.max(0,Math.ceil(Math.log2((0,o.bg)(n)/(r*r*256*256)))):0);if(this.addQuad_(u,h,d,_,p,f,g,m,y),this.wrapsXInSource_){let t=1/0;this.triangles_.forEach((function(e,n,i){t=Math.min(t,e.source[0][0],e.source[1][0],e.source[2][0])})),this.triangles_.forEach((e=>{if(Math.max(e.source[0][0],e.source[1][0],e.source[2][0])-t>this.sourceWorldWidth_/2){const n=[[e.source[0][0],e.source[0][1]],[e.source[1][0],e.source[1][1]],[e.source[2][0],e.source[2][1]]];n[0][0]-t>this.sourceWorldWidth_/2&&(n[0][0]-=this.sourceWorldWidth_),n[1][0]-t>this.sourceWorldWidth_/2&&(n[1][0]-=this.sourceWorldWidth_),n[2][0]-t>this.sourceWorldWidth_/2&&(n[2][0]-=this.sourceWorldWidth_);const i=Math.min(n[0][0],n[1][0],n[2][0]);Math.max(n[0][0],n[1][0],n[2][0])-i<this.sourceWorldWidth_/2&&(e.source=n)}}))}l={}}addTriangle_(t,e,n,i,s,r){this.triangles_.push({source:[i,s,r],target:[t,e,n]})}addQuad_(t,e,n,i,s,r,a,c,u){const h=(0,o.hI)([s,r,a,c]),d=this.sourceWorldWidth_?(0,o.dz)(h)/this.sourceWorldWidth_:null,_=this.sourceWorldWidth_,p=this.sourceProj_.canWrapX()&&d>.5&&d<1;let f=!1;if(u>0){if(this.targetProj_.isGlobal()&&this.targetWorldWidth_){const s=(0,o.hI)([t,e,n,i]);f=(0,o.dz)(s)/this.targetWorldWidth_>.25||f}!p&&this.sourceProj_.isGlobal()&&d&&(f=d>.25||f)}if(!f&&this.maxSourceExtent_&&isFinite(h[0])&&isFinite(h[1])&&isFinite(h[2])&&isFinite(h[3])&&!(0,o.kK)(h,this.maxSourceExtent_))return;let g=0;if(!(f||isFinite(s[0])&&isFinite(s[1])&&isFinite(r[0])&&isFinite(r[1])&&isFinite(a[0])&&isFinite(a[1])&&isFinite(c[0])&&isFinite(c[1])))if(u>0)f=!0;else if(g=(isFinite(s[0])&&isFinite(s[1])?0:8)+(isFinite(r[0])&&isFinite(r[1])?0:4)+(isFinite(a[0])&&isFinite(a[1])?0:2)+(isFinite(c[0])&&isFinite(c[1])?0:1),1!=g&&2!=g&&4!=g&&8!=g)return;if(u>0){if(!f){const e=[(t[0]+n[0])/2,(t[1]+n[1])/2],i=this.transformInv_(e);let r;r=p?((0,l.$W)(s[0],_)+(0,l.$W)(a[0],_))/2-(0,l.$W)(i[0],_):(s[0]+a[0])/2-i[0];const o=(s[1]+a[1])/2-i[1];f=r*r+o*o>this.errorThresholdSquared_}if(f){if(Math.abs(t[0]-n[0])<=Math.abs(t[1]-n[1])){const o=[(e[0]+n[0])/2,(e[1]+n[1])/2],l=this.transformInv_(o),h=[(i[0]+t[0])/2,(i[1]+t[1])/2],d=this.transformInv_(h);this.addQuad_(t,e,o,h,s,r,l,d,u-1),this.addQuad_(h,o,n,i,d,l,a,c,u-1)}else{const o=[(t[0]+e[0])/2,(t[1]+e[1])/2],l=this.transformInv_(o),h=[(n[0]+i[0])/2,(n[1]+i[1])/2],d=this.transformInv_(h);this.addQuad_(t,o,h,i,s,l,d,c,u-1),this.addQuad_(o,e,n,h,l,r,a,d,u-1)}return}}if(p){if(!this.canWrapXInSource_)return;this.wrapsXInSource_=!0}0==(11&g)&&this.addTriangle_(t,n,i,s,a,c),0==(14&g)&&this.addTriangle_(t,n,e,s,a,r),g&&(0==(13&g)&&this.addTriangle_(e,i,t,r,c,s),0==(7&g)&&this.addTriangle_(e,i,n,r,c,a))}calculateSourceExtent(){const t=(0,o.lJ)();return this.triangles_.forEach((function(e,n,i){const s=e.source;(0,o.Wj)(t,s[0]),(0,o.Wj)(t,s[1]),(0,o.Wj)(t,s[2])})),t}getTriangles(){return this.triangles_}}(t,n,b,v,x*q,E),0===this.triangulation_.getTriangles().length)return void(this.state=r.Z.EMPTY);this.sourceZ_=e.getZForResolution(x);let T=this.triangulation_.calculateSourceExtent();if(v&&(t.canWrapX()?(T[1]=(0,l.uZ)(T[1],v[1],v[3]),T[3]=(0,l.uZ)(T[3],v[1],v[3])):T=(0,o.Ed)(T,v)),(0,o.bg)(T)){const t=e.getTileRangeForExtentAndZ(T,this.sourceZ_);for(let e=t.minX;e<=t.maxX;e++)for(let n=t.minY;n<=t.maxY;n++){const t=d(this.sourceZ_,e,n,u);t&&this.sourceTiles_.push(t)}0===this.sourceTiles_.length&&(this.state=r.Z.EMPTY)}else this.state=r.Z.EMPTY}getImage(){return this.canvas_}reproject_(){const t=[];if(this.sourceTiles_.forEach((e=>{e&&e.getState()==r.Z.LOADED&&t.push({extent:this.sourceTileGrid_.getTileCoordExtent(e.tileCoord),image:e.getImage()})})),this.sourceTiles_.length=0,0===t.length)this.state=r.Z.ERROR;else{const e=this.wrappedTileCoord_[0],n=this.targetTileGrid_.getTileSize(e),i="number"==typeof n?n:n[0],s="number"==typeof n?n:n[1],a=this.targetTileGrid_.getResolution(e),p=this.sourceTileGrid_.getResolution(this.sourceZ_),f=this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);this.canvas_=function(t,e,n,i,s,r,a,p,f,g,m,y){const v=(0,c.E4)(Math.round(n*t),Math.round(n*e),h);if(y||(v.imageSmoothingEnabled=!1),0===f.length)return v.canvas;function b(t){return Math.round(t*n)/n}v.scale(n,n),v.globalCompositeOperation="lighter";const w=(0,o.lJ)();f.forEach((function(t,e,n){(0,o.l7)(w,t.extent)}));const E=(0,o.dz)(w),x=(0,o.Cr)(w),q=(0,c.E4)(Math.round(n*E/i),Math.round(n*x/i),h);y||(q.imageSmoothingEnabled=!1);const T=n/i;f.forEach((function(t,e,n){const i=t.extent[0]-w[0],s=-(t.extent[3]-w[3]),r=(0,o.dz)(t.extent),a=(0,o.Cr)(t.extent);t.image.width>0&&t.image.height>0&&q.drawImage(t.image,g,g,t.image.width-2*g,t.image.height-2*g,i*T,s*T,r*T,a*T)}));const S=(0,o.rL)(a);return p.getTriangles().forEach((function(t,e,s){const o=t.source,a=t.target;let p=o[0][0],f=o[0][1],g=o[1][0],m=o[1][1],E=o[2][0],x=o[2][1];const T=b((a[0][0]-S[0])/r),C=b(-(a[0][1]-S[1])/r),I=b((a[1][0]-S[0])/r),A=b(-(a[1][1]-S[1])/r),k=b((a[2][0]-S[0])/r),R=b(-(a[2][1]-S[1])/r),P=p,F=f;p=0,f=0,g-=P,m-=F,E-=P,x-=F;const O=[[g,m,0,0,I-T],[E,x,0,0,k-T],[0,0,g,m,A-C],[0,0,E,x,R-C]],L=(0,l.SV)(O);if(L){if(v.save(),v.beginPath(),function(){if(void 0===u){const t=(0,c.E4)(6,6,h);t.globalCompositeOperation="lighter",t.fillStyle="rgba(210, 0, 0, 0.75)",d(t,4,5,4,0),d(t,4,5,0,5);const e=t.getImageData(0,0,3,3).data;u=_(e,0)||_(e,4)||_(e,8),(0,c.jy)(t),h.push(t.canvas)}return u}()||!y){v.moveTo(I,A);const t=4,e=T-I,n=C-A;for(let i=0;i<t;i++)v.lineTo(I+b((i+1)*e/t),A+b(i*n/(t-1))),i!=t-1&&v.lineTo(I+b((i+1)*e/t),A+b((i+1)*n/(t-1)));v.lineTo(k,R)}else v.moveTo(I,A),v.lineTo(T,C),v.lineTo(k,R);v.clip(),v.transform(L[0],L[2],L[1],L[3],T,C),v.translate(w[0]-P,w[3]-F),v.scale(i/n,-i/n),v.drawImage(q.canvas,0,0),v.restore()}})),(0,c.jy)(q),h.push(q.canvas),m&&(v.save(),v.globalCompositeOperation="source-over",v.strokeStyle="black",v.lineWidth=1,p.getTriangles().forEach((function(t,e,n){const i=t.target,s=(i[0][0]-S[0])/r,o=-(i[0][1]-S[1])/r,a=(i[1][0]-S[0])/r,l=-(i[1][1]-S[1])/r,c=(i[2][0]-S[0])/r,u=-(i[2][1]-S[1])/r;v.beginPath(),v.moveTo(a,l),v.lineTo(s,o),v.lineTo(c,u),v.closePath(),v.stroke()})),v.restore()),v.canvas}(i,s,this.pixelRatio_,p,this.sourceTileGrid_.getExtent(),a,f,this.triangulation_,t,this.gutter_,this.renderEdges_,this.interpolate),this.state=r.Z.LOADED}this.changed()}load(){if(this.state==r.Z.IDLE){this.state=r.Z.LOADING,this.changed();let t=0;this.sourcesListenerKeys_=[],this.sourceTiles_.forEach((e=>{const n=e.getState();if(n==r.Z.IDLE||n==r.Z.LOADING){t++;const n=(0,f.oL)(e,i.Z.CHANGE,(function(i){const s=e.getState();s!=r.Z.LOADED&&s!=r.Z.ERROR&&s!=r.Z.EMPTY||((0,f.bN)(n),t--,0===t&&(this.unlistenSources_(),this.reproject_()))}),this);this.sourcesListenerKeys_.push(n)}})),0===t?setTimeout(this.reproject_.bind(this),0):this.sourceTiles_.forEach((function(t,e,n){t.getState()==r.Z.IDLE&&t.load()}))}}unlistenSources_(){this.sourcesListenerKeys_.forEach(f.bN),this.sourcesListenerKeys_=null}release(){this.canvas_&&((0,c.jy)(this.canvas_.getContext("2d")),h.push(this.canvas_),this.canvas_=null),super.release()}}const m=g},828:(t,e,n)=>{"use strict";n.d(e,{Gw:()=>a,YP:()=>r,gE:()=>o,h$:()=>s});var i=n(3983);function s(t){if(void 0!==t)return 0}function r(t){if(void 0!==t)return t}function o(t){const e=2*Math.PI/t;return function(t,n){return n?t:void 0!==t?t=Math.floor(t/e+.5)*e:void 0}}function a(t){return t=t||(0,i.Yr)(5),function(e,n){return n?e:void 0!==e?Math.abs(e)<=t?0:e:void 0}}},4307:(t,e,n)=>{"use strict";function i(t){return t[0]>0&&t[1]>0}function s(t,e,n){return void 0===n&&(n=[0,0]),n[0]=t[0]*e+.5|0,n[1]=t[1]*e+.5|0,n}function r(t,e){return Array.isArray(t)?t:(void 0===e?e=[t,t]:(e[0]=t,e[1]=t),e)}n.d(e,{Pq:()=>r,bA:()=>s,py:()=>i})},6263:(t,e,n)=>{"use strict";n.d(e,{Z:()=>a});var i=n(4680),s=n(8326),r=n(4307);class o extends i.Z{constructor(t){super({opaque:!1,projection:(t=t||{}).projection,tileGrid:t.tileGrid,wrapX:void 0===t.wrapX||t.wrapX,zDirection:t.zDirection,url:t.template||"z:{z} x:{x} y:{y}",tileLoadFunction:(t,e)=>{const n=t.getTileCoord()[0],i=(0,r.Pq)(this.tileGrid.getTileSize(n)),o=(0,s.E4)(i[0],i[1]);o.strokeStyle="grey",o.strokeRect(.5,.5,i[0]+.5,i[1]+.5),o.fillStyle="grey",o.strokeStyle="white",o.textAlign="center",o.textBaseline="middle",o.font="24px sans-serif",o.lineWidth=4,o.strokeText(e,i[0]/2,i[1]/2,i[0]),o.fillText(e,i[0]/2,i[1]/2,i[0]),t.setImage(o.canvas)}})}}const a=o},928:(t,e,n)=>{"use strict";n.d(e,{Z:()=>f});var i=n(5487),s=n(825),r=n(3883),o=n(5532),a=n(7195),l=n(5231),c=n(8661),u=n(8634),h=n(7248),d=n(4187);class _ extends l.Z{constructor(t){super({attributions:t.attributions,cacheSize:t.cacheSize,opaque:t.opaque,projection:t.projection,state:t.state,tileGrid:t.tileGrid,tileLoadFunction:t.tileLoadFunction?t.tileLoadFunction:p,tilePixelRatio:t.tilePixelRatio,tileUrlFunction:t.tileUrlFunction,url:t.url,urls:t.urls,wrapX:t.wrapX,transition:t.transition,interpolate:void 0===t.interpolate||t.interpolate,key:t.key,attributionsCollapsible:t.attributionsCollapsible,zDirection:t.zDirection}),this.crossOrigin=void 0!==t.crossOrigin?t.crossOrigin:null,this.tileClass=void 0!==t.tileClass?t.tileClass:s.Z,this.tileCacheForProjection={},this.tileGridForProjection={},this.reprojectionErrorThreshold_=t.reprojectionErrorThreshold,this.renderReprojectionEdges_=!1}canExpireCache(){if(this.tileCache.canExpireCache())return!0;for(const t in this.tileCacheForProjection)if(this.tileCacheForProjection[t].canExpireCache())return!0;return!1}expireCache(t,e){const n=this.getTileCacheForProjection(t);this.tileCache.expireCache(this.tileCache==n?e:{});for(const t in this.tileCacheForProjection){const i=this.tileCacheForProjection[t];i.expireCache(i==n?e:{})}}getGutterForProjection(t){return this.getProjection()&&t&&!(0,c.OP)(this.getProjection(),t)?0:this.getGutter()}getGutter(){return 0}getKey(){let t=super.getKey();return this.getInterpolate()||(t+=":disable-interpolation"),t}getOpaque(t){return!(this.getProjection()&&t&&!(0,c.OP)(this.getProjection(),t))&&super.getOpaque(t)}getTileGridForProjection(t){const e=this.getProjection();if(this.tileGrid&&(!e||(0,c.OP)(e,t)))return this.tileGrid;const n=(0,d.sq)(t);return n in this.tileGridForProjection||(this.tileGridForProjection[n]=(0,h.X$)(t)),this.tileGridForProjection[n]}getTileCacheForProjection(t){const e=this.getProjection();if(!e||(0,c.OP)(e,t))return this.tileCache;const n=(0,d.sq)(t);return n in this.tileCacheForProjection||(this.tileCacheForProjection[n]=new o.Z(this.tileCache.highWaterMark)),this.tileCacheForProjection[n]}createTile_(t,e,n,s,r,o){const l=[t,e,n],c=this.getTileCoordForTileUrlFunction(l,r),u=c?this.tileUrlFunction(c,s,r):void 0,h=new this.tileClass(l,void 0!==u?a.Z.IDLE:a.Z.EMPTY,void 0!==u?u:"",this.crossOrigin,this.tileLoadFunction,this.tileOptions);return h.key=o,h.addEventListener(i.Z.CHANGE,this.handleTileChange.bind(this)),h}getTile(t,e,n,i,s){const o=this.getProjection();if(!o||!s||(0,c.OP)(o,s))return this.getTileInternal(t,e,n,i,o||s);const a=this.getTileCacheForProjection(s),l=[t,e,n];let h;const d=(0,u.km)(l);a.containsKey(d)&&(h=a.get(d));const _=this.getKey();if(h&&h.key==_)return h;const p=this.getTileGridForProjection(o),f=this.getTileGridForProjection(s),g=this.getTileCoordForTileUrlFunction(l,s),m=new r.Z(o,p,s,f,l,g,this.getTilePixelRatio(i),this.getGutter(),((t,e,n,i)=>this.getTileInternal(t,e,n,i,o)),this.reprojectionErrorThreshold_,this.renderReprojectionEdges_,this.getInterpolate());return m.key=_,h?(m.interimTile=h,m.refreshInterimChain(),a.replace(d,m)):a.set(d,m),m}getTileInternal(t,e,n,i,s){let r=null;const o=(0,u.lg)(t,e,n),l=this.getKey();if(this.tileCache.containsKey(o)){if(r=this.tileCache.get(o),r.key!=l){const c=r;r=this.createTile_(t,e,n,i,s,l),c.getState()==a.Z.IDLE?r.interimTile=c.interimTile:r.interimTile=c,r.refreshInterimChain(),this.tileCache.replace(o,r)}}else r=this.createTile_(t,e,n,i,s,l),this.tileCache.set(o,r);return r}setRenderReprojectionEdges(t){if(this.renderReprojectionEdges_!=t){this.renderReprojectionEdges_=t;for(const t in this.tileCacheForProjection)this.tileCacheForProjection[t].clear();this.changed()}}setTileGridForProjection(t,e){const n=(0,c.U2)(t);if(n){const t=(0,d.sq)(n);t in this.tileGridForProjection||(this.tileGridForProjection[t]=e)}}clear(){super.clear();for(const t in this.tileCacheForProjection)this.tileCacheForProjection[t].clear()}}function p(t,e){t.getImage().src=e}const f=_},5231:(t,e,n)=>{"use strict";n.d(e,{Z:()=>w});var i=n(291),s=n(2971),r=n(8661);class o extends s.Z{constructor(t){super(),this.projection=(0,r.U2)(t.projection),this.attributions_=a(t.attributions),this.attributionsCollapsible_=void 0===t.attributionsCollapsible||t.attributionsCollapsible,this.loading=!1,this.state_=void 0!==t.state?t.state:"ready",this.wrapX_=void 0!==t.wrapX&&t.wrapX,this.interpolate_=!!t.interpolate,this.viewResolver=null,this.viewRejector=null;const e=this;this.viewPromise_=new Promise((function(t,n){e.viewResolver=t,e.viewRejector=n}))}getAttributions(){return this.attributions_}getAttributionsCollapsible(){return this.attributionsCollapsible_}getProjection(){return this.projection}getResolutions(t){return null}getView(){return this.viewPromise_}getState(){return this.state_}getWrapX(){return this.wrapX_}getInterpolate(){return this.interpolate_}refresh(){this.changed()}setAttributions(t){this.attributions_=a(t),this.changed()}setState(t){this.state_=t,this.changed()}}function a(t){return t?Array.isArray(t)?function(e){return t}:"function"==typeof t?t:function(e){return[t]}:null}const l=o;var c=n(5532),u=n(7195),h=n(4187),d=n(9515),_=n(8634),p=n(7248),f=n(4307);class g extends i.ZP{constructor(t,e){super(t),this.tile=e}}const m=class extends l{constructor(t){super({attributions:t.attributions,attributionsCollapsible:t.attributionsCollapsible,projection:t.projection,state:t.state,wrapX:t.wrapX,interpolate:t.interpolate}),this.on,this.once,this.un,this.opaque_=void 0!==t.opaque&&t.opaque,this.tilePixelRatio_=void 0!==t.tilePixelRatio?t.tilePixelRatio:1,this.tileGrid=void 0!==t.tileGrid?t.tileGrid:null;this.tileGrid&&(0,f.Pq)(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()),[256,256]),this.tileCache=new c.Z(t.cacheSize||0),this.tmpSize=[0,0],this.key_=t.key||"",this.tileOptions={transition:t.transition,interpolate:t.interpolate},this.zDirection=t.zDirection?t.zDirection:0}canExpireCache(){return this.tileCache.canExpireCache()}expireCache(t,e){const n=this.getTileCacheForProjection(t);n&&n.expireCache(e)}forEachLoadedTile(t,e,n,i){const s=this.getTileCacheForProjection(t);if(!s)return!1;let r,o,a,l=!0;for(let t=n.minX;t<=n.maxX;++t)for(let c=n.minY;c<=n.maxY;++c)o=(0,_.lg)(e,t,c),a=!1,s.containsKey(o)&&(r=s.get(o),a=r.getState()===u.Z.LOADED,a&&(a=!1!==i(r))),a||(l=!1);return l}getGutterForProjection(t){return 0}getKey(){return this.key_}setKey(t){this.key_!==t&&(this.key_=t,this.changed())}getOpaque(t){return this.opaque_}getResolutions(t){const e=t?this.getTileGridForProjection(t):this.tileGrid;return e?e.getResolutions():null}getTile(t,e,n,i,s){return(0,h.O3)()}getTileGrid(){return this.tileGrid}getTileGridForProjection(t){return this.tileGrid?this.tileGrid:(0,p.X$)(t)}getTileCacheForProjection(t){const e=this.getProjection();return(0,d.h)(null===e||(0,r.OP)(e,t),68),this.tileCache}getTilePixelRatio(t){return this.tilePixelRatio_}getTilePixelSize(t,e,n){const i=this.getTileGridForProjection(n),s=this.getTilePixelRatio(e),r=(0,f.Pq)(i.getTileSize(t),this.tmpSize);return 1==s?r:(0,f.bA)(r,s,this.tmpSize)}getTileCoordForTileUrlFunction(t,e){e=void 0!==e?e:this.getProjection();const n=this.getTileGridForProjection(e);return this.getWrapX()&&e.isGlobal()&&(t=(0,p.Cf)(n,t,e)),(0,_.tE)(t,n)?t:null}clear(){this.tileCache.clear()}refresh(){this.clear(),super.refresh()}updateCacheSize(t,e){const n=this.getTileCacheForProjection(e);t>n.highWaterMark&&(n.highWaterMark=t)}useTile(t,e,n,i){}};var y=n(3983);function v(t,e){const n=/\{z\}/g,i=/\{x\}/g,s=/\{y\}/g,r=/\{-y\}/g;return function(o,a,l){if(o)return t.replace(n,o[0].toString()).replace(i,o[1].toString()).replace(s,o[2].toString()).replace(r,(function(){const t=o[0],n=e.getFullTileRange(t);return(0,d.h)(n,55),(n.getHeight()-o[2]-1).toString()}))}}class b extends m{constructor(t){super({attributions:t.attributions,cacheSize:t.cacheSize,opaque:t.opaque,projection:t.projection,state:t.state,tileGrid:t.tileGrid,tilePixelRatio:t.tilePixelRatio,wrapX:t.wrapX,transition:t.transition,interpolate:t.interpolate,key:t.key,attributionsCollapsible:t.attributionsCollapsible,zDirection:t.zDirection}),this.generateTileUrlFunction_=this.tileUrlFunction===b.prototype.tileUrlFunction,this.tileLoadFunction=t.tileLoadFunction,t.tileUrlFunction&&(this.tileUrlFunction=t.tileUrlFunction),this.urls=null,t.urls?this.setUrls(t.urls):t.url&&this.setUrl(t.url),this.tileLoadingKeys_={}}getTileLoadFunction(){return this.tileLoadFunction}getTileUrlFunction(){return Object.getPrototypeOf(this).tileUrlFunction===this.tileUrlFunction?this.tileUrlFunction.bind(this):this.tileUrlFunction}getUrls(){return this.urls}handleTileChange(t){const e=t.target,n=(0,h.sq)(e),i=e.getState();let s;i==u.Z.LOADING?(this.tileLoadingKeys_[n]=!0,s="tileloadstart"):n in this.tileLoadingKeys_&&(delete this.tileLoadingKeys_[n],s=i==u.Z.ERROR?"tileloaderror":i==u.Z.LOADED?"tileloadend":void 0),null!=s&&this.dispatchEvent(new g(s,e))}setTileLoadFunction(t){this.tileCache.clear(),this.tileLoadFunction=t,this.changed()}setTileUrlFunction(t,e){this.tileUrlFunction=t,this.tileCache.pruneExceptNewestZ(),void 0!==e?this.setKey(e):this.changed()}setUrl(t){const e=function(t){const e=[];let n=/\{([a-z])-([a-z])\}/.exec(t);if(n){const i=n[1].charCodeAt(0),s=n[2].charCodeAt(0);let r;for(r=i;r<=s;++r)e.push(t.replace(n[0],String.fromCharCode(r)));return e}if(n=/\{(\d+)-(\d+)\}/.exec(t),n){const i=parseInt(n[2],10);for(let s=parseInt(n[1],10);s<=i;s++)e.push(t.replace(n[0],s.toString()));return e}return e.push(t),e}(t);this.urls=e,this.setUrls(e)}setUrls(t){this.urls=t;const e=t.join("\n");this.generateTileUrlFunction_?this.setTileUrlFunction(function(t,e){const n=t.length,i=new Array(n);for(let s=0;s<n;++s)i[s]=v(t[s],e);return function(t){return 1===t.length?t[0]:function(e,n,i){if(!e)return;const s=(0,_.vp)(e),r=(0,y.$W)(s,t.length);return t[r](e,n,i)}}(i)}(t,this.tileGrid),e):this.setKey(e)}tileUrlFunction(t,e,n){}useTile(t,e,n){const i=(0,_.lg)(t,e,n);this.tileCache.containsKey(i)&&this.tileCache.get(i)}}const w=b},7205:(t,e,n)=>{"use strict";n.d(e,{Z:()=>q});var i=n(5487),s=n(4806),r=n(7195);class o extends s.Z{constructor(t,e,n,i,s,r){super(t,e,r),this.extent=null,this.format_=i,this.features_=null,this.loader_,this.projection=null,this.resolution,this.tileLoadFunction_=s,this.url_=n,this.key=n}getFormat(){return this.format_}getFeatures(){return this.features_}load(){this.state==r.Z.IDLE&&(this.setState(r.Z.LOADING),this.tileLoadFunction_(this,this.url_),this.loader_&&this.loader_(this.extent,this.resolution,this.projection))}onLoad(t,e){this.setFeatures(t)}onError(){this.setState(r.Z.ERROR)}setFeatures(t){this.features_=t,this.setState(r.Z.LOADED)}setLoader(t){this.loader_=t}}const a=o;var l=n(5532),c=n(8738),u=n(5231),h=n(8326),d=n(4187);const _=[];class p extends s.Z{constructor(t,e,n,i){super(t,e,{transition:0}),this.context_={},this.executorGroups={},this.declutterExecutorGroups={},this.loadingSourceTiles=0,this.hitDetectionImageData={},this.replayState_={},this.sourceTiles=[],this.errorTileKeys={},this.wantedResolution,this.getSourceTiles=i.bind(void 0,this),this.wrappedTileCoord=n}getContext(t){const e=(0,d.sq)(t);return e in this.context_||(this.context_[e]=(0,h.E4)(1,1,_)),this.context_[e]}hasContext(t){return(0,d.sq)(t)in this.context_}getImage(t){return this.hasContext(t)?this.getContext(t).canvas:null}getReplayState(t){const e=(0,d.sq)(t);return e in this.replayState_||(this.replayState_[e]={dirty:!1,renderedRenderOrder:null,renderedResolution:NaN,renderedRevision:-1,renderedTileResolution:NaN,renderedTileRevision:-1,renderedTileZ:-1}),this.replayState_[e]}load(){this.getSourceTiles()}release(){for(const t in this.context_){const e=this.context_[t];(0,h.jy)(e),_.push(e.canvas),delete this.context_[t]}super.release()}}const f=p;var g=n(4768),m=n(8641),y=n(7248),v=n(8634),b=n(9374);let w=!1;var E=n(4307);class x extends u.Z{constructor(t){const e=t.projection||"EPSG:3857",n=t.extent||(0,y.Tl)(e),i=t.tileGrid||(0,y.dl)({extent:n,maxResolution:t.maxResolution,maxZoom:void 0!==t.maxZoom?t.maxZoom:22,minZoom:t.minZoom,tileSize:t.tileSize||512});super({attributions:t.attributions,attributionsCollapsible:t.attributionsCollapsible,cacheSize:t.cacheSize,interpolate:!0,opaque:!1,projection:e,state:t.state,tileGrid:i,tileLoadFunction:t.tileLoadFunction?t.tileLoadFunction:T,tileUrlFunction:t.tileUrlFunction,url:t.url,urls:t.urls,wrapX:void 0===t.wrapX||t.wrapX,transition:t.transition,zDirection:void 0===t.zDirection?1:t.zDirection}),this.format_=t.format?t.format:null,this.sourceTileCache=new l.Z(this.tileCache.highWaterMark),this.overlaps_=null==t.overlaps||t.overlaps,this.tileClass=t.tileClass?t.tileClass:a,this.tileGrids_={}}getFeaturesInExtent(t){const e=[],n=this.tileCache;if(0===n.getCount())return e;const i=(0,v.Ul)(n.peekFirstKey())[0],s=this.tileGrid;return n.forEach((function(n){if(n.tileCoord[0]!==i||n.getState()!==r.Z.LOADED)return;const o=n.getSourceTiles();for(let n=0,i=o.length;n<i;++n){const i=o[n],r=i.tileCoord;if((0,m.kK)(t,s.getTileCoordExtent(r))){const n=i.getFeatures();if(n)for(let i=0,s=n.length;i<s;++i){const s=n[i],r=s.getGeometry();(0,m.kK)(t,r.getExtent())&&e.push(s)}}}})),e}getOverlaps(){return this.overlaps_}clear(){this.tileCache.clear(),this.sourceTileCache.clear()}expireCache(t,e){const n=this.getTileCacheForProjection(t),i=Object.keys(e).reduce(((t,e)=>{const i=(0,v.MY)(e),s=n.peek(i);if(s){const e=s.sourceTiles;for(let n=0,i=e.length;n<i;++n)t[e[n].getKey()]=!0}return t}),{});super.expireCache(t,e),this.sourceTileCache.expireCache(i)}getSourceTiles(t,e,n){if(n.getState()===r.Z.IDLE){n.setState(r.Z.LOADING);const s=n.wrappedTileCoord,o=this.getTileGridForProjection(e),a=o.getTileCoordExtent(s),l=s[0],c=o.getResolution(l);(0,m.f3)(a,-c,a);const u=this.tileGrid,h=u.getExtent();h&&(0,m.Ed)(a,h,a);const d=u.getZForResolution(c,this.zDirection);u.forEachTileCoord(a,d,(s=>{const o=this.tileUrlFunction(s,t,e),a=this.sourceTileCache.containsKey(o)?this.sourceTileCache.get(o):new this.tileClass(s,o?r.Z.IDLE:r.Z.EMPTY,o,this.format_,this.tileLoadFunction);n.sourceTiles.push(a);const l=a.getState();if(l<r.Z.LOADED){const t=e=>{this.handleTileChange(e);const s=a.getState();if(s===r.Z.LOADED||s===r.Z.ERROR){const e=a.getKey();e in n.errorTileKeys?a.getState()===r.Z.LOADED&&delete n.errorTileKeys[e]:n.loadingSourceTiles--,s===r.Z.ERROR?n.errorTileKeys[e]=!0:a.removeEventListener(i.Z.CHANGE,t),0===n.loadingSourceTiles&&n.setState((0,b.x)(n.errorTileKeys)?r.Z.LOADED:r.Z.ERROR)}};a.addEventListener(i.Z.CHANGE,t),n.loadingSourceTiles++}l===r.Z.IDLE&&(a.extent=u.getTileCoordExtent(s),a.projection=e,a.resolution=u.getResolution(s[0]),this.sourceTileCache.set(o,a),a.load())})),n.loadingSourceTiles||n.setState(n.sourceTiles.some((t=>t.getState()===r.Z.ERROR))?r.Z.ERROR:r.Z.LOADED)}return n.sourceTiles}getTile(t,e,n,i,s){const o=(0,v.lg)(t,e,n),a=this.getKey();let l;if(this.tileCache.containsKey(o)&&(l=this.tileCache.get(o),l.key===a))return l;const c=[t,e,n];let u=this.getTileCoordForTileUrlFunction(c,s);const h=this.getTileGrid().getExtent(),d=this.getTileGridForProjection(s);if(u&&h){const e=d.getTileCoordExtent(u);(0,m.f3)(e,-d.getResolution(t),e),(0,m.kK)(h,e)||(u=null)}let _=!0;if(null!==u){const e=this.tileGrid,n=d.getResolution(t),r=e.getZForResolution(n,1),o=d.getTileCoordExtent(u);(0,m.f3)(o,-n,o),e.forEachTileCoord(o,r,(t=>{_=_&&!this.tileUrlFunction(t,i,s)}))}const p=new f(c,_?r.Z.EMPTY:r.Z.IDLE,u,this.getSourceTiles.bind(this,i,s));return p.key=a,l?(p.interimTile=l,p.refreshInterimChain(),this.tileCache.replace(o,p)):this.tileCache.set(o,p),p}getTileGridForProjection(t){const e=t.getCode();let n=this.tileGrids_[e];if(!n){const t=this.tileGrid,i=t.getResolutions().slice(),s=i.map((function(e,n){return t.getOrigin(n)})),r=i.map((function(e,n){return t.getTileSize(n)})),o=g.e+1;for(let t=i.length;t<o;++t)i.push(i[t-1]/2),s.push(s[t-1]),r.push(r[t-1]);n=new c.Z({extent:t.getExtent(),origins:s,resolutions:i,tileSizes:r}),this.tileGrids_[e]=n}return n}getTilePixelRatio(t){return t}getTilePixelSize(t,e,n){const i=this.getTileGridForProjection(n),s=(0,E.Pq)(i.getTileSize(t),this.tmpSize);return[Math.round(s[0]*e),Math.round(s[1]*e)]}updateCacheSize(t,e){super.updateCacheSize(2*t,e),this.sourceTileCache.highWaterMark=this.getTileCacheForProjection(e).highWaterMark}}const q=x;function T(t,e){t.setLoader((function(n,i,s){!function(t,e,n,i,s,r,o){const a=new XMLHttpRequest;a.open("GET","function"==typeof t?t(n,i,s):t,!0),"arraybuffer"==e.getType()&&(a.responseType="arraybuffer"),a.withCredentials=w,a.onload=function(t){if(!a.status||a.status>=200&&a.status<300){const t=e.getType();let i;"json"==t||"text"==t?i=a.responseText:"xml"==t?(i=a.responseXML,i||(i=(new DOMParser).parseFromString(a.responseText,"application/xml"))):"arraybuffer"==t&&(i=a.response),i?r(e.readFeatures(i,{extent:n,featureProjection:s}),e.readProjection(i)):o()}else o()},a.onerror=o,a.send()}(e,t.getFormat(),n,i,s,t.onLoad.bind(t),t.onError.bind(t))}))}},4680:(t,e,n)=>{"use strict";n.d(e,{Z:()=>o});var i=n(928),s=n(7248);class r extends i.Z{constructor(t){const e=void 0!==(t=t||{}).projection?t.projection:"EPSG:3857",n=void 0!==t.tileGrid?t.tileGrid:(0,s.dl)({extent:(0,s.Tl)(e),maxResolution:t.maxResolution,maxZoom:t.maxZoom,minZoom:t.minZoom,tileSize:t.tileSize});super({attributions:t.attributions,cacheSize:t.cacheSize,crossOrigin:t.crossOrigin,interpolate:t.interpolate,opaque:t.opaque,projection:e,reprojectionErrorThreshold:t.reprojectionErrorThreshold,tileGrid:n,tileLoadFunction:t.tileLoadFunction,tilePixelRatio:t.tilePixelRatio,tileUrlFunction:t.tileUrlFunction,url:t.url,urls:t.urls,wrapX:void 0===t.wrapX||t.wrapX,transition:t.transition,attributionsCollapsible:t.attributionsCollapsible,zDirection:t.zDirection}),this.gutter_=void 0!==t.gutter?t.gutter:0}getGutter(){return this.gutter_}}const o=r},2710:(t,e,n)=>{"use strict";n.d(e,{c:()=>r});var i=n(9706);function s(t,e,n){return e+":"+t+":"+(n?(0,i.XC)(n):"null")}const r=new class{constructor(){this.cache_={},this.cacheSize_=0,this.maxCacheSize_=32}clear(){this.cache_={},this.cacheSize_=0}canExpireCache(){return this.cacheSize_>this.maxCacheSize_}expire(){if(this.canExpireCache()){let t=0;for(const e in this.cache_){const n=this.cache_[e];0!=(3&t++)||n.hasListener()||(delete this.cache_[e],--this.cacheSize_)}}}get(t,e,n){const i=s(t,e,n);return i in this.cache_?this.cache_[i]:null}set(t,e,n,i){const r=s(t,e,n);this.cache_[r]=i,++this.cacheSize_}setSize(t){this.maxCacheSize_=t,this.expire()}}},8634:(t,e,n)=>{"use strict";function i(t,e,n,i){return void 0!==i?(i[0]=t,i[1]=e,i[2]=n,i):[t,e,n]}function s(t,e,n){return t+"/"+e+"/"+n}function r(t){return s(t[0],t[1],t[2])}function o(t){const[e,n,i]=t.substring(t.lastIndexOf("/")+1,t.length).split(",").map(Number);return s(e,n,i)}function a(t){return t.split("/").map(Number)}function l(t){return(t[1]<<t[0])+t[2]}function c(t,e){const n=t[0],i=t[1],s=t[2];if(e.getMinZoom()>n||n>e.getMaxZoom())return!1;const r=e.getFullTileRange(n);return!r||r.containsXY(i,s)}n.d(e,{MY:()=>o,T9:()=>i,Ul:()=>a,km:()=>r,lg:()=>s,tE:()=>c,vp:()=>l})},7248:(t,e,n)=>{"use strict";n.d(e,{Cf:()=>c,Tl:()=>d,X$:()=>l,dl:()=>u});var i=n(8738),s=n(4768),r=n(8661),o=n(8641),a=n(4307);function l(t){let e=t.getDefaultTileGrid();return e||(e=function(t,e,n,s){return function(t,e,n,s){s=void 0!==s?s:"top-left";const r=h(t,undefined,n);return new i.Z({extent:t,origin:(0,o.g0)(t,s),resolutions:r,tileSize:n})}(d(t),0,void 0,void 0)}(t),t.setDefaultTileGrid(e)),e}function c(t,e,n){const i=e[0],s=t.getTileCoordCenter(e),r=d(n);if(!(0,o.b8)(r,s)){const e=(0,o.dz)(r),n=Math.ceil((r[0]-s[0])/e);return s[0]+=e*n,t.getTileCoordForCoordAndZ(s,i)}return e}function u(t){const e=t||{},n=e.extent||(0,r.U2)("EPSG:3857").getExtent(),s={extent:n,minZoom:e.minZoom,tileSize:e.tileSize,resolutions:h(n,e.maxZoom,e.tileSize,e.maxResolution)};return new i.Z(s)}function h(t,e,n,i){e=void 0!==e?e:s.e,n=(0,a.Pq)(void 0!==n?n:s.S);const r=(0,o.Cr)(t),l=(0,o.dz)(t);i=i>0?i:Math.max(l/n[0],r/n[1]);const c=e+1,u=new Array(c);for(let t=0;t<c;++t)u[t]=i/Math.pow(2,t);return u}function d(t){let e=(t=(0,r.U2)(t)).getExtent();if(!e){const n=180*r.Wm.degrees/t.getMetersPerUnit();e=(0,o.T9)(-n,-n,n,n)}return e}},8738:(t,e,n)=>{"use strict";n.d(e,{Z:()=>_});var i=n(2519),s=n(4768),r=n(9515),o=n(3983),a=n(8641),l=n(8634),c=n(969),u=n(5537),h=n(4307);const d=[0,0,0],_=class{constructor(t){let e;if(this.minZoom=void 0!==t.minZoom?t.minZoom:0,this.resolutions_=t.resolutions,(0,r.h)((0,u.pT)(this.resolutions_,(function(t,e){return e-t}),!0),17),!t.origins)for(let t=0,n=this.resolutions_.length-1;t<n;++t)if(e){if(this.resolutions_[t]/this.resolutions_[t+1]!==e){e=void 0;break}}else e=this.resolutions_[t]/this.resolutions_[t+1];this.zoomFactor_=e,this.maxZoom=this.resolutions_.length-1,this.origin_=void 0!==t.origin?t.origin:null,this.origins_=null,void 0!==t.origins&&(this.origins_=t.origins,(0,r.h)(this.origins_.length==this.resolutions_.length,20));const n=t.extent;void 0===n||this.origin_||this.origins_||(this.origin_=(0,a.rL)(n)),(0,r.h)(!this.origin_&&this.origins_||this.origin_&&!this.origins_,18),this.tileSizes_=null,void 0!==t.tileSizes&&(this.tileSizes_=t.tileSizes,(0,r.h)(this.tileSizes_.length==this.resolutions_.length,19)),this.tileSize_=void 0!==t.tileSize?t.tileSize:this.tileSizes_?null:s.S,(0,r.h)(!this.tileSize_&&this.tileSizes_||this.tileSize_&&!this.tileSizes_,22),this.extent_=void 0!==n?n:null,this.fullTileRanges_=null,this.tmpSize_=[0,0],this.tmpExtent_=[0,0,0,0],void 0!==t.sizes?this.fullTileRanges_=t.sizes.map((function(t,e){const s=new i.Z(Math.min(0,t[0]),Math.max(t[0]-1,-1),Math.min(0,t[1]),Math.max(t[1]-1,-1));if(n){const t=this.getTileRangeForExtentAndZ(n,e);s.minX=Math.max(t.minX,s.minX),s.maxX=Math.min(t.maxX,s.maxX),s.minY=Math.max(t.minY,s.minY),s.maxY=Math.min(t.maxY,s.maxY)}return s}),this):n&&this.calculateTileRanges_(n)}forEachTileCoord(t,e,n){const i=this.getTileRangeForExtentAndZ(t,e);for(let t=i.minX,s=i.maxX;t<=s;++t)for(let s=i.minY,r=i.maxY;s<=r;++s)n([e,t,s])}forEachTileCoordParentTileRange(t,e,n,s){let r,o,a,l=null,c=t[0]-1;for(2===this.zoomFactor_?(o=t[1],a=t[2]):l=this.getTileCoordExtent(t,s);c>=this.minZoom;){if(2===this.zoomFactor_?(o=Math.floor(o/2),a=Math.floor(a/2),r=(0,i.T)(o,o,a,a,n)):r=this.getTileRangeForExtentAndZ(l,c,n),e(c,r))return!0;--c}return!1}getExtent(){return this.extent_}getMaxZoom(){return this.maxZoom}getMinZoom(){return this.minZoom}getOrigin(t){return this.origin_?this.origin_:this.origins_[t]}getResolution(t){return this.resolutions_[t]}getResolutions(){return this.resolutions_}getTileCoordChildTileRange(t,e,n){if(t[0]<this.maxZoom){if(2===this.zoomFactor_){const n=2*t[1],s=2*t[2];return(0,i.T)(n,n+1,s,s+1,e)}const s=this.getTileCoordExtent(t,n||this.tmpExtent_);return this.getTileRangeForExtentAndZ(s,t[0]+1,e)}return null}getTileRangeForTileCoordAndZ(t,e,n){if(e>this.maxZoom||e<this.minZoom)return null;const s=t[0],r=t[1],o=t[2];if(e===s)return(0,i.T)(r,o,r,o,n);if(this.zoomFactor_){const t=Math.pow(this.zoomFactor_,e-s),a=Math.floor(r*t),l=Math.floor(o*t);if(e<s)return(0,i.T)(a,a,l,l,n);const c=Math.floor(t*(r+1))-1,u=Math.floor(t*(o+1))-1;return(0,i.T)(a,c,l,u,n)}const a=this.getTileCoordExtent(t,this.tmpExtent_);return this.getTileRangeForExtentAndZ(a,e,n)}getTileRangeExtent(t,e,n){const i=this.getOrigin(t),s=this.getResolution(t),r=(0,h.Pq)(this.getTileSize(t),this.tmpSize_),o=i[0]+e.minX*r[0]*s,l=i[0]+(e.maxX+1)*r[0]*s,c=i[1]+e.minY*r[1]*s,u=i[1]+(e.maxY+1)*r[1]*s;return(0,a.T9)(o,c,l,u,n)}getTileRangeForExtentAndZ(t,e,n){this.getTileCoordForXYAndZ_(t[0],t[3],e,!1,d);const s=d[1],r=d[2];this.getTileCoordForXYAndZ_(t[2],t[1],e,!0,d);const o=d[1],a=d[2];return(0,i.T)(s,o,r,a,n)}getTileCoordCenter(t){const e=this.getOrigin(t[0]),n=this.getResolution(t[0]),i=(0,h.Pq)(this.getTileSize(t[0]),this.tmpSize_);return[e[0]+(t[1]+.5)*i[0]*n,e[1]-(t[2]+.5)*i[1]*n]}getTileCoordExtent(t,e){const n=this.getOrigin(t[0]),i=this.getResolution(t[0]),s=(0,h.Pq)(this.getTileSize(t[0]),this.tmpSize_),r=n[0]+t[1]*s[0]*i,o=n[1]-(t[2]+1)*s[1]*i,l=r+s[0]*i,c=o+s[1]*i;return(0,a.T9)(r,o,l,c,e)}getTileCoordForCoordAndResolution(t,e,n){return this.getTileCoordForXYAndResolution_(t[0],t[1],e,!1,n)}getTileCoordForXYAndResolution_(t,e,n,i,s){const r=this.getZForResolution(n),a=n/this.getResolution(r),c=this.getOrigin(r),u=(0,h.Pq)(this.getTileSize(r),this.tmpSize_);let d=a*(t-c[0])/n/u[0],_=a*(c[1]-e)/n/u[1];return i?(d=(0,o.mD)(d,5)-1,_=(0,o.mD)(_,5)-1):(d=(0,o.GW)(d,5),_=(0,o.GW)(_,5)),(0,l.T9)(r,d,_,s)}getTileCoordForXYAndZ_(t,e,n,i,s){const r=this.getOrigin(n),a=this.getResolution(n),c=(0,h.Pq)(this.getTileSize(n),this.tmpSize_);let u=(t-r[0])/a/c[0],d=(r[1]-e)/a/c[1];return i?(u=(0,o.mD)(u,5)-1,d=(0,o.mD)(d,5)-1):(u=(0,o.GW)(u,5),d=(0,o.GW)(d,5)),(0,l.T9)(n,u,d,s)}getTileCoordForCoordAndZ(t,e,n){return this.getTileCoordForXYAndZ_(t[0],t[1],e,!1,n)}getTileCoordResolution(t){return this.resolutions_[t[0]]}getTileSize(t){return this.tileSize_?this.tileSize_:this.tileSizes_[t]}getFullTileRange(t){return this.fullTileRanges_?this.fullTileRanges_[t]:this.extent_?this.getTileRangeForExtentAndZ(this.extent_,t):null}getZForResolution(t,e){const n=(0,u.h7)(this.resolutions_,t,e||0);return(0,o.uZ)(n,this.minZoom,this.maxZoom)}tileCoordIntersectsViewport(t,e){return(0,c.mV)(e,0,e.length,2,this.getTileCoordExtent(t))}calculateTileRanges_(t){const e=this.resolutions_.length,n=new Array(e);for(let i=this.minZoom;i<e;++i)n[i]=this.getTileRangeForExtentAndZ(t,i);this.fullTileRanges_=n}}},4768:(t,e,n)=>{"use strict";n.d(e,{S:()=>s,e:()=>i});const i=42,s=256},6101:(t,e,n)=>{"use strict";n.d(e,{BB:()=>m,Iu:()=>_,Jp:()=>l,Ue:()=>o,bA:()=>d,lk:()=>u,mc:()=>a,nb:()=>f,nn:()=>h,qC:()=>p});var i=n(177),s=n(9515);const r=new Array(6);function o(){return[1,0,0,1,0,0]}function a(t){return c(t,1,0,0,1,0,0)}function l(t,e){const n=t[0],i=t[1],s=t[2],r=t[3],o=t[4],a=t[5],l=e[0],c=e[1],u=e[2],h=e[3],d=e[4],_=e[5];return t[0]=n*l+s*c,t[1]=i*l+r*c,t[2]=n*u+s*h,t[3]=i*u+r*h,t[4]=n*d+s*_+o,t[5]=i*d+r*_+a,t}function c(t,e,n,i,s,r,o){return t[0]=e,t[1]=n,t[2]=i,t[3]=s,t[4]=r,t[5]=o,t}function u(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t}function h(t,e){const n=e[0],i=e[1];return e[0]=t[0]*n+t[2]*i+t[4],e[1]=t[1]*n+t[3]*i+t[5],e}function d(t,e,n){return l(t,c(r,e,0,0,n,0,0))}function _(t,e,n){return l(t,c(r,1,0,0,1,e,n))}function p(t,e,n,i,s,r,o,a){const l=Math.sin(r),c=Math.cos(r);return t[0]=i*c,t[1]=s*l,t[2]=-i*l,t[3]=s*c,t[4]=o*i*c-a*i*l+e,t[5]=o*s*l+a*s*c+n,t}function f(t,e){const n=(i=e)[0]*i[3]-i[1]*i[2];var i;(0,s.h)(0!==n,32);const r=e[0],o=e[1],a=e[2],l=e[3],c=e[4],u=e[5];return t[0]=l/n,t[1]=-o/n,t[2]=-a/n,t[3]=r/n,t[4]=(a*u-l*c)/n,t[5]=-(r*u-o*c)/n,t}let g;function m(t){const e="matrix("+t.join(", ")+")";if(i.Id)return e;const n=g||(g=document.createElement("div"));return n.style.transform=e,n.style.transform}},4187:(t,e,n)=>{"use strict";function i(){throw new Error("Unimplemented abstract method.")}n.d(e,{O3:()=>i,sq:()=>r});let s=0;function r(t){return t.ol_uid||(t.ol_uid=String(++s))}},7885:(t,e,n)=>{"use strict";function i(t){let e=t.length;for(;--e>=0;)t[e]=0}n.d(e,{ZP:()=>gn});const s=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),r=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),o=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),a=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),l=new Array(576);i(l);const c=new Array(60);i(c);const u=new Array(512);i(u);const h=new Array(256);i(h);const d=new Array(29);i(d);const _=new Array(30);function p(t,e,n,i,s){this.static_tree=t,this.extra_bits=e,this.extra_base=n,this.elems=i,this.max_length=s,this.has_stree=t&&t.length}let f,g,m;function y(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}i(_);const v=t=>t<256?u[t]:u[256+(t>>>7)],b=(t,e)=>{t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255},w=(t,e,n)=>{t.bi_valid>16-n?(t.bi_buf|=e<<t.bi_valid&65535,b(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=n-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=n)},E=(t,e,n)=>{w(t,n[2*e],n[2*e+1])},x=(t,e)=>{let n=0;do{n|=1&t,t>>>=1,n<<=1}while(--e>0);return n>>>1},q=(t,e,n)=>{const i=new Array(16);let s,r,o=0;for(s=1;s<=15;s++)o=o+n[s-1]<<1,i[s]=o;for(r=0;r<=e;r++){let e=t[2*r+1];0!==e&&(t[2*r]=x(i[e]++,e))}},T=t=>{let e;for(e=0;e<286;e++)t.dyn_ltree[2*e]=0;for(e=0;e<30;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.sym_next=t.matches=0},S=t=>{t.bi_valid>8?b(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},C=(t,e,n,i)=>{const s=2*e,r=2*n;return t[s]<t[r]||t[s]===t[r]&&i[e]<=i[n]},I=(t,e,n)=>{const i=t.heap[n];let s=n<<1;for(;s<=t.heap_len&&(s<t.heap_len&&C(e,t.heap[s+1],t.heap[s],t.depth)&&s++,!C(e,i,t.heap[s],t.depth));)t.heap[n]=t.heap[s],n=s,s<<=1;t.heap[n]=i},A=(t,e,n)=>{let i,o,a,l,c=0;if(0!==t.sym_next)do{i=255&t.pending_buf[t.sym_buf+c++],i+=(255&t.pending_buf[t.sym_buf+c++])<<8,o=t.pending_buf[t.sym_buf+c++],0===i?E(t,o,e):(a=h[o],E(t,a+256+1,e),l=s[a],0!==l&&(o-=d[a],w(t,o,l)),i--,a=v(i),E(t,a,n),l=r[a],0!==l&&(i-=_[a],w(t,i,l)))}while(c<t.sym_next);E(t,256,e)},k=(t,e)=>{const n=e.dyn_tree,i=e.stat_desc.static_tree,s=e.stat_desc.has_stree,r=e.stat_desc.elems;let o,a,l,c=-1;for(t.heap_len=0,t.heap_max=573,o=0;o<r;o++)0!==n[2*o]?(t.heap[++t.heap_len]=c=o,t.depth[o]=0):n[2*o+1]=0;for(;t.heap_len<2;)l=t.heap[++t.heap_len]=c<2?++c:0,n[2*l]=1,t.depth[l]=0,t.opt_len--,s&&(t.static_len-=i[2*l+1]);for(e.max_code=c,o=t.heap_len>>1;o>=1;o--)I(t,n,o);l=r;do{o=t.heap[1],t.heap[1]=t.heap[t.heap_len--],I(t,n,1),a=t.heap[1],t.heap[--t.heap_max]=o,t.heap[--t.heap_max]=a,n[2*l]=n[2*o]+n[2*a],t.depth[l]=(t.depth[o]>=t.depth[a]?t.depth[o]:t.depth[a])+1,n[2*o+1]=n[2*a+1]=l,t.heap[1]=l++,I(t,n,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],((t,e)=>{const n=e.dyn_tree,i=e.max_code,s=e.stat_desc.static_tree,r=e.stat_desc.has_stree,o=e.stat_desc.extra_bits,a=e.stat_desc.extra_base,l=e.stat_desc.max_length;let c,u,h,d,_,p,f=0;for(d=0;d<=15;d++)t.bl_count[d]=0;for(n[2*t.heap[t.heap_max]+1]=0,c=t.heap_max+1;c<573;c++)u=t.heap[c],d=n[2*n[2*u+1]+1]+1,d>l&&(d=l,f++),n[2*u+1]=d,u>i||(t.bl_count[d]++,_=0,u>=a&&(_=o[u-a]),p=n[2*u],t.opt_len+=p*(d+_),r&&(t.static_len+=p*(s[2*u+1]+_)));if(0!==f){do{for(d=l-1;0===t.bl_count[d];)d--;t.bl_count[d]--,t.bl_count[d+1]+=2,t.bl_count[l]--,f-=2}while(f>0);for(d=l;0!==d;d--)for(u=t.bl_count[d];0!==u;)h=t.heap[--c],h>i||(n[2*h+1]!==d&&(t.opt_len+=(d-n[2*h+1])*n[2*h],n[2*h+1]=d),u--)}})(t,e),q(n,c,t.bl_count)},R=(t,e,n)=>{let i,s,r=-1,o=e[1],a=0,l=7,c=4;for(0===o&&(l=138,c=3),e[2*(n+1)+1]=65535,i=0;i<=n;i++)s=o,o=e[2*(i+1)+1],++a<l&&s===o||(a<c?t.bl_tree[2*s]+=a:0!==s?(s!==r&&t.bl_tree[2*s]++,t.bl_tree[32]++):a<=10?t.bl_tree[34]++:t.bl_tree[36]++,a=0,r=s,0===o?(l=138,c=3):s===o?(l=6,c=3):(l=7,c=4))},P=(t,e,n)=>{let i,s,r=-1,o=e[1],a=0,l=7,c=4;for(0===o&&(l=138,c=3),i=0;i<=n;i++)if(s=o,o=e[2*(i+1)+1],!(++a<l&&s===o)){if(a<c)do{E(t,s,t.bl_tree)}while(0!=--a);else 0!==s?(s!==r&&(E(t,s,t.bl_tree),a--),E(t,16,t.bl_tree),w(t,a-3,2)):a<=10?(E(t,17,t.bl_tree),w(t,a-3,3)):(E(t,18,t.bl_tree),w(t,a-11,7));a=0,r=s,0===o?(l=138,c=3):s===o?(l=6,c=3):(l=7,c=4)}};let F=!1;const O=(t,e,n,i)=>{w(t,0+(i?1:0),3),S(t),b(t,n),b(t,~n),n&&t.pending_buf.set(t.window.subarray(e,e+n),t.pending),t.pending+=n};var L={_tr_init:t=>{F||((()=>{let t,e,n,i,a;const y=new Array(16);for(n=0,i=0;i<28;i++)for(d[i]=n,t=0;t<1<<s[i];t++)h[n++]=i;for(h[n-1]=i,a=0,i=0;i<16;i++)for(_[i]=a,t=0;t<1<<r[i];t++)u[a++]=i;for(a>>=7;i<30;i++)for(_[i]=a<<7,t=0;t<1<<r[i]-7;t++)u[256+a++]=i;for(e=0;e<=15;e++)y[e]=0;for(t=0;t<=143;)l[2*t+1]=8,t++,y[8]++;for(;t<=255;)l[2*t+1]=9,t++,y[9]++;for(;t<=279;)l[2*t+1]=7,t++,y[7]++;for(;t<=287;)l[2*t+1]=8,t++,y[8]++;for(q(l,287,y),t=0;t<30;t++)c[2*t+1]=5,c[2*t]=x(t,5);f=new p(l,s,257,286,15),g=new p(c,r,0,30,15),m=new p(new Array(0),o,0,19,7)})(),F=!0),t.l_desc=new y(t.dyn_ltree,f),t.d_desc=new y(t.dyn_dtree,g),t.bl_desc=new y(t.bl_tree,m),t.bi_buf=0,t.bi_valid=0,T(t)},_tr_stored_block:O,_tr_flush_block:(t,e,n,i)=>{let s,r,o=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=(t=>{let e,n=4093624447;for(e=0;e<=31;e++,n>>>=1)if(1&n&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<256;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0})(t)),k(t,t.l_desc),k(t,t.d_desc),o=(t=>{let e;for(R(t,t.dyn_ltree,t.l_desc.max_code),R(t,t.dyn_dtree,t.d_desc.max_code),k(t,t.bl_desc),e=18;e>=3&&0===t.bl_tree[2*a[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e})(t),s=t.opt_len+3+7>>>3,r=t.static_len+3+7>>>3,r<=s&&(s=r)):s=r=n+5,n+4<=s&&-1!==e?O(t,e,n,i):4===t.strategy||r===s?(w(t,2+(i?1:0),3),A(t,l,c)):(w(t,4+(i?1:0),3),((t,e,n,i)=>{let s;for(w(t,e-257,5),w(t,n-1,5),w(t,i-4,4),s=0;s<i;s++)w(t,t.bl_tree[2*a[s]+1],3);P(t,t.dyn_ltree,e-1),P(t,t.dyn_dtree,n-1)})(t,t.l_desc.max_code+1,t.d_desc.max_code+1,o+1),A(t,t.dyn_ltree,t.dyn_dtree)),T(t),i&&S(t)},_tr_tally:(t,e,n)=>(t.pending_buf[t.sym_buf+t.sym_next++]=e,t.pending_buf[t.sym_buf+t.sym_next++]=e>>8,t.pending_buf[t.sym_buf+t.sym_next++]=n,0===e?t.dyn_ltree[2*n]++:(t.matches++,e--,t.dyn_ltree[2*(h[n]+256+1)]++,t.dyn_dtree[2*v(e)]++),t.sym_next===t.sym_end),_tr_align:t=>{w(t,2,3),E(t,256,l),(t=>{16===t.bi_valid?(b(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)})(t)}},M=(t,e,n,i)=>{let s=65535&t|0,r=t>>>16&65535|0,o=0;for(;0!==n;){o=n>2e3?2e3:n,n-=o;do{s=s+e[i++]|0,r=r+s|0}while(--o);s%=65521,r%=65521}return s|r<<16|0};const D=new Uint32Array((()=>{let t,e=[];for(var n=0;n<256;n++){t=n;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[n]=t}return e})());var N=(t,e,n,i)=>{const s=D,r=i+n;t^=-1;for(let n=i;n<r;n++)t=t>>>8^s[255&(t^e[n])];return-1^t},z={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Z={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:j,_tr_stored_block:U,_tr_flush_block:B,_tr_tally:G,_tr_align:W}=L,{Z_NO_FLUSH:V,Z_PARTIAL_FLUSH:K,Z_FULL_FLUSH:H,Z_FINISH:Q,Z_BLOCK:X,Z_OK:Y,Z_STREAM_END:$,Z_STREAM_ERROR:J,Z_DATA_ERROR:tt,Z_BUF_ERROR:et,Z_DEFAULT_COMPRESSION:nt,Z_FILTERED:it,Z_HUFFMAN_ONLY:st,Z_RLE:rt,Z_FIXED:ot,Z_DEFAULT_STRATEGY:at,Z_UNKNOWN:lt,Z_DEFLATED:ct}=Z,ut=286,ht=30,dt=19,_t=2*ut+1,pt=15,ft=258,gt=262,mt=42,yt=113,vt=666,bt=(t,e)=>(t.msg=z[e],e),wt=t=>2*t-(t>4?9:0),Et=t=>{let e=t.length;for(;--e>=0;)t[e]=0},xt=t=>{let e,n,i,s=t.w_size;e=t.hash_size,i=e;do{n=t.head[--i],t.head[i]=n>=s?n-s:0}while(--e);e=s,i=e;do{n=t.prev[--i],t.prev[i]=n>=s?n-s:0}while(--e)};let qt=(t,e,n)=>(e<<t.hash_shift^n)&t.hash_mask;const Tt=t=>{const e=t.state;let n=e.pending;n>t.avail_out&&(n=t.avail_out),0!==n&&(t.output.set(e.pending_buf.subarray(e.pending_out,e.pending_out+n),t.next_out),t.next_out+=n,e.pending_out+=n,t.total_out+=n,t.avail_out-=n,e.pending-=n,0===e.pending&&(e.pending_out=0))},St=(t,e)=>{B(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,Tt(t.strm)},Ct=(t,e)=>{t.pending_buf[t.pending++]=e},It=(t,e)=>{t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e},At=(t,e,n,i)=>{let s=t.avail_in;return s>i&&(s=i),0===s?0:(t.avail_in-=s,e.set(t.input.subarray(t.next_in,t.next_in+s),n),1===t.state.wrap?t.adler=M(t.adler,e,s,n):2===t.state.wrap&&(t.adler=N(t.adler,e,s,n)),t.next_in+=s,t.total_in+=s,s)},kt=(t,e)=>{let n,i,s=t.max_chain_length,r=t.strstart,o=t.prev_length,a=t.nice_match;const l=t.strstart>t.w_size-gt?t.strstart-(t.w_size-gt):0,c=t.window,u=t.w_mask,h=t.prev,d=t.strstart+ft;let _=c[r+o-1],p=c[r+o];t.prev_length>=t.good_match&&(s>>=2),a>t.lookahead&&(a=t.lookahead);do{if(n=e,c[n+o]===p&&c[n+o-1]===_&&c[n]===c[r]&&c[++n]===c[r+1]){r+=2,n++;do{}while(c[++r]===c[++n]&&c[++r]===c[++n]&&c[++r]===c[++n]&&c[++r]===c[++n]&&c[++r]===c[++n]&&c[++r]===c[++n]&&c[++r]===c[++n]&&c[++r]===c[++n]&&r<d);if(i=ft-(d-r),r=d-ft,i>o){if(t.match_start=e,o=i,i>=a)break;_=c[r+o-1],p=c[r+o]}}}while((e=h[e&u])>l&&0!=--s);return o<=t.lookahead?o:t.lookahead},Rt=t=>{const e=t.w_size;let n,i,s;do{if(i=t.window_size-t.lookahead-t.strstart,t.strstart>=e+(e-gt)&&(t.window.set(t.window.subarray(e,e+e-i),0),t.match_start-=e,t.strstart-=e,t.block_start-=e,t.insert>t.strstart&&(t.insert=t.strstart),xt(t),i+=e),0===t.strm.avail_in)break;if(n=At(t.strm,t.window,t.strstart+t.lookahead,i),t.lookahead+=n,t.lookahead+t.insert>=3)for(s=t.strstart-t.insert,t.ins_h=t.window[s],t.ins_h=qt(t,t.ins_h,t.window[s+1]);t.insert&&(t.ins_h=qt(t,t.ins_h,t.window[s+3-1]),t.prev[s&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=s,s++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<gt&&0!==t.strm.avail_in)},Pt=(t,e)=>{let n,i,s,r=t.pending_buf_size-5>t.w_size?t.w_size:t.pending_buf_size-5,o=0,a=t.strm.avail_in;do{if(n=65535,s=t.bi_valid+42>>3,t.strm.avail_out<s)break;if(s=t.strm.avail_out-s,i=t.strstart-t.block_start,n>i+t.strm.avail_in&&(n=i+t.strm.avail_in),n>s&&(n=s),n<r&&(0===n&&e!==Q||e===V||n!==i+t.strm.avail_in))break;o=e===Q&&n===i+t.strm.avail_in?1:0,U(t,0,0,o),t.pending_buf[t.pending-4]=n,t.pending_buf[t.pending-3]=n>>8,t.pending_buf[t.pending-2]=~n,t.pending_buf[t.pending-1]=~n>>8,Tt(t.strm),i&&(i>n&&(i=n),t.strm.output.set(t.window.subarray(t.block_start,t.block_start+i),t.strm.next_out),t.strm.next_out+=i,t.strm.avail_out-=i,t.strm.total_out+=i,t.block_start+=i,n-=i),n&&(At(t.strm,t.strm.output,t.strm.next_out,n),t.strm.next_out+=n,t.strm.avail_out-=n,t.strm.total_out+=n)}while(0===o);return a-=t.strm.avail_in,a&&(a>=t.w_size?(t.matches=2,t.window.set(t.strm.input.subarray(t.strm.next_in-t.w_size,t.strm.next_in),0),t.strstart=t.w_size,t.insert=t.strstart):(t.window_size-t.strstart<=a&&(t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,t.insert>t.strstart&&(t.insert=t.strstart)),t.window.set(t.strm.input.subarray(t.strm.next_in-a,t.strm.next_in),t.strstart),t.strstart+=a,t.insert+=a>t.w_size-t.insert?t.w_size-t.insert:a),t.block_start=t.strstart),t.high_water<t.strstart&&(t.high_water=t.strstart),o?4:e!==V&&e!==Q&&0===t.strm.avail_in&&t.strstart===t.block_start?2:(s=t.window_size-t.strstart,t.strm.avail_in>s&&t.block_start>=t.w_size&&(t.block_start-=t.w_size,t.strstart-=t.w_size,t.window.set(t.window.subarray(t.w_size,t.w_size+t.strstart),0),t.matches<2&&t.matches++,s+=t.w_size,t.insert>t.strstart&&(t.insert=t.strstart)),s>t.strm.avail_in&&(s=t.strm.avail_in),s&&(At(t.strm,t.window,t.strstart,s),t.strstart+=s,t.insert+=s>t.w_size-t.insert?t.w_size-t.insert:s),t.high_water<t.strstart&&(t.high_water=t.strstart),s=t.bi_valid+42>>3,s=t.pending_buf_size-s>65535?65535:t.pending_buf_size-s,r=s>t.w_size?t.w_size:s,i=t.strstart-t.block_start,(i>=r||(i||e===Q)&&e!==V&&0===t.strm.avail_in&&i<=s)&&(n=i>s?s:i,o=e===Q&&0===t.strm.avail_in&&n===i?1:0,U(t,t.block_start,n,o),t.block_start+=n,Tt(t.strm)),o?3:1)},Ft=(t,e)=>{let n,i;for(;;){if(t.lookahead<gt){if(Rt(t),t.lookahead<gt&&e===V)return 1;if(0===t.lookahead)break}if(n=0,t.lookahead>=3&&(t.ins_h=qt(t,t.ins_h,t.window[t.strstart+3-1]),n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==n&&t.strstart-n<=t.w_size-gt&&(t.match_length=kt(t,n)),t.match_length>=3)if(i=G(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){t.match_length--;do{t.strstart++,t.ins_h=qt(t,t.ins_h,t.window[t.strstart+3-1]),n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=qt(t,t.ins_h,t.window[t.strstart+1]);else i=G(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(St(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,e===Q?(St(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(St(t,!1),0===t.strm.avail_out)?1:2},Ot=(t,e)=>{let n,i,s;for(;;){if(t.lookahead<gt){if(Rt(t),t.lookahead<gt&&e===V)return 1;if(0===t.lookahead)break}if(n=0,t.lookahead>=3&&(t.ins_h=qt(t,t.ins_h,t.window[t.strstart+3-1]),n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==n&&t.prev_length<t.max_lazy_match&&t.strstart-n<=t.w_size-gt&&(t.match_length=kt(t,n),t.match_length<=5&&(t.strategy===it||3===t.match_length&&t.strstart-t.match_start>4096)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){s=t.strstart+t.lookahead-3,i=G(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=s&&(t.ins_h=qt(t,t.ins_h,t.window[t.strstart+3-1]),n=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=2,t.strstart++,i&&(St(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if(i=G(t,0,t.window[t.strstart-1]),i&&St(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=G(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,e===Q?(St(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(St(t,!1),0===t.strm.avail_out)?1:2};function Lt(t,e,n,i,s){this.good_length=t,this.max_lazy=e,this.nice_length=n,this.max_chain=i,this.func=s}const Mt=[new Lt(0,0,0,0,Pt),new Lt(4,4,8,4,Ft),new Lt(4,5,16,8,Ft),new Lt(4,6,32,32,Ft),new Lt(4,4,16,16,Ot),new Lt(8,16,32,32,Ot),new Lt(8,16,128,128,Ot),new Lt(8,32,128,256,Ot),new Lt(32,128,258,1024,Ot),new Lt(32,258,258,4096,Ot)];function Dt(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=ct,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(2*_t),this.dyn_dtree=new Uint16Array(2*(2*ht+1)),this.bl_tree=new Uint16Array(2*(2*dt+1)),Et(this.dyn_ltree),Et(this.dyn_dtree),Et(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(pt+1),this.heap=new Uint16Array(2*ut+1),Et(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(2*ut+1),Et(this.depth),this.sym_buf=0,this.lit_bufsize=0,this.sym_next=0,this.sym_end=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const Nt=t=>{if(!t)return 1;const e=t.state;return!e||e.strm!==t||e.status!==mt&&57!==e.status&&69!==e.status&&73!==e.status&&91!==e.status&&103!==e.status&&e.status!==yt&&e.status!==vt?1:0},zt=t=>{if(Nt(t))return bt(t,J);t.total_in=t.total_out=0,t.data_type=lt;const e=t.state;return e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=2===e.wrap?57:e.wrap?mt:yt,t.adler=2===e.wrap?0:1,e.last_flush=-2,j(e),Y},Zt=t=>{const e=zt(t);var n;return e===Y&&((n=t.state).window_size=2*n.w_size,Et(n.head),n.max_lazy_match=Mt[n.level].max_lazy,n.good_match=Mt[n.level].good_length,n.nice_match=Mt[n.level].nice_length,n.max_chain_length=Mt[n.level].max_chain,n.strstart=0,n.block_start=0,n.lookahead=0,n.insert=0,n.match_length=n.prev_length=2,n.match_available=0,n.ins_h=0),e},jt=(t,e,n,i,s,r)=>{if(!t)return J;let o=1;if(e===nt&&(e=6),i<0?(o=0,i=-i):i>15&&(o=2,i-=16),s<1||s>9||n!==ct||i<8||i>15||e<0||e>9||r<0||r>ot||8===i&&1!==o)return bt(t,J);8===i&&(i=9);const a=new Dt;return t.state=a,a.strm=t,a.status=mt,a.wrap=o,a.gzhead=null,a.w_bits=i,a.w_size=1<<a.w_bits,a.w_mask=a.w_size-1,a.hash_bits=s+7,a.hash_size=1<<a.hash_bits,a.hash_mask=a.hash_size-1,a.hash_shift=~~((a.hash_bits+3-1)/3),a.window=new Uint8Array(2*a.w_size),a.head=new Uint16Array(a.hash_size),a.prev=new Uint16Array(a.w_size),a.lit_bufsize=1<<s+6,a.pending_buf_size=4*a.lit_bufsize,a.pending_buf=new Uint8Array(a.pending_buf_size),a.sym_buf=a.lit_bufsize,a.sym_end=3*(a.lit_bufsize-1),a.level=e,a.strategy=r,a.method=n,Zt(t)};var Ut={deflateInit:(t,e)=>jt(t,e,ct,15,8,at),deflateInit2:jt,deflateReset:Zt,deflateResetKeep:zt,deflateSetHeader:(t,e)=>Nt(t)||2!==t.state.wrap?J:(t.state.gzhead=e,Y),deflate:(t,e)=>{if(Nt(t)||e>X||e<0)return t?bt(t,J):J;const n=t.state;if(!t.output||0!==t.avail_in&&!t.input||n.status===vt&&e!==Q)return bt(t,0===t.avail_out?et:J);const i=n.last_flush;if(n.last_flush=e,0!==n.pending){if(Tt(t),0===t.avail_out)return n.last_flush=-1,Y}else if(0===t.avail_in&&wt(e)<=wt(i)&&e!==Q)return bt(t,et);if(n.status===vt&&0!==t.avail_in)return bt(t,et);if(n.status===mt&&0===n.wrap&&(n.status=yt),n.status===mt){let e=ct+(n.w_bits-8<<4)<<8,i=-1;if(i=n.strategy>=st||n.level<2?0:n.level<6?1:6===n.level?2:3,e|=i<<6,0!==n.strstart&&(e|=32),e+=31-e%31,It(n,e),0!==n.strstart&&(It(n,t.adler>>>16),It(n,65535&t.adler)),t.adler=1,n.status=yt,Tt(t),0!==n.pending)return n.last_flush=-1,Y}if(57===n.status)if(t.adler=0,Ct(n,31),Ct(n,139),Ct(n,8),n.gzhead)Ct(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),Ct(n,255&n.gzhead.time),Ct(n,n.gzhead.time>>8&255),Ct(n,n.gzhead.time>>16&255),Ct(n,n.gzhead.time>>24&255),Ct(n,9===n.level?2:n.strategy>=st||n.level<2?4:0),Ct(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(Ct(n,255&n.gzhead.extra.length),Ct(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(t.adler=N(t.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69;else if(Ct(n,0),Ct(n,0),Ct(n,0),Ct(n,0),Ct(n,0),Ct(n,9===n.level?2:n.strategy>=st||n.level<2?4:0),Ct(n,3),n.status=yt,Tt(t),0!==n.pending)return n.last_flush=-1,Y;if(69===n.status){if(n.gzhead.extra){let e=n.pending,i=(65535&n.gzhead.extra.length)-n.gzindex;for(;n.pending+i>n.pending_buf_size;){let s=n.pending_buf_size-n.pending;if(n.pending_buf.set(n.gzhead.extra.subarray(n.gzindex,n.gzindex+s),n.pending),n.pending=n.pending_buf_size,n.gzhead.hcrc&&n.pending>e&&(t.adler=N(t.adler,n.pending_buf,n.pending-e,e)),n.gzindex+=s,Tt(t),0!==n.pending)return n.last_flush=-1,Y;e=0,i-=s}let s=new Uint8Array(n.gzhead.extra);n.pending_buf.set(s.subarray(n.gzindex,n.gzindex+i),n.pending),n.pending+=i,n.gzhead.hcrc&&n.pending>e&&(t.adler=N(t.adler,n.pending_buf,n.pending-e,e)),n.gzindex=0}n.status=73}if(73===n.status){if(n.gzhead.name){let e,i=n.pending;do{if(n.pending===n.pending_buf_size){if(n.gzhead.hcrc&&n.pending>i&&(t.adler=N(t.adler,n.pending_buf,n.pending-i,i)),Tt(t),0!==n.pending)return n.last_flush=-1,Y;i=0}e=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,Ct(n,e)}while(0!==e);n.gzhead.hcrc&&n.pending>i&&(t.adler=N(t.adler,n.pending_buf,n.pending-i,i)),n.gzindex=0}n.status=91}if(91===n.status){if(n.gzhead.comment){let e,i=n.pending;do{if(n.pending===n.pending_buf_size){if(n.gzhead.hcrc&&n.pending>i&&(t.adler=N(t.adler,n.pending_buf,n.pending-i,i)),Tt(t),0!==n.pending)return n.last_flush=-1,Y;i=0}e=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,Ct(n,e)}while(0!==e);n.gzhead.hcrc&&n.pending>i&&(t.adler=N(t.adler,n.pending_buf,n.pending-i,i))}n.status=103}if(103===n.status){if(n.gzhead.hcrc){if(n.pending+2>n.pending_buf_size&&(Tt(t),0!==n.pending))return n.last_flush=-1,Y;Ct(n,255&t.adler),Ct(n,t.adler>>8&255),t.adler=0}if(n.status=yt,Tt(t),0!==n.pending)return n.last_flush=-1,Y}if(0!==t.avail_in||0!==n.lookahead||e!==V&&n.status!==vt){let i=0===n.level?Pt(n,e):n.strategy===st?((t,e)=>{let n;for(;;){if(0===t.lookahead&&(Rt(t),0===t.lookahead)){if(e===V)return 1;break}if(t.match_length=0,n=G(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,n&&(St(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===Q?(St(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(St(t,!1),0===t.strm.avail_out)?1:2})(n,e):n.strategy===rt?((t,e)=>{let n,i,s,r;const o=t.window;for(;;){if(t.lookahead<=ft){if(Rt(t),t.lookahead<=ft&&e===V)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&t.strstart>0&&(s=t.strstart-1,i=o[s],i===o[++s]&&i===o[++s]&&i===o[++s])){r=t.strstart+ft;do{}while(i===o[++s]&&i===o[++s]&&i===o[++s]&&i===o[++s]&&i===o[++s]&&i===o[++s]&&i===o[++s]&&i===o[++s]&&s<r);t.match_length=ft-(r-s),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(n=G(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(n=G(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),n&&(St(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===Q?(St(t,!0),0===t.strm.avail_out?3:4):t.sym_next&&(St(t,!1),0===t.strm.avail_out)?1:2})(n,e):Mt[n.level].func(n,e);if(3!==i&&4!==i||(n.status=vt),1===i||3===i)return 0===t.avail_out&&(n.last_flush=-1),Y;if(2===i&&(e===K?W(n):e!==X&&(U(n,0,0,!1),e===H&&(Et(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),Tt(t),0===t.avail_out))return n.last_flush=-1,Y}return e!==Q?Y:n.wrap<=0?$:(2===n.wrap?(Ct(n,255&t.adler),Ct(n,t.adler>>8&255),Ct(n,t.adler>>16&255),Ct(n,t.adler>>24&255),Ct(n,255&t.total_in),Ct(n,t.total_in>>8&255),Ct(n,t.total_in>>16&255),Ct(n,t.total_in>>24&255)):(It(n,t.adler>>>16),It(n,65535&t.adler)),Tt(t),n.wrap>0&&(n.wrap=-n.wrap),0!==n.pending?Y:$)},deflateEnd:t=>{if(Nt(t))return J;const e=t.state.status;return t.state=null,e===yt?bt(t,tt):Y},deflateSetDictionary:(t,e)=>{let n=e.length;if(Nt(t))return J;const i=t.state,s=i.wrap;if(2===s||1===s&&i.status!==mt||i.lookahead)return J;if(1===s&&(t.adler=M(t.adler,e,n,0)),i.wrap=0,n>=i.w_size){0===s&&(Et(i.head),i.strstart=0,i.block_start=0,i.insert=0);let t=new Uint8Array(i.w_size);t.set(e.subarray(n-i.w_size,n),0),e=t,n=i.w_size}const r=t.avail_in,o=t.next_in,a=t.input;for(t.avail_in=n,t.next_in=0,t.input=e,Rt(i);i.lookahead>=3;){let t=i.strstart,e=i.lookahead-2;do{i.ins_h=qt(i,i.ins_h,i.window[t+3-1]),i.prev[t&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=t,t++}while(--e);i.strstart=t,i.lookahead=2,Rt(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=2,i.match_available=0,t.next_in=o,t.input=a,t.avail_in=r,i.wrap=s,Y},deflateInfo:"pako deflate (from Nodeca project)"};const Bt=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var Gt={assign:function(t){const e=Array.prototype.slice.call(arguments,1);for(;e.length;){const n=e.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(const e in n)Bt(n,e)&&(t[e]=n[e])}}return t},flattenChunks:t=>{let e=0;for(let n=0,i=t.length;n<i;n++)e+=t[n].length;const n=new Uint8Array(e);for(let e=0,i=0,s=t.length;e<s;e++){let s=t[e];n.set(s,i),i+=s.length}return n}};let Wt=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){Wt=!1}const Vt=new Uint8Array(256);for(let t=0;t<256;t++)Vt[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;Vt[254]=Vt[254]=1;var Kt={string2buf:t=>{if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(t);let e,n,i,s,r,o=t.length,a=0;for(s=0;s<o;s++)n=t.charCodeAt(s),55296==(64512&n)&&s+1<o&&(i=t.charCodeAt(s+1),56320==(64512&i)&&(n=65536+(n-55296<<10)+(i-56320),s++)),a+=n<128?1:n<2048?2:n<65536?3:4;for(e=new Uint8Array(a),r=0,s=0;r<a;s++)n=t.charCodeAt(s),55296==(64512&n)&&s+1<o&&(i=t.charCodeAt(s+1),56320==(64512&i)&&(n=65536+(n-55296<<10)+(i-56320),s++)),n<128?e[r++]=n:n<2048?(e[r++]=192|n>>>6,e[r++]=128|63&n):n<65536?(e[r++]=224|n>>>12,e[r++]=128|n>>>6&63,e[r++]=128|63&n):(e[r++]=240|n>>>18,e[r++]=128|n>>>12&63,e[r++]=128|n>>>6&63,e[r++]=128|63&n);return e},buf2string:(t,e)=>{const n=e||t.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(t.subarray(0,e));let i,s;const r=new Array(2*n);for(s=0,i=0;i<n;){let e=t[i++];if(e<128){r[s++]=e;continue}let o=Vt[e];if(o>4)r[s++]=65533,i+=o-1;else{for(e&=2===o?31:3===o?15:7;o>1&&i<n;)e=e<<6|63&t[i++],o--;o>1?r[s++]=65533:e<65536?r[s++]=e:(e-=65536,r[s++]=55296|e>>10&1023,r[s++]=56320|1023&e)}}return((t,e)=>{if(e<65534&&t.subarray&&Wt)return String.fromCharCode.apply(null,t.length===e?t:t.subarray(0,e));let n="";for(let i=0;i<e;i++)n+=String.fromCharCode(t[i]);return n})(r,s)},utf8border:(t,e)=>{(e=e||t.length)>t.length&&(e=t.length);let n=e-1;for(;n>=0&&128==(192&t[n]);)n--;return n<0||0===n?e:n+Vt[t[n]]>e?n:e}},Ht=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};const Qt=Object.prototype.toString,{Z_NO_FLUSH:Xt,Z_SYNC_FLUSH:Yt,Z_FULL_FLUSH:$t,Z_FINISH:Jt,Z_OK:te,Z_STREAM_END:ee,Z_DEFAULT_COMPRESSION:ne,Z_DEFAULT_STRATEGY:ie,Z_DEFLATED:se}=Z;function re(t){this.options=Gt.assign({level:ne,method:se,chunkSize:16384,windowBits:15,memLevel:8,strategy:ie},t||{});let e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Ht,this.strm.avail_out=0;let n=Ut.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(n!==te)throw new Error(z[n]);if(e.header&&Ut.deflateSetHeader(this.strm,e.header),e.dictionary){let t;if(t="string"==typeof e.dictionary?Kt.string2buf(e.dictionary):"[object ArrayBuffer]"===Qt.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,n=Ut.deflateSetDictionary(this.strm,t),n!==te)throw new Error(z[n]);this._dict_set=!0}}function oe(t,e){const n=new re(e);if(n.push(t,!0),n.err)throw n.msg||z[n.err];return n.result}re.prototype.push=function(t,e){const n=this.strm,i=this.options.chunkSize;let s,r;if(this.ended)return!1;for(r=e===~~e?e:!0===e?Jt:Xt,"string"==typeof t?n.input=Kt.string2buf(t):"[object ArrayBuffer]"===Qt.call(t)?n.input=new Uint8Array(t):n.input=t,n.next_in=0,n.avail_in=n.input.length;;)if(0===n.avail_out&&(n.output=new Uint8Array(i),n.next_out=0,n.avail_out=i),(r===Yt||r===$t)&&n.avail_out<=6)this.onData(n.output.subarray(0,n.next_out)),n.avail_out=0;else{if(s=Ut.deflate(n,r),s===ee)return n.next_out>0&&this.onData(n.output.subarray(0,n.next_out)),s=Ut.deflateEnd(this.strm),this.onEnd(s),this.ended=!0,s===te;if(0!==n.avail_out){if(r>0&&n.next_out>0)this.onData(n.output.subarray(0,n.next_out)),n.avail_out=0;else if(0===n.avail_in)break}else this.onData(n.output)}return!0},re.prototype.onData=function(t){this.chunks.push(t)},re.prototype.onEnd=function(t){t===te&&(this.result=Gt.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var ae={Deflate:re,deflate:oe,deflateRaw:function(t,e){return(e=e||{}).raw=!0,oe(t,e)},gzip:function(t,e){return(e=e||{}).gzip=!0,oe(t,e)},constants:Z};const le=16209;var ce=function(t,e){let n,i,s,r,o,a,l,c,u,h,d,_,p,f,g,m,y,v,b,w,E,x,q,T;const S=t.state;n=t.next_in,q=t.input,i=n+(t.avail_in-5),s=t.next_out,T=t.output,r=s-(e-t.avail_out),o=s+(t.avail_out-257),a=S.dmax,l=S.wsize,c=S.whave,u=S.wnext,h=S.window,d=S.hold,_=S.bits,p=S.lencode,f=S.distcode,g=(1<<S.lenbits)-1,m=(1<<S.distbits)-1;t:do{_<15&&(d+=q[n++]<<_,_+=8,d+=q[n++]<<_,_+=8),y=p[d&g];e:for(;;){if(v=y>>>24,d>>>=v,_-=v,v=y>>>16&255,0===v)T[s++]=65535&y;else{if(!(16&v)){if(0==(64&v)){y=p[(65535&y)+(d&(1<<v)-1)];continue e}if(32&v){S.mode=16191;break t}t.msg="invalid literal/length code",S.mode=le;break t}b=65535&y,v&=15,v&&(_<v&&(d+=q[n++]<<_,_+=8),b+=d&(1<<v)-1,d>>>=v,_-=v),_<15&&(d+=q[n++]<<_,_+=8,d+=q[n++]<<_,_+=8),y=f[d&m];n:for(;;){if(v=y>>>24,d>>>=v,_-=v,v=y>>>16&255,!(16&v)){if(0==(64&v)){y=f[(65535&y)+(d&(1<<v)-1)];continue n}t.msg="invalid distance code",S.mode=le;break t}if(w=65535&y,v&=15,_<v&&(d+=q[n++]<<_,_+=8,_<v&&(d+=q[n++]<<_,_+=8)),w+=d&(1<<v)-1,w>a){t.msg="invalid distance too far back",S.mode=le;break t}if(d>>>=v,_-=v,v=s-r,w>v){if(v=w-v,v>c&&S.sane){t.msg="invalid distance too far back",S.mode=le;break t}if(E=0,x=h,0===u){if(E+=l-v,v<b){b-=v;do{T[s++]=h[E++]}while(--v);E=s-w,x=T}}else if(u<v){if(E+=l+u-v,v-=u,v<b){b-=v;do{T[s++]=h[E++]}while(--v);if(E=0,u<b){v=u,b-=v;do{T[s++]=h[E++]}while(--v);E=s-w,x=T}}}else if(E+=u-v,v<b){b-=v;do{T[s++]=h[E++]}while(--v);E=s-w,x=T}for(;b>2;)T[s++]=x[E++],T[s++]=x[E++],T[s++]=x[E++],b-=3;b&&(T[s++]=x[E++],b>1&&(T[s++]=x[E++]))}else{E=s-w;do{T[s++]=T[E++],T[s++]=T[E++],T[s++]=T[E++],b-=3}while(b>2);b&&(T[s++]=T[E++],b>1&&(T[s++]=T[E++]))}break}}break}}while(n<i&&s<o);b=_>>3,n-=b,_-=b<<3,d&=(1<<_)-1,t.next_in=n,t.next_out=s,t.avail_in=n<i?i-n+5:5-(n-i),t.avail_out=s<o?o-s+257:257-(s-o),S.hold=d,S.bits=_};const ue=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),he=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),de=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),_e=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var pe=(t,e,n,i,s,r,o,a)=>{const l=a.bits;let c,u,h,d,_,p,f=0,g=0,m=0,y=0,v=0,b=0,w=0,E=0,x=0,q=0,T=null;const S=new Uint16Array(16),C=new Uint16Array(16);let I,A,k,R=null;for(f=0;f<=15;f++)S[f]=0;for(g=0;g<i;g++)S[e[n+g]]++;for(v=l,y=15;y>=1&&0===S[y];y--);if(v>y&&(v=y),0===y)return s[r++]=20971520,s[r++]=20971520,a.bits=1,0;for(m=1;m<y&&0===S[m];m++);for(v<m&&(v=m),E=1,f=1;f<=15;f++)if(E<<=1,E-=S[f],E<0)return-1;if(E>0&&(0===t||1!==y))return-1;for(C[1]=0,f=1;f<15;f++)C[f+1]=C[f]+S[f];for(g=0;g<i;g++)0!==e[n+g]&&(o[C[e[n+g]]++]=g);if(0===t?(T=R=o,p=20):1===t?(T=ue,R=he,p=257):(T=de,R=_e,p=0),q=0,g=0,f=m,_=r,b=v,w=0,h=-1,x=1<<v,d=x-1,1===t&&x>852||2===t&&x>592)return 1;for(;;){I=f-w,o[g]+1<p?(A=0,k=o[g]):o[g]>=p?(A=R[o[g]-p],k=T[o[g]-p]):(A=96,k=0),c=1<<f-w,u=1<<b,m=u;do{u-=c,s[_+(q>>w)+u]=I<<24|A<<16|k|0}while(0!==u);for(c=1<<f-1;q&c;)c>>=1;if(0!==c?(q&=c-1,q+=c):q=0,g++,0==--S[f]){if(f===y)break;f=e[n+o[g]]}if(f>v&&(q&d)!==h){for(0===w&&(w=v),_+=m,b=f-w,E=1<<b;b+w<y&&(E-=S[b+w],!(E<=0));)b++,E<<=1;if(x+=1<<b,1===t&&x>852||2===t&&x>592)return 1;h=q&d,s[h]=v<<24|b<<16|_-r|0}}return 0!==q&&(s[_+q]=f-w<<24|64<<16|0),a.bits=v,0};const{Z_FINISH:fe,Z_BLOCK:ge,Z_TREES:me,Z_OK:ye,Z_STREAM_END:ve,Z_NEED_DICT:be,Z_STREAM_ERROR:we,Z_DATA_ERROR:Ee,Z_MEM_ERROR:xe,Z_BUF_ERROR:qe,Z_DEFLATED:Te}=Z,Se=16180,Ce=16190,Ie=16191,Ae=16192,ke=16194,Re=16199,Pe=16200,Fe=16206,Oe=16209,Le=t=>(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24);function Me(){this.strm=null,this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const De=t=>{if(!t)return 1;const e=t.state;return!e||e.strm!==t||e.mode<Se||e.mode>16211?1:0},Ne=t=>{if(De(t))return we;const e=t.state;return t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=Se,e.last=0,e.havedict=0,e.flags=-1,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new Int32Array(852),e.distcode=e.distdyn=new Int32Array(592),e.sane=1,e.back=-1,ye},ze=t=>{if(De(t))return we;const e=t.state;return e.wsize=0,e.whave=0,e.wnext=0,Ne(t)},Ze=(t,e)=>{let n;if(De(t))return we;const i=t.state;return e<0?(n=0,e=-e):(n=5+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?we:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=n,i.wbits=e,ze(t))},je=(t,e)=>{if(!t)return we;const n=new Me;t.state=n,n.strm=t,n.window=null,n.mode=Se;const i=Ze(t,e);return i!==ye&&(t.state=null),i};let Ue,Be,Ge=!0;const We=t=>{if(Ge){Ue=new Int32Array(512),Be=new Int32Array(32);let e=0;for(;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(pe(1,t.lens,0,288,Ue,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;pe(2,t.lens,0,32,Be,0,t.work,{bits:5}),Ge=!1}t.lencode=Ue,t.lenbits=9,t.distcode=Be,t.distbits=5},Ve=(t,e,n,i)=>{let s;const r=t.state;return null===r.window&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new Uint8Array(r.wsize)),i>=r.wsize?(r.window.set(e.subarray(n-r.wsize,n),0),r.wnext=0,r.whave=r.wsize):(s=r.wsize-r.wnext,s>i&&(s=i),r.window.set(e.subarray(n-i,n-i+s),r.wnext),(i-=s)?(r.window.set(e.subarray(n-i,n),0),r.wnext=i,r.whave=r.wsize):(r.wnext+=s,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=s))),0};var Ke={inflateReset:ze,inflateReset2:Ze,inflateResetKeep:Ne,inflateInit:t=>je(t,15),inflateInit2:je,inflate:(t,e)=>{let n,i,s,r,o,a,l,c,u,h,d,_,p,f,g,m,y,v,b,w,E,x,q=0;const T=new Uint8Array(4);let S,C;const I=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(De(t)||!t.output||!t.input&&0!==t.avail_in)return we;n=t.state,n.mode===Ie&&(n.mode=Ae),o=t.next_out,s=t.output,l=t.avail_out,r=t.next_in,i=t.input,a=t.avail_in,c=n.hold,u=n.bits,h=a,d=l,x=ye;t:for(;;)switch(n.mode){case Se:if(0===n.wrap){n.mode=Ae;break}for(;u<16;){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}if(2&n.wrap&&35615===c){0===n.wbits&&(n.wbits=15),n.check=0,T[0]=255&c,T[1]=c>>>8&255,n.check=N(n.check,T,2,0),c=0,u=0,n.mode=16181;break}if(n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&c)<<8)+(c>>8))%31){t.msg="incorrect header check",n.mode=Oe;break}if((15&c)!==Te){t.msg="unknown compression method",n.mode=Oe;break}if(c>>>=4,u-=4,E=8+(15&c),0===n.wbits&&(n.wbits=E),E>15||E>n.wbits){t.msg="invalid window size",n.mode=Oe;break}n.dmax=1<<n.wbits,n.flags=0,t.adler=n.check=1,n.mode=512&c?16189:Ie,c=0,u=0;break;case 16181:for(;u<16;){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}if(n.flags=c,(255&n.flags)!==Te){t.msg="unknown compression method",n.mode=Oe;break}if(57344&n.flags){t.msg="unknown header flags set",n.mode=Oe;break}n.head&&(n.head.text=c>>8&1),512&n.flags&&4&n.wrap&&(T[0]=255&c,T[1]=c>>>8&255,n.check=N(n.check,T,2,0)),c=0,u=0,n.mode=16182;case 16182:for(;u<32;){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}n.head&&(n.head.time=c),512&n.flags&&4&n.wrap&&(T[0]=255&c,T[1]=c>>>8&255,T[2]=c>>>16&255,T[3]=c>>>24&255,n.check=N(n.check,T,4,0)),c=0,u=0,n.mode=16183;case 16183:for(;u<16;){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}n.head&&(n.head.xflags=255&c,n.head.os=c>>8),512&n.flags&&4&n.wrap&&(T[0]=255&c,T[1]=c>>>8&255,n.check=N(n.check,T,2,0)),c=0,u=0,n.mode=16184;case 16184:if(1024&n.flags){for(;u<16;){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}n.length=c,n.head&&(n.head.extra_len=c),512&n.flags&&4&n.wrap&&(T[0]=255&c,T[1]=c>>>8&255,n.check=N(n.check,T,2,0)),c=0,u=0}else n.head&&(n.head.extra=null);n.mode=16185;case 16185:if(1024&n.flags&&(_=n.length,_>a&&(_=a),_&&(n.head&&(E=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Uint8Array(n.head.extra_len)),n.head.extra.set(i.subarray(r,r+_),E)),512&n.flags&&4&n.wrap&&(n.check=N(n.check,i,_,r)),a-=_,r+=_,n.length-=_),n.length))break t;n.length=0,n.mode=16186;case 16186:if(2048&n.flags){if(0===a)break t;_=0;do{E=i[r+_++],n.head&&E&&n.length<65536&&(n.head.name+=String.fromCharCode(E))}while(E&&_<a);if(512&n.flags&&4&n.wrap&&(n.check=N(n.check,i,_,r)),a-=_,r+=_,E)break t}else n.head&&(n.head.name=null);n.length=0,n.mode=16187;case 16187:if(4096&n.flags){if(0===a)break t;_=0;do{E=i[r+_++],n.head&&E&&n.length<65536&&(n.head.comment+=String.fromCharCode(E))}while(E&&_<a);if(512&n.flags&&4&n.wrap&&(n.check=N(n.check,i,_,r)),a-=_,r+=_,E)break t}else n.head&&(n.head.comment=null);n.mode=16188;case 16188:if(512&n.flags){for(;u<16;){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}if(4&n.wrap&&c!==(65535&n.check)){t.msg="header crc mismatch",n.mode=Oe;break}c=0,u=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),t.adler=n.check=0,n.mode=Ie;break;case 16189:for(;u<32;){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}t.adler=n.check=Le(c),c=0,u=0,n.mode=Ce;case Ce:if(0===n.havedict)return t.next_out=o,t.avail_out=l,t.next_in=r,t.avail_in=a,n.hold=c,n.bits=u,be;t.adler=n.check=1,n.mode=Ie;case Ie:if(e===ge||e===me)break t;case Ae:if(n.last){c>>>=7&u,u-=7&u,n.mode=Fe;break}for(;u<3;){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}switch(n.last=1&c,c>>>=1,u-=1,3&c){case 0:n.mode=16193;break;case 1:if(We(n),n.mode=Re,e===me){c>>>=2,u-=2;break t}break;case 2:n.mode=16196;break;case 3:t.msg="invalid block type",n.mode=Oe}c>>>=2,u-=2;break;case 16193:for(c>>>=7&u,u-=7&u;u<32;){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}if((65535&c)!=(c>>>16^65535)){t.msg="invalid stored block lengths",n.mode=Oe;break}if(n.length=65535&c,c=0,u=0,n.mode=ke,e===me)break t;case ke:n.mode=16195;case 16195:if(_=n.length,_){if(_>a&&(_=a),_>l&&(_=l),0===_)break t;s.set(i.subarray(r,r+_),o),a-=_,r+=_,l-=_,o+=_,n.length-=_;break}n.mode=Ie;break;case 16196:for(;u<14;){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}if(n.nlen=257+(31&c),c>>>=5,u-=5,n.ndist=1+(31&c),c>>>=5,u-=5,n.ncode=4+(15&c),c>>>=4,u-=4,n.nlen>286||n.ndist>30){t.msg="too many length or distance symbols",n.mode=Oe;break}n.have=0,n.mode=16197;case 16197:for(;n.have<n.ncode;){for(;u<3;){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}n.lens[I[n.have++]]=7&c,c>>>=3,u-=3}for(;n.have<19;)n.lens[I[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,S={bits:n.lenbits},x=pe(0,n.lens,0,19,n.lencode,0,n.work,S),n.lenbits=S.bits,x){t.msg="invalid code lengths set",n.mode=Oe;break}n.have=0,n.mode=16198;case 16198:for(;n.have<n.nlen+n.ndist;){for(;q=n.lencode[c&(1<<n.lenbits)-1],g=q>>>24,m=q>>>16&255,y=65535&q,!(g<=u);){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}if(y<16)c>>>=g,u-=g,n.lens[n.have++]=y;else{if(16===y){for(C=g+2;u<C;){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}if(c>>>=g,u-=g,0===n.have){t.msg="invalid bit length repeat",n.mode=Oe;break}E=n.lens[n.have-1],_=3+(3&c),c>>>=2,u-=2}else if(17===y){for(C=g+3;u<C;){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}c>>>=g,u-=g,E=0,_=3+(7&c),c>>>=3,u-=3}else{for(C=g+7;u<C;){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}c>>>=g,u-=g,E=0,_=11+(127&c),c>>>=7,u-=7}if(n.have+_>n.nlen+n.ndist){t.msg="invalid bit length repeat",n.mode=Oe;break}for(;_--;)n.lens[n.have++]=E}}if(n.mode===Oe)break;if(0===n.lens[256]){t.msg="invalid code -- missing end-of-block",n.mode=Oe;break}if(n.lenbits=9,S={bits:n.lenbits},x=pe(1,n.lens,0,n.nlen,n.lencode,0,n.work,S),n.lenbits=S.bits,x){t.msg="invalid literal/lengths set",n.mode=Oe;break}if(n.distbits=6,n.distcode=n.distdyn,S={bits:n.distbits},x=pe(2,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,S),n.distbits=S.bits,x){t.msg="invalid distances set",n.mode=Oe;break}if(n.mode=Re,e===me)break t;case Re:n.mode=Pe;case Pe:if(a>=6&&l>=258){t.next_out=o,t.avail_out=l,t.next_in=r,t.avail_in=a,n.hold=c,n.bits=u,ce(t,d),o=t.next_out,s=t.output,l=t.avail_out,r=t.next_in,i=t.input,a=t.avail_in,c=n.hold,u=n.bits,n.mode===Ie&&(n.back=-1);break}for(n.back=0;q=n.lencode[c&(1<<n.lenbits)-1],g=q>>>24,m=q>>>16&255,y=65535&q,!(g<=u);){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}if(m&&0==(240&m)){for(v=g,b=m,w=y;q=n.lencode[w+((c&(1<<v+b)-1)>>v)],g=q>>>24,m=q>>>16&255,y=65535&q,!(v+g<=u);){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}c>>>=v,u-=v,n.back+=v}if(c>>>=g,u-=g,n.back+=g,n.length=y,0===m){n.mode=16205;break}if(32&m){n.back=-1,n.mode=Ie;break}if(64&m){t.msg="invalid literal/length code",n.mode=Oe;break}n.extra=15&m,n.mode=16201;case 16201:if(n.extra){for(C=n.extra;u<C;){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}n.length+=c&(1<<n.extra)-1,c>>>=n.extra,u-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=16202;case 16202:for(;q=n.distcode[c&(1<<n.distbits)-1],g=q>>>24,m=q>>>16&255,y=65535&q,!(g<=u);){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}if(0==(240&m)){for(v=g,b=m,w=y;q=n.distcode[w+((c&(1<<v+b)-1)>>v)],g=q>>>24,m=q>>>16&255,y=65535&q,!(v+g<=u);){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}c>>>=v,u-=v,n.back+=v}if(c>>>=g,u-=g,n.back+=g,64&m){t.msg="invalid distance code",n.mode=Oe;break}n.offset=y,n.extra=15&m,n.mode=16203;case 16203:if(n.extra){for(C=n.extra;u<C;){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}n.offset+=c&(1<<n.extra)-1,c>>>=n.extra,u-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){t.msg="invalid distance too far back",n.mode=Oe;break}n.mode=16204;case 16204:if(0===l)break t;if(_=d-l,n.offset>_){if(_=n.offset-_,_>n.whave&&n.sane){t.msg="invalid distance too far back",n.mode=Oe;break}_>n.wnext?(_-=n.wnext,p=n.wsize-_):p=n.wnext-_,_>n.length&&(_=n.length),f=n.window}else f=s,p=o-n.offset,_=n.length;_>l&&(_=l),l-=_,n.length-=_;do{s[o++]=f[p++]}while(--_);0===n.length&&(n.mode=Pe);break;case 16205:if(0===l)break t;s[o++]=n.length,l--,n.mode=Pe;break;case Fe:if(n.wrap){for(;u<32;){if(0===a)break t;a--,c|=i[r++]<<u,u+=8}if(d-=l,t.total_out+=d,n.total+=d,4&n.wrap&&d&&(t.adler=n.check=n.flags?N(n.check,s,d,o-d):M(n.check,s,d,o-d)),d=l,4&n.wrap&&(n.flags?c:Le(c))!==n.check){t.msg="incorrect data check",n.mode=Oe;break}c=0,u=0}n.mode=16207;case 16207:if(n.wrap&&n.flags){for(;u<32;){if(0===a)break t;a--,c+=i[r++]<<u,u+=8}if(4&n.wrap&&c!==(4294967295&n.total)){t.msg="incorrect length check",n.mode=Oe;break}c=0,u=0}n.mode=16208;case 16208:x=ve;break t;case Oe:x=Ee;break t;case 16210:return xe;default:return we}return t.next_out=o,t.avail_out=l,t.next_in=r,t.avail_in=a,n.hold=c,n.bits=u,(n.wsize||d!==t.avail_out&&n.mode<Oe&&(n.mode<Fe||e!==fe))&&Ve(t,t.output,t.next_out,d-t.avail_out),h-=t.avail_in,d-=t.avail_out,t.total_in+=h,t.total_out+=d,n.total+=d,4&n.wrap&&d&&(t.adler=n.check=n.flags?N(n.check,s,d,t.next_out-d):M(n.check,s,d,t.next_out-d)),t.data_type=n.bits+(n.last?64:0)+(n.mode===Ie?128:0)+(n.mode===Re||n.mode===ke?256:0),(0===h&&0===d||e===fe)&&x===ye&&(x=qe),x},inflateEnd:t=>{if(De(t))return we;let e=t.state;return e.window&&(e.window=null),t.state=null,ye},inflateGetHeader:(t,e)=>{if(De(t))return we;const n=t.state;return 0==(2&n.wrap)?we:(n.head=e,e.done=!1,ye)},inflateSetDictionary:(t,e)=>{const n=e.length;let i,s,r;return De(t)?we:(i=t.state,0!==i.wrap&&i.mode!==Ce?we:i.mode===Ce&&(s=1,s=M(s,e,n,0),s!==i.check)?Ee:(r=Ve(t,e,n,n),r?(i.mode=16210,xe):(i.havedict=1,ye)))},inflateInfo:"pako inflate (from Nodeca project)"},He=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1};const Qe=Object.prototype.toString,{Z_NO_FLUSH:Xe,Z_FINISH:Ye,Z_OK:$e,Z_STREAM_END:Je,Z_NEED_DICT:tn,Z_STREAM_ERROR:en,Z_DATA_ERROR:nn,Z_MEM_ERROR:sn}=Z;function rn(t){this.options=Gt.assign({chunkSize:65536,windowBits:15,to:""},t||{});const e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new Ht,this.strm.avail_out=0;let n=Ke.inflateInit2(this.strm,e.windowBits);if(n!==$e)throw new Error(z[n]);if(this.header=new He,Ke.inflateGetHeader(this.strm,this.header),e.dictionary&&("string"==typeof e.dictionary?e.dictionary=Kt.string2buf(e.dictionary):"[object ArrayBuffer]"===Qe.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(n=Ke.inflateSetDictionary(this.strm,e.dictionary),n!==$e)))throw new Error(z[n])}function on(t,e){const n=new rn(e);if(n.push(t),n.err)throw n.msg||z[n.err];return n.result}rn.prototype.push=function(t,e){const n=this.strm,i=this.options.chunkSize,s=this.options.dictionary;let r,o,a;if(this.ended)return!1;for(o=e===~~e?e:!0===e?Ye:Xe,"[object ArrayBuffer]"===Qe.call(t)?n.input=new Uint8Array(t):n.input=t,n.next_in=0,n.avail_in=n.input.length;;){for(0===n.avail_out&&(n.output=new Uint8Array(i),n.next_out=0,n.avail_out=i),r=Ke.inflate(n,o),r===tn&&s&&(r=Ke.inflateSetDictionary(n,s),r===$e?r=Ke.inflate(n,o):r===nn&&(r=tn));n.avail_in>0&&r===Je&&n.state.wrap>0&&0!==t[n.next_in];)Ke.inflateReset(n),r=Ke.inflate(n,o);switch(r){case en:case nn:case tn:case sn:return this.onEnd(r),this.ended=!0,!1}if(a=n.avail_out,n.next_out&&(0===n.avail_out||r===Je))if("string"===this.options.to){let t=Kt.utf8border(n.output,n.next_out),e=n.next_out-t,s=Kt.buf2string(n.output,t);n.next_out=e,n.avail_out=i-e,e&&n.output.set(n.output.subarray(t,t+e),0),this.onData(s)}else this.onData(n.output.length===n.next_out?n.output:n.output.subarray(0,n.next_out));if(r!==$e||0!==a){if(r===Je)return r=Ke.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,!0;if(0===n.avail_in)break}}return!0},rn.prototype.onData=function(t){this.chunks.push(t)},rn.prototype.onEnd=function(t){t===$e&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=Gt.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var an={Inflate:rn,inflate:on,inflateRaw:function(t,e){return(e=e||{}).raw=!0,on(t,e)},ungzip:on,constants:Z};const{Deflate:ln,deflate:cn,deflateRaw:un,gzip:hn}=ae,{Inflate:dn,inflate:_n,inflateRaw:pn,ungzip:fn}=an;var gn={Deflate:ln,deflate:cn,deflateRaw:un,gzip:hn,Inflate:dn,inflate:_n,inflateRaw:pn,ungzip:fn,constants:Z}},9759:(t,n,i)=>{"use strict";i.d(n,{he:()=>_});var s,r,o=(s="file:///home/mmom/src/ol-mbtiles/node_modules/sqlite-wasm-http/deps/dist/sqlite3-bundler-friendly.mjs",function(t={}){var n,r,o=void 0!==t?t:{};o.ready=new Promise((function(t,e){n=t,r=e}));const a=globalThis.sqlite3InitModuleState||Object.assign(Object.create(null),{debugModule:()=>{}});delete globalThis.sqlite3InitModuleState,a.debugModule("globalThis.location =",globalThis.location);const l="emscripten-bug-17951";o[l]=function t(e,n){e.env.foo=function(){};const i=o.locateFile(t.uri,void 0===g?"":g);a.debugModule("instantiateWasm() uri =",i);const s=()=>fetch(i,{credentials:"same-origin"});return(WebAssembly.instantiateStreaming?async()=>WebAssembly.instantiateStreaming(s(),e).then((t=>n(t.instance,t.module))):async()=>s().then((t=>t.arrayBuffer())).then((t=>WebAssembly.instantiate(t,e))).then((t=>n(t.instance,t.module))))(),{}},o[l].uri="sqlite3.wasm";var c,u,h,d=Object.assign({},o),_="./this.program",p="object"==typeof window,f="function"==typeof importScripts,g=("object"==typeof process&&"object"==typeof process.versions&&process.versions.node,"");(p||f)&&(f?g=self.location.href:"undefined"!=typeof document&&document.currentScript&&(g=document.currentScript.src),s&&(g=s),g=0!==g.indexOf("blob:")?g.substr(0,g.replace(/[?#].*/,"").lastIndexOf("/")+1):"",c=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},f&&(h=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),u=(t,e,n)=>{var i=new XMLHttpRequest;i.open("GET",t,!0),i.responseType="arraybuffer",i.onload=()=>{200==i.status||0==i.status&&i.response?e(i.response):n()},i.onerror=n,i.send(null)});var m,y,v=o.print||console.log.bind(console),b=o.printErr||console.warn.bind(console);Object.assign(o,d),d=null,o.arguments&&o.arguments,o.thisProgram&&(_=o.thisProgram),o.quit&&o.quit,o.wasmBinary&&(m=o.wasmBinary),o.noExitRuntime,"object"!=typeof WebAssembly&&B("no native wasm support detected");var w=!1;function E(t,e){t||B(e)}var x,q,T,S,C,I="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function A(t,e,n){for(var i=e+n,s=e;t[s]&&!(s>=i);)++s;if(s-e>16&&t.buffer&&I)return I.decode(t.subarray(e,s));for(var r="";e<s;){var o=t[e++];if(128&o){var a=63&t[e++];if(192!=(224&o)){var l=63&t[e++];if((o=224==(240&o)?(15&o)<<12|a<<6|l:(7&o)<<18|a<<12|l<<6|63&t[e++])<65536)r+=String.fromCharCode(o);else{var c=o-65536;r+=String.fromCharCode(55296|c>>10,56320|1023&c)}}else r+=String.fromCharCode((31&o)<<6|a)}else r+=String.fromCharCode(o)}return r}function k(t,e,n,i){if(!(i>0))return 0;for(var s=n,r=n+i-1,o=0;o<t.length;++o){var a=t.charCodeAt(o);if(a>=55296&&a<=57343&&(a=65536+((1023&a)<<10)|1023&t.charCodeAt(++o)),a<=127){if(n>=r)break;e[n++]=a}else if(a<=2047){if(n+1>=r)break;e[n++]=192|a>>6,e[n++]=128|63&a}else if(a<=65535){if(n+2>=r)break;e[n++]=224|a>>12,e[n++]=128|a>>6&63,e[n++]=128|63&a}else{if(n+3>=r)break;e[n++]=240|a>>18,e[n++]=128|a>>12&63,e[n++]=128|a>>6&63,e[n++]=128|63&a}}return e[n]=0,n-s}function R(t,e,n){return k(t,q,e,n)}function P(t){for(var e=0,n=0;n<t.length;++n){var i=t.charCodeAt(n);i<=127?e++:i<=2047?e+=2:i>=55296&&i<=57343?(e+=4,++n):e+=3}return e}function F(){var t=y.buffer;o.HEAP8=x=new Int8Array(t),o.HEAP16=T=new Int16Array(t),o.HEAP32=S=new Int32Array(t),o.HEAPU8=q=new Uint8Array(t),o.HEAPU16=new Uint16Array(t),o.HEAPU32=C=new Uint32Array(t),o.HEAPF32=new Float32Array(t),o.HEAPF64=new Float64Array(t),o.HEAP64=new BigInt64Array(t),o.HEAPU64=new BigUint64Array(t)}var O=o.INITIAL_MEMORY||16777216;E(O>=524288,"INITIAL_MEMORY should be larger than STACK_SIZE, was "+O+"! (STACK_SIZE=524288)"),y=o.wasmMemory?o.wasmMemory:new WebAssembly.Memory({initial:O/65536,maximum:32768}),F(),O=y.buffer.byteLength;var L=[],M=[],D=[],N=0,z=null,Z=null;function j(t){N++,o.monitorRunDependencies&&o.monitorRunDependencies(N)}function U(t){if(N--,o.monitorRunDependencies&&o.monitorRunDependencies(N),0==N&&(null!==z&&(clearInterval(z),z=null),Z)){var e=Z;Z=null,e()}}function B(t){o.onAbort&&o.onAbort(t),b(t="Aborted("+t+")"),w=!0,t+=". Build with -sASSERTIONS for more info.";var e=new WebAssembly.RuntimeError(t);throw r(e),e}var G,W,V,K,H="data:application/octet-stream;base64,";function Q(t){return t.startsWith(H)}function X(t){try{if(t==G&&m)return new Uint8Array(m);if(h)return h(t);throw"both async and sync fetching of the wasm failed"}catch(t){B(t)}}function Y(t,e,n){return function(t){return m||!p&&!f||"function"!=typeof fetch?Promise.resolve().then((function(){return X(t)})):fetch(t,{credentials:"same-origin"}).then((function(e){if(!e.ok)throw"failed to load wasm binary file at '"+t+"'";return e.arrayBuffer()})).catch((function(){return X(t)}))}(t).then((function(t){return WebAssembly.instantiate(t,e)})).then((function(t){return t})).then(n,(function(t){b("failed to asynchronously prepare wasm: "+t),B(t)}))}function $(t){for(;t.length>0;)t.shift()(o)}o.locateFile?Q(G="sqlite3.wasm")||(W=G,G=o.locateFile?o.locateFile(W,g):g+W):G=new URL(i(662),i.b).href;var J={isAbs:t=>"/"===t.charAt(0),splitPath:t=>/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(t).slice(1),normalizeArray:(t,e)=>{for(var n=0,i=t.length-1;i>=0;i--){var s=t[i];"."===s?t.splice(i,1):".."===s?(t.splice(i,1),n++):n&&(t.splice(i,1),n--)}if(e)for(;n;n--)t.unshift("..");return t},normalize:t=>{var e=J.isAbs(t),n="/"===t.substr(-1);return(t=J.normalizeArray(t.split("/").filter((t=>!!t)),!e).join("/"))||e||(t="."),t&&n&&(t+="/"),(e?"/":"")+t},dirname:t=>{var e=J.splitPath(t),n=e[0],i=e[1];return n||i?(i&&(i=i.substr(0,i.length-1)),n+i):"."},basename:t=>{if("/"===t)return"/";var e=(t=(t=J.normalize(t)).replace(/\/$/,"")).lastIndexOf("/");return-1===e?t:t.substr(e+1)},join:function(){var t=Array.prototype.slice.call(arguments);return J.normalize(t.join("/"))},join2:(t,e)=>J.normalize(t+"/"+e)},tt={resolve:function(){for(var t="",e=!1,n=arguments.length-1;n>=-1&&!e;n--){var i=n>=0?arguments[n]:rt.cwd();if("string"!=typeof i)throw new TypeError("Arguments to path.resolve must be strings");if(!i)return"";t=i+"/"+t,e=J.isAbs(i)}return(e?"/":"")+(t=J.normalizeArray(t.split("/").filter((t=>!!t)),!e).join("/"))||"."},relative:(t,e)=>{function n(t){for(var e=0;e<t.length&&""===t[e];e++);for(var n=t.length-1;n>=0&&""===t[n];n--);return e>n?[]:t.slice(e,n-e+1)}t=tt.resolve(t).substr(1),e=tt.resolve(e).substr(1);for(var i=n(t.split("/")),s=n(e.split("/")),r=Math.min(i.length,s.length),o=r,a=0;a<r;a++)if(i[a]!==s[a]){o=a;break}var l=[];for(a=o;a<i.length;a++)l.push("..");return(l=l.concat(s.slice(o))).join("/")}};function et(t,e,n){var i=n>0?n:P(t)+1,s=new Array(i),r=k(t,s,0,s.length);return e&&(s.length=r),s}var nt={ttys:[],init:function(){},shutdown:function(){},register:function(t,e){nt.ttys[t]={input:[],output:[],ops:e},rt.registerDevice(t,nt.stream_ops)},stream_ops:{open:function(t){var e=nt.ttys[t.node.rdev];if(!e)throw new rt.ErrnoError(43);t.tty=e,t.seekable=!1},close:function(t){t.tty.ops.fsync(t.tty)},fsync:function(t){t.tty.ops.fsync(t.tty)},read:function(t,e,n,i,s){if(!t.tty||!t.tty.ops.get_char)throw new rt.ErrnoError(60);for(var r=0,o=0;o<i;o++){var a;try{a=t.tty.ops.get_char(t.tty)}catch(t){throw new rt.ErrnoError(29)}if(void 0===a&&0===r)throw new rt.ErrnoError(6);if(null==a)break;r++,e[n+o]=a}return r&&(t.node.timestamp=Date.now()),r},write:function(t,e,n,i,s){if(!t.tty||!t.tty.ops.put_char)throw new rt.ErrnoError(60);try{for(var r=0;r<i;r++)t.tty.ops.put_char(t.tty,e[n+r])}catch(t){throw new rt.ErrnoError(29)}return i&&(t.node.timestamp=Date.now()),r}},default_tty_ops:{get_char:function(t){if(!t.input.length){var e=null;if("undefined"!=typeof window&&"function"==typeof window.prompt?null!==(e=window.prompt("Input: "))&&(e+="\n"):"function"==typeof readline&&null!==(e=readline())&&(e+="\n"),!e)return null;t.input=et(e,!0)}return t.input.shift()},put_char:function(t,e){null===e||10===e?(v(A(t.output,0)),t.output=[]):0!=e&&t.output.push(e)},fsync:function(t){t.output&&t.output.length>0&&(v(A(t.output,0)),t.output=[])}},default_tty1_ops:{put_char:function(t,e){null===e||10===e?(b(A(t.output,0)),t.output=[]):0!=e&&t.output.push(e)},fsync:function(t){t.output&&t.output.length>0&&(b(A(t.output,0)),t.output=[])}}};function it(t){B()}var st={ops_table:null,mount:function(t){return st.createNode(null,"/",16895,0)},createNode:function(t,e,n,i){if(rt.isBlkdev(n)||rt.isFIFO(n))throw new rt.ErrnoError(63);st.ops_table||(st.ops_table={dir:{node:{getattr:st.node_ops.getattr,setattr:st.node_ops.setattr,lookup:st.node_ops.lookup,mknod:st.node_ops.mknod,rename:st.node_ops.rename,unlink:st.node_ops.unlink,rmdir:st.node_ops.rmdir,readdir:st.node_ops.readdir,symlink:st.node_ops.symlink},stream:{llseek:st.stream_ops.llseek}},file:{node:{getattr:st.node_ops.getattr,setattr:st.node_ops.setattr},stream:{llseek:st.stream_ops.llseek,read:st.stream_ops.read,write:st.stream_ops.write,allocate:st.stream_ops.allocate,mmap:st.stream_ops.mmap,msync:st.stream_ops.msync}},link:{node:{getattr:st.node_ops.getattr,setattr:st.node_ops.setattr,readlink:st.node_ops.readlink},stream:{}},chrdev:{node:{getattr:st.node_ops.getattr,setattr:st.node_ops.setattr},stream:rt.chrdev_stream_ops}});var s=rt.createNode(t,e,n,i);return rt.isDir(s.mode)?(s.node_ops=st.ops_table.dir.node,s.stream_ops=st.ops_table.dir.stream,s.contents={}):rt.isFile(s.mode)?(s.node_ops=st.ops_table.file.node,s.stream_ops=st.ops_table.file.stream,s.usedBytes=0,s.contents=null):rt.isLink(s.mode)?(s.node_ops=st.ops_table.link.node,s.stream_ops=st.ops_table.link.stream):rt.isChrdev(s.mode)&&(s.node_ops=st.ops_table.chrdev.node,s.stream_ops=st.ops_table.chrdev.stream),s.timestamp=Date.now(),t&&(t.contents[e]=s,t.timestamp=s.timestamp),s},getFileDataAsTypedArray:function(t){return t.contents?t.contents.subarray?t.contents.subarray(0,t.usedBytes):new Uint8Array(t.contents):new Uint8Array(0)},expandFileStorage:function(t,e){var n=t.contents?t.contents.length:0;if(!(n>=e)){e=Math.max(e,n*(n<1048576?2:1.125)>>>0),0!=n&&(e=Math.max(e,256));var i=t.contents;t.contents=new Uint8Array(e),t.usedBytes>0&&t.contents.set(i.subarray(0,t.usedBytes),0)}},resizeFileStorage:function(t,e){if(t.usedBytes!=e)if(0==e)t.contents=null,t.usedBytes=0;else{var n=t.contents;t.contents=new Uint8Array(e),n&&t.contents.set(n.subarray(0,Math.min(e,t.usedBytes))),t.usedBytes=e}},node_ops:{getattr:function(t){var e={};return e.dev=rt.isChrdev(t.mode)?t.id:1,e.ino=t.id,e.mode=t.mode,e.nlink=1,e.uid=0,e.gid=0,e.rdev=t.rdev,rt.isDir(t.mode)?e.size=4096:rt.isFile(t.mode)?e.size=t.usedBytes:rt.isLink(t.mode)?e.size=t.link.length:e.size=0,e.atime=new Date(t.timestamp),e.mtime=new Date(t.timestamp),e.ctime=new Date(t.timestamp),e.blksize=4096,e.blocks=Math.ceil(e.size/e.blksize),e},setattr:function(t,e){void 0!==e.mode&&(t.mode=e.mode),void 0!==e.timestamp&&(t.timestamp=e.timestamp),void 0!==e.size&&st.resizeFileStorage(t,e.size)},lookup:function(t,e){throw rt.genericErrors[44]},mknod:function(t,e,n,i){return st.createNode(t,e,n,i)},rename:function(t,e,n){if(rt.isDir(t.mode)){var i;try{i=rt.lookupNode(e,n)}catch(t){}if(i)for(var s in i.contents)throw new rt.ErrnoError(55)}delete t.parent.contents[t.name],t.parent.timestamp=Date.now(),t.name=n,e.contents[n]=t,e.timestamp=t.parent.timestamp,t.parent=e},unlink:function(t,e){delete t.contents[e],t.timestamp=Date.now()},rmdir:function(t,e){var n=rt.lookupNode(t,e);for(var i in n.contents)throw new rt.ErrnoError(55);delete t.contents[e],t.timestamp=Date.now()},readdir:function(t){var e=[".",".."];for(var n in t.contents)t.contents.hasOwnProperty(n)&&e.push(n);return e},symlink:function(t,e,n){var i=st.createNode(t,e,41471,0);return i.link=n,i},readlink:function(t){if(!rt.isLink(t.mode))throw new rt.ErrnoError(28);return t.link}},stream_ops:{read:function(t,e,n,i,s){var r=t.node.contents;if(s>=t.node.usedBytes)return 0;var o=Math.min(t.node.usedBytes-s,i);if(o>8&&r.subarray)e.set(r.subarray(s,s+o),n);else for(var a=0;a<o;a++)e[n+a]=r[s+a];return o},write:function(t,e,n,i,s,r){if(e.buffer===x.buffer&&(r=!1),!i)return 0;var o=t.node;if(o.timestamp=Date.now(),e.subarray&&(!o.contents||o.contents.subarray)){if(r)return o.contents=e.subarray(n,n+i),o.usedBytes=i,i;if(0===o.usedBytes&&0===s)return o.contents=e.slice(n,n+i),o.usedBytes=i,i;if(s+i<=o.usedBytes)return o.contents.set(e.subarray(n,n+i),s),i}if(st.expandFileStorage(o,s+i),o.contents.subarray&&e.subarray)o.contents.set(e.subarray(n,n+i),s);else for(var a=0;a<i;a++)o.contents[s+a]=e[n+a];return o.usedBytes=Math.max(o.usedBytes,s+i),i},llseek:function(t,e,n){var i=e;if(1===n?i+=t.position:2===n&&rt.isFile(t.node.mode)&&(i+=t.node.usedBytes),i<0)throw new rt.ErrnoError(28);return i},allocate:function(t,e,n){st.expandFileStorage(t.node,e+n),t.node.usedBytes=Math.max(t.node.usedBytes,e+n)},mmap:function(t,e,n,i,s){if(!rt.isFile(t.node.mode))throw new rt.ErrnoError(43);var r,o,a=t.node.contents;if(2&s||a.buffer!==x.buffer){if((n>0||n+e<a.length)&&(a=a.subarray?a.subarray(n,n+e):Array.prototype.slice.call(a,n,n+e)),o=!0,!(r=it()))throw new rt.ErrnoError(48);x.set(a,r)}else o=!1,r=a.byteOffset;return{ptr:r,allocated:o}},msync:function(t,e,n,i,s){return st.stream_ops.write(t,e,0,i,n,!1),0}}},rt={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:!1,ignorePermissions:!0,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(t,e={})=>{if(!(t=tt.resolve(t)))return{path:"",node:null};if((e=Object.assign({follow_mount:!0,recurse_count:0},e)).recurse_count>8)throw new rt.ErrnoError(32);for(var n=t.split("/").filter((t=>!!t)),i=rt.root,s="/",r=0;r<n.length;r++){var o=r===n.length-1;if(o&&e.parent)break;if(i=rt.lookupNode(i,n[r]),s=J.join2(s,n[r]),rt.isMountpoint(i)&&(!o||o&&e.follow_mount)&&(i=i.mounted.root),!o||e.follow)for(var a=0;rt.isLink(i.mode);){var l=rt.readlink(s);if(s=tt.resolve(J.dirname(s),l),i=rt.lookupPath(s,{recurse_count:e.recurse_count+1}).node,a++>40)throw new rt.ErrnoError(32)}}return{path:s,node:i}},getPath:t=>{for(var e;;){if(rt.isRoot(t)){var n=t.mount.mountpoint;return e?"/"!==n[n.length-1]?n+"/"+e:n+e:n}e=e?t.name+"/"+e:t.name,t=t.parent}},hashName:(t,e)=>{for(var n=0,i=0;i<e.length;i++)n=(n<<5)-n+e.charCodeAt(i)|0;return(t+n>>>0)%rt.nameTable.length},hashAddNode:t=>{var e=rt.hashName(t.parent.id,t.name);t.name_next=rt.nameTable[e],rt.nameTable[e]=t},hashRemoveNode:t=>{var e=rt.hashName(t.parent.id,t.name);if(rt.nameTable[e]===t)rt.nameTable[e]=t.name_next;else for(var n=rt.nameTable[e];n;){if(n.name_next===t){n.name_next=t.name_next;break}n=n.name_next}},lookupNode:(t,e)=>{var n=rt.mayLookup(t);if(n)throw new rt.ErrnoError(n,t);for(var i=rt.hashName(t.id,e),s=rt.nameTable[i];s;s=s.name_next){var r=s.name;if(s.parent.id===t.id&&r===e)return s}return rt.lookup(t,e)},createNode:(t,e,n,i)=>{var s=new rt.FSNode(t,e,n,i);return rt.hashAddNode(s),s},destroyNode:t=>{rt.hashRemoveNode(t)},isRoot:t=>t===t.parent,isMountpoint:t=>!!t.mounted,isFile:t=>32768==(61440&t),isDir:t=>16384==(61440&t),isLink:t=>40960==(61440&t),isChrdev:t=>8192==(61440&t),isBlkdev:t=>24576==(61440&t),isFIFO:t=>4096==(61440&t),isSocket:t=>49152==(49152&t),flagModes:{r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090},modeStringToFlags:t=>{var e=rt.flagModes[t];if(void 0===e)throw new Error("Unknown file open mode: "+t);return e},flagsToPermissionString:t=>{var e=["r","w","rw"][3&t];return 512&t&&(e+="w"),e},nodePermissions:(t,e)=>rt.ignorePermissions||(!e.includes("r")||292&t.mode)&&(!e.includes("w")||146&t.mode)&&(!e.includes("x")||73&t.mode)?0:2,mayLookup:t=>rt.nodePermissions(t,"x")||(t.node_ops.lookup?0:2),mayCreate:(t,e)=>{try{return rt.lookupNode(t,e),20}catch(t){}return rt.nodePermissions(t,"wx")},mayDelete:(t,e,n)=>{var i;try{i=rt.lookupNode(t,e)}catch(t){return t.errno}var s=rt.nodePermissions(t,"wx");if(s)return s;if(n){if(!rt.isDir(i.mode))return 54;if(rt.isRoot(i)||rt.getPath(i)===rt.cwd())return 10}else if(rt.isDir(i.mode))return 31;return 0},mayOpen:(t,e)=>t?rt.isLink(t.mode)?32:rt.isDir(t.mode)&&("r"!==rt.flagsToPermissionString(e)||512&e)?31:rt.nodePermissions(t,rt.flagsToPermissionString(e)):44,MAX_OPEN_FDS:4096,nextfd:(t=0,e=rt.MAX_OPEN_FDS)=>{for(var n=t;n<=e;n++)if(!rt.streams[n])return n;throw new rt.ErrnoError(33)},getStream:t=>rt.streams[t],createStream:(t,e,n)=>{rt.FSStream||(rt.FSStream=function(){this.shared={}},rt.FSStream.prototype={},Object.defineProperties(rt.FSStream.prototype,{object:{get:function(){return this.node},set:function(t){this.node=t}},isRead:{get:function(){return 1!=(2097155&this.flags)}},isWrite:{get:function(){return 0!=(2097155&this.flags)}},isAppend:{get:function(){return 1024&this.flags}},flags:{get:function(){return this.shared.flags},set:function(t){this.shared.flags=t}},position:{get:function(){return this.shared.position},set:function(t){this.shared.position=t}}})),t=Object.assign(new rt.FSStream,t);var i=rt.nextfd(e,n);return t.fd=i,rt.streams[i]=t,t},closeStream:t=>{rt.streams[t]=null},chrdev_stream_ops:{open:t=>{var e=rt.getDevice(t.node.rdev);t.stream_ops=e.stream_ops,t.stream_ops.open&&t.stream_ops.open(t)},llseek:()=>{throw new rt.ErrnoError(70)}},major:t=>t>>8,minor:t=>255&t,makedev:(t,e)=>t<<8|e,registerDevice:(t,e)=>{rt.devices[t]={stream_ops:e}},getDevice:t=>rt.devices[t],getMounts:t=>{for(var e=[],n=[t];n.length;){var i=n.pop();e.push(i),n.push.apply(n,i.mounts)}return e},syncfs:(t,e)=>{"function"==typeof t&&(e=t,t=!1),rt.syncFSRequests++,rt.syncFSRequests>1&&b("warning: "+rt.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work");var n=rt.getMounts(rt.root.mount),i=0;function s(t){return rt.syncFSRequests--,e(t)}function r(t){if(t)return r.errored?void 0:(r.errored=!0,s(t));++i>=n.length&&s(null)}n.forEach((e=>{if(!e.type.syncfs)return r(null);e.type.syncfs(e,t,r)}))},mount:(t,e,n)=>{var i,s="/"===n,r=!n;if(s&&rt.root)throw new rt.ErrnoError(10);if(!s&&!r){var o=rt.lookupPath(n,{follow_mount:!1});if(n=o.path,i=o.node,rt.isMountpoint(i))throw new rt.ErrnoError(10);if(!rt.isDir(i.mode))throw new rt.ErrnoError(54)}var a={type:t,opts:e,mountpoint:n,mounts:[]},l=t.mount(a);return l.mount=a,a.root=l,s?rt.root=l:i&&(i.mounted=a,i.mount&&i.mount.mounts.push(a)),l},unmount:t=>{var e=rt.lookupPath(t,{follow_mount:!1});if(!rt.isMountpoint(e.node))throw new rt.ErrnoError(28);var n=e.node,i=n.mounted,s=rt.getMounts(i);Object.keys(rt.nameTable).forEach((t=>{for(var e=rt.nameTable[t];e;){var n=e.name_next;s.includes(e.mount)&&rt.destroyNode(e),e=n}})),n.mounted=null;var r=n.mount.mounts.indexOf(i);n.mount.mounts.splice(r,1)},lookup:(t,e)=>t.node_ops.lookup(t,e),mknod:(t,e,n)=>{var i=rt.lookupPath(t,{parent:!0}).node,s=J.basename(t);if(!s||"."===s||".."===s)throw new rt.ErrnoError(28);var r=rt.mayCreate(i,s);if(r)throw new rt.ErrnoError(r);if(!i.node_ops.mknod)throw new rt.ErrnoError(63);return i.node_ops.mknod(i,s,e,n)},create:(t,e)=>(e=void 0!==e?e:438,e&=4095,e|=32768,rt.mknod(t,e,0)),mkdir:(t,e)=>(e=void 0!==e?e:511,e&=1023,e|=16384,rt.mknod(t,e,0)),mkdirTree:(t,e)=>{for(var n=t.split("/"),i="",s=0;s<n.length;++s)if(n[s]){i+="/"+n[s];try{rt.mkdir(i,e)}catch(t){if(20!=t.errno)throw t}}},mkdev:(t,e,n)=>(void 0===n&&(n=e,e=438),e|=8192,rt.mknod(t,e,n)),symlink:(t,e)=>{if(!tt.resolve(t))throw new rt.ErrnoError(44);var n=rt.lookupPath(e,{parent:!0}).node;if(!n)throw new rt.ErrnoError(44);var i=J.basename(e),s=rt.mayCreate(n,i);if(s)throw new rt.ErrnoError(s);if(!n.node_ops.symlink)throw new rt.ErrnoError(63);return n.node_ops.symlink(n,i,t)},rename:(t,e)=>{var n,i,s=J.dirname(t),r=J.dirname(e),o=J.basename(t),a=J.basename(e);if(n=rt.lookupPath(t,{parent:!0}).node,i=rt.lookupPath(e,{parent:!0}).node,!n||!i)throw new rt.ErrnoError(44);if(n.mount!==i.mount)throw new rt.ErrnoError(75);var l,c=rt.lookupNode(n,o),u=tt.relative(t,r);if("."!==u.charAt(0))throw new rt.ErrnoError(28);if("."!==(u=tt.relative(e,s)).charAt(0))throw new rt.ErrnoError(55);try{l=rt.lookupNode(i,a)}catch(t){}if(c!==l){var h=rt.isDir(c.mode),d=rt.mayDelete(n,o,h);if(d)throw new rt.ErrnoError(d);if(d=l?rt.mayDelete(i,a,h):rt.mayCreate(i,a))throw new rt.ErrnoError(d);if(!n.node_ops.rename)throw new rt.ErrnoError(63);if(rt.isMountpoint(c)||l&&rt.isMountpoint(l))throw new rt.ErrnoError(10);if(i!==n&&(d=rt.nodePermissions(n,"w")))throw new rt.ErrnoError(d);rt.hashRemoveNode(c);try{n.node_ops.rename(c,i,a)}catch(t){throw t}finally{rt.hashAddNode(c)}}},rmdir:t=>{var e=rt.lookupPath(t,{parent:!0}).node,n=J.basename(t),i=rt.lookupNode(e,n),s=rt.mayDelete(e,n,!0);if(s)throw new rt.ErrnoError(s);if(!e.node_ops.rmdir)throw new rt.ErrnoError(63);if(rt.isMountpoint(i))throw new rt.ErrnoError(10);e.node_ops.rmdir(e,n),rt.destroyNode(i)},readdir:t=>{var e=rt.lookupPath(t,{follow:!0}).node;if(!e.node_ops.readdir)throw new rt.ErrnoError(54);return e.node_ops.readdir(e)},unlink:t=>{var e=rt.lookupPath(t,{parent:!0}).node;if(!e)throw new rt.ErrnoError(44);var n=J.basename(t),i=rt.lookupNode(e,n),s=rt.mayDelete(e,n,!1);if(s)throw new rt.ErrnoError(s);if(!e.node_ops.unlink)throw new rt.ErrnoError(63);if(rt.isMountpoint(i))throw new rt.ErrnoError(10);e.node_ops.unlink(e,n),rt.destroyNode(i)},readlink:t=>{var e=rt.lookupPath(t).node;if(!e)throw new rt.ErrnoError(44);if(!e.node_ops.readlink)throw new rt.ErrnoError(28);return tt.resolve(rt.getPath(e.parent),e.node_ops.readlink(e))},stat:(t,e)=>{var n=rt.lookupPath(t,{follow:!e}).node;if(!n)throw new rt.ErrnoError(44);if(!n.node_ops.getattr)throw new rt.ErrnoError(63);return n.node_ops.getattr(n)},lstat:t=>rt.stat(t,!0),chmod:(t,e,n)=>{var i;if(!(i="string"==typeof t?rt.lookupPath(t,{follow:!n}).node:t).node_ops.setattr)throw new rt.ErrnoError(63);i.node_ops.setattr(i,{mode:4095&e|-4096&i.mode,timestamp:Date.now()})},lchmod:(t,e)=>{rt.chmod(t,e,!0)},fchmod:(t,e)=>{var n=rt.getStream(t);if(!n)throw new rt.ErrnoError(8);rt.chmod(n.node,e)},chown:(t,e,n,i)=>{var s;if(!(s="string"==typeof t?rt.lookupPath(t,{follow:!i}).node:t).node_ops.setattr)throw new rt.ErrnoError(63);s.node_ops.setattr(s,{timestamp:Date.now()})},lchown:(t,e,n)=>{rt.chown(t,e,n,!0)},fchown:(t,e,n)=>{var i=rt.getStream(t);if(!i)throw new rt.ErrnoError(8);rt.chown(i.node,e,n)},truncate:(t,e)=>{if(e<0)throw new rt.ErrnoError(28);var n;if(!(n="string"==typeof t?rt.lookupPath(t,{follow:!0}).node:t).node_ops.setattr)throw new rt.ErrnoError(63);if(rt.isDir(n.mode))throw new rt.ErrnoError(31);if(!rt.isFile(n.mode))throw new rt.ErrnoError(28);var i=rt.nodePermissions(n,"w");if(i)throw new rt.ErrnoError(i);n.node_ops.setattr(n,{size:e,timestamp:Date.now()})},ftruncate:(t,e)=>{var n=rt.getStream(t);if(!n)throw new rt.ErrnoError(8);if(0==(2097155&n.flags))throw new rt.ErrnoError(28);rt.truncate(n.node,e)},utime:(t,e,n)=>{var i=rt.lookupPath(t,{follow:!0}).node;i.node_ops.setattr(i,{timestamp:Math.max(e,n)})},open:(t,e,n)=>{if(""===t)throw new rt.ErrnoError(44);var i;if(n=void 0===n?438:n,n=64&(e="string"==typeof e?rt.modeStringToFlags(e):e)?4095&n|32768:0,"object"==typeof t)i=t;else{t=J.normalize(t);try{i=rt.lookupPath(t,{follow:!(131072&e)}).node}catch(t){}}var s=!1;if(64&e)if(i){if(128&e)throw new rt.ErrnoError(20)}else i=rt.mknod(t,n,0),s=!0;if(!i)throw new rt.ErrnoError(44);if(rt.isChrdev(i.mode)&&(e&=-513),65536&e&&!rt.isDir(i.mode))throw new rt.ErrnoError(54);if(!s){var r=rt.mayOpen(i,e);if(r)throw new rt.ErrnoError(r)}512&e&&!s&&rt.truncate(i,0),e&=-131713;var a=rt.createStream({node:i,path:rt.getPath(i),flags:e,seekable:!0,position:0,stream_ops:i.stream_ops,ungotten:[],error:!1});return a.stream_ops.open&&a.stream_ops.open(a),!o.logReadFiles||1&e||(rt.readFiles||(rt.readFiles={}),t in rt.readFiles||(rt.readFiles[t]=1)),a},close:t=>{if(rt.isClosed(t))throw new rt.ErrnoError(8);t.getdents&&(t.getdents=null);try{t.stream_ops.close&&t.stream_ops.close(t)}catch(t){throw t}finally{rt.closeStream(t.fd)}t.fd=null},isClosed:t=>null===t.fd,llseek:(t,e,n)=>{if(rt.isClosed(t))throw new rt.ErrnoError(8);if(!t.seekable||!t.stream_ops.llseek)throw new rt.ErrnoError(70);if(0!=n&&1!=n&&2!=n)throw new rt.ErrnoError(28);return t.position=t.stream_ops.llseek(t,e,n),t.ungotten=[],t.position},read:(t,e,n,i,s)=>{if(i<0||s<0)throw new rt.ErrnoError(28);if(rt.isClosed(t))throw new rt.ErrnoError(8);if(1==(2097155&t.flags))throw new rt.ErrnoError(8);if(rt.isDir(t.node.mode))throw new rt.ErrnoError(31);if(!t.stream_ops.read)throw new rt.ErrnoError(28);var r=void 0!==s;if(r){if(!t.seekable)throw new rt.ErrnoError(70)}else s=t.position;var o=t.stream_ops.read(t,e,n,i,s);return r||(t.position+=o),o},write:(t,e,n,i,s,r)=>{if(i<0||s<0)throw new rt.ErrnoError(28);if(rt.isClosed(t))throw new rt.ErrnoError(8);if(0==(2097155&t.flags))throw new rt.ErrnoError(8);if(rt.isDir(t.node.mode))throw new rt.ErrnoError(31);if(!t.stream_ops.write)throw new rt.ErrnoError(28);t.seekable&&1024&t.flags&&rt.llseek(t,0,2);var o=void 0!==s;if(o){if(!t.seekable)throw new rt.ErrnoError(70)}else s=t.position;var a=t.stream_ops.write(t,e,n,i,s,r);return o||(t.position+=a),a},allocate:(t,e,n)=>{if(rt.isClosed(t))throw new rt.ErrnoError(8);if(e<0||n<=0)throw new rt.ErrnoError(28);if(0==(2097155&t.flags))throw new rt.ErrnoError(8);if(!rt.isFile(t.node.mode)&&!rt.isDir(t.node.mode))throw new rt.ErrnoError(43);if(!t.stream_ops.allocate)throw new rt.ErrnoError(138);t.stream_ops.allocate(t,e,n)},mmap:(t,e,n,i,s)=>{if(0!=(2&i)&&0==(2&s)&&2!=(2097155&t.flags))throw new rt.ErrnoError(2);if(1==(2097155&t.flags))throw new rt.ErrnoError(2);if(!t.stream_ops.mmap)throw new rt.ErrnoError(43);return t.stream_ops.mmap(t,e,n,i,s)},msync:(t,e,n,i,s)=>t.stream_ops.msync?t.stream_ops.msync(t,e,n,i,s):0,munmap:t=>0,ioctl:(t,e,n)=>{if(!t.stream_ops.ioctl)throw new rt.ErrnoError(59);return t.stream_ops.ioctl(t,e,n)},readFile:(t,e={})=>{if(e.flags=e.flags||0,e.encoding=e.encoding||"binary","utf8"!==e.encoding&&"binary"!==e.encoding)throw new Error('Invalid encoding type "'+e.encoding+'"');var n,i=rt.open(t,e.flags),s=rt.stat(t).size,r=new Uint8Array(s);return rt.read(i,r,0,s,0),"utf8"===e.encoding?n=A(r,0):"binary"===e.encoding&&(n=r),rt.close(i),n},writeFile:(t,e,n={})=>{n.flags=n.flags||577;var i=rt.open(t,n.flags,n.mode);if("string"==typeof e){var s=new Uint8Array(P(e)+1),r=k(e,s,0,s.length);rt.write(i,s,0,r,void 0,n.canOwn)}else{if(!ArrayBuffer.isView(e))throw new Error("Unsupported data type");rt.write(i,e,0,e.byteLength,void 0,n.canOwn)}rt.close(i)},cwd:()=>rt.currentPath,chdir:t=>{var e=rt.lookupPath(t,{follow:!0});if(null===e.node)throw new rt.ErrnoError(44);if(!rt.isDir(e.node.mode))throw new rt.ErrnoError(54);var n=rt.nodePermissions(e.node,"x");if(n)throw new rt.ErrnoError(n);rt.currentPath=e.path},createDefaultDirectories:()=>{rt.mkdir("/tmp"),rt.mkdir("/home"),rt.mkdir("/home/web_user")},createDefaultDevices:()=>{rt.mkdir("/dev"),rt.registerDevice(rt.makedev(1,3),{read:()=>0,write:(t,e,n,i,s)=>i}),rt.mkdev("/dev/null",rt.makedev(1,3)),nt.register(rt.makedev(5,0),nt.default_tty_ops),nt.register(rt.makedev(6,0),nt.default_tty1_ops),rt.mkdev("/dev/tty",rt.makedev(5,0)),rt.mkdev("/dev/tty1",rt.makedev(6,0));var t=function(){if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}return()=>B("randomDevice")}();rt.createDevice("/dev","random",t),rt.createDevice("/dev","urandom",t),rt.mkdir("/dev/shm"),rt.mkdir("/dev/shm/tmp")},createSpecialDirectories:()=>{rt.mkdir("/proc");var t=rt.mkdir("/proc/self");rt.mkdir("/proc/self/fd"),rt.mount({mount:()=>{var e=rt.createNode(t,"fd",16895,73);return e.node_ops={lookup:(t,e)=>{var n=+e,i=rt.getStream(n);if(!i)throw new rt.ErrnoError(8);var s={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>i.path}};return s.parent=s,s}},e}},{},"/proc/self/fd")},createStandardStreams:()=>{o.stdin?rt.createDevice("/dev","stdin",o.stdin):rt.symlink("/dev/tty","/dev/stdin"),o.stdout?rt.createDevice("/dev","stdout",null,o.stdout):rt.symlink("/dev/tty","/dev/stdout"),o.stderr?rt.createDevice("/dev","stderr",null,o.stderr):rt.symlink("/dev/tty1","/dev/stderr"),rt.open("/dev/stdin",0),rt.open("/dev/stdout",1),rt.open("/dev/stderr",1)},ensureErrnoError:()=>{rt.ErrnoError||(rt.ErrnoError=function(t,e){this.name="ErrnoError",this.node=e,this.setErrno=function(t){this.errno=t},this.setErrno(t),this.message="FS error"},rt.ErrnoError.prototype=new Error,rt.ErrnoError.prototype.constructor=rt.ErrnoError,[44].forEach((t=>{rt.genericErrors[t]=new rt.ErrnoError(t),rt.genericErrors[t].stack="<generic error, no stack>"})))},staticInit:()=>{rt.ensureErrnoError(),rt.nameTable=new Array(4096),rt.mount(st,{},"/"),rt.createDefaultDirectories(),rt.createDefaultDevices(),rt.createSpecialDirectories(),rt.filesystems={MEMFS:st}},init:(t,e,n)=>{rt.init.initialized=!0,rt.ensureErrnoError(),o.stdin=t||o.stdin,o.stdout=e||o.stdout,o.stderr=n||o.stderr,rt.createStandardStreams()},quit:()=>{rt.init.initialized=!1;for(var t=0;t<rt.streams.length;t++){var e=rt.streams[t];e&&rt.close(e)}},getMode:(t,e)=>{var n=0;return t&&(n|=365),e&&(n|=146),n},findObject:(t,e)=>{var n=rt.analyzePath(t,e);return n.exists?n.object:null},analyzePath:(t,e)=>{try{t=(i=rt.lookupPath(t,{follow:!e})).path}catch(t){}var n={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null};try{var i=rt.lookupPath(t,{parent:!0});n.parentExists=!0,n.parentPath=i.path,n.parentObject=i.node,n.name=J.basename(t),i=rt.lookupPath(t,{follow:!e}),n.exists=!0,n.path=i.path,n.object=i.node,n.name=i.node.name,n.isRoot="/"===i.path}catch(t){n.error=t.errno}return n},createPath:(t,e,n,i)=>{t="string"==typeof t?t:rt.getPath(t);for(var s=e.split("/").reverse();s.length;){var r=s.pop();if(r){var o=J.join2(t,r);try{rt.mkdir(o)}catch(t){}t=o}}return o},createFile:(t,e,n,i,s)=>{var r=J.join2("string"==typeof t?t:rt.getPath(t),e),o=rt.getMode(i,s);return rt.create(r,o)},createDataFile:(t,e,n,i,s,r)=>{var o=e;t&&(t="string"==typeof t?t:rt.getPath(t),o=e?J.join2(t,e):t);var a=rt.getMode(i,s),l=rt.create(o,a);if(n){if("string"==typeof n){for(var c=new Array(n.length),u=0,h=n.length;u<h;++u)c[u]=n.charCodeAt(u);n=c}rt.chmod(l,146|a);var d=rt.open(l,577);rt.write(d,n,0,n.length,0,r),rt.close(d),rt.chmod(l,a)}return l},createDevice:(t,e,n,i)=>{var s=J.join2("string"==typeof t?t:rt.getPath(t),e),r=rt.getMode(!!n,!!i);rt.createDevice.major||(rt.createDevice.major=64);var o=rt.makedev(rt.createDevice.major++,0);return rt.registerDevice(o,{open:t=>{t.seekable=!1},close:t=>{i&&i.buffer&&i.buffer.length&&i(10)},read:(t,e,i,s,r)=>{for(var o=0,a=0;a<s;a++){var l;try{l=n()}catch(t){throw new rt.ErrnoError(29)}if(void 0===l&&0===o)throw new rt.ErrnoError(6);if(null==l)break;o++,e[i+a]=l}return o&&(t.node.timestamp=Date.now()),o},write:(t,e,n,s,r)=>{for(var o=0;o<s;o++)try{i(e[n+o])}catch(t){throw new rt.ErrnoError(29)}return s&&(t.node.timestamp=Date.now()),o}}),rt.mkdev(s,r,o)},forceLoadFile:t=>{if(t.isDevice||t.isFolder||t.link||t.contents)return!0;if("undefined"!=typeof XMLHttpRequest)throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");if(!c)throw new Error("Cannot load without read() or XMLHttpRequest.");try{t.contents=et(c(t.url),!0),t.usedBytes=t.contents.length}catch(t){throw new rt.ErrnoError(29)}},createLazyFile:(t,e,n,i,s)=>{function r(){this.lengthKnown=!1,this.chunks=[]}if(r.prototype.get=function(t){if(!(t>this.length-1||t<0)){var e=t%this.chunkSize,n=t/this.chunkSize|0;return this.getter(n)[e]}},r.prototype.setDataGetter=function(t){this.getter=t},r.prototype.cacheLength=function(){var t=new XMLHttpRequest;if(t.open("HEAD",n,!1),t.send(null),!(t.status>=200&&t.status<300||304===t.status))throw new Error("Couldn't load "+n+". Status: "+t.status);var e,i=Number(t.getResponseHeader("Content-length")),s=(e=t.getResponseHeader("Accept-Ranges"))&&"bytes"===e,r=(e=t.getResponseHeader("Content-Encoding"))&&"gzip"===e,o=1048576;s||(o=i);var a=this;a.setDataGetter((t=>{var e=t*o,s=(t+1)*o-1;if(s=Math.min(s,i-1),void 0===a.chunks[t]&&(a.chunks[t]=((t,e)=>{if(t>e)throw new Error("invalid range ("+t+", "+e+") or no bytes requested!");if(e>i-1)throw new Error("only "+i+" bytes available! programmer error!");var s=new XMLHttpRequest;if(s.open("GET",n,!1),i!==o&&s.setRequestHeader("Range","bytes="+t+"-"+e),s.responseType="arraybuffer",s.overrideMimeType&&s.overrideMimeType("text/plain; charset=x-user-defined"),s.send(null),!(s.status>=200&&s.status<300||304===s.status))throw new Error("Couldn't load "+n+". Status: "+s.status);return void 0!==s.response?new Uint8Array(s.response||[]):et(s.responseText||"",!0)})(e,s)),void 0===a.chunks[t])throw new Error("doXHR failed!");return a.chunks[t]})),!r&&i||(o=i=1,i=this.getter(0).length,o=i,v("LazyFiles on gzip forces download of the whole file when length is accessed")),this._length=i,this._chunkSize=o,this.lengthKnown=!0},"undefined"!=typeof XMLHttpRequest){if(!f)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var o=new r;Object.defineProperties(o,{length:{get:function(){return this.lengthKnown||this.cacheLength(),this._length}},chunkSize:{get:function(){return this.lengthKnown||this.cacheLength(),this._chunkSize}}});var a={isDevice:!1,contents:o}}else a={isDevice:!1,url:n};var l=rt.createFile(t,e,a,i,s);a.contents?l.contents=a.contents:a.url&&(l.contents=null,l.url=a.url),Object.defineProperties(l,{usedBytes:{get:function(){return this.contents.length}}});var c={};function u(t,e,n,i,s){var r=t.node.contents;if(s>=r.length)return 0;var o=Math.min(r.length-s,i);if(r.slice)for(var a=0;a<o;a++)e[n+a]=r[s+a];else for(a=0;a<o;a++)e[n+a]=r.get(s+a);return o}return Object.keys(l.stream_ops).forEach((t=>{var e=l.stream_ops[t];c[t]=function(){return rt.forceLoadFile(l),e.apply(null,arguments)}})),c.read=(t,e,n,i,s)=>(rt.forceLoadFile(l),u(t,e,n,i,s)),c.mmap=(t,e,n,i,s)=>{rt.forceLoadFile(l);var r=it();if(!r)throw new rt.ErrnoError(48);return u(t,x,r,e,n),{ptr:r,allocated:!0}},l.stream_ops=c,l},createPreloadedFile:(t,e,n,i,s,r,o,a,l,c)=>{var h=e?tt.resolve(J.join2(t,e)):t;function d(n){function u(n){c&&c(),a||rt.createDataFile(t,e,n,i,s,l),r&&r(),U()}Browser.handledByPreloadPlugin(n,h,u,(()=>{o&&o(),U()}))||u(n)}j(),"string"==typeof n?function(t,e,n,i){var s="al "+t;u(t,(e=>{E(e,'Loading data file "'+t+'" failed (no arrayBuffer).'),d(new Uint8Array(e)),s&&U()}),(e=>{if(!n)throw'Loading data file "'+t+'" failed.';n()})),s&&j()}(n,0,o):d(n)},indexedDB:()=>window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB,DB_NAME:()=>"EM_FS_"+window.location.pathname,DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(t,e=(()=>{}),n=(()=>{}))=>{var i=rt.indexedDB();try{var s=i.open(rt.DB_NAME(),rt.DB_VERSION)}catch(t){return n(t)}s.onupgradeneeded=()=>{v("creating db"),s.result.createObjectStore(rt.DB_STORE_NAME)},s.onsuccess=()=>{var i=s.result.transaction([rt.DB_STORE_NAME],"readwrite"),r=i.objectStore(rt.DB_STORE_NAME),o=0,a=0,l=t.length;function c(){0==a?e():n()}t.forEach((t=>{var e=r.put(rt.analyzePath(t).object.contents,t);e.onsuccess=()=>{++o+a==l&&c()},e.onerror=()=>{a++,o+a==l&&c()}})),i.onerror=n},s.onerror=n},loadFilesFromDB:(t,e=(()=>{}),n=(()=>{}))=>{var i=rt.indexedDB();try{var s=i.open(rt.DB_NAME(),rt.DB_VERSION)}catch(t){return n(t)}s.onupgradeneeded=n,s.onsuccess=()=>{var i=s.result;try{var r=i.transaction([rt.DB_STORE_NAME],"readonly")}catch(t){return void n(t)}var o=r.objectStore(rt.DB_STORE_NAME),a=0,l=0,c=t.length;function u(){0==l?e():n()}t.forEach((t=>{var e=o.get(t);e.onsuccess=()=>{rt.analyzePath(t).exists&&rt.unlink(t),rt.createDataFile(J.dirname(t),J.basename(t),e.result,!0,!0,!0),++a+l==c&&u()},e.onerror=()=>{l++,a+l==c&&u()}})),r.onerror=n},s.onerror=n}},ot={DEFAULT_POLLMASK:5,calculateAt:function(t,e,n){if(J.isAbs(e))return e;var i;if(i=-100===t?rt.cwd():ot.getStreamFromFD(t).path,0==e.length){if(!n)throw new rt.ErrnoError(44);return i}return J.join2(i,e)},doStat:function(t,e,n){try{var i=t(e)}catch(t){if(t&&t.node&&J.normalize(e)!==J.normalize(rt.getPath(t.node)))return-54;throw t}S[n>>2]=i.dev,S[n+8>>2]=i.ino,S[n+12>>2]=i.mode,C[n+16>>2]=i.nlink,S[n+20>>2]=i.uid,S[n+24>>2]=i.gid,S[n+28>>2]=i.rdev,K=[i.size>>>0,(V=i.size,+Math.abs(V)>=1?V>0?(0|Math.min(+Math.floor(V/4294967296),4294967295))>>>0:~~+Math.ceil((V-+(~~V>>>0))/4294967296)>>>0:0)],S[n+40>>2]=K[0],S[n+44>>2]=K[1],S[n+48>>2]=4096,S[n+52>>2]=i.blocks;var s=i.atime.getTime(),r=i.mtime.getTime(),o=i.ctime.getTime();return K=[Math.floor(s/1e3)>>>0,(V=Math.floor(s/1e3),+Math.abs(V)>=1?V>0?(0|Math.min(+Math.floor(V/4294967296),4294967295))>>>0:~~+Math.ceil((V-+(~~V>>>0))/4294967296)>>>0:0)],S[n+56>>2]=K[0],S[n+60>>2]=K[1],C[n+64>>2]=s%1e3*1e3,K=[Math.floor(r/1e3)>>>0,(V=Math.floor(r/1e3),+Math.abs(V)>=1?V>0?(0|Math.min(+Math.floor(V/4294967296),4294967295))>>>0:~~+Math.ceil((V-+(~~V>>>0))/4294967296)>>>0:0)],S[n+72>>2]=K[0],S[n+76>>2]=K[1],C[n+80>>2]=r%1e3*1e3,K=[Math.floor(o/1e3)>>>0,(V=Math.floor(o/1e3),+Math.abs(V)>=1?V>0?(0|Math.min(+Math.floor(V/4294967296),4294967295))>>>0:~~+Math.ceil((V-+(~~V>>>0))/4294967296)>>>0:0)],S[n+88>>2]=K[0],S[n+92>>2]=K[1],C[n+96>>2]=o%1e3*1e3,K=[i.ino>>>0,(V=i.ino,+Math.abs(V)>=1?V>0?(0|Math.min(+Math.floor(V/4294967296),4294967295))>>>0:~~+Math.ceil((V-+(~~V>>>0))/4294967296)>>>0:0)],S[n+104>>2]=K[0],S[n+108>>2]=K[1],0},doMsync:function(t,e,n,i,s){if(!rt.isFile(e.node.mode))throw new rt.ErrnoError(43);if(2&i)return 0;var r=q.slice(t,t+n);rt.msync(e,r,s,n,i)},varargs:void 0,get:function(){return ot.varargs+=4,S[ot.varargs-4>>2]},getStr:function(t){var e=function(t,e){return t?A(q,t,void 0):""}(t);return e},getStreamFromFD:function(t){var e=rt.getStream(t);if(!e)throw new rt.ErrnoError(8);return e}},at=9007199254740992,lt=-9007199254740992;function ct(t){return t<lt||t>at?NaN:Number(t)}function ut(t){return C[t>>2]+4294967296*S[t+4>>2]}var ht,dt=[0,31,60,91,121,152,182,213,244,274,305,335],_t=[0,31,59,90,120,151,181,212,243,273,304,334];function pt(t){var e=P(t)+1,n=Et(e);return n&&k(t,x,n,e),n}function ft(t){var e=y.buffer;try{return y.grow(t-e.byteLength+65535>>>16),F(),1}catch(t){}}ht=()=>performance.now();var gt={};function mt(){if(!mt.strings){var t={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:_||"./this.program"};for(var e in gt)void 0===gt[e]?delete t[e]:t[e]=gt[e];var n=[];for(var e in t)n.push(e+"="+t[e]);mt.strings=n}return mt.strings}var yt=function(t,e,n,i){t||(t=this),this.parent=t,this.mount=t.mount,this.mounted=null,this.id=rt.nextInode++,this.name=e,this.mode=n,this.node_ops={},this.stream_ops={},this.rdev=i};Object.defineProperties(yt.prototype,{read:{get:function(){return 365==(365&this.mode)},set:function(t){t?this.mode|=365:this.mode&=-366}},write:{get:function(){return 146==(146&this.mode)},set:function(t){t?this.mode|=146:this.mode&=-147}},isFolder:{get:function(){return rt.isDir(this.mode)}},isDevice:{get:function(){return rt.isChrdev(this.mode)}}}),rt.FSNode=yt,rt.staticInit();var vt,bt={__syscall_chmod:function(t,e){try{return t=ot.getStr(t),rt.chmod(t,e),0}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return-t.errno}},__syscall_faccessat:function(t,e,n,i){try{if(e=ot.getStr(e),e=ot.calculateAt(t,e),-8&n)return-28;var s=rt.lookupPath(e,{follow:!0}).node;if(!s)return-44;var r="";return 4&n&&(r+="r"),2&n&&(r+="w"),1&n&&(r+="x"),r&&rt.nodePermissions(s,r)?-2:0}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return-t.errno}},__syscall_fchmod:function(t,e){try{return rt.fchmod(t,e),0}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return-t.errno}},__syscall_fchown32:function(t,e,n){try{return rt.fchown(t,e,n),0}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return-t.errno}},__syscall_fcntl64:function(t,e,n){ot.varargs=n;try{var i=ot.getStreamFromFD(t);switch(e){case 0:return(s=ot.get())<0?-28:rt.createStream(i,s).fd;case 1:case 2:case 6:case 7:return 0;case 3:return i.flags;case 4:var s=ot.get();return i.flags|=s,0;case 5:return s=ot.get(),T[s+0>>1]=2,0;case 16:case 8:default:return-28;case 9:return 28,S[wt()>>2]=28,-1}}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return-t.errno}},__syscall_fstat64:function(t,e){try{var n=ot.getStreamFromFD(t);return ot.doStat(rt.stat,n.path,e)}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return-t.errno}},__syscall_ftruncate64:function(t,e){try{return e=ct(e),isNaN(e)?-61:(rt.ftruncate(t,e),0)}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return-t.errno}},__syscall_getcwd:function(t,e){try{if(0===e)return-28;var n=rt.cwd(),i=P(n)+1;return e<i?-68:(R(n,t,e),i)}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return-t.errno}},__syscall_ioctl:function(t,e,n){ot.varargs=n;try{var i=ot.getStreamFromFD(t);switch(e){case 21509:case 21505:case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:case 21523:case 21524:return i.tty?0:-59;case 21519:if(!i.tty)return-59;var s=ot.get();return S[s>>2]=0,0;case 21520:return i.tty?-28:-59;case 21531:return s=ot.get(),rt.ioctl(i,e,s);default:return-28}}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return-t.errno}},__syscall_lstat64:function(t,e){try{return t=ot.getStr(t),ot.doStat(rt.lstat,t,e)}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return-t.errno}},__syscall_mkdirat:function(t,e,n){try{return e=ot.getStr(e),e=ot.calculateAt(t,e),"/"===(e=J.normalize(e))[e.length-1]&&(e=e.substr(0,e.length-1)),rt.mkdir(e,n,0),0}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return-t.errno}},__syscall_newfstatat:function(t,e,n,i){try{e=ot.getStr(e);var s=256&i,r=4096&i;return i&=-6401,e=ot.calculateAt(t,e,r),ot.doStat(s?rt.lstat:rt.stat,e,n)}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return-t.errno}},__syscall_openat:function(t,e,n,i){ot.varargs=i;try{e=ot.getStr(e),e=ot.calculateAt(t,e);var s=i?ot.get():0;return rt.open(e,n,s).fd}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return-t.errno}},__syscall_readlinkat:function(t,e,n,i){try{if(e=ot.getStr(e),e=ot.calculateAt(t,e),i<=0)return-28;var s=rt.readlink(e),r=Math.min(i,P(s)),o=x[n+r];return R(s,n,i+1),x[n+r]=o,r}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return-t.errno}},__syscall_rmdir:function(t){try{return t=ot.getStr(t),rt.rmdir(t),0}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return-t.errno}},__syscall_stat64:function(t,e){try{return t=ot.getStr(t),ot.doStat(rt.stat,t,e)}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return-t.errno}},__syscall_unlinkat:function(t,e,n){try{return e=ot.getStr(e),e=ot.calculateAt(t,e),0===n?rt.unlink(e):512===n?rt.rmdir(e):B("Invalid flags passed to unlinkat"),0}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return-t.errno}},__syscall_utimensat:function(t,e,n,i){try{if(e=ot.getStr(e),e=ot.calculateAt(t,e,!0),n){var s=ut(n),r=S[n+8>>2];o=1e3*s+r/1e6,a=1e3*(s=ut(n+=16))+(r=S[n+8>>2])/1e6}else var o=Date.now(),a=o;return rt.utime(e,o,a),0}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return-t.errno}},_emscripten_get_now_is_monotonic:function(){return true},_localtime_js:function(t,e){var n=new Date(1e3*ut(t));S[e>>2]=n.getSeconds(),S[e+4>>2]=n.getMinutes(),S[e+8>>2]=n.getHours(),S[e+12>>2]=n.getDate(),S[e+16>>2]=n.getMonth(),S[e+20>>2]=n.getFullYear()-1900,S[e+24>>2]=n.getDay();var i=0|function(t){var e;return((e=t.getFullYear())%4!=0||e%100==0&&e%400!=0?_t:dt)[t.getMonth()]+t.getDate()-1}(n);S[e+28>>2]=i,S[e+36>>2]=-60*n.getTimezoneOffset();var s=new Date(n.getFullYear(),0,1),r=new Date(n.getFullYear(),6,1).getTimezoneOffset(),o=s.getTimezoneOffset(),a=0|(r!=o&&n.getTimezoneOffset()==Math.min(o,r));S[e+32>>2]=a},_tzset_js:function(t,e,n){var i=(new Date).getFullYear(),s=new Date(i,0,1),r=new Date(i,6,1),o=s.getTimezoneOffset(),a=r.getTimezoneOffset(),l=Math.max(o,a);function c(t){var e=t.toTimeString().match(/\(([A-Za-z ]+)\)$/);return e?e[1]:"GMT"}C[t>>2]=60*l,S[e>>2]=Number(o!=a);var u=c(s),h=c(r),d=pt(u),_=pt(h);a<o?(C[n>>2]=d,C[n+4>>2]=_):(C[n>>2]=_,C[n+4>>2]=d)},emscripten_date_now:function(){return Date.now()},emscripten_get_now:ht,emscripten_resize_heap:function(t){var e,n=q.length,i=2147483648;if((t>>>=0)>i)return!1;for(var s=1;s<=4;s*=2){var r=n*(1+.2/s);if(r=Math.min(r,t+100663296),ft(Math.min(i,(e=Math.max(t,r))+(65536-e%65536)%65536)))return!0}return!1},environ_get:function(t,e){var n=0;return mt().forEach((function(i,s){var r=e+n;C[t+4*s>>2]=r,function(t,e,n){for(var i=0;i<t.length;++i)x[e++>>0]=t.charCodeAt(i);x[e>>0]=0}(i,r),n+=i.length+1})),0},environ_sizes_get:function(t,e){var n=mt();C[t>>2]=n.length;var i=0;return n.forEach((function(t){i+=t.length+1})),C[e>>2]=i,0},fd_close:function(t){try{var e=ot.getStreamFromFD(t);return rt.close(e),0}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return t.errno}},fd_fdstat_get:function(t,e){try{var n=ot.getStreamFromFD(t),i=n.tty?2:rt.isDir(n.mode)?3:rt.isLink(n.mode)?7:4;return x[e>>0]=i,0}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return t.errno}},fd_read:function(t,e,n,i){try{var s=function(t,e,n,i){for(var s=0,r=0;r<n;r++){var o=C[e>>2],a=C[e+4>>2];e+=8;var l=rt.read(t,x,o,a,i);if(l<0)return-1;if(s+=l,l<a)break;void 0!==i&&(i+=l)}return s}(ot.getStreamFromFD(t),e,n);return C[i>>2]=s,0}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return t.errno}},fd_seek:function(t,e,n,i){try{if(e=ct(e),isNaN(e))return 61;var s=ot.getStreamFromFD(t);return rt.llseek(s,e,n),K=[s.position>>>0,(V=s.position,+Math.abs(V)>=1?V>0?(0|Math.min(+Math.floor(V/4294967296),4294967295))>>>0:~~+Math.ceil((V-+(~~V>>>0))/4294967296)>>>0:0)],S[i>>2]=K[0],S[i+4>>2]=K[1],s.getdents&&0===e&&0===n&&(s.getdents=null),0}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return t.errno}},fd_sync:function(t){try{var e=ot.getStreamFromFD(t);return e.stream_ops&&e.stream_ops.fsync?e.stream_ops.fsync(e):0}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return t.errno}},fd_write:function(t,e,n,i){try{var s=function(t,e,n,i){for(var s=0,r=0;r<n;r++){var o=C[e>>2],a=C[e+4>>2];e+=8;var l=rt.write(t,x,o,a,i);if(l<0)return-1;s+=l,void 0!==i&&(i+=l)}return s}(ot.getStreamFromFD(t),e,n);return C[i>>2]=s,0}catch(t){if(void 0===rt||"ErrnoError"!==t.name)throw t;return t.errno}},memory:y},wt=(function(){var t,e,n,i,s={env:bt,wasi_snapshot_preview1:bt};function a(t,e){var n,i=t.exports;return o.asm=i,o.asm.__indirect_function_table,n=o.asm.__wasm_call_ctors,M.unshift(n),U(),i}if(j(),o.instantiateWasm)try{return o.instantiateWasm(s,a)}catch(t){b("Module.instantiateWasm callback failed with error: "+t),r(t)}(t=m,e=G,n=s,i=function(t){a(t.instance)},t||"function"!=typeof WebAssembly.instantiateStreaming||Q(e)||"function"!=typeof fetch?Y(e,n,i):fetch(e,{credentials:"same-origin"}).then((function(t){return WebAssembly.instantiateStreaming(t,n).then(i,(function(t){return b("wasm streaming compile failed: "+t),b("falling back to ArrayBuffer instantiation"),Y(e,n,i)}))}))).catch(r)}(),o._sqlite3_status64=function(){return(o._sqlite3_status64=o.asm.sqlite3_status64).apply(null,arguments)},o._sqlite3_status=function(){return(o._sqlite3_status=o.asm.sqlite3_status).apply(null,arguments)},o._sqlite3_db_status=function(){return(o._sqlite3_db_status=o.asm.sqlite3_db_status).apply(null,arguments)},o._sqlite3_msize=function(){return(o._sqlite3_msize=o.asm.sqlite3_msize).apply(null,arguments)},o._sqlite3_vfs_find=function(){return(o._sqlite3_vfs_find=o.asm.sqlite3_vfs_find).apply(null,arguments)},o._sqlite3_initialize=function(){return(o._sqlite3_initialize=o.asm.sqlite3_initialize).apply(null,arguments)},o._sqlite3_malloc=function(){return(o._sqlite3_malloc=o.asm.sqlite3_malloc).apply(null,arguments)},o._sqlite3_free=function(){return(o._sqlite3_free=o.asm.sqlite3_free).apply(null,arguments)},o._sqlite3_vfs_register=function(){return(o._sqlite3_vfs_register=o.asm.sqlite3_vfs_register).apply(null,arguments)},o._sqlite3_vfs_unregister=function(){return(o._sqlite3_vfs_unregister=o.asm.sqlite3_vfs_unregister).apply(null,arguments)},o._sqlite3_malloc64=function(){return(o._sqlite3_malloc64=o.asm.sqlite3_malloc64).apply(null,arguments)},o._sqlite3_realloc=function(){return(o._sqlite3_realloc=o.asm.sqlite3_realloc).apply(null,arguments)},o._sqlite3_realloc64=function(){return(o._sqlite3_realloc64=o.asm.sqlite3_realloc64).apply(null,arguments)},o._sqlite3_value_text=function(){return(o._sqlite3_value_text=o.asm.sqlite3_value_text).apply(null,arguments)},o._sqlite3_randomness=function(){return(o._sqlite3_randomness=o.asm.sqlite3_randomness).apply(null,arguments)},o._sqlite3_stricmp=function(){return(o._sqlite3_stricmp=o.asm.sqlite3_stricmp).apply(null,arguments)},o._sqlite3_strnicmp=function(){return(o._sqlite3_strnicmp=o.asm.sqlite3_strnicmp).apply(null,arguments)},o._sqlite3_uri_parameter=function(){return(o._sqlite3_uri_parameter=o.asm.sqlite3_uri_parameter).apply(null,arguments)},function(){return(wt=o.asm.__errno_location).apply(null,arguments)}),Et=(o._sqlite3_uri_boolean=function(){return(o._sqlite3_uri_boolean=o.asm.sqlite3_uri_boolean).apply(null,arguments)},o._sqlite3_serialize=function(){return(o._sqlite3_serialize=o.asm.sqlite3_serialize).apply(null,arguments)},o._sqlite3_prepare_v2=function(){return(o._sqlite3_prepare_v2=o.asm.sqlite3_prepare_v2).apply(null,arguments)},o._sqlite3_step=function(){return(o._sqlite3_step=o.asm.sqlite3_step).apply(null,arguments)},o._sqlite3_column_int64=function(){return(o._sqlite3_column_int64=o.asm.sqlite3_column_int64).apply(null,arguments)},o._sqlite3_column_int=function(){return(o._sqlite3_column_int=o.asm.sqlite3_column_int).apply(null,arguments)},o._sqlite3_finalize=function(){return(o._sqlite3_finalize=o.asm.sqlite3_finalize).apply(null,arguments)},o._sqlite3_file_control=function(){return(o._sqlite3_file_control=o.asm.sqlite3_file_control).apply(null,arguments)},o._sqlite3_reset=function(){return(o._sqlite3_reset=o.asm.sqlite3_reset).apply(null,arguments)},o._sqlite3_deserialize=function(){return(o._sqlite3_deserialize=o.asm.sqlite3_deserialize).apply(null,arguments)},o._sqlite3_clear_bindings=function(){return(o._sqlite3_clear_bindings=o.asm.sqlite3_clear_bindings).apply(null,arguments)},o._sqlite3_value_blob=function(){return(o._sqlite3_value_blob=o.asm.sqlite3_value_blob).apply(null,arguments)},o._sqlite3_value_bytes=function(){return(o._sqlite3_value_bytes=o.asm.sqlite3_value_bytes).apply(null,arguments)},o._sqlite3_value_double=function(){return(o._sqlite3_value_double=o.asm.sqlite3_value_double).apply(null,arguments)},o._sqlite3_value_int=function(){return(o._sqlite3_value_int=o.asm.sqlite3_value_int).apply(null,arguments)},o._sqlite3_value_int64=function(){return(o._sqlite3_value_int64=o.asm.sqlite3_value_int64).apply(null,arguments)},o._sqlite3_value_subtype=function(){return(o._sqlite3_value_subtype=o.asm.sqlite3_value_subtype).apply(null,arguments)},o._sqlite3_value_pointer=function(){return(o._sqlite3_value_pointer=o.asm.sqlite3_value_pointer).apply(null,arguments)},o._sqlite3_value_type=function(){return(o._sqlite3_value_type=o.asm.sqlite3_value_type).apply(null,arguments)},o._sqlite3_value_nochange=function(){return(o._sqlite3_value_nochange=o.asm.sqlite3_value_nochange).apply(null,arguments)},o._sqlite3_value_frombind=function(){return(o._sqlite3_value_frombind=o.asm.sqlite3_value_frombind).apply(null,arguments)},o._sqlite3_value_dup=function(){return(o._sqlite3_value_dup=o.asm.sqlite3_value_dup).apply(null,arguments)},o._sqlite3_value_free=function(){return(o._sqlite3_value_free=o.asm.sqlite3_value_free).apply(null,arguments)},o._sqlite3_result_blob=function(){return(o._sqlite3_result_blob=o.asm.sqlite3_result_blob).apply(null,arguments)},o._sqlite3_result_error_nomem=function(){return(o._sqlite3_result_error_nomem=o.asm.sqlite3_result_error_nomem).apply(null,arguments)},o._sqlite3_result_error_toobig=function(){return(o._sqlite3_result_error_toobig=o.asm.sqlite3_result_error_toobig).apply(null,arguments)},o._sqlite3_result_double=function(){return(o._sqlite3_result_double=o.asm.sqlite3_result_double).apply(null,arguments)},o._sqlite3_result_error=function(){return(o._sqlite3_result_error=o.asm.sqlite3_result_error).apply(null,arguments)},o._sqlite3_result_int=function(){return(o._sqlite3_result_int=o.asm.sqlite3_result_int).apply(null,arguments)},o._sqlite3_result_int64=function(){return(o._sqlite3_result_int64=o.asm.sqlite3_result_int64).apply(null,arguments)},o._sqlite3_result_null=function(){return(o._sqlite3_result_null=o.asm.sqlite3_result_null).apply(null,arguments)},o._sqlite3_result_pointer=function(){return(o._sqlite3_result_pointer=o.asm.sqlite3_result_pointer).apply(null,arguments)},o._sqlite3_result_subtype=function(){return(o._sqlite3_result_subtype=o.asm.sqlite3_result_subtype).apply(null,arguments)},o._sqlite3_result_text=function(){return(o._sqlite3_result_text=o.asm.sqlite3_result_text).apply(null,arguments)},o._sqlite3_result_zeroblob=function(){return(o._sqlite3_result_zeroblob=o.asm.sqlite3_result_zeroblob).apply(null,arguments)},o._sqlite3_result_zeroblob64=function(){return(o._sqlite3_result_zeroblob64=o.asm.sqlite3_result_zeroblob64).apply(null,arguments)},o._sqlite3_result_error_code=function(){return(o._sqlite3_result_error_code=o.asm.sqlite3_result_error_code).apply(null,arguments)},o._sqlite3_user_data=function(){return(o._sqlite3_user_data=o.asm.sqlite3_user_data).apply(null,arguments)},o._sqlite3_context_db_handle=function(){return(o._sqlite3_context_db_handle=o.asm.sqlite3_context_db_handle).apply(null,arguments)},o._sqlite3_vtab_nochange=function(){return(o._sqlite3_vtab_nochange=o.asm.sqlite3_vtab_nochange).apply(null,arguments)},o._sqlite3_vtab_in_first=function(){return(o._sqlite3_vtab_in_first=o.asm.sqlite3_vtab_in_first).apply(null,arguments)},o._sqlite3_vtab_in_next=function(){return(o._sqlite3_vtab_in_next=o.asm.sqlite3_vtab_in_next).apply(null,arguments)},o._sqlite3_aggregate_context=function(){return(o._sqlite3_aggregate_context=o.asm.sqlite3_aggregate_context).apply(null,arguments)},o._sqlite3_get_auxdata=function(){return(o._sqlite3_get_auxdata=o.asm.sqlite3_get_auxdata).apply(null,arguments)},o._sqlite3_set_auxdata=function(){return(o._sqlite3_set_auxdata=o.asm.sqlite3_set_auxdata).apply(null,arguments)},o._sqlite3_column_count=function(){return(o._sqlite3_column_count=o.asm.sqlite3_column_count).apply(null,arguments)},o._sqlite3_data_count=function(){return(o._sqlite3_data_count=o.asm.sqlite3_data_count).apply(null,arguments)},o._sqlite3_column_blob=function(){return(o._sqlite3_column_blob=o.asm.sqlite3_column_blob).apply(null,arguments)},o._sqlite3_column_bytes=function(){return(o._sqlite3_column_bytes=o.asm.sqlite3_column_bytes).apply(null,arguments)},o._sqlite3_column_double=function(){return(o._sqlite3_column_double=o.asm.sqlite3_column_double).apply(null,arguments)},o._sqlite3_column_text=function(){return(o._sqlite3_column_text=o.asm.sqlite3_column_text).apply(null,arguments)},o._sqlite3_column_value=function(){return(o._sqlite3_column_value=o.asm.sqlite3_column_value).apply(null,arguments)},o._sqlite3_column_type=function(){return(o._sqlite3_column_type=o.asm.sqlite3_column_type).apply(null,arguments)},o._sqlite3_column_name=function(){return(o._sqlite3_column_name=o.asm.sqlite3_column_name).apply(null,arguments)},o._sqlite3_bind_blob=function(){return(o._sqlite3_bind_blob=o.asm.sqlite3_bind_blob).apply(null,arguments)},o._sqlite3_bind_double=function(){return(o._sqlite3_bind_double=o.asm.sqlite3_bind_double).apply(null,arguments)},o._sqlite3_bind_int=function(){return(o._sqlite3_bind_int=o.asm.sqlite3_bind_int).apply(null,arguments)},o._sqlite3_bind_int64=function(){return(o._sqlite3_bind_int64=o.asm.sqlite3_bind_int64).apply(null,arguments)},o._sqlite3_bind_null=function(){return(o._sqlite3_bind_null=o.asm.sqlite3_bind_null).apply(null,arguments)},o._sqlite3_bind_pointer=function(){return(o._sqlite3_bind_pointer=o.asm.sqlite3_bind_pointer).apply(null,arguments)},o._sqlite3_bind_text=function(){return(o._sqlite3_bind_text=o.asm.sqlite3_bind_text).apply(null,arguments)},o._sqlite3_bind_parameter_count=function(){return(o._sqlite3_bind_parameter_count=o.asm.sqlite3_bind_parameter_count).apply(null,arguments)},o._sqlite3_bind_parameter_index=function(){return(o._sqlite3_bind_parameter_index=o.asm.sqlite3_bind_parameter_index).apply(null,arguments)},o._sqlite3_db_handle=function(){return(o._sqlite3_db_handle=o.asm.sqlite3_db_handle).apply(null,arguments)},o._sqlite3_stmt_readonly=function(){return(o._sqlite3_stmt_readonly=o.asm.sqlite3_stmt_readonly).apply(null,arguments)},o._sqlite3_stmt_isexplain=function(){return(o._sqlite3_stmt_isexplain=o.asm.sqlite3_stmt_isexplain).apply(null,arguments)},o._sqlite3_stmt_status=function(){return(o._sqlite3_stmt_status=o.asm.sqlite3_stmt_status).apply(null,arguments)},o._sqlite3_sql=function(){return(o._sqlite3_sql=o.asm.sqlite3_sql).apply(null,arguments)},o._sqlite3_expanded_sql=function(){return(o._sqlite3_expanded_sql=o.asm.sqlite3_expanded_sql).apply(null,arguments)},o._sqlite3_preupdate_old=function(){return(o._sqlite3_preupdate_old=o.asm.sqlite3_preupdate_old).apply(null,arguments)},o._sqlite3_preupdate_count=function(){return(o._sqlite3_preupdate_count=o.asm.sqlite3_preupdate_count).apply(null,arguments)},o._sqlite3_preupdate_depth=function(){return(o._sqlite3_preupdate_depth=o.asm.sqlite3_preupdate_depth).apply(null,arguments)},o._sqlite3_preupdate_blobwrite=function(){return(o._sqlite3_preupdate_blobwrite=o.asm.sqlite3_preupdate_blobwrite).apply(null,arguments)},o._sqlite3_preupdate_new=function(){return(o._sqlite3_preupdate_new=o.asm.sqlite3_preupdate_new).apply(null,arguments)},o._sqlite3_value_numeric_type=function(){return(o._sqlite3_value_numeric_type=o.asm.sqlite3_value_numeric_type).apply(null,arguments)},o._sqlite3_errmsg=function(){return(o._sqlite3_errmsg=o.asm.sqlite3_errmsg).apply(null,arguments)},o._sqlite3_set_authorizer=function(){return(o._sqlite3_set_authorizer=o.asm.sqlite3_set_authorizer).apply(null,arguments)},o._sqlite3_strglob=function(){return(o._sqlite3_strglob=o.asm.sqlite3_strglob).apply(null,arguments)},o._sqlite3_strlike=function(){return(o._sqlite3_strlike=o.asm.sqlite3_strlike).apply(null,arguments)},o._sqlite3_exec=function(){return(o._sqlite3_exec=o.asm.sqlite3_exec).apply(null,arguments)},o._sqlite3_auto_extension=function(){return(o._sqlite3_auto_extension=o.asm.sqlite3_auto_extension).apply(null,arguments)},o._sqlite3_cancel_auto_extension=function(){return(o._sqlite3_cancel_auto_extension=o.asm.sqlite3_cancel_auto_extension).apply(null,arguments)},o._sqlite3_reset_auto_extension=function(){return(o._sqlite3_reset_auto_extension=o.asm.sqlite3_reset_auto_extension).apply(null,arguments)},o._sqlite3_prepare_v3=function(){return(o._sqlite3_prepare_v3=o.asm.sqlite3_prepare_v3).apply(null,arguments)},o._sqlite3_create_module=function(){return(o._sqlite3_create_module=o.asm.sqlite3_create_module).apply(null,arguments)},o._sqlite3_create_module_v2=function(){return(o._sqlite3_create_module_v2=o.asm.sqlite3_create_module_v2).apply(null,arguments)},o._sqlite3_drop_modules=function(){return(o._sqlite3_drop_modules=o.asm.sqlite3_drop_modules).apply(null,arguments)},o._sqlite3_declare_vtab=function(){return(o._sqlite3_declare_vtab=o.asm.sqlite3_declare_vtab).apply(null,arguments)},o._sqlite3_vtab_on_conflict=function(){return(o._sqlite3_vtab_on_conflict=o.asm.sqlite3_vtab_on_conflict).apply(null,arguments)},o._sqlite3_vtab_collation=function(){return(o._sqlite3_vtab_collation=o.asm.sqlite3_vtab_collation).apply(null,arguments)},o._sqlite3_vtab_in=function(){return(o._sqlite3_vtab_in=o.asm.sqlite3_vtab_in).apply(null,arguments)},o._sqlite3_vtab_rhs_value=function(){return(o._sqlite3_vtab_rhs_value=o.asm.sqlite3_vtab_rhs_value).apply(null,arguments)},o._sqlite3_vtab_distinct=function(){return(o._sqlite3_vtab_distinct=o.asm.sqlite3_vtab_distinct).apply(null,arguments)},o._sqlite3_keyword_name=function(){return(o._sqlite3_keyword_name=o.asm.sqlite3_keyword_name).apply(null,arguments)},o._sqlite3_keyword_count=function(){return(o._sqlite3_keyword_count=o.asm.sqlite3_keyword_count).apply(null,arguments)},o._sqlite3_keyword_check=function(){return(o._sqlite3_keyword_check=o.asm.sqlite3_keyword_check).apply(null,arguments)},o._sqlite3_complete=function(){return(o._sqlite3_complete=o.asm.sqlite3_complete).apply(null,arguments)},o._sqlite3_libversion=function(){return(o._sqlite3_libversion=o.asm.sqlite3_libversion).apply(null,arguments)},o._sqlite3_libversion_number=function(){return(o._sqlite3_libversion_number=o.asm.sqlite3_libversion_number).apply(null,arguments)},o._sqlite3_shutdown=function(){return(o._sqlite3_shutdown=o.asm.sqlite3_shutdown).apply(null,arguments)},o._sqlite3_last_insert_rowid=function(){return(o._sqlite3_last_insert_rowid=o.asm.sqlite3_last_insert_rowid).apply(null,arguments)},o._sqlite3_set_last_insert_rowid=function(){return(o._sqlite3_set_last_insert_rowid=o.asm.sqlite3_set_last_insert_rowid).apply(null,arguments)},o._sqlite3_changes64=function(){return(o._sqlite3_changes64=o.asm.sqlite3_changes64).apply(null,arguments)},o._sqlite3_changes=function(){return(o._sqlite3_changes=o.asm.sqlite3_changes).apply(null,arguments)},o._sqlite3_total_changes64=function(){return(o._sqlite3_total_changes64=o.asm.sqlite3_total_changes64).apply(null,arguments)},o._sqlite3_total_changes=function(){return(o._sqlite3_total_changes=o.asm.sqlite3_total_changes).apply(null,arguments)},o._sqlite3_txn_state=function(){return(o._sqlite3_txn_state=o.asm.sqlite3_txn_state).apply(null,arguments)},o._sqlite3_close_v2=function(){return(o._sqlite3_close_v2=o.asm.sqlite3_close_v2).apply(null,arguments)},o._sqlite3_busy_handler=function(){return(o._sqlite3_busy_handler=o.asm.sqlite3_busy_handler).apply(null,arguments)},o._sqlite3_progress_handler=function(){return(o._sqlite3_progress_handler=o.asm.sqlite3_progress_handler).apply(null,arguments)},o._sqlite3_busy_timeout=function(){return(o._sqlite3_busy_timeout=o.asm.sqlite3_busy_timeout).apply(null,arguments)},o._sqlite3_create_function=function(){return(o._sqlite3_create_function=o.asm.sqlite3_create_function).apply(null,arguments)},o._sqlite3_create_function_v2=function(){return(o._sqlite3_create_function_v2=o.asm.sqlite3_create_function_v2).apply(null,arguments)},o._sqlite3_create_window_function=function(){return(o._sqlite3_create_window_function=o.asm.sqlite3_create_window_function).apply(null,arguments)},o._sqlite3_overload_function=function(){return(o._sqlite3_overload_function=o.asm.sqlite3_overload_function).apply(null,arguments)},o._sqlite3_trace_v2=function(){return(o._sqlite3_trace_v2=o.asm.sqlite3_trace_v2).apply(null,arguments)},o._sqlite3_commit_hook=function(){return(o._sqlite3_commit_hook=o.asm.sqlite3_commit_hook).apply(null,arguments)},o._sqlite3_update_hook=function(){return(o._sqlite3_update_hook=o.asm.sqlite3_update_hook).apply(null,arguments)},o._sqlite3_rollback_hook=function(){return(o._sqlite3_rollback_hook=o.asm.sqlite3_rollback_hook).apply(null,arguments)},o._sqlite3_preupdate_hook=function(){return(o._sqlite3_preupdate_hook=o.asm.sqlite3_preupdate_hook).apply(null,arguments)},o._sqlite3_error_offset=function(){return(o._sqlite3_error_offset=o.asm.sqlite3_error_offset).apply(null,arguments)},o._sqlite3_errcode=function(){return(o._sqlite3_errcode=o.asm.sqlite3_errcode).apply(null,arguments)},o._sqlite3_extended_errcode=function(){return(o._sqlite3_extended_errcode=o.asm.sqlite3_extended_errcode).apply(null,arguments)},o._sqlite3_errstr=function(){return(o._sqlite3_errstr=o.asm.sqlite3_errstr).apply(null,arguments)},o._sqlite3_limit=function(){return(o._sqlite3_limit=o.asm.sqlite3_limit).apply(null,arguments)},o._sqlite3_open=function(){return(o._sqlite3_open=o.asm.sqlite3_open).apply(null,arguments)},o._sqlite3_open_v2=function(){return(o._sqlite3_open_v2=o.asm.sqlite3_open_v2).apply(null,arguments)},o._sqlite3_create_collation=function(){return(o._sqlite3_create_collation=o.asm.sqlite3_create_collation).apply(null,arguments)},o._sqlite3_create_collation_v2=function(){return(o._sqlite3_create_collation_v2=o.asm.sqlite3_create_collation_v2).apply(null,arguments)},o._sqlite3_collation_needed=function(){return(o._sqlite3_collation_needed=o.asm.sqlite3_collation_needed).apply(null,arguments)},o._sqlite3_table_column_metadata=function(){return(o._sqlite3_table_column_metadata=o.asm.sqlite3_table_column_metadata).apply(null,arguments)},o._sqlite3_extended_result_codes=function(){return(o._sqlite3_extended_result_codes=o.asm.sqlite3_extended_result_codes).apply(null,arguments)},o._sqlite3_uri_key=function(){return(o._sqlite3_uri_key=o.asm.sqlite3_uri_key).apply(null,arguments)},o._sqlite3_uri_int64=function(){return(o._sqlite3_uri_int64=o.asm.sqlite3_uri_int64).apply(null,arguments)},o._sqlite3_db_name=function(){return(o._sqlite3_db_name=o.asm.sqlite3_db_name).apply(null,arguments)},o._sqlite3_db_filename=function(){return(o._sqlite3_db_filename=o.asm.sqlite3_db_filename).apply(null,arguments)},o._sqlite3_compileoption_used=function(){return(o._sqlite3_compileoption_used=o.asm.sqlite3_compileoption_used).apply(null,arguments)},o._sqlite3_compileoption_get=function(){return(o._sqlite3_compileoption_get=o.asm.sqlite3_compileoption_get).apply(null,arguments)},o._sqlite3session_diff=function(){return(o._sqlite3session_diff=o.asm.sqlite3session_diff).apply(null,arguments)},o._sqlite3session_attach=function(){return(o._sqlite3session_attach=o.asm.sqlite3session_attach).apply(null,arguments)},o._sqlite3session_create=function(){return(o._sqlite3session_create=o.asm.sqlite3session_create).apply(null,arguments)},o._sqlite3session_delete=function(){return(o._sqlite3session_delete=o.asm.sqlite3session_delete).apply(null,arguments)},o._sqlite3session_table_filter=function(){return(o._sqlite3session_table_filter=o.asm.sqlite3session_table_filter).apply(null,arguments)},o._sqlite3session_changeset=function(){return(o._sqlite3session_changeset=o.asm.sqlite3session_changeset).apply(null,arguments)},o._sqlite3session_changeset_strm=function(){return(o._sqlite3session_changeset_strm=o.asm.sqlite3session_changeset_strm).apply(null,arguments)},o._sqlite3session_patchset_strm=function(){return(o._sqlite3session_patchset_strm=o.asm.sqlite3session_patchset_strm).apply(null,arguments)},o._sqlite3session_patchset=function(){return(o._sqlite3session_patchset=o.asm.sqlite3session_patchset).apply(null,arguments)},o._sqlite3session_enable=function(){return(o._sqlite3session_enable=o.asm.sqlite3session_enable).apply(null,arguments)},o._sqlite3session_indirect=function(){return(o._sqlite3session_indirect=o.asm.sqlite3session_indirect).apply(null,arguments)},o._sqlite3session_isempty=function(){return(o._sqlite3session_isempty=o.asm.sqlite3session_isempty).apply(null,arguments)},o._sqlite3session_memory_used=function(){return(o._sqlite3session_memory_used=o.asm.sqlite3session_memory_used).apply(null,arguments)},o._sqlite3session_object_config=function(){return(o._sqlite3session_object_config=o.asm.sqlite3session_object_config).apply(null,arguments)},o._sqlite3session_changeset_size=function(){return(o._sqlite3session_changeset_size=o.asm.sqlite3session_changeset_size).apply(null,arguments)},o._sqlite3changeset_start=function(){return(o._sqlite3changeset_start=o.asm.sqlite3changeset_start).apply(null,arguments)},o._sqlite3changeset_start_v2=function(){return(o._sqlite3changeset_start_v2=o.asm.sqlite3changeset_start_v2).apply(null,arguments)},o._sqlite3changeset_start_strm=function(){return(o._sqlite3changeset_start_strm=o.asm.sqlite3changeset_start_strm).apply(null,arguments)},o._sqlite3changeset_start_v2_strm=function(){return(o._sqlite3changeset_start_v2_strm=o.asm.sqlite3changeset_start_v2_strm).apply(null,arguments)},o._sqlite3changeset_next=function(){return(o._sqlite3changeset_next=o.asm.sqlite3changeset_next).apply(null,arguments)},o._sqlite3changeset_op=function(){return(o._sqlite3changeset_op=o.asm.sqlite3changeset_op).apply(null,arguments)},o._sqlite3changeset_pk=function(){return(o._sqlite3changeset_pk=o.asm.sqlite3changeset_pk).apply(null,arguments)},o._sqlite3changeset_old=function(){return(o._sqlite3changeset_old=o.asm.sqlite3changeset_old).apply(null,arguments)},o._sqlite3changeset_new=function(){return(o._sqlite3changeset_new=o.asm.sqlite3changeset_new).apply(null,arguments)},o._sqlite3changeset_conflict=function(){return(o._sqlite3changeset_conflict=o.asm.sqlite3changeset_conflict).apply(null,arguments)},o._sqlite3changeset_fk_conflicts=function(){return(o._sqlite3changeset_fk_conflicts=o.asm.sqlite3changeset_fk_conflicts).apply(null,arguments)},o._sqlite3changeset_finalize=function(){return(o._sqlite3changeset_finalize=o.asm.sqlite3changeset_finalize).apply(null,arguments)},o._sqlite3changeset_invert=function(){return(o._sqlite3changeset_invert=o.asm.sqlite3changeset_invert).apply(null,arguments)},o._sqlite3changeset_invert_strm=function(){return(o._sqlite3changeset_invert_strm=o.asm.sqlite3changeset_invert_strm).apply(null,arguments)},o._sqlite3changeset_apply_v2=function(){return(o._sqlite3changeset_apply_v2=o.asm.sqlite3changeset_apply_v2).apply(null,arguments)},o._sqlite3changeset_apply=function(){return(o._sqlite3changeset_apply=o.asm.sqlite3changeset_apply).apply(null,arguments)},o._sqlite3changeset_apply_v2_strm=function(){return(o._sqlite3changeset_apply_v2_strm=o.asm.sqlite3changeset_apply_v2_strm).apply(null,arguments)},o._sqlite3changeset_apply_strm=function(){return(o._sqlite3changeset_apply_strm=o.asm.sqlite3changeset_apply_strm).apply(null,arguments)},o._sqlite3changegroup_new=function(){return(o._sqlite3changegroup_new=o.asm.sqlite3changegroup_new).apply(null,arguments)},o._sqlite3changegroup_add=function(){return(o._sqlite3changegroup_add=o.asm.sqlite3changegroup_add).apply(null,arguments)},o._sqlite3changegroup_output=function(){return(o._sqlite3changegroup_output=o.asm.sqlite3changegroup_output).apply(null,arguments)},o._sqlite3changegroup_add_strm=function(){return(o._sqlite3changegroup_add_strm=o.asm.sqlite3changegroup_add_strm).apply(null,arguments)},o._sqlite3changegroup_output_strm=function(){return(o._sqlite3changegroup_output_strm=o.asm.sqlite3changegroup_output_strm).apply(null,arguments)},o._sqlite3changegroup_delete=function(){return(o._sqlite3changegroup_delete=o.asm.sqlite3changegroup_delete).apply(null,arguments)},o._sqlite3changeset_concat=function(){return(o._sqlite3changeset_concat=o.asm.sqlite3changeset_concat).apply(null,arguments)},o._sqlite3changeset_concat_strm=function(){return(o._sqlite3changeset_concat_strm=o.asm.sqlite3changeset_concat_strm).apply(null,arguments)},o._sqlite3session_config=function(){return(o._sqlite3session_config=o.asm.sqlite3session_config).apply(null,arguments)},o._sqlite3_sourceid=function(){return(o._sqlite3_sourceid=o.asm.sqlite3_sourceid).apply(null,arguments)},o._sqlite3_wasm_pstack_ptr=function(){return(o._sqlite3_wasm_pstack_ptr=o.asm.sqlite3_wasm_pstack_ptr).apply(null,arguments)},o._sqlite3_wasm_pstack_restore=function(){return(o._sqlite3_wasm_pstack_restore=o.asm.sqlite3_wasm_pstack_restore).apply(null,arguments)},o._sqlite3_wasm_pstack_alloc=function(){return(o._sqlite3_wasm_pstack_alloc=o.asm.sqlite3_wasm_pstack_alloc).apply(null,arguments)},o._sqlite3_wasm_pstack_remaining=function(){return(o._sqlite3_wasm_pstack_remaining=o.asm.sqlite3_wasm_pstack_remaining).apply(null,arguments)},o._sqlite3_wasm_pstack_quota=function(){return(o._sqlite3_wasm_pstack_quota=o.asm.sqlite3_wasm_pstack_quota).apply(null,arguments)},o._sqlite3_wasm_db_error=function(){return(o._sqlite3_wasm_db_error=o.asm.sqlite3_wasm_db_error).apply(null,arguments)},o._sqlite3_wasm_test_struct=function(){return(o._sqlite3_wasm_test_struct=o.asm.sqlite3_wasm_test_struct).apply(null,arguments)},o._sqlite3_wasm_enum_json=function(){return(o._sqlite3_wasm_enum_json=o.asm.sqlite3_wasm_enum_json).apply(null,arguments)},o._sqlite3_wasm_vfs_unlink=function(){return(o._sqlite3_wasm_vfs_unlink=o.asm.sqlite3_wasm_vfs_unlink).apply(null,arguments)},o._sqlite3_wasm_db_vfs=function(){return(o._sqlite3_wasm_db_vfs=o.asm.sqlite3_wasm_db_vfs).apply(null,arguments)},o._sqlite3_wasm_db_reset=function(){return(o._sqlite3_wasm_db_reset=o.asm.sqlite3_wasm_db_reset).apply(null,arguments)},o._sqlite3_wasm_db_export_chunked=function(){return(o._sqlite3_wasm_db_export_chunked=o.asm.sqlite3_wasm_db_export_chunked).apply(null,arguments)},o._sqlite3_wasm_db_serialize=function(){return(o._sqlite3_wasm_db_serialize=o.asm.sqlite3_wasm_db_serialize).apply(null,arguments)},o._sqlite3_wasm_vfs_create_file=function(){return(o._sqlite3_wasm_vfs_create_file=o.asm.sqlite3_wasm_vfs_create_file).apply(null,arguments)},o._sqlite3_wasm_kvvfsMakeKeyOnPstack=function(){return(o._sqlite3_wasm_kvvfsMakeKeyOnPstack=o.asm.sqlite3_wasm_kvvfsMakeKeyOnPstack).apply(null,arguments)},o._sqlite3_wasm_kvvfs_methods=function(){return(o._sqlite3_wasm_kvvfs_methods=o.asm.sqlite3_wasm_kvvfs_methods).apply(null,arguments)},o._sqlite3_wasm_vtab_config=function(){return(o._sqlite3_wasm_vtab_config=o.asm.sqlite3_wasm_vtab_config).apply(null,arguments)},o._sqlite3_wasm_db_config_ip=function(){return(o._sqlite3_wasm_db_config_ip=o.asm.sqlite3_wasm_db_config_ip).apply(null,arguments)},o._sqlite3_wasm_db_config_pii=function(){return(o._sqlite3_wasm_db_config_pii=o.asm.sqlite3_wasm_db_config_pii).apply(null,arguments)},o._sqlite3_wasm_db_config_s=function(){return(o._sqlite3_wasm_db_config_s=o.asm.sqlite3_wasm_db_config_s).apply(null,arguments)},o._sqlite3_wasm_config_i=function(){return(o._sqlite3_wasm_config_i=o.asm.sqlite3_wasm_config_i).apply(null,arguments)},o._sqlite3_wasm_config_ii=function(){return(o._sqlite3_wasm_config_ii=o.asm.sqlite3_wasm_config_ii).apply(null,arguments)},o._sqlite3_wasm_config_j=function(){return(o._sqlite3_wasm_config_j=o.asm.sqlite3_wasm_config_j).apply(null,arguments)},o._sqlite3_wasm_init_wasmfs=function(){return(o._sqlite3_wasm_init_wasmfs=o.asm.sqlite3_wasm_init_wasmfs).apply(null,arguments)},o._sqlite3_wasm_test_intptr=function(){return(o._sqlite3_wasm_test_intptr=o.asm.sqlite3_wasm_test_intptr).apply(null,arguments)},o._sqlite3_wasm_test_voidptr=function(){return(o._sqlite3_wasm_test_voidptr=o.asm.sqlite3_wasm_test_voidptr).apply(null,arguments)},o._sqlite3_wasm_test_int64_max=function(){return(o._sqlite3_wasm_test_int64_max=o.asm.sqlite3_wasm_test_int64_max).apply(null,arguments)},o._sqlite3_wasm_test_int64_min=function(){return(o._sqlite3_wasm_test_int64_min=o.asm.sqlite3_wasm_test_int64_min).apply(null,arguments)},o._sqlite3_wasm_test_int64_times2=function(){return(o._sqlite3_wasm_test_int64_times2=o.asm.sqlite3_wasm_test_int64_times2).apply(null,arguments)},o._sqlite3_wasm_test_int64_minmax=function(){return(o._sqlite3_wasm_test_int64_minmax=o.asm.sqlite3_wasm_test_int64_minmax).apply(null,arguments)},o._sqlite3_wasm_test_int64ptr=function(){return(o._sqlite3_wasm_test_int64ptr=o.asm.sqlite3_wasm_test_int64ptr).apply(null,arguments)},o._sqlite3_wasm_test_stack_overflow=function(){return(o._sqlite3_wasm_test_stack_overflow=o.asm.sqlite3_wasm_test_stack_overflow).apply(null,arguments)},o._sqlite3_wasm_test_str_hello=function(){return(o._sqlite3_wasm_test_str_hello=o.asm.sqlite3_wasm_test_str_hello).apply(null,arguments)},o._malloc=function(){return(Et=o._malloc=o.asm.malloc).apply(null,arguments)});function xt(){function t(){vt||(vt=!0,o.calledRun=!0,w||(o.noFSInit||rt.init.initialized||rt.init(),rt.ignorePermissions=!1,nt.init(),$(M),n(o),o.onRuntimeInitialized&&o.onRuntimeInitialized(),function(){if(o.postRun)for("function"==typeof o.postRun&&(o.postRun=[o.postRun]);o.postRun.length;)t=o.postRun.shift(),D.unshift(t);var t;$(D)}()))}N>0||(function(){if(o.preRun)for("function"==typeof o.preRun&&(o.preRun=[o.preRun]);o.preRun.length;)t=o.preRun.shift(),L.unshift(t);var t;$(L)}(),N>0||(o.setStatus?(o.setStatus("Running..."),setTimeout((function(){setTimeout((function(){o.setStatus("")}),1),t()}),1)):t()))}if(o._free=function(){return(o._free=o.asm.free).apply(null,arguments)},o._realloc=function(){return(o._realloc=o.asm.realloc).apply(null,arguments)},o.wasmMemory=y,Z=function t(){vt||xt(),vt||(Z=t)},o.preInit)for("function"==typeof o.preInit&&(o.preInit=[o.preInit]);o.preInit.length>0;)o.preInit.pop()();return xt(),o.postRun||(o.postRun=[]),o.postRun.push((function(t){if(globalThis.sqlite3ApiBootstrap=function e(n=globalThis.sqlite3ApiConfig||e.defaultConfig){if(e.sqlite3)return console.warn("sqlite3ApiBootstrap() called multiple times.","Config and external initializers are ignored on calls after the first."),e.sqlite3;const i=Object.assign(Object.create(null),{exports:void 0,memory:void 0,bigIntEnabled:void 0!==t?!!t.HEAPU64:!!globalThis.BigInt64Array,debug:console.debug.bind(console),warn:console.warn.bind(console),error:console.error.bind(console),log:console.log.bind(console),wasmfsOpfsDir:"/opfs",useStdAlloc:!1},n||{});Object.assign(i,{allocExportName:i.useStdAlloc?"malloc":"sqlite3_malloc",deallocExportName:i.useStdAlloc?"free":"sqlite3_free",reallocExportName:i.useStdAlloc?"realloc":"sqlite3_realloc"},i),["exports","memory","wasmfsOpfsDir"].forEach((t=>{"function"==typeof i[t]&&(i[t]=i[t]())})),i.wasmOpfsDir=!1;const s=Object.create(null),r=Object.create(null),o=t=>s.sqlite3_js_rc_str&&s.sqlite3_js_rc_str(t)||"Unknown result code #"+t;class a extends Error{constructor(...t){let e;if(t.length)if("number"==typeof(n=t[0])&&n===(0|n))if(e=t[0],1===t.length)super(o(t[0]));else{const n=o(e);"object"==typeof t[1]?super(n,t[1]):(t[0]=n+":",super(t.join(" ")))}else 2===t.length&&"object"==typeof t[1]?super(...t):super(t.join(" "));var n;this.resultCode=e||s.SQLITE_ERROR,this.name="SQLite3Error"}}a.toss=(...t)=>{throw new a(...t)};const l=a.toss;i.wasmfsOpfsDir&&!/^\/[^/]+$/.test(i.wasmfsOpfsDir)&&l("config.wasmfsOpfsDir must be falsy or in the form '/dir-name'.");const c=t=>"bigint"!=typeof t&&!!(t===(0|t)&&t<=2147483647&&t>=-2147483648),u="undefined"==typeof SharedArrayBuffer?function(){}:SharedArrayBuffer,h=t=>t.buffer instanceof u,d=(t,e,n)=>h(t)?t.slice(e,n):t.subarray(e,n),_=t=>t&&(t instanceof Uint8Array||t instanceof Int8Array||t instanceof ArrayBuffer),p=t=>t&&(t instanceof Uint8Array||t instanceof Int8Array||t instanceof ArrayBuffer),f=t=>_(t)||l("Value is not of a supported TypedArray type."),g=new TextDecoder("utf-8"),m=function(t,e,n){return g.decode(d(t,e,n))};class y extends Error{constructor(...t){2===t.length&&"object"==typeof t[1]?super(...t):t.length?super(t.join(" ")):super("Allocation failed."),this.resultCode=s.SQLITE_NOMEM,this.name="WasmAllocError"}}y.toss=(...t)=>{throw new y(...t)},Object.assign(s,{sqlite3_bind_blob:void 0,sqlite3_bind_text:void 0,sqlite3_create_function_v2:(t,e,n,i,s,r,o,a,l)=>{},sqlite3_create_function:(t,e,n,i,s,r,o,a)=>{},sqlite3_create_window_function:(t,e,n,i,s,r,o,a,l,c)=>{},sqlite3_prepare_v3:(t,e,n,i,s,r)=>{},sqlite3_prepare_v2:(t,e,n,i,s)=>{},sqlite3_exec:(t,e,n,i,s)=>{},sqlite3_randomness:(t,e)=>{}});const v={affirmBindableTypedArray:f,flexibleString:function(t){return p(t)?m(t instanceof ArrayBuffer?new Uint8Array(t):t):Array.isArray(t)?t.join(""):(r.isPtr(t)&&(t=r.cstrToJs(t)),t)},bigIntFits32:t=>t>=-0x7fffffffn-1n&&t<=0x7fffffffn,bigIntFits64:function t(e){return t._max||(t._max=BigInt("0x7fffffffffffffff"),t._min=~t._max),e>=t._min&&e<=t._max},bigIntFitsDouble:function t(e){return t._min||(t._min=Number.MIN_SAFE_INTEGER,t._max=Number.MAX_SAFE_INTEGER),e>=t._min&&e<=t._max},isBindableTypedArray:_,isInt32:c,isSQLableTypedArray:p,isTypedArray:t=>!!(t&&t.constructor&&c(t.constructor.BYTES_PER_ELEMENT))&&t,typedArrayToString:m,isUIThread:()=>globalThis.window===globalThis&&!!globalThis.document,isSharedTypedArray:h,toss:function(...t){throw new Error(t.join(" "))},toss3:l,typedArrayPart:d};Object.assign(r,{ptrSizeof:i.wasmPtrSizeof||4,ptrIR:i.wasmPtrIR||"i32",bigIntEnabled:!!i.bigIntEnabled,exports:i.exports||l("Missing API config.exports (WASM module exports)."),memory:i.memory||i.exports.memory||l("API config object requires a WebAssembly.Memory object","in either config.exports.memory (exported)","or config.memory (imported)."),alloc:void 0,realloc:void 0,dealloc:void 0}),r.allocFromTypedArray=function(t){t instanceof ArrayBuffer&&(t=new Uint8Array(t)),f(t);const e=r.alloc(t.byteLength||1);return r.heapForSize(t.constructor).set(t.byteLength?t:[0],e),e};{const t=i.allocExportName,e=i.deallocExportName,n=i.reallocExportName;for(const i of[t,e,n])r.exports[i]instanceof Function||l("Missing required exports[",i,"] function.");r.alloc=function t(e){return t.impl(e)||y.toss("Failed to allocate",e," bytes.")},r.alloc.impl=r.exports[t],r.realloc=function t(e,n){const i=t.impl(e,n);return n?i||y.toss("Failed to reallocate",n," bytes."):0},r.realloc.impl=r.exports[n],r.dealloc=r.exports[e]}let b;if(r.compileOptionUsed=function t(e){if(!arguments.length){if(t._result)return t._result;t._opt||(t._rx=/^([^=]+)=(.+)/,t._rxInt=/^-?\d+$/,t._opt=function(e,n){const i=t._rx.exec(e);n[0]=i?i[1]:e,n[1]=!i||(t._rxInt.test(i[2])?+i[2]:i[2])});const e={},n=[0,0];let i,r=0;for(;i=s.sqlite3_compileoption_get(r++);)t._opt(i,n),e[n[0]]=n[1];return t._result=e}if(Array.isArray(e)){const t={};return e.forEach((e=>{t[e]=s.sqlite3_compileoption_used(e)})),t}return"object"==typeof e?(Object.keys(e).forEach((t=>{e[t]=s.sqlite3_compileoption_used(t)})),e):"string"==typeof e&&!!s.sqlite3_compileoption_used(e)},r.pstack=Object.assign(Object.create(null),{restore:r.exports.sqlite3_wasm_pstack_restore,alloc:function(t){return"string"!=typeof t||(t=r.sizeofIR(t))||y.toss("Invalid value for pstack.alloc(",arguments[0],")"),r.exports.sqlite3_wasm_pstack_alloc(t)||y.toss("Could not allocate",t,"bytes from the pstack.")},allocChunks:function(t,e){"string"!=typeof e||(e=r.sizeofIR(e))||y.toss("Invalid size value for allocChunks(",arguments[1],")");const n=r.pstack.alloc(t*e),i=[];let s=0,o=0;for(;s<t;++s,o+=e)i.push(n+o);return i},allocPtr:(t=1,e=!0)=>1===t?r.pstack.alloc(e?8:r.ptrSizeof):r.pstack.allocChunks(t,e?8:r.ptrSizeof)}),Object.defineProperties(r.pstack,{pointer:{configurable:!1,iterable:!0,writeable:!1,get:r.exports.sqlite3_wasm_pstack_ptr},quota:{configurable:!1,iterable:!0,writeable:!1,get:r.exports.sqlite3_wasm_pstack_quota},remaining:{configurable:!1,iterable:!0,writeable:!1,get:r.exports.sqlite3_wasm_pstack_remaining}}),s.sqlite3_randomness=(...t)=>{if(1===t.length&&v.isTypedArray(t[0])&&1===t[0].BYTES_PER_ELEMENT){const e=t[0];if(0===e.byteLength)return r.exports.sqlite3_randomness(0,0),e;const n=r.pstack.pointer;try{let t=e.byteLength,n=0;const i=r.exports.sqlite3_randomness,s=r.heap8u(),o=t<512?t:512,a=r.pstack.alloc(o);do{const r=t>o?o:t;i(r,a),e.set(d(s,a,a+r),n),t-=r,n+=r}while(t>0)}catch(t){console.error("Highly unexpected (and ignored!) exception in sqlite3_randomness():",t)}finally{r.pstack.restore(n)}return e}r.exports.sqlite3_randomness(...t)},s.sqlite3_wasmfs_opfs_dir=function(){if(void 0!==b)return b;const t=i.wasmfsOpfsDir;if(console.error("sqlite3_wasmfs_opfs_dir() can no longer work due to incompatible WASMFS changes. It will be removed."),!(t&&globalThis.FileSystemHandle&&globalThis.FileSystemDirectoryHandle&&globalThis.FileSystemFileHandle))return b="";try{return b=t&&0===r.xCallWrapped("sqlite3_wasm_init_wasmfs","i32",["string"],t)?t:""}catch(t){return b=""}},s.sqlite3_wasmfs_filename_is_persistent=function(t){const e=s.sqlite3_wasmfs_opfs_dir();return!(!e||!t)&&t.startsWith(e+"/")},s.sqlite3_js_db_uses_vfs=function(t,e,n=0){try{const i=s.sqlite3_vfs_find(e);return!!i&&(t?i===s.sqlite3_js_db_vfs(t,n)&&i:i===s.sqlite3_vfs_find(0)&&i)}catch(t){return!1}},s.sqlite3_js_vfs_list=function(){const t=[];let e=s.sqlite3_vfs_find(0);for(;e;){const n=new s.sqlite3_vfs(e);t.push(r.cstrToJs(n.$zName)),e=n.$pNext,n.dispose()}return t},s.sqlite3_js_db_export=function(t,e=0){(t=r.xWrap.testConvertArg("sqlite3*",t))||l("Invalid sqlite3* argument."),r.bigIntEnabled||l("BigInt64 support is not enabled.");const n=r.scopedAllocPush();let i;try{const n=r.scopedAlloc(8+r.ptrSizeof),s=n+8,o=e?r.isPtr(e)?e:r.scopedAllocCString(""+e):0;let a=r.exports.sqlite3_wasm_db_serialize(t,o,s,n,0);a&&l("Database serialization failed with code",E.capi.sqlite3_js_rc_str(a)),i=r.peekPtr(s);const c=r.peek(n,"i64");return a=c?r.heap8u().slice(i,i+Number(c)):new Uint8Array,a}finally{i&&r.exports.sqlite3_free(i),r.scopedAllocPop(n)}},s.sqlite3_js_db_vfs=(t,e=0)=>r.sqlite3_wasm_db_vfs(t,e),s.sqlite3_js_aggregate_context=(t,e)=>s.sqlite3_aggregate_context(t,e)||(e?y.toss("Cannot allocate",e,"bytes for sqlite3_aggregate_context()"):0),s.sqlite3_js_vfs_create_file=function(t,e,n,i){let o;n?(r.isPtr(n)?o=n:n instanceof ArrayBuffer&&(n=new Uint8Array(n)),n instanceof Uint8Array?(o=r.allocFromTypedArray(n),(arguments.length<4||!v.isInt32(i)||i<0)&&(i=n.byteLength)):a.toss("Invalid 3rd argument type for sqlite3_js_vfs_create_file().")):o=0,(!v.isInt32(i)||i<0)&&(r.dealloc(o),a.toss("Invalid 4th argument for sqlite3_js_vfs_create_file()."));try{const n=r.sqlite3_wasm_vfs_create_file(t,e,o,i);n&&a.toss("Creation of file failed with sqlite3 result code",s.sqlite3_js_rc_str(n))}finally{r.dealloc(o)}},v.isUIThread()){const t=function(t){const e=Object.create(null);return e.prefix="kvvfs-"+t,e.stores=[],"session"!==t&&""!==t||e.stores.push(globalThis.sessionStorage),"local"!==t&&""!==t||e.stores.push(globalThis.localStorage),e};s.sqlite3_js_kvvfs_clear=function(e=""){let n=0;const i=t(e);return i.stores.forEach((t=>{const e=[];let s;for(s=0;s<t.length;++s){const n=t.key(s);n.startsWith(i.prefix)&&e.push(n)}e.forEach((e=>t.removeItem(e))),n+=e.length})),n},s.sqlite3_js_kvvfs_size=function(e=""){let n=0;const i=t(e);return i.stores.forEach((t=>{let e;for(e=0;e<t.length;++e){const s=t.key(e);s.startsWith(i.prefix)&&(n+=s.length,n+=t.getItem(s).length)}})),2*n}}s.sqlite3_db_config=function(t,e,...n){this.s||(this.s=r.xWrap("sqlite3_wasm_db_config_s","int",["sqlite3*","int","string:static"]),this.pii=r.xWrap("sqlite3_wasm_db_config_pii","int",["sqlite3*","int","*","int","int"]),this.ip=r.xWrap("sqlite3_wasm_db_config_ip","int",["sqlite3*","int","int","*"]));const i=s;switch(e){case i.SQLITE_DBCONFIG_ENABLE_FKEY:case i.SQLITE_DBCONFIG_ENABLE_TRIGGER:case i.SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER:case i.SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION:case i.SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE:case i.SQLITE_DBCONFIG_ENABLE_QPSG:case i.SQLITE_DBCONFIG_TRIGGER_EQP:case i.SQLITE_DBCONFIG_RESET_DATABASE:case i.SQLITE_DBCONFIG_DEFENSIVE:case i.SQLITE_DBCONFIG_WRITABLE_SCHEMA:case i.SQLITE_DBCONFIG_LEGACY_ALTER_TABLE:case i.SQLITE_DBCONFIG_DQS_DML:case i.SQLITE_DBCONFIG_DQS_DDL:case i.SQLITE_DBCONFIG_ENABLE_VIEW:case i.SQLITE_DBCONFIG_LEGACY_FILE_FORMAT:case i.SQLITE_DBCONFIG_TRUSTED_SCHEMA:return this.ip(t,e,n[0],n[1]||0);case i.SQLITE_DBCONFIG_LOOKASIDE:return this.pii(t,e,n[0],n[1],n[2]);case i.SQLITE_DBCONFIG_MAINDBNAME:return this.s(t,e,n[0]);default:return i.SQLITE_MISUSE}}.bind(Object.create(null)),s.sqlite3_value_to_js=function(t,e=!0){let n;const i=s.sqlite3_value_type(t);switch(i){case s.SQLITE_INTEGER:r.bigIntEnabled?(n=s.sqlite3_value_int64(t),v.bigIntFitsDouble(n)&&(n=Number(n))):n=s.sqlite3_value_double(t);break;case s.SQLITE_FLOAT:n=s.sqlite3_value_double(t);break;case s.SQLITE_TEXT:n=s.sqlite3_value_text(t);break;case s.SQLITE_BLOB:{const e=s.sqlite3_value_bytes(t),i=s.sqlite3_value_blob(t);e&&!i&&E.WasmAllocError.toss("Cannot allocate memory for blob argument of",e,"byte(s)"),n=e?r.heap8u().slice(i,i+Number(e)):null;break}case s.SQLITE_NULL:n=null;break;default:e&&l(s.SQLITE_MISMATCH,"Unhandled sqlite3_value_type():",i),n=void 0}return n},s.sqlite3_values_to_js=function(t,e,n=!0){let i;const o=[];for(i=0;i<t;++i)o.push(s.sqlite3_value_to_js(r.peekPtr(e+r.ptrSizeof*i)));return o},s.sqlite3_result_error_js=function(t,e){e instanceof y?s.sqlite3_result_error_nomem(t):s.sqlite3_result_error(t,""+e,-1)},s.sqlite3_result_js=function(t,e){if(e instanceof Error)s.sqlite3_result_error_js(t,e);else try{switch(typeof e){case"undefined":break;case"boolean":s.sqlite3_result_int(t,e?1:0);break;case"bigint":v.bigIntFits32(e)?s.sqlite3_result_int(t,Number(e)):v.bigIntFitsDouble(e)?s.sqlite3_result_double(t,Number(e)):r.bigIntEnabled?v.bigIntFits64(e)?s.sqlite3_result_int64(t,e):l("BigInt value",e.toString(),"is too BigInt for int64."):l("BigInt value",e.toString(),"is too BigInt.");break;case"number":{let n;n=v.isInt32(e)?s.sqlite3_result_int:r.bigIntEnabled&&Number.isInteger(e)&&v.bigIntFits64(BigInt(e))?s.sqlite3_result_int64:s.sqlite3_result_double,n(t,e);break}case"string":{const[n,i]=r.allocCString(e,!0);s.sqlite3_result_text(t,n,i,s.SQLITE_WASM_DEALLOC);break}case"object":if(null===e){s.sqlite3_result_null(t);break}if(v.isBindableTypedArray(e)){const n=r.allocFromTypedArray(e);s.sqlite3_result_blob(t,n,e.byteLength,s.SQLITE_WASM_DEALLOC);break}default:l("Don't not how to handle this UDF result value:",typeof e,e)}}catch(e){s.sqlite3_result_error_js(t,e)}},s.sqlite3_column_js=function(t,e,n=!0){const i=s.sqlite3_column_value(t,e);return 0===i?void 0:s.sqlite3_value_to_js(i,n)};const w=function(t,e,n){n=s[n],this.ptr?r.pokePtr(this.ptr,0):this.ptr=r.allocPtr();const i=n(t,e,this.ptr);if(i)return a.toss(i,arguments[2]+"() failed with code "+i);const o=r.peekPtr(this.ptr);return o?s.sqlite3_value_to_js(o,!0):void 0}.bind(Object.create(null));s.sqlite3_preupdate_new_js=(t,e)=>w(t,e,"sqlite3_preupdate_new"),s.sqlite3_preupdate_old_js=(t,e)=>w(t,e,"sqlite3_preupdate_old"),s.sqlite3changeset_new_js=(t,e)=>w(t,e,"sqlite3changeset_new"),s.sqlite3changeset_old_js=(t,e)=>w(t,e,"sqlite3changeset_old");const E={WasmAllocError:y,SQLite3Error:a,capi:s,util:v,wasm:r,config:i,version:Object.create(null),client:void 0,asyncPostInit:async function(){let t=e.initializersAsync;if(delete e.initializersAsync,!t||!t.length)return Promise.resolve(E);t=t.map((t=>(t instanceof Promise?t:t(E)).catch((t=>{throw console.error("an async sqlite3 initializer failed:",t),t}))));const n=()=>(E.__isUnderTest||(delete E.util,delete E.StructBinder),E);{let e=t.shift();for(;t.length;)e=e.then(t.shift());return e.then(n)}},scriptInfo:void 0};try{e.initializers.forEach((t=>{t(E)}))}catch(t){throw console.error("sqlite3 bootstrap initializer threw:",t),t}return delete e.initializers,e.sqlite3=E,E},globalThis.sqlite3ApiBootstrap.initializers=[],globalThis.sqlite3ApiBootstrap.initializersAsync=[],globalThis.sqlite3ApiBootstrap.defaultConfig=Object.create(null),globalThis.sqlite3ApiBootstrap.sqlite3=void 0,globalThis.WhWasmUtilInstaller=function(t){void 0===t.bigIntEnabled&&(t.bigIntEnabled=!!self.BigInt64Array);const e=(...t)=>{throw new Error(t.join(" "))};t.exports||Object.defineProperty(t,"exports",{enumerable:!0,configurable:!0,get:()=>t.instance&&t.instance.exports});const n=t.pointerIR||"i32",i=t.ptrSizeof="i32"===n?4:"i64"===n?8:e("Unhandled ptrSizeof:",n),s=Object.create(null);s.heapSize=0,s.memory=null,s.freeFuncIndexes=[],s.scopedAlloc=[],s.utf8Decoder=new TextDecoder,s.utf8Encoder=new TextEncoder("utf-8"),t.sizeofIR=t=>{switch(t){case"i8":return 1;case"i16":return 2;case"i32":case"f32":case"float":return 4;case"i64":case"f64":case"double":return 8;case"*":return i;default:return(""+t).endsWith("*")?i:void 0}};const r=function(){if(s.memory){if(s.heapSize===s.memory.buffer.byteLength)return s}else s.memory=t.memory instanceof WebAssembly.Memory?t.memory:t.exports.memory;const e=s.memory.buffer;return s.HEAP8=new Int8Array(e),s.HEAP8U=new Uint8Array(e),s.HEAP16=new Int16Array(e),s.HEAP16U=new Uint16Array(e),s.HEAP32=new Int32Array(e),s.HEAP32U=new Uint32Array(e),t.bigIntEnabled&&(s.HEAP64=new BigInt64Array(e),s.HEAP64U=new BigUint64Array(e)),s.HEAP32F=new Float32Array(e),s.HEAP64F=new Float64Array(e),s.heapSize=e.byteLength,s};t.heap8=()=>r().HEAP8,t.heap8u=()=>r().HEAP8U,t.heap16=()=>r().HEAP16,t.heap16u=()=>r().HEAP16U,t.heap32=()=>r().HEAP32,t.heap32u=()=>r().HEAP32U,t.heapForSize=function(n,i=!0){const o=s.memory&&s.heapSize===s.memory.buffer.byteLength?s:r();switch(n){case Int8Array:return o.HEAP8;case Uint8Array:return o.HEAP8U;case Int16Array:return o.HEAP16;case Uint16Array:return o.HEAP16U;case Int32Array:return o.HEAP32;case Uint32Array:return o.HEAP32U;case 8:return i?o.HEAP8U:o.HEAP8;case 16:return i?o.HEAP16U:o.HEAP16;case 32:return i?o.HEAP32U:o.HEAP32;case 64:if(o.HEAP64)return i?o.HEAP64U:o.HEAP64;break;default:if(t.bigIntEnabled){if(n===self.BigUint64Array)return o.HEAP64U;if(n===self.BigInt64Array)return o.HEAP64;break}}e("Invalid heapForSize() size: expecting 8, 16, 32,","or (if BigInt is enabled) 64.")},t.functionTable=function(){return t.exports.__indirect_function_table},t.functionEntry=function(e){const n=t.functionTable();return e<n.length?n.get(e):void 0},t.jsFuncToWasm=function t(n,i){if(t._||(t._={sigTypes:Object.assign(Object.create(null),{i:"i32",p:"i32",P:"i32",s:"i32",j:"i64",f:"f32",d:"f64"}),typeCodes:Object.assign(Object.create(null),{f64:124,f32:125,i64:126,i32:127}),uleb128Encode:function(t,e,n){n<128?t[e](n):t[e](n%128|128,n>>7)},rxJSig:/^(\w)\((\w*)\)$/,sigParams:function(e){const n=t._.rxJSig.exec(e);return n?n[2]:e.substr(1)},letterType:n=>t._.sigTypes[n]||e("Invalid signature letter:",n),pushSigType:(e,n)=>e.push(t._.typeCodes[t._.letterType(n)])}),"string"==typeof n){const t=i;i=n,n=t}const s=t._.sigParams(i),r=[1,96];t._.uleb128Encode(r,"push",s.length);for(const e of s)t._.pushSigType(r,e);return"v"===i[0]?r.push(0):(r.push(1),t._.pushSigType(r,i[0])),t._.uleb128Encode(r,"unshift",r.length),r.unshift(0,97,115,109,1,0,0,0,1),r.push(2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0),new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array(r)),{e:{f:n}}).exports.f};const o=function(n,i,r){if(r&&!s.scopedAlloc.length&&e("No scopedAllocPush() scope is active."),"string"==typeof n){const t=i;i=n,n=t}"string"==typeof i&&n instanceof Function||e("Invalid arguments: expecting (function,signature) or (signature,function).");const o=t.functionTable(),a=o.length;let l;for(;s.freeFuncIndexes.length&&(l=s.freeFuncIndexes.pop(),o.get(l));)l=null;l||(l=a,o.grow(1));try{return o.set(l,n),r&&s.scopedAlloc[s.scopedAlloc.length-1].push(l),l}catch(t){if(!(t instanceof TypeError))throw l===a&&s.freeFuncIndexes.push(a),t}try{const e=t.jsFuncToWasm(n,i);o.set(l,e),r&&s.scopedAlloc[s.scopedAlloc.length-1].push(l)}catch(t){throw l===a&&s.freeFuncIndexes.push(a),t}return l};t.installFunction=(t,e)=>o(t,e,!1),t.scopedInstallFunction=(t,e)=>o(t,e,!0),t.uninstallFunction=function(e){if(!e&&0!==e)return;const n=s.freeFuncIndexes,i=t.functionTable();n.push(e);const r=i.get(e);return i.set(e,null),r},t.peek=function(i,o="i8"){o.endsWith("*")&&(o=n);const a=s.memory&&s.heapSize===s.memory.buffer.byteLength?s:r(),l=Array.isArray(i)?[]:void 0;let c;do{switch(l&&(i=arguments[0].shift()),o){case"i1":case"i8":c=a.HEAP8[i>>0];break;case"i16":c=a.HEAP16[i>>1];break;case"i32":c=a.HEAP32[i>>2];break;case"float":case"f32":c=a.HEAP32F[i>>2];break;case"double":case"f64":c=Number(a.HEAP64F[i>>3]);break;case"i64":if(t.bigIntEnabled){c=BigInt(a.HEAP64[i>>3]);break}default:e("Invalid type for peek():",o)}l&&l.push(c)}while(l&&arguments[0].length);return l||c},t.poke=function(t,i,o="i8"){o.endsWith("*")&&(o=n);const a=s.memory&&s.heapSize===s.memory.buffer.byteLength?s:r();for(const n of Array.isArray(t)?t:[t])switch(o){case"i1":case"i8":a.HEAP8[n>>0]=i;continue;case"i16":a.HEAP16[n>>1]=i;continue;case"i32":a.HEAP32[n>>2]=i;continue;case"float":case"f32":a.HEAP32F[n>>2]=i;continue;case"double":case"f64":a.HEAP64F[n>>3]=i;continue;case"i64":if(a.HEAP64){a.HEAP64[n>>3]=BigInt(i);continue}default:e("Invalid type for poke(): "+o)}return this},t.peekPtr=(...e)=>t.peek(1===e.length?e[0]:e,n),t.pokePtr=(e,i=0)=>t.poke(e,i,n),t.peek8=(...e)=>t.peek(1===e.length?e[0]:e,"i8"),t.poke8=(e,n)=>t.poke(e,n,"i8"),t.peek16=(...e)=>t.peek(1===e.length?e[0]:e,"i16"),t.poke16=(e,n)=>t.poke(e,n,"i16"),t.peek32=(...e)=>t.peek(1===e.length?e[0]:e,"i32"),t.poke32=(e,n)=>t.poke(e,n,"i32"),t.peek64=(...e)=>t.peek(1===e.length?e[0]:e,"i64"),t.poke64=(e,n)=>t.poke(e,n,"i64"),t.peek32f=(...e)=>t.peek(1===e.length?e[0]:e,"f32"),t.poke32f=(e,n)=>t.poke(e,n,"f32"),t.peek64f=(...e)=>t.peek(1===e.length?e[0]:e,"f64"),t.poke64f=(e,n)=>t.poke(e,n,"f64"),t.getMemValue=t.peek,t.getPtrValue=t.peekPtr,t.setMemValue=t.poke,t.setPtrValue=t.pokePtr,t.isPtr32=t=>"number"==typeof t&&t===(0|t)&&t>=0,t.isPtr=t.isPtr32,t.cstrlen=function(e){if(!e||!t.isPtr(e))return null;const n=r().HEAP8U;let i=e;for(;0!==n[i];++i);return i-e};const a="undefined"==typeof SharedArrayBuffer?function(){}:SharedArrayBuffer;t.cstrToJs=function(e){const n=t.cstrlen(e);return n?(i=r().HEAP8U,o=e,l=e+n,s.utf8Decoder.decode(i.buffer instanceof a?i.slice(o,l):i.subarray(o,l))):null===n?n:"";var i,o,l},t.jstrlen=function(t){if("string"!=typeof t)return null;const e=t.length;let n=0;for(let i=0;i<e;++i){let e=t.charCodeAt(i);e>=55296&&e<=57343&&(e=65536+((1023&e)<<10)|1023&t.charCodeAt(++i)),e<=127?++n:n+=e<=2047?2:e<=65535?3:4}return n},t.jstrcpy=function(t,n,i=0,s=-1,r=!0){if(n&&(n instanceof Int8Array||n instanceof Uint8Array)||e("jstrcpy() target must be an Int8Array or Uint8Array."),s<0&&(s=n.length-i),!(s>0&&i>=0))return 0;let o=0,a=t.length;const l=i,c=i+s-(r?1:0);for(;o<a&&i<c;++o){let e=t.charCodeAt(o);if(e>=55296&&e<=57343&&(e=65536+((1023&e)<<10)|1023&t.charCodeAt(++o)),e<=127){if(i>=c)break;n[i++]=e}else if(e<=2047){if(i+1>=c)break;n[i++]=192|e>>6,n[i++]=128|63&e}else if(e<=65535){if(i+2>=c)break;n[i++]=224|e>>12,n[i++]=128|e>>6&63,n[i++]=128|63&e}else{if(i+3>=c)break;n[i++]=240|e>>18,n[i++]=128|e>>12&63,n[i++]=128|e>>6&63,n[i++]=128|63&e}}return r&&(n[i++]=0),i-l},t.cstrncpy=function(n,i,s){if(n&&i||e("cstrncpy() does not accept NULL strings."),s<0)s=t.cstrlen(strPtr)+1;else if(!(s>0))return 0;const r=t.heap8u();let o,a=0;for(;a<s&&(o=r[i+a]);++a)r[n+a]=o;return a<s&&(r[n+a++]=0),a},t.jstrToUintArray=(t,e=!1)=>s.utf8Encoder.encode(e?t+"\0":t);const l=(t,n)=>{t.alloc instanceof Function&&t.dealloc instanceof Function||e("Object is missing alloc() and/or dealloc() function(s)","required by",n+"().")},c=function(e,n,i,o){if(l(t,o),"string"!=typeof e)return null;{const t=s.utf8Encoder.encode(e),o=i(t.length+1),a=r().HEAP8U;return a.set(t,o),a[o+t.length]=0,n?[o,t.length]:o}};t.allocCString=(e,n=!1)=>c(e,n,t.alloc,"allocCString()"),t.scopedAllocPush=function(){l(t,"scopedAllocPush");const e=[];return s.scopedAlloc.push(e),e},t.scopedAllocPop=function(n){l(t,"scopedAllocPop");const i=arguments.length?s.scopedAlloc.indexOf(n):s.scopedAlloc.length-1;i<0&&e("Invalid state object for scopedAllocPop()."),0===arguments.length&&(n=s.scopedAlloc[i]),s.scopedAlloc.splice(i,1);for(let e;e=n.pop();)t.functionEntry(e)?t.uninstallFunction(e):t.dealloc(e)},t.scopedAlloc=function(n){s.scopedAlloc.length||e("No scopedAllocPush() scope is active.");const i=t.alloc(n);return s.scopedAlloc[s.scopedAlloc.length-1].push(i),i},Object.defineProperty(t.scopedAlloc,"level",{configurable:!1,enumerable:!1,get:()=>s.scopedAlloc.length,set:()=>e("The 'active' property is read-only.")}),t.scopedAllocCString=(e,n=!1)=>c(e,n,t.scopedAlloc,"scopedAllocCString()");const u=function(e,n){const i=t[e?"scopedAlloc":"alloc"]((n.length+1)*t.ptrSizeof);let s=0;return n.forEach((n=>{t.pokePtr(i+t.ptrSizeof*s++,t[e?"scopedAllocCString":"allocCString"](""+n))})),t.pokePtr(i+t.ptrSizeof*s,0),i};t.scopedAllocMainArgv=t=>u(!0,t),t.allocMainArgv=t=>u(!1,t),t.cArgvToJs=(e,n)=>{const i=[];for(let s=0;s<e;++s){const e=t.peekPtr(n+t.ptrSizeof*s);i.push(e?t.cstrToJs(e):null)}return i},t.scopedAllocCall=function(e){t.scopedAllocPush();try{return e()}finally{t.scopedAllocPop()}};const h=function(e,s,r){l(t,r);const o=s?"i64":n;let a=t[r](e*(s?8:i));if(t.poke(a,0,o),1===e)return a;const c=[a];for(let n=1;n<e;++n)a+=s?8:i,c[n]=a,t.poke(a,0,o);return c};t.allocPtr=(t=1,e=!0)=>h(t,e,"alloc"),t.scopedAllocPtr=(t=1,e=!0)=>h(t,e,"scopedAlloc"),t.xGet=function(n){return t.exports[n]||e("Cannot find exported symbol:",n)};const d=(t,n)=>e(t+"() requires",n,"argument(s).");t.xCall=function(n,...i){const s=t.xGet(n);return s instanceof Function||e("Exported symbol",n,"is not a function."),s.length!==i.length&&d(n,s.length),2===arguments.length&&Array.isArray(arguments[1])?s.apply(null,arguments[1]):s.apply(null,i)},s.xWrap=Object.create(null),s.xWrap.convert=Object.create(null),s.xWrap.convert.arg=new Map,s.xWrap.convert.result=new Map;const _=s.xWrap.convert.arg,p=s.xWrap.convert.result;t.bigIntEnabled&&_.set("i64",(t=>BigInt(t)));const f="i32"===n?t=>0|t:t=>BigInt(t)|BigInt(0);_.set("i32",f).set("i16",(t=>65535&(0|t))).set("i8",(t=>255&(0|t))).set("f32",(t=>Number(t).valueOf())).set("float",_.get("f32")).set("f64",_.get("f32")).set("double",_.get("f64")).set("int",_.get("i32")).set("null",(t=>t)).set(null,_.get("null")).set("**",f).set("*",f),p.set("*",f).set("pointer",f).set("number",(t=>Number(t))).set("void",(t=>{})).set("null",(t=>t)).set(null,p.get("null"));{const i=["i8","i16","i32","int","f32","float","f64","double"];t.bigIntEnabled&&i.push("i64");const s=_.get(n);for(const t of i)_.set(t+"*",s),p.set(t+"*",s),p.set(t,_.get(t)||e("Missing arg converter:",t))}const g=function(e){return"string"==typeof e?t.scopedAllocCString(e):e?f(e):null};_.set("string",g).set("utf8",g).set("pointer",g),p.set("string",(e=>t.cstrToJs(e))).set("utf8",p.get("string")).set("string:dealloc",(e=>{try{return e?t.cstrToJs(e):null}finally{t.dealloc(e)}})).set("utf8:dealloc",p.get("string:dealloc")).set("json",(e=>JSON.parse(t.cstrToJs(e)))).set("json:dealloc",(e=>{try{return e?JSON.parse(t.cstrToJs(e)):null}finally{t.dealloc(e)}}));const m=class{constructor(t){this.name=t.name||"unnamed adapter"}convertArg(t,n,i){e("AbstractArgAdapter must be subclassed.")}};_.FuncPtrAdapter=class n extends m{constructor(t){super(t),_.FuncPtrAdapter.warnOnUse&&console.warn("xArg.FuncPtrAdapter is an internal-only API","and is not intended to be invoked from","client-level code. Invoked with:",t),this.signature=t.signature,t.contextKey instanceof Function&&(this.contextKey=t.contextKey,t.bindScope||(t.bindScope="context")),this.bindScope=t.bindScope||e("FuncPtrAdapter options requires a bindScope (explicit or implied)."),n.bindScopes.indexOf(t.bindScope)<0&&e("Invalid options.bindScope ("+t.bindMod+") for FuncPtrAdapter. Expecting one of: ("+n.bindScopes.join(", ")+")"),this.isTransient="transient"===this.bindScope,this.isContext="context"===this.bindScope,this.isPermanent="permanent"===this.bindScope,this.singleton="singleton"===this.bindScope?[]:void 0,this.callProxy=t.callProxy instanceof Function?t.callProxy:void 0}static warnOnUse=!1;static debugFuncInstall=!1;static debugOut=console.debug.bind(console);static bindScopes=["transient","context","singleton","permanent"];contextKey(t,e){return this}contextMap(t){const e=this.__cmap||(this.__cmap=new Map);let n=e.get(t);return void 0===n&&e.set(t,n=[]),n}convertArg(e,i,s){let r=this.singleton;if(!r&&this.isContext&&(r=this.contextMap(this.contextKey(i,s))),r&&r[0]===e)return r[1];if(e instanceof Function){this.callProxy&&(e=this.callProxy(e));const a=o(e,this.signature,this.isTransient);if(n.debugFuncInstall&&n.debugOut("FuncPtrAdapter installed",this,this.contextKey(i,s),"@"+a,e),r){if(r[1]){n.debugFuncInstall&&n.debugOut("FuncPtrAdapter uninstalling",this,this.contextKey(i,s),"@"+r[1],e);try{t.uninstallFunction(r[1])}catch(t){}}r[0]=e,r[1]=a}return a}if(t.isPtr(e)||null==e){if(r&&r[1]&&r[1]!==e){n.debugFuncInstall&&n.debugOut("FuncPtrAdapter uninstalling",this,this.contextKey(i,s),"@"+r[1],e);try{t.uninstallFunction(r[1])}catch(t){}r[0]=r[1]=0|e}return e||0}throw new TypeError("Invalid FuncPtrAdapter argument type. Expecting a function pointer or a "+(this.name?this.name+" ":"")+"function matching signature "+this.signature+".")}};const y=t=>_.get(t)||e("Argument adapter not found:",t),v=t=>p.get(t)||e("Result adapter not found:",t);s.xWrap.convertArg=(t,...e)=>y(t)(...e),s.xWrap.convertArgNoCheck=(t,...e)=>_.get(t)(...e),s.xWrap.convertResult=(t,e)=>null===t?e:t?v(t)(e):void 0,s.xWrap.convertResultNoCheck=(t,e)=>null===t?e:t?p.get(t)(e):void 0,t.xWrap=function(n,i,...r){3===arguments.length&&Array.isArray(arguments[2])&&(r=arguments[2]),t.isPtr(n)&&(n=t.functionEntry(n)||e("Function pointer not found in WASM function table."));const o=n instanceof Function,a=o?n:t.xGet(n);if(o&&(n=a.name||"unnamed function"),r.length!==a.length&&d(n,a.length),null===i&&0===a.length)return a;null!=i&&v(i);for(const t of r)t instanceof m?_.set(t,((...e)=>t.convertArg(...e))):y(t);const l=s.xWrap;return 0===a.length?(...t)=>t.length?d(n,a.length):l.convertResult(i,a.call(null)):function(...e){e.length!==a.length&&d(n,a.length);const s=t.scopedAllocPush();try{for(const t in e)e[t]=l.convertArgNoCheck(r[t],e[t],e,t);return l.convertResultNoCheck(i,a.apply(null,e))}finally{t.scopedAllocPop(s)}}};const b=function(t,n,i,s,r,o){if("string"==typeof i){if(1===n)return o.get(i);if(2===n)return s?(s instanceof Function||e(r,"requires a function argument."),o.set(i,s),t):(o.get(i),t)}e("Invalid arguments to",r)};return t.xWrap.resultAdapter=function t(e,n){return b(t,arguments.length,e,n,"resultAdapter()",p)},t.xWrap.argAdapter=function t(e,n){return b(t,arguments.length,e,n,"argAdapter()",_)},t.xWrap.FuncPtrAdapter=_.FuncPtrAdapter,t.xCallWrapped=function(e,n,i,...s){return Array.isArray(arguments[3])&&(s=arguments[3]),t.xWrap(e,n,i||[]).apply(null,s||[])},t.xWrap.testConvertArg=s.xWrap.convertArg,t.xWrap.testConvertResult=s.xWrap.convertResult,t},globalThis.WhWasmUtilInstaller.yawl=function(t){const e=()=>fetch(t.uri,{credentials:"same-origin"}),n=this,i=function(e){if(t.wasmUtilTarget){const i=(...t)=>{throw new Error(t.join(" "))},s=t.wasmUtilTarget;if(s.module=e.module,s.instance=e.instance,s.instance.exports.memory||(s.memory=t.imports&&t.imports.env&&t.imports.env.memory||i("Missing 'memory' object!")),!s.alloc&&e.instance.exports.malloc){const t=e.instance.exports;s.alloc=function(e){return t.malloc(e)||i("Allocation of",e,"bytes failed.")},s.dealloc=function(e){t.free(e)}}n(s)}return t.onload&&t.onload(e,t),e};return WebAssembly.instantiateStreaming?function(){return WebAssembly.instantiateStreaming(e(),t.imports||{}).then(i)}:function(){return e().then((t=>t.arrayBuffer())).then((e=>WebAssembly.instantiate(e,t.imports||{}))).then(i)}}.bind(globalThis.WhWasmUtilInstaller),globalThis.Jaccwabyt=function t(e){const n=(...t)=>{throw new Error(t.join(" "))};e.heap instanceof WebAssembly.Memory||e.heap instanceof Function||n("config.heap must be WebAssembly.Memory instance or a function."),["alloc","dealloc"].forEach((function(t){e[t]instanceof Function||n("Config option '"+t+"' must be a function.")}));const i=t,s=e.heap instanceof Function?e.heap:()=>new Uint8Array(e.heap.buffer),r=e.alloc,o=e.dealloc,a=e.log||console.log.bind(console),l=e.memberPrefix||"",c=e.memberSuffix||"",u=void 0===e.bigIntEnabled?!!self.BigInt64Array:!!e.bigIntEnabled,h=self.BigInt,d=self.BigInt64Array,_=e.ptrSizeof||4,p=e.ptrIR||"i32";i.debugFlags||(i.__makeDebugFlags=function(t=null){t&&t.__flags&&(t=t.__flags);const e=function t(e){return 0===arguments.length?t.__flags:(e<0?(delete t.__flags.getter,delete t.__flags.setter,delete t.__flags.alloc,delete t.__flags.dealloc):(t.__flags.getter=0!=(1&e),t.__flags.setter=0!=(2&e),t.__flags.alloc=0!=(4&e),t.__flags.dealloc=0!=(8&e)),t._flags)};return Object.defineProperty(e,"__flags",{iterable:!1,writable:!1,value:Object.create(t)}),t||e(0),e},i.debugFlags=i.__makeDebugFlags());const f=function(){const t=new ArrayBuffer(2);return new DataView(t).setInt16(0,256,!0),256===new Int16Array(t)[0]}(),g=t=>(t=>"("===t[1])(t)?"p":t[0],m=function(t){switch(g(t)){case"c":case"C":return"i8";case"i":return"i32";case"p":case"P":case"s":return p;case"j":return"i64";case"f":return"float";case"d":return"double"}n("Unhandled signature IR:",t)},y=d?()=>!0:()=>n("BigInt64Array is not available."),v=(t,e)=>t+"::"+e,b=new WeakMap,w="(pointer-is-external)",E=function(t,e,n){if(n||(n=b.get(e)),n){if(b.delete(e),Array.isArray(e.ondispose)){let i;for(;i=e.ondispose.shift();)try{i instanceof Function?i.call(e):i instanceof M?i.dispose():"number"==typeof i&&o(i)}catch(e){console.warn("ondispose() for",t.structName,"@",n,"threw. NOT propagating it.",e)}}else if(e.ondispose instanceof Function)try{e.ondispose()}catch(e){console.warn("ondispose() for",t.structName,"@",n,"threw. NOT propagating it.",e)}delete e.ondispose,t.debugFlags.__flags.dealloc&&a("debug.dealloc:",e[w]?"EXTERNAL":"",t.structName,"instance:",t.structInfo.sizeof,"bytes @"+n),e[w]||o(n)}},x=t=>({configurable:!1,writable:!1,iterable:!1,value:t}),q=function(t,e,i){let o=!i;i?Object.defineProperty(e,w,x(i)):(i=r(t.structInfo.sizeof))||n("Allocation of",t.structName,"structure failed.");try{t.debugFlags.__flags.alloc&&a("debug.alloc:",o?"":"EXTERNAL",t.structName,"instance:",t.structInfo.sizeof,"bytes @"+i),o&&s().fill(0,i,i+t.structInfo.sizeof),b.set(e,i)}catch(n){throw E(t,e,i),n}},T=x((t=>l+t+c)),S=function(t,e,i=!0){let s=t.members[e];if(!s&&(l||c)){for(const n of Object.values(t.members))if(n.key===e){s=n;break}!s&&i&&n(v(t.name,e),"is not a mapped struct member.")}return s},C=function t(e,n,i=!1){t._||(t._=t=>t.replace(/[^vipPsjrdcC]/g,"").replace(/[pPscC]/g,"i"));const s=S(e.structInfo,n,!0);return i?t._(s.signature):s.signature},I={configurable:!1,enumerable:!1,get:function(){return b.get(this)},set:()=>n("Cannot assign the 'pointer' property of a struct.")},A=x((function(){const t=[];for(const e of Object.keys(this.structInfo.members))t.push(this.memberKey(e));return t})),k=new TextDecoder("utf-8"),R=new TextEncoder,P="undefined"==typeof SharedArrayBuffer?function(){}:SharedArrayBuffer,F=function(t){"s"!==t.signature&&n("Invalid member type signature for C-string value:",JSON.stringify(t))},O=function(t,...e){t.ondispose?Array.isArray(t.ondispose)||(t.ondispose=[t.ondispose]):t.ondispose=[],t.ondispose.push(...e)},L=function(t){const e=R.encode(t),i=r(e.length+1);i||n("Allocation error while duplicating string:",t);const o=s();return o.set(e,i),o[i+e.length]=0,i},M=function(t,e){arguments[2]!==x&&n("Do not call the StructType constructor","from client-level code."),Object.defineProperties(this,{structName:x(t),structInfo:x(e)})};M.prototype=Object.create(null,{dispose:x((function(){E(this.constructor,this)})),lookupMember:x((function(t,e=!0){return S(this.structInfo,t,e)})),memberToJsString:x((function(t){return function(t,e){const n=S(t.structInfo,e,!0);F(n);const i=t[n.key];if(!i)return null;let r=i;const o=s();for(;0!==o[r];++r);return i===r?"":(a=o,l=i,c=r,k.decode(a.buffer instanceof P?a.slice(l,c):a.subarray(l,c)));var a,l,c}(this,t)})),memberIsString:x((function(t,e=!0){return function(t,e,n=!1){const i=S(t.structInfo,e,n);return!(!i||1!==i.signature.length||"s"!==i.signature[0])&&i}(this,t,e)})),memberKey:T,memberKeys:A,memberSignature:x((function(t,e=!1){return C(this,t,e)})),memoryDump:x((function(){const t=this.pointer;return t?new Uint8Array(s().slice(t,t+this.structInfo.sizeof)):null})),pointer:I,setMemberCString:x((function(t,e){return function(t,e,n){const i=S(t.structInfo,e,!0);F(i);const s=L(n);return t[i.key]=s,O(t,s),t}(this,t,e)}))}),Object.assign(M.prototype,{addOnDispose:function(...t){return O(this,...t),this}}),Object.defineProperties(M,{allocCString:x(L),isA:x((t=>t instanceof M)),hasExternalPointer:x((t=>t instanceof M&&!!t[w])),memberKey:T});const D=t=>Number.isFinite(t)||t instanceof(h||Number),N=function t(e,i,r){if(!t._){t._={getters:{},setters:{},sw:{}};const e=["i","c","C","p","P","s","f","d","v()"];u&&e.push("j"),e.forEach((function(e){t._.getters[e]=function(t){switch(g(t)){case"p":case"P":case"s":switch(_){case 4:return"getInt32";case 8:return y()&&"getBigInt64"}break;case"i":return"getInt32";case"c":return"getInt8";case"C":return"getUint8";case"j":return y()&&"getBigInt64";case"f":return"getFloat32";case"d":return"getFloat64"}n("Unhandled DataView getter for signature:",t)}(e),t._.setters[e]=function(t){switch(g(t)){case"p":case"P":case"s":switch(_){case 4:return"setInt32";case 8:return y()&&"setBigInt64"}break;case"i":return"setInt32";case"c":return"setInt8";case"C":return"setUint8";case"j":return y()&&"setBigInt64";case"f":return"setFloat32";case"d":return"setFloat64"}n("Unhandled DataView setter for signature:",t)}(e),t._.sw[e]=function(t){switch(g(t)){case"i":case"f":case"c":case"C":case"d":return Number;case"j":return y()&&h;case"p":case"P":case"s":switch(_){case 4:return Number;case 8:return y()&&h}}n("Unhandled DataView set wrapper for signature:",t)}(e)}));const i=/^[ipPsjfdcC]$/,s=/^[vipPsjfdcC]\([ipPsjfdcC]*\)$/;t.sigCheck=function(t,e,r,o){Object.prototype.hasOwnProperty.call(t,r)&&n(t.structName,"already has a property named",r+"."),i.test(o)||s.test(o)||n("Malformed signature for",v(t.structName,e)+":",o)}}const o=e.memberKey(i);t.sigCheck(e.prototype,i,o,r.signature),r.key=o,r.name=i;const l=g(r.signature),c=v(e.prototype.structName,o),d=e.prototype.debugFlags.__flags,p=Object.create(null);var b,w;p.configurable=!1,p.enumerable=!1,p.get=function(){d.getter&&a("debug.getter:",t._.getters[l],"for",m(l),c,"@",this.pointer,"+",r.offset,"sz",r.sizeof);let e=new DataView(s().buffer,this.pointer+r.offset,r.sizeof)[t._.getters[l]](0,f);return d.getter&&a("debug.getter:",c,"result =",e),e},r.readOnly?p.set=(b=e.prototype.structName,w=o,()=>n(v(b,w),"is read-only.")):p.set=function(e){if(d.setter&&a("debug.setter:",t._.setters[l],"for",m(l),c,"@",this.pointer,"+",r.offset,"sz",r.sizeof,e),this.pointer||n("Cannot set struct property on disposed instance."),null===e)e=0;else for(;!D(e);){if("P"===r.signature&&e instanceof M){e=e.pointer||0,d.setter&&a("debug.setter:",c,"resolved to",e);break}n("Invalid value for pointer-type",c+".")}new DataView(s().buffer,this.pointer+r.offset,r.sizeof)[t._.setters[l]](0,t._.sw[l](e),f)},Object.defineProperty(e.prototype,o,p)},z=function t(e,s){1===arguments.length?e=(s=e).name:s.name||(s.name=e),e||n("Struct name is required.");let r=!1;Object.keys(s.members).forEach((t=>{const i=s.members[t];i.sizeof?1===i.sizeof?"c"===i.signature||"C"===i.signature||n("Unexpected sizeof==1 member",v(s.name,t),"with signature",i.signature):(0!=i.sizeof%4&&(console.warn("Invalid struct member description =",i,"from",s),n(e,"member",t,"sizeof is not aligned. sizeof="+i.sizeof)),0!=i.offset%4&&(console.warn("Invalid struct member description =",i,"from",s),n(e,"member",t,"offset is not aligned. offset="+i.offset))):n(e,"member",t,"is missing sizeof."),(!r||r.offset<i.offset)&&(r=i)})),r?s.sizeof<r.offset+r.sizeof&&n("Invalid struct config:",e,"max member offset ("+r.offset+") ","extends past end of struct (sizeof="+s.sizeof+")."):n("No member property descriptions found.");const o=x(i.__makeDebugFlags(t.debugFlags)),a=function t(i){this instanceof t?arguments.length?((i!==(0|i)||i<=0)&&n("Invalid pointer value for",e,"constructor."),q(t,this,i)):q(t,this):n("The",e,"constructor may only be called via 'new'.")};return Object.defineProperties(a,{debugFlags:o,isA:x((t=>t instanceof a)),memberKey:T,memberKeys:A,methodInfoForKey:x((function(t){})),structInfo:x(s),structName:x(e)}),a.prototype=new M(e,s,x),Object.defineProperties(a.prototype,{debugFlags:o,constructor:x(a)}),Object.keys(s.members).forEach((t=>N(a,t,s.members[t]))),a};return z.StructType=M,z.config=e,z.allocCString=L,z.debugFlags||(z.debugFlags=i.__makeDebugFlags(i.debugFlags)),z},globalThis.sqlite3ApiBootstrap.initializers.push((function(t){const e=(...t)=>{throw new Error(t.join(" "))},n=(t.SQLite3Error.toss,t.capi),i=t.wasm,s=t.util;if(globalThis.WhWasmUtilInstaller(i),delete globalThis.WhWasmUtilInstaller,i.bindingSignatures=[["sqlite3_aggregate_context","void*","sqlite3_context*","int"],["sqlite3_bind_double","int","sqlite3_stmt*","int","f64"],["sqlite3_bind_int","int","sqlite3_stmt*","int","int"],["sqlite3_bind_null",void 0,"sqlite3_stmt*","int"],["sqlite3_bind_parameter_count","int","sqlite3_stmt*"],["sqlite3_bind_parameter_index","int","sqlite3_stmt*","string"],["sqlite3_bind_pointer","int","sqlite3_stmt*","int","*","string:static","*"],["sqlite3_busy_handler","int",["sqlite3*",new i.xWrap.FuncPtrAdapter({signature:"i(pi)",contextKey:(t,e)=>t[0]}),"*"]],["sqlite3_busy_timeout","int","sqlite3*","int"],["sqlite3_changes","int","sqlite3*"],["sqlite3_clear_bindings","int","sqlite3_stmt*"],["sqlite3_collation_needed","int","sqlite3*","*","*"],["sqlite3_column_blob","*","sqlite3_stmt*","int"],["sqlite3_column_bytes","int","sqlite3_stmt*","int"],["sqlite3_column_count","int","sqlite3_stmt*"],["sqlite3_column_double","f64","sqlite3_stmt*","int"],["sqlite3_column_int","int","sqlite3_stmt*","int"],["sqlite3_column_name","string","sqlite3_stmt*","int"],["sqlite3_column_text","string","sqlite3_stmt*","int"],["sqlite3_column_type","int","sqlite3_stmt*","int"],["sqlite3_column_value","sqlite3_value*","sqlite3_stmt*","int"],["sqlite3_commit_hook","void*",["sqlite3*",new i.xWrap.FuncPtrAdapter({name:"sqlite3_commit_hook",signature:"i(p)",contextKey:t=>t[0]}),"*"]],["sqlite3_compileoption_get","string","int"],["sqlite3_compileoption_used","int","string"],["sqlite3_complete","int","string:flexible"],["sqlite3_context_db_handle","sqlite3*","sqlite3_context*"],["sqlite3_data_count","int","sqlite3_stmt*"],["sqlite3_db_filename","string","sqlite3*","string"],["sqlite3_db_handle","sqlite3*","sqlite3_stmt*"],["sqlite3_db_name","string","sqlite3*","int"],["sqlite3_db_status","int","sqlite3*","int","*","*","int"],["sqlite3_errcode","int","sqlite3*"],["sqlite3_errmsg","string","sqlite3*"],["sqlite3_error_offset","int","sqlite3*"],["sqlite3_errstr","string","int"],["sqlite3_exec","int",["sqlite3*","string:flexible",new i.xWrap.FuncPtrAdapter({signature:"i(pipp)",bindScope:"transient",callProxy:t=>{let e;return(s,r,o,a)=>{try{const n=i.cArgvToJs(r,o);return e||(e=i.cArgvToJs(r,a)),0|t(n,e)}catch(t){return t.resultCode||n.SQLITE_ERROR}}}}),"*","**"]],["sqlite3_expanded_sql","string","sqlite3_stmt*"],["sqlite3_extended_errcode","int","sqlite3*"],["sqlite3_extended_result_codes","int","sqlite3*","int"],["sqlite3_file_control","int","sqlite3*","string","int","*"],["sqlite3_finalize","int","sqlite3_stmt*"],["sqlite3_free",void 0,"*"],["sqlite3_get_auxdata","*","sqlite3_context*","int"],["sqlite3_initialize",void 0],["sqlite3_keyword_count","int"],["sqlite3_keyword_name","int",["int","**","*"]],["sqlite3_keyword_check","int",["string","int"]],["sqlite3_libversion","string"],["sqlite3_libversion_number","int"],["sqlite3_limit","int",["sqlite3*","int","int"]],["sqlite3_malloc","*","int"],["sqlite3_open","int","string","*"],["sqlite3_open_v2","int","string","*","int","string"],["sqlite3_progress_handler",void 0,["sqlite3*","int",new i.xWrap.FuncPtrAdapter({name:"xProgressHandler",signature:"i(p)",bindScope:"context",contextKey:(t,e)=>t[0]}),"*"]],["sqlite3_realloc","*","*","int"],["sqlite3_reset","int","sqlite3_stmt*"],["sqlite3_result_blob",void 0,"sqlite3_context*","*","int","*"],["sqlite3_result_double",void 0,"sqlite3_context*","f64"],["sqlite3_result_error",void 0,"sqlite3_context*","string","int"],["sqlite3_result_error_code",void 0,"sqlite3_context*","int"],["sqlite3_result_error_nomem",void 0,"sqlite3_context*"],["sqlite3_result_error_toobig",void 0,"sqlite3_context*"],["sqlite3_result_int",void 0,"sqlite3_context*","int"],["sqlite3_result_null",void 0,"sqlite3_context*"],["sqlite3_result_pointer",void 0,"sqlite3_context*","*","string:static","*"],["sqlite3_result_subtype",void 0,"sqlite3_value*","int"],["sqlite3_result_text",void 0,"sqlite3_context*","string","int","*"],["sqlite3_result_zeroblob",void 0,"sqlite3_context*","int"],["sqlite3_rollback_hook","void*",["sqlite3*",new i.xWrap.FuncPtrAdapter({name:"sqlite3_rollback_hook",signature:"v(p)",contextKey:t=>t[0]}),"*"]],["sqlite3_set_authorizer","int",["sqlite3*",new i.xWrap.FuncPtrAdapter({name:"sqlite3_set_authorizer::xAuth",signature:"i(pissss)",contextKey:(t,e)=>t[0],callProxy:t=>(e,s,r,o,a,l)=>{try{return r=r&&i.cstrToJs(r),o=o&&i.cstrToJs(o),a=a&&i.cstrToJs(a),l=l&&i.cstrToJs(l),t(e,s,r,o,a,l)||0}catch(t){return t.resultCode||n.SQLITE_ERROR}}}),"*"]],["sqlite3_set_auxdata",void 0,["sqlite3_context*","int","*",new i.xWrap.FuncPtrAdapter({name:"xDestroyAuxData",signature:"v(*)",contextKey:(t,e)=>t[0]})]],["sqlite3_shutdown",void 0],["sqlite3_sourceid","string"],["sqlite3_sql","string","sqlite3_stmt*"],["sqlite3_status","int","int","*","*","int"],["sqlite3_step","int","sqlite3_stmt*"],["sqlite3_stmt_isexplain","int",["sqlite3_stmt*"]],["sqlite3_stmt_readonly","int",["sqlite3_stmt*"]],["sqlite3_stmt_status","int","sqlite3_stmt*","int","int"],["sqlite3_strglob","int","string","string"],["sqlite3_stricmp","int","string","string"],["sqlite3_strlike","int","string","string","int"],["sqlite3_strnicmp","int","string","string","int"],["sqlite3_table_column_metadata","int","sqlite3*","string","string","string","**","**","*","*","*"],["sqlite3_total_changes","int","sqlite3*"],["sqlite3_trace_v2","int",["sqlite3*","int",new i.xWrap.FuncPtrAdapter({name:"sqlite3_trace_v2::callback",signature:"i(ippp)",contextKey:(t,e)=>t[0]}),"*"]],["sqlite3_txn_state","int",["sqlite3*","string"]],["sqlite3_uri_boolean","int","sqlite3_filename","string","int"],["sqlite3_uri_key","string","sqlite3_filename","int"],["sqlite3_uri_parameter","string","sqlite3_filename","string"],["sqlite3_user_data","void*","sqlite3_context*"],["sqlite3_value_blob","*","sqlite3_value*"],["sqlite3_value_bytes","int","sqlite3_value*"],["sqlite3_value_double","f64","sqlite3_value*"],["sqlite3_value_dup","sqlite3_value*","sqlite3_value*"],["sqlite3_value_free",void 0,"sqlite3_value*"],["sqlite3_value_frombind","int","sqlite3_value*"],["sqlite3_value_int","int","sqlite3_value*"],["sqlite3_value_nochange","int","sqlite3_value*"],["sqlite3_value_numeric_type","int","sqlite3_value*"],["sqlite3_value_pointer","*","sqlite3_value*","string:static"],["sqlite3_value_subtype","int","sqlite3_value*"],["sqlite3_value_text","string","sqlite3_value*"],["sqlite3_value_type","int","sqlite3_value*"],["sqlite3_vfs_find","*","string"],["sqlite3_vfs_register","int","sqlite3_vfs*","int"],["sqlite3_vfs_unregister","int","sqlite3_vfs*"]],i.exports.sqlite3_activate_see instanceof Function&&i.bindingSignatures.push(["sqlite3_key","int","sqlite3*","string","int"],["sqlite3_key_v2","int","sqlite3*","string","*","int"],["sqlite3_rekey","int","sqlite3*","string","int"],["sqlite3_rekey_v2","int","sqlite3*","string","*","int"],["sqlite3_activate_see",void 0,"string"]),i.bindingSignatures.int64=[["sqlite3_bind_int64","int",["sqlite3_stmt*","int","i64"]],["sqlite3_changes64","i64",["sqlite3*"]],["sqlite3_column_int64","i64",["sqlite3_stmt*","int"]],["sqlite3_create_module","int",["sqlite3*","string","sqlite3_module*","*"]],["sqlite3_create_module_v2","int",["sqlite3*","string","sqlite3_module*","*","*"]],["sqlite3_declare_vtab","int",["sqlite3*","string:flexible"]],["sqlite3_deserialize","int","sqlite3*","string","*","i64","i64","int"],["sqlite3_drop_modules","int",["sqlite3*","**"]],["sqlite3_last_insert_rowid","i64",["sqlite3*"]],["sqlite3_malloc64","*","i64"],["sqlite3_msize","i64","*"],["sqlite3_overload_function","int",["sqlite3*","string","int"]],["sqlite3_preupdate_blobwrite","int","sqlite3*"],["sqlite3_preupdate_count","int","sqlite3*"],["sqlite3_preupdate_depth","int","sqlite3*"],["sqlite3_preupdate_hook","*",["sqlite3*",new i.xWrap.FuncPtrAdapter({name:"sqlite3_preupdate_hook",signature:"v(ppippjj)",contextKey:t=>t[0],callProxy:t=>(e,n,s,r,o,a,l)=>{t(e,n,s,i.cstrToJs(r),i.cstrToJs(o),a,l)}}),"*"]],["sqlite3_preupdate_new","int",["sqlite3*","int","**"]],["sqlite3_preupdate_old","int",["sqlite3*","int","**"]],["sqlite3_realloc64","*","*","i64"],["sqlite3_result_int64",void 0,"*","i64"],["sqlite3_result_zeroblob64","int","*","i64"],["sqlite3_serialize","*","sqlite3*","string","*","int"],["sqlite3_set_last_insert_rowid",void 0,["sqlite3*","i64"]],["sqlite3_status64","int","int","*","*","int"],["sqlite3_total_changes64","i64",["sqlite3*"]],["sqlite3_update_hook","*",["sqlite3*",new i.xWrap.FuncPtrAdapter({name:"sqlite3_update_hook",signature:"v(iippj)",contextKey:t=>t[0],callProxy:t=>(e,n,s,r,o)=>{t(e,n,i.cstrToJs(s),i.cstrToJs(r),o)}}),"*"]],["sqlite3_uri_int64","i64",["sqlite3_filename","string","i64"]],["sqlite3_value_int64","i64","sqlite3_value*"],["sqlite3_vtab_collation","string","sqlite3_index_info*","int"],["sqlite3_vtab_distinct","int","sqlite3_index_info*"],["sqlite3_vtab_in","int","sqlite3_index_info*","int","int"],["sqlite3_vtab_in_first","int","sqlite3_value*","**"],["sqlite3_vtab_in_next","int","sqlite3_value*","**"],["sqlite3_vtab_nochange","int","sqlite3_context*"],["sqlite3_vtab_on_conflict","int","sqlite3*"],["sqlite3_vtab_rhs_value","int","sqlite3_index_info*","int","**"]],i.bigIntEnabled&&i.exports.sqlite3changegroup_add){const t={signature:"i(ps)",callProxy:t=>(e,s)=>{try{return 0|t(e,i.cstrToJs(s))}catch(t){return t.resultCode||n.SQLITE_ERROR}}};i.bindingSignatures.int64.push(["sqlite3changegroup_add","int",["sqlite3_changegroup*","int","void*"]],["sqlite3changegroup_add_strm","int",["sqlite3_changegroup*",new i.xWrap.FuncPtrAdapter({name:"xInput",signature:"i(ppp)",bindScope:"transient"}),"void*"]],["sqlite3changegroup_delete",void 0,["sqlite3_changegroup*"]],["sqlite3changegroup_new","int",["**"]],["sqlite3changegroup_output","int",["sqlite3_changegroup*","int*","**"]],["sqlite3changegroup_output_strm","int",["sqlite3_changegroup*",new i.xWrap.FuncPtrAdapter({name:"xOutput",signature:"i(ppi)",bindScope:"transient"}),"void*"]],["sqlite3changeset_apply","int",["sqlite3*","int","void*",new i.xWrap.FuncPtrAdapter({name:"xFilter",bindScope:"transient",...t}),new i.xWrap.FuncPtrAdapter({name:"xConflict",signature:"i(pip)",bindScope:"transient"}),"void*"]],["sqlite3changeset_apply_strm","int",["sqlite3*",new i.xWrap.FuncPtrAdapter({name:"xInput",signature:"i(ppp)",bindScope:"transient"}),"void*",new i.xWrap.FuncPtrAdapter({name:"xFilter",bindScope:"transient",...t}),new i.xWrap.FuncPtrAdapter({name:"xConflict",signature:"i(pip)",bindScope:"transient"}),"void*"]],["sqlite3changeset_apply_v2","int",["sqlite3*","int","void*",new i.xWrap.FuncPtrAdapter({name:"xFilter",bindScope:"transient",...t}),new i.xWrap.FuncPtrAdapter({name:"xConflict",signature:"i(pip)",bindScope:"transient"}),"void*","**","int*","int"]],["sqlite3changeset_apply_v2_strm","int",["sqlite3*",new i.xWrap.FuncPtrAdapter({name:"xInput",signature:"i(ppp)",bindScope:"transient"}),"void*",new i.xWrap.FuncPtrAdapter({name:"xFilter",bindScope:"transient",...t}),new i.xWrap.FuncPtrAdapter({name:"xConflict",signature:"i(pip)",bindScope:"transient"}),"void*","**","int*","int"]],["sqlite3changeset_concat","int",["int","void*","int","void*","int*","**"]],["sqlite3changeset_concat_strm","int",[new i.xWrap.FuncPtrAdapter({name:"xInputA",signature:"i(ppp)",bindScope:"transient"}),"void*",new i.xWrap.FuncPtrAdapter({name:"xInputB",signature:"i(ppp)",bindScope:"transient"}),"void*",new i.xWrap.FuncPtrAdapter({name:"xOutput",signature:"i(ppi)",bindScope:"transient"}),"void*"]],["sqlite3changeset_conflict","int",["sqlite3_changeset_iter*","int","**"]],["sqlite3changeset_finalize","int",["sqlite3_changeset_iter*"]],["sqlite3changeset_fk_conflicts","int",["sqlite3_changeset_iter*","int*"]],["sqlite3changeset_invert","int",["int","void*","int*","**"]],["sqlite3changeset_invert_strm","int",[new i.xWrap.FuncPtrAdapter({name:"xInput",signature:"i(ppp)",bindScope:"transient"}),"void*",new i.xWrap.FuncPtrAdapter({name:"xOutput",signature:"i(ppi)",bindScope:"transient"}),"void*"]],["sqlite3changeset_new","int",["sqlite3_changeset_iter*","int","**"]],["sqlite3changeset_next","int",["sqlite3_changeset_iter*"]],["sqlite3changeset_old","int",["sqlite3_changeset_iter*","int","**"]],["sqlite3changeset_op","int",["sqlite3_changeset_iter*","**","int*","int*","int*"]],["sqlite3changeset_pk","int",["sqlite3_changeset_iter*","**","int*"]],["sqlite3changeset_start","int",["**","int","*"]],["sqlite3changeset_start_strm","int",["**",new i.xWrap.FuncPtrAdapter({name:"xInput",signature:"i(ppp)",bindScope:"transient"}),"void*"]],["sqlite3changeset_start_v2","int",["**","int","*","int"]],["sqlite3changeset_start_v2_strm","int",["**",new i.xWrap.FuncPtrAdapter({name:"xInput",signature:"i(ppp)",bindScope:"transient"}),"void*","int"]],["sqlite3session_attach","int",["sqlite3_session*","string"]],["sqlite3session_changeset","int",["sqlite3_session*","int*","**"]],["sqlite3session_changeset_size","i64",["sqlite3_session*"]],["sqlite3session_changeset_strm","int",["sqlite3_session*",new i.xWrap.FuncPtrAdapter({name:"xOutput",signature:"i(ppp)",bindScope:"transient"}),"void*"]],["sqlite3session_config","int",["int","void*"]],["sqlite3session_create","int",["sqlite3*","string","**"]],["sqlite3session_diff","int",["sqlite3_session*","string","string","**"]],["sqlite3session_enable","int",["sqlite3_session*","int"]],["sqlite3session_indirect","int",["sqlite3_session*","int"]],["sqlite3session_isempty","int",["sqlite3_session*"]],["sqlite3session_memory_used","i64",["sqlite3_session*"]],["sqlite3session_object_config","int",["sqlite3_session*","int","void*"]],["sqlite3session_patchset","int",["sqlite3_session*","*","**"]],["sqlite3session_patchset_strm","int",["sqlite3_session*",new i.xWrap.FuncPtrAdapter({name:"xOutput",signature:"i(ppp)",bindScope:"transient"}),"void*"]],["sqlite3session_table_filter",void 0,["sqlite3_session*",new i.xWrap.FuncPtrAdapter({name:"xFilter",...t,contextKey:(t,e)=>t[0]}),"*"]])}i.bindingSignatures.wasm=[["sqlite3_wasm_db_reset","int","sqlite3*"],["sqlite3_wasm_db_vfs","sqlite3_vfs*","sqlite3*","string"],["sqlite3_wasm_vfs_create_file","int","sqlite3_vfs*","string","*","int"],["sqlite3_wasm_vfs_unlink","int","sqlite3_vfs*","string"]],t.StructBinder=globalThis.Jaccwabyt({heap:i.heap8u,alloc:i.alloc,dealloc:i.dealloc,bigIntEnabled:i.bigIntEnabled,memberPrefix:"$"}),delete globalThis.Jaccwabyt;{const r=i.xWrap.argAdapter("string");i.xWrap.argAdapter("string:flexible",(t=>r(s.flexibleString(t)))),i.xWrap.argAdapter("string:static",function(t){return i.isPtr(t)?t:this[t=""+t]||(this[t]=i.allocCString(t))}.bind(Object.create(null)));const o=i.xWrap.argAdapter("*"),a=function(){};i.xWrap.argAdapter("sqlite3_filename",o)("sqlite3_context*",o)("sqlite3_value*",o)("void*",o)("sqlite3_changegroup*",o)("sqlite3_changeset_iter*",o)("sqlite3_session*",o)("sqlite3_stmt*",(e=>o(e instanceof(t?.oo1?.Stmt||a)?e.pointer:e)))("sqlite3*",(e=>o(e instanceof(t?.oo1?.DB||a)?e.pointer:e)))("sqlite3_index_info*",(t=>o(t instanceof(n.sqlite3_index_info||a)?t.pointer:t)))("sqlite3_module*",(t=>o(t instanceof(n.sqlite3_module||a)?t.pointer:t)))("sqlite3_vfs*",(e=>"string"==typeof e?n.sqlite3_vfs_find(e)||t.SQLite3Error.toss(n.SQLITE_NOTFOUND,"Unknown sqlite3_vfs name:",e):o(e instanceof(n.sqlite3_vfs||a)?e.pointer:e)));const l=i.xWrap.resultAdapter("*");i.xWrap.resultAdapter("sqlite3*",l)("sqlite3_context*",l)("sqlite3_stmt*",l)("sqlite3_value*",l)("sqlite3_vfs*",l)("void*",l);for(const t of i.bindingSignatures)n[t[0]]=i.xWrap.apply(null,t);for(const t of i.bindingSignatures.wasm)i[t[0]]=i.xWrap.apply(null,t);const c=function(t){return()=>e(t+"() is unavailable due to lack","of BigInt support in this build.")};for(const t of i.bindingSignatures.int64)n[t[0]]=i.bigIntEnabled?i.xWrap.apply(null,t):c(t[0]);if(delete i.bindingSignatures,i.exports.sqlite3_wasm_db_error){const e=i.xWrap("sqlite3_wasm_db_error","int","sqlite3*","int","string");s.sqlite3_wasm_db_error=function(i,s,r){return s instanceof t.WasmAllocError?(s=n.SQLITE_NOMEM,r=0):s instanceof Error&&(r=r||""+s,s=s.resultCode||n.SQLITE_ERROR),i?e(i,s,r):s}}else s.sqlite3_wasm_db_error=function(t,e,n){return console.warn("sqlite3_wasm_db_error() is not exported.",arguments),e}}{const r=i.xCall("sqlite3_wasm_enum_json");r||e("Maintenance required: increase sqlite3_wasm_enum_json()'s","static buffer size!"),i.ctype=JSON.parse(i.cstrToJs(r));const o=["access","authorizer","blobFinalizers","changeset","config","dataTypes","dbConfig","dbStatus","encodings","fcntl","flock","ioCap","limits","openFlags","prepareFlags","resultCodes","sqlite3Status","stmtStatus","syncFlags","trace","txnState","udfFlags","version"];i.bigIntEnabled&&o.push("serialize","session","vtab");for(const t of o)for(const e of Object.entries(i.ctype[t]))n[e[0]]=e[1];i.functionEntry(n.SQLITE_WASM_DEALLOC)||e("Internal error: cannot resolve exported function","entry SQLITE_WASM_DEALLOC (=="+n.SQLITE_WASM_DEALLOC+").");const a=Object.create(null);for(const t of["resultCodes"])for(const e of Object.entries(i.ctype[t]))a[e[1]]=e[0];n.sqlite3_js_rc_str=t=>a[t];const l=Object.assign(Object.create(null),{WasmTestStruct:!0,sqlite3_kvvfs_methods:!s.isUIThread(),sqlite3_index_info:!i.bigIntEnabled,sqlite3_index_constraint:!i.bigIntEnabled,sqlite3_index_orderby:!i.bigIntEnabled,sqlite3_index_constraint_usage:!i.bigIntEnabled});for(const e of i.ctype.structs)l[e.name]||(n[e.name]=t.StructBinder(e));if(n.sqlite3_index_info){for(const t of["sqlite3_index_constraint","sqlite3_index_orderby","sqlite3_index_constraint_usage"])n.sqlite3_index_info[t]=n[t],delete n[t];n.sqlite3_vtab_config=i.xWrap("sqlite3_wasm_vtab_config","int",["sqlite3*","int","int"])}}const r=(e,i,s)=>t.util.sqlite3_wasm_db_error(e,n.SQLITE_MISUSE,i+"() requires "+s+" argument"+(1===s?"":"s")+"."),o=t=>s.sqlite3_wasm_db_error(t,n.SQLITE_FORMAT,"SQLITE_UTF8 is the only supported encoding."),a=t=>i.xWrap.argAdapter("sqlite3*")(t),l=t=>i.isPtr(t)?i.cstrToJs(t):t,c=function(t,e){t=a(t);let n=this.dbMap.get(t);return e?(!n&&e>0&&this.dbMap.set(t,n=Object.create(null)),n):(this.dbMap.delete(t),n)}.bind(Object.assign(Object.create(null),{dbMap:new Map}));c.addCollation=function(t,e){const n=c(t,1);n.collation||(n.collation=new Set),n.collation.add(l(e).toLowerCase())},c._addUDF=function(t,e,n,i){e=l(e).toLowerCase();let s=i.get(e);s||i.set(e,s=new Set),s.add(n<0?-1:n)},c.addFunction=function(t,e,n){const i=c(t,1);i.udf||(i.udf=new Map),this._addUDF(t,e,n,i.udf)},c.addWindowFunc=function(t,e,n){const i=c(t,1);i.wudf||(i.wudf=new Map),this._addUDF(t,e,n,i.wudf)},c.cleanup=function(t){const e=[t=a(t)];for(const t of["sqlite3_busy_handler","sqlite3_commit_hook","sqlite3_preupdate_hook","sqlite3_progress_handler","sqlite3_rollback_hook","sqlite3_set_authorizer","sqlite3_trace_v2","sqlite3_update_hook"]){const s=i.exports[t];e.length=s.length;try{n[t](...e)}catch(n){console.warn("close-time call of",t+"(",e,") threw:",n)}}const s=c(t,0);if(!s)return;if(s.collation){for(const e of s.collation)try{n.sqlite3_create_collation_v2(t,e,n.SQLITE_UTF8,0,0,0)}catch(t){}delete s.collation}let r;for(r=0;r<2;++r){const e=r?s.wudf:s.udf;if(!e)continue;const i=r?n.sqlite3_create_window_function:n.sqlite3_create_function_v2;for(const s of e){const e=s[0],o=s[1],a=[t,e,0,n.SQLITE_UTF8,0,0,0,0,0];r&&a.push(0);for(const t of o)try{a[2]=t,i.apply(null,a)}catch(t){}o.clear()}e.clear()}delete s.udf,delete s.wudf};{const t=i.xWrap("sqlite3_close_v2","int","sqlite3*");n.sqlite3_close_v2=function(e){if(1!==arguments.length)return r(e,"sqlite3_close_v2",1);if(e)try{c.cleanup(e)}catch(t){}return t(e)}}if(n.sqlite3session_table_filter){const t=i.xWrap("sqlite3session_delete",void 0,["sqlite3_session*"]);n.sqlite3session_delete=function(e){if(1!==arguments.length)return r(pDb,"sqlite3session_delete",1);e&&n.sqlite3session_table_filter(e,0,0),t(e)}}{const t=(t,e)=>"argv["+e+"]:"+t[0]+":"+i.cstrToJs(t[1]).toLowerCase(),e=i.xWrap("sqlite3_create_collation_v2","int",["sqlite3*","string","int","*",new i.xWrap.FuncPtrAdapter({name:"xCompare",signature:"i(pipip)",contextKey:t}),new i.xWrap.FuncPtrAdapter({name:"xDestroy",signature:"v(p)",contextKey:t})]);n.sqlite3_create_collation_v2=function(t,i,a,l,u,h){if(6!==arguments.length)return r(t,"sqlite3_create_collation_v2",6);if(0==(15&a))a|=n.SQLITE_UTF8;else if(n.SQLITE_UTF8!==(15&a))return o(t);try{const n=e(t,i,a,l,u,h);return 0===n&&u instanceof Function&&c.addCollation(t,i),n}catch(e){return s.sqlite3_wasm_db_error(t,e)}},n.sqlite3_create_collation=(t,e,i,s,o)=>5===arguments.length?n.sqlite3_create_collation_v2(t,e,i,s,o,0):r(t,"sqlite3_create_collation",5)}{const t=function(t,e){return t[0]+":"+(t[2]<0?-1:t[2])+":"+e+":"+i.cstrToJs(t[1]).toLowerCase()},e=Object.assign(Object.create(null),{xInverseAndStep:{signature:"v(pip)",contextKey:t,callProxy:t=>(e,i,s)=>{try{t(e,...n.sqlite3_values_to_js(i,s))}catch(t){n.sqlite3_result_error_js(e,t)}}},xFinalAndValue:{signature:"v(p)",contextKey:t,callProxy:t=>e=>{try{n.sqlite3_result_js(e,t(e))}catch(t){n.sqlite3_result_error_js(e,t)}}},xFunc:{signature:"v(pip)",contextKey:t,callProxy:t=>(e,i,s)=>{try{n.sqlite3_result_js(e,t(e,...n.sqlite3_values_to_js(i,s)))}catch(t){n.sqlite3_result_error_js(e,t)}}},xDestroy:{signature:"v(p)",contextKey:t,callProxy:t=>e=>{try{t(e)}catch(t){console.error("UDF xDestroy method threw:",t)}}}}),a=i.xWrap("sqlite3_create_function_v2","int",["sqlite3*","string","int","int","*",new i.xWrap.FuncPtrAdapter({name:"xFunc",...e.xFunc}),new i.xWrap.FuncPtrAdapter({name:"xStep",...e.xInverseAndStep}),new i.xWrap.FuncPtrAdapter({name:"xFinal",...e.xFinalAndValue}),new i.xWrap.FuncPtrAdapter({name:"xDestroy",...e.xDestroy})]),l=i.xWrap("sqlite3_create_window_function","int",["sqlite3*","string","int","int","*",new i.xWrap.FuncPtrAdapter({name:"xStep",...e.xInverseAndStep}),new i.xWrap.FuncPtrAdapter({name:"xFinal",...e.xFinalAndValue}),new i.xWrap.FuncPtrAdapter({name:"xValue",...e.xFinalAndValue}),new i.xWrap.FuncPtrAdapter({name:"xInverse",...e.xInverseAndStep}),new i.xWrap.FuncPtrAdapter({name:"xDestroy",...e.xDestroy})]);n.sqlite3_create_function_v2=function t(e,i,l,u,h,d,_,p,f){if(t.length!==arguments.length)return r(e,"sqlite3_create_function_v2",t.length);if(0==(15&u))u|=n.SQLITE_UTF8;else if(n.SQLITE_UTF8!==(15&u))return o(e);try{const t=a(e,i,l,u,h,d,_,p,f);return 0===t&&(d instanceof Function||_ instanceof Function||p instanceof Function||f instanceof Function)&&c.addFunction(e,i,l),t}catch(t){return console.error("sqlite3_create_function_v2() setup threw:",t),s.sqlite3_wasm_db_error(e,t,"Creation of UDF threw: "+t)}},n.sqlite3_create_function=function t(e,i,s,o,a,l,c,u){return t.length===arguments.length?n.sqlite3_create_function_v2(e,i,s,o,a,l,c,u,0):r(e,"sqlite3_create_function",t.length)},n.sqlite3_create_window_function=function t(e,i,a,u,h,d,_,p,f,g){if(t.length!==arguments.length)return r(e,"sqlite3_create_window_function",t.length);if(0==(15&u))u|=n.SQLITE_UTF8;else if(n.SQLITE_UTF8!==(15&u))return o(e);try{const t=l(e,i,a,u,h,d,_,p,f,g);return 0===t&&(d instanceof Function||_ instanceof Function||p instanceof Function||f instanceof Function||g instanceof Function)&&c.addWindowFunc(e,i,a),t}catch(t){return console.error("sqlite3_create_window_function() setup threw:",t),s.sqlite3_wasm_db_error(e,t,"Creation of UDF threw: "+t)}},n.sqlite3_create_function_v2.udfSetResult=n.sqlite3_create_function.udfSetResult=n.sqlite3_create_window_function.udfSetResult=n.sqlite3_result_js,n.sqlite3_create_function_v2.udfConvertArgs=n.sqlite3_create_function.udfConvertArgs=n.sqlite3_create_window_function.udfConvertArgs=n.sqlite3_values_to_js,n.sqlite3_create_function_v2.udfSetError=n.sqlite3_create_function.udfSetError=n.sqlite3_create_window_function.udfSetError=n.sqlite3_result_error_js}{const t=(t,e)=>("string"==typeof t?e=-1:s.isSQLableTypedArray(t)?(e=t.byteLength,t=s.typedArrayToString(t instanceof ArrayBuffer?new Uint8Array(t):t)):Array.isArray(t)&&(t=t.join(""),e=-1),[t,e]),e={basic:i.xWrap("sqlite3_prepare_v3","int",["sqlite3*","string","int","int","**","**"]),full:i.xWrap("sqlite3_prepare_v3","int",["sqlite3*","*","int","int","**","**"])};n.sqlite3_prepare_v3=function i(o,a,l,c,u,h){if(i.length!==arguments.length)return r(o,"sqlite3_prepare_v3",i.length);const[d,_]=t(a,l);switch(typeof d){case"string":return e.basic(o,d,_,c,u,null);case"number":return e.full(o,d,_,c,u,h);default:return s.sqlite3_wasm_db_error(o,n.SQLITE_MISUSE,"Invalid SQL argument type for sqlite3_prepare_v2/v3().")}},n.sqlite3_prepare_v2=function t(e,i,s,o,a){return t.length===arguments.length?n.sqlite3_prepare_v3(e,i,s,0,o,a):r(e,"sqlite3_prepare_v2",t.length)}}{const t=i.xWrap("sqlite3_bind_text","int",["sqlite3_stmt*","int","string","int","*"]),e=i.xWrap("sqlite3_bind_blob","int",["sqlite3_stmt*","int","*","int","*"]);n.sqlite3_bind_text=function e(o,a,l,c,u){if(e.length!==arguments.length)return r(n.sqlite3_db_handle(o),"sqlite3_bind_text",e.length);if(i.isPtr(l)||null===l)return t(o,a,l,c,u);let h,d;l instanceof ArrayBuffer?l=new Uint8Array(l):Array.isArray(pMem)&&(l=pMem.join(""));try{if(s.isSQLableTypedArray(l))h=i.allocFromTypedArray(l),d=l.byteLength;else{if("string"!=typeof l)return s.sqlite3_wasm_db_error(n.sqlite3_db_handle(o),n.SQLITE_MISUSE,"Invalid 3rd argument type for sqlite3_bind_text().");[h,d]=i.allocCString(l)}return t(o,a,h,d,n.SQLITE_WASM_DEALLOC)}catch(t){return i.dealloc(h),s.sqlite3_wasm_db_error(n.sqlite3_db_handle(o),t)}},n.sqlite3_bind_blob=function t(o,a,l,c,u){if(t.length!==arguments.length)return r(n.sqlite3_db_handle(o),"sqlite3_bind_blob",t.length);if(i.isPtr(l)||null===l)return e(o,a,l,c,u);let h,d;l instanceof ArrayBuffer?l=new Uint8Array(l):Array.isArray(l)&&(l=l.join(""));try{if(s.isBindableTypedArray(l))h=i.allocFromTypedArray(l),d=c>=0?c:l.byteLength;else{if("string"!=typeof l)return s.sqlite3_wasm_db_error(n.sqlite3_db_handle(o),n.SQLITE_MISUSE,"Invalid 3rd argument type for sqlite3_bind_blob().");[h,d]=i.allocCString(l)}return e(o,a,h,d,n.SQLITE_WASM_DEALLOC)}catch(t){return i.dealloc(h),s.sqlite3_wasm_db_error(n.sqlite3_db_handle(o),t)}}}n.sqlite3_config=function(t,...e){if(arguments.length<2)return n.SQLITE_MISUSE;switch(t){case n.SQLITE_CONFIG_COVERING_INDEX_SCAN:case n.SQLITE_CONFIG_MEMSTATUS:case n.SQLITE_CONFIG_SMALL_MALLOC:case n.SQLITE_CONFIG_SORTERREF_SIZE:case n.SQLITE_CONFIG_STMTJRNL_SPILL:case n.SQLITE_CONFIG_URI:return i.exports.sqlite3_wasm_config_i(t,e[0]);case n.SQLITE_CONFIG_LOOKASIDE:return i.exports.sqlite3_wasm_config_ii(t,e[0],e[1]);case n.SQLITE_CONFIG_MEMDB_MAXSIZE:return i.exports.sqlite3_wasm_config_j(t,e[0]);case n.SQLITE_CONFIG_GETMALLOC:case n.SQLITE_CONFIG_GETMUTEX:case n.SQLITE_CONFIG_GETPCACHE2:case n.SQLITE_CONFIG_GETPCACHE:case n.SQLITE_CONFIG_HEAP:case n.SQLITE_CONFIG_LOG:case n.SQLITE_CONFIG_MALLOC:case n.SQLITE_CONFIG_MMAP_SIZE:case n.SQLITE_CONFIG_MULTITHREAD:case n.SQLITE_CONFIG_MUTEX:case n.SQLITE_CONFIG_PAGECACHE:case n.SQLITE_CONFIG_PCACHE2:case n.SQLITE_CONFIG_PCACHE:case n.SQLITE_CONFIG_PCACHE_HDRSZ:case n.SQLITE_CONFIG_PMASZ:case n.SQLITE_CONFIG_SERIALIZED:case n.SQLITE_CONFIG_SINGLETHREAD:case n.SQLITE_CONFIG_SQLLOG:case n.SQLITE_CONFIG_WIN32_HEAPSIZE:default:return n.SQLITE_NOTFOUND}};{const t=new Set;n.sqlite3_auto_extension=function(e){if(e instanceof Function)e=i.installFunction("i(ppp)",e);else if(1!==arguments.length||!i.isPtr(e))return n.SQLITE_MISUSE;const s=i.exports.sqlite3_auto_extension(e);return e!==arguments[0]&&(0===s?t.add(e):i.uninstallFunction(e)),s},n.sqlite3_cancel_auto_extension=function(t){return t&&1===arguments.length&&i.isPtr(t)?i.exports.sqlite3_cancel_auto_extension(t):0},n.sqlite3_reset_auto_extension=function(){i.exports.sqlite3_reset_auto_extension();for(const e of t)i.uninstallFunction(e);t.clear()}}const u=n.sqlite3_vfs_find("kvvfs");if(u)if(s.isUIThread()){const t=new n.sqlite3_kvvfs_methods(i.exports.sqlite3_wasm_kvvfs_methods());delete n.sqlite3_kvvfs_methods;const e=i.exports.sqlite3_wasm_kvvfsMakeKeyOnPstack,s=i.pstack,r=t=>115===i.peek(t)?sessionStorage:localStorage,o={xRead:(t,n,o,a)=>{const l=s.pointer,c=i.scopedAllocPush();try{const s=e(t,n);if(!s)return-3;const l=i.cstrToJs(s),c=r(t).getItem(l);if(!c)return-1;const u=c.length;if(a<=0)return u;if(1===a)return i.poke(o,0),u;const h=i.scopedAllocCString(c);return a>u+1&&(a=u+1),i.heap8u().copyWithin(o,h,h+a-1),i.poke(o+a-1,0),a-1}catch(t){return console.error("kvstorageRead()",t),-2}finally{s.restore(l),i.scopedAllocPop(c)}},xWrite:(t,o,a)=>{const l=s.pointer;try{const n=e(t,o);if(!n)return 1;const s=i.cstrToJs(n);return r(t).setItem(s,i.cstrToJs(a)),0}catch(t){return console.error("kvstorageWrite()",t),n.SQLITE_IOERR}finally{s.restore(l)}},xDelete:(t,o)=>{const a=s.pointer;try{const n=e(t,o);return n?(r(t).removeItem(i.cstrToJs(n)),0):1}catch(t){return console.error("kvstorageDelete()",t),n.SQLITE_IOERR}finally{s.restore(a)}}};for(const e of Object.keys(o))t[t.memberKey(e)]=i.installFunction(t.memberSignature(e),o[e])}else n.sqlite3_vfs_unregister(u);i.xWrap.FuncPtrAdapter.warnOnUse=!0})),globalThis.sqlite3ApiBootstrap.initializers.push((function(t){t.version={libVersion:"3.42.0",libVersionNumber:3042e3,sourceId:"2023-03-09 16:11:43 870de61f8ef8781f2f9969b012f5c1cb95b6bce1a9a4dcaf02945b7846c3aa83",downloadVersion:342e4}})),globalThis.sqlite3ApiBootstrap.initializers.push((function(t){const e=(...e)=>{throw new t.SQLite3Error(...e)},n=t.capi,i=t.wasm,s=t.util,r=new WeakMap,o=new WeakMap,a=(t,e,n)=>{const i=Object.getOwnPropertyDescriptor(t,e);return i?i.value:n},l=function(t,i){return i&&(t instanceof d&&(t=t.pointer),e("sqlite3 result code",i+":",t?n.sqlite3_errmsg(t):n.sqlite3_errstr(i))),arguments[0]},c=i.installFunction("i(ippp)",function(t,e,s,r){n.SQLITE_TRACE_STMT===t&&console.log("SQL TRACE #"+ ++this.counter+" via sqlite3@"+e+":",i.cstrToJs(r))}.bind({counter:0})),u=Object.create(null),h=function s(...a){if(!s._name2vfs){s._name2vfs=Object.create(null);const t="function"==typeof importScripts&&(t=>e("The VFS for",t,"is only available in the main window thread."));s._name2vfs[":localStorage:"]={vfs:"kvvfs",filename:t||(()=>"local")},s._name2vfs[":sessionStorage:"]={vfs:"kvvfs",filename:t||(()=>"session")}}const h=s.normalizeArgs(...a);let d=h.filename,_=h.vfs,p=h.flags;("string"!=typeof d&&"number"!=typeof d||"string"!=typeof p||_&&"string"!=typeof _&&"number"!=typeof _)&&(t.config.error("Invalid DB ctor args",h,arguments),e("Invalid arguments for DB constructor."));let f="number"==typeof d?i.cstrToJs(d):d;const g=s._name2vfs[f];g&&(_=g.vfs,d=f=g.filename(f));let m,y=0;p.indexOf("c")>=0&&(y|=n.SQLITE_OPEN_CREATE|n.SQLITE_OPEN_READWRITE),p.indexOf("w")>=0&&(y|=n.SQLITE_OPEN_READWRITE),0===y&&(y|=n.SQLITE_OPEN_READONLY),y|=n.SQLITE_OPEN_EXRESCODE;const v=i.pstack.pointer;try{const t=i.pstack.allocPtr();let e=n.sqlite3_open_v2(d,t,y,_||0);m=i.peekPtr(t),l(m,e),n.sqlite3_extended_result_codes(m,1),p.indexOf("t")>=0&&n.sqlite3_trace_v2(m,n.SQLITE_TRACE_STMT,c,m)}catch(t){throw m&&n.sqlite3_close_v2(m),t}finally{i.pstack.restore(v)}this.filename=f,r.set(this,m),o.set(this,Object.create(null));try{const i=n.sqlite3_js_db_vfs(m);i||e("Internal error: cannot get VFS for new db handle.");const s=u[i];s instanceof Function?s(this,t):s&&l(m,n.sqlite3_exec(m,s,0,0,0))}catch(t){throw this.close(),t}};h.setVfsPostOpenSql=function(t,e){u[t]=e},h.normalizeArgs=function(t=":memory:",e="c",n=null){const i={};return 1===arguments.length&&arguments[0]&&"object"==typeof arguments[0]?(Object.assign(i,arguments[0]),void 0===i.flags&&(i.flags="c"),void 0===i.vfs&&(i.vfs=null),void 0===i.filename&&(i.filename=":memory:")):(i.filename=t,i.flags=e,i.vfs=n),i};const d=function(...t){h.apply(this,t)};d.dbCtorHelper=h;const _={null:1,number:2,string:3,boolean:4,blob:5};_[void 0],_.null,i.bigIntEnabled&&(_.bigint=_.number);const p=function(){_!==arguments[2]&&e(n.SQLITE_MISUSE,"Do not call the Stmt constructor directly. Use DB.prepare()."),this.db=arguments[0],r.set(this,arguments[1]),this.columnCount=n.sqlite3_column_count(this.pointer),this.parameterCount=n.sqlite3_bind_parameter_count(this.pointer)},f=function(t){return t.pointer||e("DB has been closed."),t},g=function(t,n){return(n!==(0|n)||n<0||n>=t.columnCount)&&e("Column index",n,"is out of range."),t},m=function(t,i){const r=Object.create(null);switch(r.opt=Object.create(null),i.length){case 1:"string"==typeof i[0]||s.isSQLableTypedArray(i[0])||Array.isArray(i[0])?r.sql=i[0]:i[0]&&"object"==typeof i[0]&&(r.opt=i[0],r.sql=r.opt.sql);break;case 2:r.sql=i[0],r.opt=i[1];break;default:e("Invalid argument count for exec().")}r.sql=s.flexibleString(r.sql),"string"!=typeof r.sql&&e("Missing SQL argument or unsupported SQL value type.");const o=r.opt;switch(o.returnValue){case"resultRows":o.resultRows||(o.resultRows=[]),r.returnVal=()=>o.resultRows;break;case"saveSql":o.saveSql||(o.saveSql=[]),r.returnVal=()=>o.saveSql;break;case void 0:case"this":r.returnVal=()=>t;break;default:e("Invalid returnValue value:",o.returnValue)}if(o.callback||o.returnValue||void 0===o.rowMode||(o.resultRows||(o.resultRows=[]),r.returnVal=()=>o.resultRows),o.callback||o.resultRows)switch(void 0===o.rowMode?"array":o.rowMode){case"object":r.cbArg=t=>t.get(Object.create(null));break;case"array":r.cbArg=t=>t.get([]);break;case"stmt":Array.isArray(o.resultRows)&&e("exec(): invalid rowMode for a resultRows array: must","be one of 'array', 'object',","a result column number, or column name reference."),r.cbArg=t=>t;break;default:if(s.isInt32(o.rowMode)){r.cbArg=t=>t.get(o.rowMode);break}if("string"==typeof o.rowMode&&o.rowMode.length>1&&"$"===o.rowMode[0]){const t=o.rowMode.substr(1);r.cbArg=i=>{const s=i.get(Object.create(null))[t];return void 0===s?e(n.SQLITE_NOTFOUND,"exec(): unknown result column:",t):s};break}e("Invalid rowMode:",o.rowMode)}return r},y=(t,e,n,...i)=>{const s=t.prepare(e);try{return s.bind(n).step()?s.get(...i):void 0}finally{s.finalize()}},v=(t,e,n,i)=>t.exec({sql:e,bind:n,rowMode:i,returnValue:"resultRows"});d.checkRc=(t,e)=>l(t,e),d.prototype={isOpen:function(){return!!this.pointer},affirmOpen:function(){return f(this)},close:function(){if(this.pointer){if(this.onclose&&this.onclose.before instanceof Function)try{this.onclose.before(this)}catch(t){}const t=this.pointer;if(Object.keys(o.get(this)).forEach(((t,e)=>{e&&e.pointer&&e.finalize()})),r.delete(this),o.delete(this),n.sqlite3_close_v2(t),this.onclose&&this.onclose.after instanceof Function)try{this.onclose.after(this)}catch(t){}delete this.filename}},changes:function(t=!1,e=!1){const i=f(this).pointer;return t?e?n.sqlite3_total_changes64(i):n.sqlite3_total_changes(i):e?n.sqlite3_changes64(i):n.sqlite3_changes(i)},dbFilename:function(t="main"){return n.sqlite3_db_filename(f(this).pointer,t)},dbName:function(t=0){return n.sqlite3_db_name(f(this).pointer,t)},dbVfsName:function(t=0){let e;const s=n.sqlite3_js_db_vfs(f(this).pointer,t);if(s){const t=new n.sqlite3_vfs(s);try{e=i.cstrToJs(t.$zName)}finally{t.dispose()}}return e},prepare:function(t){f(this);const s=i.pstack.pointer;let r,a;try{r=i.pstack.alloc(8),d.checkRc(this,n.sqlite3_prepare_v2(this.pointer,t,-1,r,null)),a=i.peekPtr(r)}finally{i.pstack.restore(s)}a||e("Cannot prepare empty SQL.");const l=new p(this,a,_);return o.get(this)[a]=l,l},exec:function(){f(this);const t=m(this,arguments);if(!t.sql)return e("exec() requires an SQL string.");const r=t.opt,o=r.callback,a=Array.isArray(r.resultRows)?r.resultRows:void 0;let l,c=r.bind,u=!!(t.cbArg||r.columnNames||a);const h=i.scopedAllocPush(),g=Array.isArray(r.saveSql)?r.saveSql:void 0;try{const e=s.isSQLableTypedArray(t.sql);let h=e?t.sql.byteLength:i.jstrlen(t.sql);const f=i.scopedAlloc(2*i.ptrSizeof+(h+1)),m=f+i.ptrSizeof;let y=m+i.ptrSizeof;const v=y+h;for(e?i.heap8().set(t.sql,y):i.jstrcpy(t.sql,i.heap8(),y,h,!1),i.poke(y+h,0);y&&i.peek(y,"i8");){i.pokePtr([f,m],0),d.checkRc(this,n.sqlite3_prepare_v3(this.pointer,y,h,0,f,m));const e=i.peekPtr(f);if(y=i.peekPtr(m),h=v-y,e){if(g&&g.push(n.sqlite3_sql(e).trim()),l=new p(this,e,_),c&&l.parameterCount&&(l.bind(c),c=null),u&&l.columnCount){if(u=!1,Array.isArray(r.columnNames)&&l.getColumnNames(r.columnNames),t.cbArg||a){for(;l.step();l._isLocked=!1){l._isLocked=!0;const e=t.cbArg(l);if(a&&a.push(e),o&&!1===o.call(r,e,l))break}l._isLocked=!1}}else l.step();l.finalize(),l=null}}}finally{l&&(delete l._isLocked,l.finalize()),i.scopedAllocPop(h)}return t.returnVal()},createFunction:function(t,i,r){const o=t=>t instanceof Function;switch(arguments.length){case 1:t=(r=t).name,i=r.xFunc||0;break;case 2:o(i)||(i=(r=i).xFunc||0)}r||(r={}),"string"!=typeof t&&e("Invalid arguments: missing function name.");let l=r.xStep||0,c=r.xFinal||0;const u=r.xValue||0,h=r.xInverse||0;let _;o(i)?(_=!1,(o(l)||o(c))&&e("Ambiguous arguments: scalar or aggregate?"),l=c=null):o(l)?(o(c)||e("Missing xFinal() callback for aggregate or window UDF."),i=null):o(c)?e("Missing xStep() callback for aggregate or window UDF."):e("Missing function-type properties."),!1===_?(o(u)||o(h))&&e("xValue and xInverse are not permitted for non-window UDFs."):o(u)?(o(h)||e("xInverse must be provided if xValue is."),_=!0):o(h)&&e("xValue must be provided if xInverse is.");const p=r.pApp;null==p||"number"==typeof p&&s.isInt32(p)||e("Invalid value for pApp property. Must be a legal WASM pointer value.");const f=r.xDestroy||0;f&&!o(f)&&e("xDestroy property must be a function.");let g=0;a(r,"deterministic")&&(g|=n.SQLITE_DETERMINISTIC),a(r,"directOnly")&&(g|=n.SQLITE_DIRECTONLY),a(r,"innocuous")&&(g|=n.SQLITE_INNOCUOUS),t=t.toLowerCase();const m=i||l,y=a(r,"arity"),v="number"==typeof y?y:m.length?m.length-1:0;let b;return b=_?n.sqlite3_create_window_function(this.pointer,t,v,n.SQLITE_UTF8|g,p||0,l,c,u,h,f):n.sqlite3_create_function_v2(this.pointer,t,v,n.SQLITE_UTF8|g,p||0,i,l,c,f),d.checkRc(this,b),this},selectValue:function(t,e,n){return y(this,t,e,0,n)},selectValues:function(t,e,n){const i=this.prepare(t),s=[];try{for(i.bind(e);i.step();)s.push(i.get(0,n))}finally{i.finalize()}return s},selectArray:function(t,e){return y(this,t,e,[])},selectObject:function(t,e){return y(this,t,e,{})},selectArrays:function(t,e){return v(this,t,e,"array")},selectObjects:function(t,e){return v(this,t,e,"object")},openStatementCount:function(){return this.pointer?Object.keys(o.get(this)).length:0},transaction:function(t){let i="BEGIN";arguments.length>1&&(/[^a-zA-Z]/.test(arguments[0])&&e(n.SQLITE_MISUSE,"Invalid argument for BEGIN qualifier."),i+=" "+arguments[0],t=arguments[1]),f(this).exec(i);try{const e=t(this);return this.exec("COMMIT"),e}catch(t){throw this.exec("ROLLBACK"),t}},savepoint:function(t){f(this).exec("SAVEPOINT oo1");try{const e=t(this);return this.exec("RELEASE oo1"),e}catch(t){throw this.exec("ROLLBACK to SAVEPOINT oo1; RELEASE SAVEPOINT oo1"),t}},checkRc:function(t){return d.checkRc(this,t)}};const b=function(t){return t.pointer||e("Stmt has been closed."),t},w=function(t){return function(t){let e=_[null==t?"null":typeof t];switch(e){case _.boolean:case _.null:case _.number:case _.string:return e;case _.bigint:if(i.bigIntEnabled)return e;default:return s.isBindableTypedArray(t)?_.blob:void 0}}(t)||e("Unsupported bind() argument type:",typeof t)},E=function(t,n){return t._isLocked&&e("Operation is illegal when statement is locked:",n),t},x=function r(o,a,l,c){E(b(o),"bind()"),r._||(r._tooBigInt=t=>e("BigInt value is too big to store without precision loss:",t),r._={string:function(t,e,s,r){const[o,a]=i.allocCString(s,!0);return(r?n.sqlite3_bind_blob:n.sqlite3_bind_text)(t.pointer,e,o,a,n.SQLITE_WASM_DEALLOC)}}),w(c),a=function(t,i){const r="number"==typeof i?i:n.sqlite3_bind_parameter_index(t.pointer,i);return 0!==r&&s.isInt32(r)?(r<1||r>t.parameterCount)&&e("Bind index",i,"is out of range."):e("Invalid bind() parameter name: "+i),r}(o,a);let u=0;switch(null==c?_.null:l){case _.null:u=n.sqlite3_bind_null(o.pointer,a);break;case _.string:u=r._.string(o,a,c,!1);break;case _.number:{let t;s.isInt32(c)?t=n.sqlite3_bind_int:"bigint"==typeof c?s.bigIntFits64(c)?i.bigIntEnabled?t=n.sqlite3_bind_int64:s.bigIntFitsDouble(c)?(c=Number(c),t=n.sqlite3_bind_double):r._tooBigInt(c):r._tooBigInt(c):(c=Number(c),t=i.bigIntEnabled&&Number.isInteger(c)?n.sqlite3_bind_int64:n.sqlite3_bind_double),u=t(o.pointer,a,c);break}case _.boolean:u=n.sqlite3_bind_int(o.pointer,a,c?1:0);break;case _.blob:{if("string"==typeof c){u=r._.string(o,a,c,!0);break}c instanceof ArrayBuffer?c=new Uint8Array(c):s.isBindableTypedArray(c)||e("Binding a value as a blob requires","that it be a string, Uint8Array, Int8Array, or ArrayBuffer.");const t=i.alloc(c.byteLength||1);i.heap8().set(c.byteLength?c:[0],t),u=n.sqlite3_bind_blob(o.pointer,a,t,c.byteLength,n.SQLITE_WASM_DEALLOC);break}default:t.config.warn("Unsupported bind() argument type:",c),e("Unsupported bind() argument type: "+typeof c)}return u&&d.checkRc(o.db.pointer,u),o._mayGet=!1,o};p.prototype={finalize:function(){this.pointer&&(E(this,"finalize()"),delete o.get(this.db)[this.pointer],n.sqlite3_finalize(this.pointer),r.delete(this),delete this._mayGet,delete this.columnCount,delete this.parameterCount,delete this.db,delete this._isLocked)},clearBindings:function(){return E(b(this),"clearBindings()"),n.sqlite3_clear_bindings(this.pointer),this._mayGet=!1,this},reset:function(t){return E(this,"reset()"),t&&this.clearBindings(),n.sqlite3_reset(b(this).pointer),this._mayGet=!1,this},bind:function(){let t,n;switch(b(this),arguments.length){case 1:t=1,n=arguments[0];break;case 2:t=arguments[0],n=arguments[1];break;default:e("Invalid bind() arguments.")}return void 0===n?this:(this.parameterCount||e("This statement has no bindable parameters."),this._mayGet=!1,null===n?x(this,t,_.null,n):Array.isArray(n)?(1!==arguments.length&&e("When binding an array, an index argument is not permitted."),n.forEach(((t,e)=>x(this,e+1,w(t),t))),this):(n instanceof ArrayBuffer&&(n=new Uint8Array(n)),"object"!=typeof n||s.isBindableTypedArray(n)?x(this,t,w(n),n):(1!==arguments.length&&e("When binding an object, an index argument is not permitted."),Object.keys(n).forEach((t=>x(this,t,w(n[t]),n[t]))),this)))},bindAsBlob:function(t,n){b(this),1===arguments.length&&(n=t,t=1);const i=w(n);return _.string!==i&&_.blob!==i&&_.null!==i&&e("Invalid value type for bindAsBlob()"),x(this,t,_.blob,n)},step:function(){E(this,"step()");const e=n.sqlite3_step(b(this).pointer);switch(e){case n.SQLITE_DONE:return this._mayGet=!1;case n.SQLITE_ROW:return this._mayGet=!0;default:this._mayGet=!1,t.config.warn("sqlite3_step() rc=",e,n.sqlite3_js_rc_str(e),"SQL =",n.sqlite3_sql(this.pointer)),d.checkRc(this.db.pointer,e)}},stepReset:function(){return this.step(),this.reset()},stepFinalize:function(){const t=this.step();return this.finalize(),t},get:function(t,r){if(b(this)._mayGet||e("Stmt.step() has not (recently) returned true."),Array.isArray(t)){let e=0;for(;e<this.columnCount;)t[e]=this.get(e++);return t}if(t&&"object"==typeof t){let e=0;for(;e<this.columnCount;)t[n.sqlite3_column_name(this.pointer,e)]=this.get(e++);return t}switch(g(this,t),void 0===r?n.sqlite3_column_type(this.pointer,t):r){case n.SQLITE_NULL:return null;case n.SQLITE_INTEGER:if(i.bigIntEnabled){const e=n.sqlite3_column_int64(this.pointer,t);return e>=Number.MIN_SAFE_INTEGER&&e<=Number.MAX_SAFE_INTEGER?Number(e).valueOf():e}{const i=n.sqlite3_column_double(this.pointer,t);return(i>Number.MAX_SAFE_INTEGER||i<Number.MIN_SAFE_INTEGER)&&e("Integer is out of range for JS integer range: "+i),s.isInt32(i)?0|i:i}case n.SQLITE_FLOAT:return n.sqlite3_column_double(this.pointer,t);case n.SQLITE_TEXT:return n.sqlite3_column_text(this.pointer,t);case n.SQLITE_BLOB:{const e=n.sqlite3_column_bytes(this.pointer,t),s=n.sqlite3_column_blob(this.pointer,t),r=new Uint8Array(e);return e&&r.set(i.heap8u().slice(s,s+e),0),e&&this.db._blobXfer instanceof Array&&this.db._blobXfer.push(r.buffer),r}default:e("Don't know how to translate","type of result column #"+t+".")}e("Not reached.")},getInt:function(t){return this.get(t,n.SQLITE_INTEGER)},getFloat:function(t){return this.get(t,n.SQLITE_FLOAT)},getString:function(t){return this.get(t,n.SQLITE_TEXT)},getBlob:function(t){return this.get(t,n.SQLITE_BLOB)},getJSON:function(t){const e=this.get(t,n.SQLITE_STRING);return null===e?e:JSON.parse(e)},getColumnName:function(t){return n.sqlite3_column_name(g(b(this),t).pointer,t)},getColumnNames:function(t=[]){g(b(this),0);for(let e=0;e<this.columnCount;++e)t.push(n.sqlite3_column_name(this.pointer,e));return t},getParamIndex:function(t){return b(this).parameterCount?n.sqlite3_bind_parameter_index(this.pointer,t):void 0}};{const t={enumerable:!0,get:function(){return r.get(this)},set:()=>e("The pointer property is read-only.")};Object.defineProperty(p.prototype,"pointer",t),Object.defineProperty(d.prototype,"pointer",t)}if(t.oo1={DB:d,Stmt:p},s.isUIThread()){t.oo1.JsStorageDb=function(t="session"){"session"!==t&&"local"!==t&&e("JsStorageDb db name must be one of 'session' or 'local'."),h.call(this,{filename:t,flags:"c",vfs:"kvvfs"})};const i=t.oo1.JsStorageDb;i.prototype=Object.create(d.prototype),i.clearStorage=n.sqlite3_js_kvvfs_clear,i.prototype.clearStorage=function(){return i.clearStorage(f(this).filename)},i.storageSize=n.sqlite3_js_kvvfs_size,i.prototype.storageSize=function(){return i.storageSize(f(this).filename)}}})),globalThis.sqlite3ApiBootstrap.initializers.push((function(t){t.initWorker1API=function(){const t=(...t)=>{throw new Error(t.join(" "))};globalThis.WorkerGlobalScope instanceof Function||t("initWorker1API() must be run from a Worker thread."),this.self;const e=this.sqlite3||t("Missing this.sqlite3 object."),n=e.oo1.DB,i=function(t){let e=s.idMap.get(t);return e||(e="db#"+ ++s.idSeq+"@"+t.pointer,s.idMap.set(t,e),e)},s={dbList:[],idSeq:0,idMap:new WeakMap,xfer:[],open:function(t){const e=new n(t);return this.dbs[i(e)]=e,this.dbList.indexOf(e)<0&&this.dbList.push(e),e},close:function(t,n){if(t){delete this.dbs[i(t)];const s=t.filename,r=e.wasm.sqlite3_wasm_db_vfs(t.pointer,0);t.close();const o=this.dbList.indexOf(t);o>=0&&this.dbList.splice(o,1),n&&s&&r&&e.wasm.sqlite3_wasm_vfs_unlink(r,s)}},post:function(t,e){e&&e.length?(globalThis.postMessage(t,Array.from(e)),e.length=0):globalThis.postMessage(t)},dbs:Object.create(null),getDb:function(e,n=!0){return this.dbs[e]||(n?t("Unknown (or closed) DB ID:",e):void 0)}},r=function(e,n=!0){const i=s.getDb(e.dbId,!1)||s.dbList[0];return n?function(e=s.dbList[0]){return e&&e.pointer?e:t("DB is not opened.")}(i):i},o={open:function(n){const r=Object.create(null),o=n.args||Object.create(null);o.simulateError&&t("Throwing because of simulateError flag.");const a=Object.create(null);let l,c;var u;if(r.vfs=o.vfs,""===(u=o.filename)||":"===u[0]?r.filename=o.filename||"":(r.filename=o.filename,l=o.byteArray,l&&(c=function(t){const n=/^file:.+(vfs=(\w+))/.exec(t);return e.capi.sqlite3_vfs_find(n?n[2]:0)}(o.filename))),c){let t;try{t=e.wasm.allocFromTypedArray(l);const n=e.wasm.sqlite3_wasm_vfs_create_file(c,r.filename,t,l.byteLength);n&&e.SQLite3Error.toss(n)}catch(t){throw new e.SQLite3Error(t.name+" creating "+o.filename+": "+t.message,{cause:t})}finally{t&&e.wasm.dealloc(t)}}const h=s.open(r);return a.filename=h.filename,a.persistent=!!e.capi.sqlite3_js_db_uses_vfs(h.pointer,"opfs"),a.dbId=i(h),a.vfs=h.dbVfsName(),a},close:function(t){const e=r(t,!1),n={filename:e&&e.filename};if(e){const n=!(!t.args||"object"!=typeof t.args||!t.args.unlink);s.close(e,n)}return n},exec:function(e){const n="string"==typeof e.args?{sql:e.args}:e.args||Object.create(null);"stmt"===n.rowMode?t("Invalid rowMode for 'exec': stmt mode","does not work in the Worker API."):n.sql||t("'exec' requires input SQL.");const i=r(e);(n.callback||Array.isArray(n.resultRows))&&(i._blobXfer=s.xfer);const o=n.callback;let a=0;const l=!!n.columnNames;"string"==typeof o&&(l||(n.columnNames=[]),n.callback=function(t,e){s.post({type:o,columnNames:n.columnNames,rowNumber:++a,row:t},s.xfer)});try{i.exec(n),n.callback instanceof Function&&(n.callback=o,s.post({type:o,columnNames:n.columnNames,rowNumber:null,row:void 0}))}finally{delete i._blobXfer,n.callback&&(n.callback=o)}return n},"config-get":function(){const t=Object.create(null),n=e.config;return["bigIntEnabled"].forEach((function(e){Object.getOwnPropertyDescriptor(n,e)&&(t[e]=n[e])})),t.version=e.version,t.vfsList=e.capi.sqlite3_js_vfs_list(),t.opfsEnabled=!!e.opfs,t},export:function(t){const n=r(t),i={byteArray:e.capi.sqlite3_js_db_export(n.pointer),filename:n.filename,mimetype:"application/x-sqlite3"};return s.xfer.push(i.byteArray.buffer),i},toss:function(e){t("Testing worker exception")},"opfs-tree":async function(n){return e.opfs||t("OPFS support is unavailable."),await e.opfs.treeList()}};globalThis.onmessage=async function(e){let n,r=(e=e.data).dbId,a=e.type;const l=performance.now();try{o.hasOwnProperty(a)&&o[a]instanceof Function?n=await o[a](e):t("Unknown db worker message type:",e.type)}catch(t){a="error",n={operation:e.type,message:t.message,errorClass:t.name,input:e},t.stack&&(n.stack="string"==typeof t.stack?t.stack.split(/\n\s*/):t.stack)}r||(r=n.dbId||s.dbList[0]&&i(s.dbList[0])),s.post({type:a,dbId:r,messageId:e.messageId,workerReceivedTime:l,workerRespondTime:performance.now(),departureTime:e.departureTime,result:n},s.xfer)},globalThis.postMessage({type:"sqlite3-api",result:"worker1-ready"})}.bind({self,sqlite3:t})})),globalThis.sqlite3ApiBootstrap.initializers.push((function(t){const e=t.wasm,n=t.capi,i=t.util.toss3,s=Object.create(null),r=Object.create(null),o=t.StructBinder;t.vfs=s,t.vtab=r;const a=n.sqlite3_index_info;a.prototype.nthConstraint=function(t,e=!1){if(t<0||t>=this.$nConstraint)return!1;const n=this.$aConstraint+a.sqlite3_index_constraint.structInfo.sizeof*t;return e?n:new a.sqlite3_index_constraint(n)},a.prototype.nthConstraintUsage=function(t,e=!1){if(t<0||t>=this.$nConstraint)return!1;const n=this.$aConstraintUsage+a.sqlite3_index_constraint_usage.structInfo.sizeof*t;return e?n:new a.sqlite3_index_constraint_usage(n)},a.prototype.nthOrderBy=function(t,e=!1){if(t<0||t>=this.$nOrderBy)return!1;const n=this.$aOrderBy+a.sqlite3_index_orderby.structInfo.sizeof*t;return e?n:new a.sqlite3_index_orderby(n)};const l=function t(n,s,r,a=t.installMethodArgcCheck){if(n instanceof o.StructType?r instanceof Function||e.isPtr(r)||i("Usage errror: expecting a Function or WASM pointer to one."):i("Usage error: target object is-not-a StructType."),1===arguments.length)return(e,i)=>t(n,e,i,a);t.argcProxy||(t.argcProxy=function(t,e,n,s){return function(...r){return n.length!==arguments.length&&i("Argument mismatch for",t.structInfo.name+"::"+e+": Native signature is:",s),n.apply(this,r)}},t.removeFuncList=function(){this.ondispose.__removeFuncList&&(this.ondispose.__removeFuncList.forEach(((t,n)=>{if("number"==typeof t)try{e.uninstallFunction(t)}catch(t){}})),delete this.ondispose.__removeFuncList)});const l=n.memberSignature(s);l.length<2&&i("Member",s,"does not have a function pointer signature:",l);const c=n.memberKey(s),u=a&&!e.isPtr(r)?t.argcProxy(n,c,r,l):r;if(e.isPtr(u))u&&!e.functionEntry(u)&&i("Pointer",u,"is not a WASM function table entry."),n[c]=u;else{const i=e.installFunction(u,n.memberSignature(s,!0));n[c]=i,n.ondispose&&n.ondispose.__removeFuncList||(n.addOnDispose("ondispose.__removeFuncList handler",t.removeFuncList),n.ondispose.__removeFuncList=[]),n.ondispose.__removeFuncList.push(c,i)}return(e,i)=>t(n,e,i,a)};l.installMethodArgcCheck=!1;const c=function(t,e,n=l.installMethodArgcCheck){const i=new Map;for(const s of Object.keys(e)){const r=e[s],o=i.get(r);if(o){const e=t.memberKey(s);t[e]=t[t.memberKey(o)]}else l(t,s,r,n),i.set(r,s)}return t};o.StructType.prototype.installMethod=function(t,e,n=l.installMethodArgcCheck){return arguments.length<3&&t&&"object"==typeof t?c(this,...arguments):l(this,...arguments)},o.StructType.prototype.installMethods=function(t,e=l.installMethodArgcCheck){return c(this,t,e)},n.sqlite3_vfs.prototype.registerVfs=function(e=!1){this instanceof t.capi.sqlite3_vfs||i("Expecting a sqlite3_vfs-type argument.");const s=n.sqlite3_vfs_register(this,e?1:0);return s&&i("sqlite3_vfs_register(",this,") failed with rc",s),this.pointer!==n.sqlite3_vfs_find(this.$zName)&&i("BUG: sqlite3_vfs_find(vfs.$zName) failed for just-installed VFS",this),this},s.installVfs=function(t){let n=0;const s=["io","vfs"];for(const i of s){const s=t[i];s&&(++n,c(s.struct,s.methods,!!s.applyArgcCheck),"vfs"===i&&(s.struct.$zName||"string"!=typeof s.name||s.struct.addOnDispose(s.struct.$zName=e.allocCString(s.name)),s.struct.registerVfs(!!s.asDefault)))}return n||i("Misuse: installVfs() options object requires at least","one of:",s),this};const u=function(n,i){const s=function(n,i){return function(s,r=!1){if(0===arguments.length&&(s=new i),s instanceof i)return this.set(s.pointer,s),s;e.isPtr(s)||t.SQLite3Error.toss("Invalid argument to",n+"()");let o=this.get(s);return r&&this.delete(s),o}.bind(new Map)}(n,i);return Object.assign(Object.create(null),{StructType:i,create:t=>{const n=s();return e.pokePtr(t,n.pointer),n},get:t=>s(t),unget:t=>s(t,!0),dispose:t=>{const e=s(t,!0);e&&e.dispose()}})};r.xVtab=u("xVtab",n.sqlite3_vtab),r.xCursor=u("xCursor",n.sqlite3_vtab_cursor),r.xIndexInfo=t=>new n.sqlite3_index_info(t),r.xError=function e(i,s,r){if(e.errorReporter instanceof Function)try{e.errorReporter("sqlite3_module::"+i+"(): "+s.message)}catch(t){}let o;return s instanceof t.WasmAllocError?o=n.SQLITE_NOMEM:arguments.length>2?o=r:s instanceof t.SQLite3Error&&(o=s.resultCode),o||n.SQLITE_ERROR},r.xError.errorReporter=console.error.bind(console),r.xRowid=(t,n)=>e.poke(t,n,"i64"),r.setupModule=function(s){let o=!1;const a=this instanceof n.sqlite3_module?this:s.struct||(o=new n.sqlite3_module);try{const n=s.methods||i("Missing 'methods' object.");for(const t of Object.entries({xConnect:"xCreate",xDisconnect:"xDestroy"})){const e=t[0],i=t[1];!0===n[e]?n[e]=n[i]:!0===n[i]&&(n[i]=n[e])}if(s.catchExceptions){const i=function(n,i){return["xConnect","xCreate"].indexOf(n)>=0?function(s,o,a,l,c,u){try{return i(...arguments)||0}catch(i){return i instanceof t.WasmAllocError||(e.dealloc(e.peekPtr(u)),e.pokePtr(u,e.allocCString(i.message))),r.xError(n,i)}}:function(...t){try{return i(...t)||0}catch(t){return r.xError(n,t)}}},s=["xCreate","xConnect","xBestIndex","xDisconnect","xDestroy","xOpen","xClose","xFilter","xNext","xEof","xColumn","xRowid","xUpdate","xBegin","xSync","xCommit","xRollback","xFindFunction","xRename","xSavepoint","xRelease","xRollbackTo","xShadowName"],o=Object.create(null);for(const t of s){const e=n[t];e instanceof Function&&("xConnect"===t&&n.xCreate===e?o[t]=n.xCreate:"xCreate"===t&&n.xConnect===e?o[t]=n.xConnect:o[t]=i(t,e))}c(a,o,!1)}else c(a,n,!!s.applyArgcCheck);if(0===a.$iVersion){let t;t="number"==typeof s.iVersion?s.iVersion:a.$xShadowName?3:a.$xSavePoint||a.$xRelease||a.$xRollbackTo?2:1,a.$iVersion=t}}catch(t){throw o&&o.dispose(),t}return a},n.sqlite3_module.prototype.setupModule=function(t){return r.setupModule.call(this,t)}})),globalThis.sqlite3ApiBootstrap.initializers.push((function(t){const n=function n(s){if(!globalThis.SharedArrayBuffer||!globalThis.Atomics)return Promise.reject(new Error("Cannot install OPFS: Missing SharedArrayBuffer and/or Atomics. The server must emit the COOP/COEP response headers to enable those. See https://sqlite.org/wasm/doc/trunk/persistence.md#coop-coep"));if("undefined"==typeof WorkerGlobalScope)return Promise.reject(new Error("The OPFS sqlite3_vfs cannot run in the main thread because it requires Atomics.wait()."));if(!(globalThis.FileSystemHandle&&globalThis.FileSystemDirectoryHandle&&globalThis.FileSystemFileHandle&&globalThis.FileSystemFileHandle.prototype.createSyncAccessHandle&&navigator?.storage?.getDirectory))return Promise.reject(new Error("Missing required OPFS APIs."));s&&"object"==typeof s||(s=Object.create(null));const r=new URL(globalThis.location.href).searchParams;void 0===s.verbose&&(s.verbose=r.has("opfs-verbose")?+r.get("opfs-verbose")||2:1),void 0===s.sanityChecks&&(s.sanityChecks=r.has("opfs-sanity-check")),void 0===s.proxyUri&&(s.proxyUri=n.defaultProxyUri),"function"==typeof s.proxyUri&&(s.proxyUri=s.proxyUri());const o=new Promise((function(n,r){const o={0:t.config.error,1:t.config.warn,2:t.config.log},a=(t,...e)=>{s.verbose>t&&o[t]("OPFS syncer:",...e)},l=(...t)=>a(2,...t),c=(...t)=>a(1,...t),u=(...t)=>a(0,...t),h=t.util.toss,d=t.capi,_=t.wasm,p=d.sqlite3_vfs,f=d.sqlite3_file,g=d.sqlite3_io_methods,m=Object.create(null);m.metrics={dump:function(){let e,n=0,i=0,s=0;for(e in q.opIds){const t=T[e];n+=t.count,i+=t.time,s+=t.wait,t.avgTime=t.count&&t.time?t.time/t.count:0,t.avgWait=t.count&&t.wait?t.wait/t.count:0}t.config.log(globalThis.location.href,"metrics for",globalThis.location.href,":",T,"\nTotal of",n,"op(s) for",i,"ms (incl. "+s+" ms of waiting on the async side)"),t.config.log("Serialization metrics:",T.s11n),w.postMessage({type:"opfs-async-metrics"})},reset:function(){let t;for(t in q.opIds)(e=T[t]=Object.create(null)).count=e.time=e.wait=0;var e;let n=T.s11n=Object.create(null);n=n.serialize=Object.create(null),n.count=n.time=0,n=T.s11n.deserialize=Object.create(null),n.count=n.time=0}};const y=new p,v=new g,b=function(t){return y.dispose(),r(t)},w=new Worker(new URL(i.p+i.u(934),i.b));w._originalOnError=w.onerror,w.onerror=function(t){u("Error initializing OPFS asyncer:",t),b(new Error("Loading OPFS async Worker failed for unknown reasons."))};const E=d.sqlite3_vfs_find(null),x=E?new p(E):null;y.$iVersion=2,y.$szOsFile=d.sqlite3_file.structInfo.sizeof,y.$mxPathname=1024,y.$zName=_.allocCString("opfs"),y.$xDlOpen=y.$xDlError=y.$xDlSym=y.$xDlClose=null,y.ondispose=["$zName",y.$zName,"cleanup default VFS wrapper",()=>x?x.dispose():null,"cleanup opfsIoMethods",()=>v.dispose()];const q=Object.create(null);q.verbose=s.verbose,q.littleEndian=(()=>{const t=new ArrayBuffer(2);return new DataView(t).setInt16(0,256,!0),256===new Int16Array(t)[0]})(),q.asyncIdleWaitTime=150,q.asyncS11nExceptions=1,q.fileBufferSize=65536,q.sabS11nOffset=q.fileBufferSize,q.sabS11nSize=2*y.$mxPathname,q.sabIO=new SharedArrayBuffer(q.fileBufferSize+q.sabS11nSize),q.opIds=Object.create(null);const T=Object.create(null);{let t=0;q.opIds.whichOp=t++,q.opIds.rc=t++,q.opIds.xAccess=t++,q.opIds.xClose=t++,q.opIds.xDelete=t++,q.opIds.xDeleteNoWait=t++,q.opIds.xFileControl=t++,q.opIds.xFileSize=t++,q.opIds.xLock=t++,q.opIds.xOpen=t++,q.opIds.xRead=t++,q.opIds.xSleep=t++,q.opIds.xSync=t++,q.opIds.xTruncate=t++,q.opIds.xUnlock=t++,q.opIds.xWrite=t++,q.opIds.mkdir=t++,q.opIds["opfs-async-metrics"]=t++,q.opIds["opfs-async-shutdown"]=t++,q.opIds.retry=t++,q.sabOP=new SharedArrayBuffer(4*t),m.metrics.reset()}q.sq3Codes=Object.create(null),["SQLITE_ACCESS_EXISTS","SQLITE_ACCESS_READWRITE","SQLITE_BUSY","SQLITE_ERROR","SQLITE_IOERR","SQLITE_IOERR_ACCESS","SQLITE_IOERR_CLOSE","SQLITE_IOERR_DELETE","SQLITE_IOERR_FSYNC","SQLITE_IOERR_LOCK","SQLITE_IOERR_READ","SQLITE_IOERR_SHORT_READ","SQLITE_IOERR_TRUNCATE","SQLITE_IOERR_UNLOCK","SQLITE_IOERR_WRITE","SQLITE_LOCK_EXCLUSIVE","SQLITE_LOCK_NONE","SQLITE_LOCK_PENDING","SQLITE_LOCK_RESERVED","SQLITE_LOCK_SHARED","SQLITE_LOCKED","SQLITE_MISUSE","SQLITE_NOTFOUND","SQLITE_OPEN_CREATE","SQLITE_OPEN_DELETEONCLOSE","SQLITE_OPEN_MAIN_DB","SQLITE_OPEN_READONLY"].forEach((t=>{void 0===(q.sq3Codes[t]=d[t])&&h("Maintenance required: not found:",t)})),q.opfsFlags=Object.assign(Object.create(null),{OPFS_UNLOCK_ASAP:1,defaultUnlockAsap:!1});const S=(t,...e)=>{const n=q.opIds[t]||h("Invalid op ID:",t);q.s11n.serialize(...e),Atomics.store(q.sabOPView,q.opIds.rc,-1),Atomics.store(q.sabOPView,q.opIds.whichOp,n),Atomics.notify(q.sabOPView,q.opIds.whichOp);const i=performance.now();Atomics.wait(q.sabOPView,q.opIds.rc,-1);const s=Atomics.load(q.sabOPView,q.opIds.rc);if(T[t].wait+=performance.now()-i,s&&q.asyncS11nExceptions){const e=q.s11n.deserialize();e&&u(t+"() async error:",...e)}return s};m.debug={asyncShutdown:()=>{c("Shutting down OPFS async listener. The OPFS VFS will no longer work."),S("opfs-async-shutdown")},asyncRestart:()=>{c("Attempting to restart OPFS VFS async listener. Might work, might not."),w.postMessage({type:"opfs-async-restart"})}};const C=function t(e=16){t._chars||(t._n=(t._chars="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ012346789").length);const n=[];let i=0;for(;i<e;++i){const e=Math.random()*(64*t._n)%t._n|0;n[i]=t._chars[e]}return n.join("")},I=Object.create(null),A=Object.create(null);A.op=void 0,A.start=void 0;const k=t=>{A.start=performance.now(),A.op=t,++T[t].count},R=()=>T[A.op].time+=performance.now()-A.start,P={xCheckReservedLock:function(t,e){const n=I[t];return _.poke(e,n.lockType?1:0,"i32"),0},xClose:function(t){k("xClose");let e=0;const n=I[t];return n&&(delete I[t],e=S("xClose",t),n.sq3File&&n.sq3File.dispose()),R(),e},xDeviceCharacteristics:function(t){return d.SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN},xFileControl:function(t,e,n){k("xFileControl");const i=d.SQLITE_FCNTL_SYNC===e?S("xSync",t,0):d.SQLITE_NOTFOUND;return R(),i},xFileSize:function(t,e){k("xFileSize");let n=S("xFileSize",t);if(0==n)try{const t=q.s11n.deserialize()[0];_.poke(e,t,"i64")}catch(t){u("Unexpected error reading xFileSize() result:",t),n=q.sq3Codes.SQLITE_IOERR}return R(),n},xLock:function(t,e){k("xLock");const n=I[t];let i=0;return n.lockType?n.lockType=e:(i=S("xLock",t,e),0===i&&(n.lockType=e)),R(),i},xRead:function(t,e,n,i){k("xRead");const s=I[t];let r;try{r=S("xRead",t,n,Number(i)),0!==r&&d.SQLITE_IOERR_SHORT_READ!==r||_.heap8u().set(s.sabView.subarray(0,n),e)}catch(t){u("xRead(",arguments,") failed:",t,s),r=d.SQLITE_IOERR_READ}return R(),r},xSync:function(t,e){return++T.xSync.count,0},xTruncate:function(t,e){k("xTruncate");const n=S("xTruncate",t,Number(e));return R(),n},xUnlock:function(t,e){k("xUnlock");const n=I[t];let i=0;return d.SQLITE_LOCK_NONE===e&&n.lockType&&(i=S("xUnlock",t,e)),0===i&&(n.lockType=e),R(),i},xWrite:function(t,e,n,i){k("xWrite");const s=I[t];let r;try{s.sabView.set(_.heap8u().subarray(e,e+n)),r=S("xWrite",t,n,Number(i))}catch(t){u("xWrite(",arguments,") failed:",t,s),r=d.SQLITE_IOERR_WRITE}return R(),r}},F={xAccess:function(t,e,n,i){k("xAccess");const s=S("xAccess",_.cstrToJs(e));return _.poke(i,s?0:1,"i32"),R(),0},xCurrentTime:function(t,e){return _.poke(e,2440587.5+(new Date).getTime()/864e5,"double"),0},xCurrentTimeInt64:function(t,e){return _.poke(e,21086676e7+(new Date).getTime(),"i64"),0},xDelete:function(t,e,n){return k("xDelete"),S("xDelete",_.cstrToJs(e),n,!1),R(),0},xFullPathname:function(t,e,n,i){return _.cstrncpy(i,e,n)<n?0:d.SQLITE_CANTOPEN},xGetLastError:function(t,e,n){return c("OPFS xGetLastError() has nothing sensible to return."),0},xOpen:function(t,e,n,i,s){k("xOpen");let r=0;0===e?e=C():"number"==typeof e&&(d.sqlite3_uri_boolean(e,"opfs-unlock-asap",0)&&(r|=q.opfsFlags.OPFS_UNLOCK_ASAP),e=_.cstrToJs(e));const o=Object.create(null);o.fid=n,o.filename=e,o.sab=new SharedArrayBuffer(q.fileBufferSize),o.flags=i;const a=S("xOpen",n,e,i,r);return a||(o.readOnly&&_.poke(s,d.SQLITE_OPEN_READONLY,"i32"),I[n]=o,o.sabView=q.sabFileBufView,o.sq3File=new f(n),o.sq3File.$pMethods=v.pointer,o.lockType=d.SQLITE_LOCK_NONE),R(),a}};if(x&&(y.$xRandomness=x.$xRandomness,y.$xSleep=x.$xSleep),y.$xRandomness||(F.xRandomness=function(t,e,n){const i=_.heap8u();let s=0;for(;s<e;++s)i[n+s]=255e3*Math.random()&255;return s}),y.$xSleep||(F.xSleep=function(t,e){return Atomics.wait(q.sabOPView,q.opIds.xSleep,0,e),0}),m.getResolvedPath=function(t,e){const n=new URL(t,"file://irrelevant").pathname;return e?n.split("/").filter((t=>!!t)):n},m.getDirForFilename=async function(t,e=!1){const n=m.getResolvedPath(t,!0),i=n.pop();let s=m.rootDirectory;for(const t of n)t&&(s=await s.getDirectoryHandle(t,{create:!!e}));return[s,i]},m.mkdir=async function(t){try{return await m.getDirForFilename(t+"/filepart",!0),!0}catch(t){return!1}},m.entryExists=async function(t){try{const[e,n]=await m.getDirForFilename(t);return await e.getFileHandle(n),!0}catch(t){return!1}},m.randomFilename=C,m.registerVfs=(t=!1)=>_.exports.sqlite3_vfs_register(y.pointer,t?1:0),m.treeList=async function(){const t=Object.create(null);return await async function t(e,n){n.name=e.name,n.dirs=[],n.files=[];for await(const i of e.values())if("directory"===i.kind){const e=Object.create(null);n.dirs.push(e),await t(i,e)}else n.files.push(i.name)}(m.rootDirectory,t),t},m.rmfr=async function(){const t=m.rootDirectory,e={recurse:!0};for await(const n of t.values())t.removeEntry(n.name,e)},m.unlink=async function(t,e=!1,n=!1){try{const[n,i]=await m.getDirForFilename(t,!1);return await n.removeEntry(i,{recursive:e}),!0}catch(t){if(n)throw new Error("unlink(",arguments[0],") failed: "+t.message,{cause:t});return!1}},m.traverse=async function(t){const e={recursive:!0,directory:m.rootDirectory};"function"==typeof t&&(t={callback:t}),async function e(n,i){for await(const s of n.values()){if(!1===t.callback(s,n,i))return!1;if(t.recursive&&"directory"===s.kind&&!1===await e(s,i+1))break}}((t=Object.assign(e,t||{})).directory,0)},t.oo1){const e=function(...e){const n=t.oo1.DB.dbCtorHelper.normalizeArgs(...e);n.vfs=y.$zName,t.oo1.DB.dbCtorHelper.call(this,n)};e.prototype=Object.create(t.oo1.DB.prototype),t.oo1.OpfsDb=e,t.oo1.DB.dbCtorHelper.setVfsPostOpenSql(y.pointer,(function(t,e){e.capi.sqlite3_busy_timeout(t,1e4),e.capi.sqlite3_exec(t,["pragma journal_mode=persist;","pragma cache_size=-16384;"],0,0,0)}))}w.onmessage=function({data:i}){switch(i.type){case"opfs-unavailable":b(new Error(i.payload.join(" ")));break;case"opfs-async-loaded":w.postMessage({type:"opfs-async-init",args:q});break;case"opfs-async-inited":try{t.vfs.installVfs({io:{struct:v,methods:P},vfs:{struct:y,methods:F}}),q.sabOPView=new Int32Array(q.sabOP),q.sabFileBufView=new Uint8Array(q.sabIO,0,q.fileBufferSize),q.sabS11nView=new Uint8Array(q.sabIO,q.sabS11nOffset,q.sabS11nSize),(()=>{if(q.s11n)return q.s11n;const t=new TextDecoder,e=new TextEncoder("utf-8"),n=new Uint8Array(q.sabIO,q.sabS11nOffset,q.sabS11nSize),i=new DataView(q.sabIO,q.sabS11nOffset,q.sabS11nSize);q.s11n=Object.create(null);const s=Object.create(null);s.number={id:1,size:8,getter:"getFloat64",setter:"setFloat64"},s.bigint={id:2,size:8,getter:"getBigInt64",setter:"setBigInt64"},s.boolean={id:3,size:4,getter:"getInt32",setter:"setInt32"},s.string={id:4};const r=t=>{switch(t){case s.number.id:return s.number;case s.bigint.id:return s.bigint;case s.boolean.id:return s.boolean;case s.string.id:return s.string;default:h("Invalid type ID:",t)}};q.s11n.deserialize=function(e=!1){++T.s11n.deserialize.count;const s=performance.now(),o=n[0],a=o?[]:null;if(o){const e=[];let s,l,c,u=1;for(s=0;s<o;++s,++u)e.push(r(n[u]));for(s=0;s<o;++s){const r=e[s];r.getter?(c=i[r.getter](u,q.littleEndian),u+=r.size):(l=i.getInt32(u,q.littleEndian),u+=4,c=t.decode(n.slice(u,u+l)),u+=l),a.push(c)}}return e&&(n[0]=0),T.s11n.deserialize.time+=performance.now()-s,a},q.s11n.serialize=function(...t){const r=performance.now();if(++T.s11n.serialize.count,t.length){const r=[];let a=0,l=1;for(n[0]=255&t.length;a<t.length;++a,++l)r.push((o=t[a],s[typeof o]||h("Maintenance required: this value type cannot be serialized.",o))),n[l]=r[a].id;for(a=0;a<t.length;++a){const s=r[a];if(s.setter)i[s.setter](l,t[a],q.littleEndian),l+=s.size;else{const s=e.encode(t[a]);i.setInt32(l,s.byteLength,q.littleEndian),l+=4,n.set(s,l),l+=s.byteLength}}}else n[0]=0;var o;T.s11n.serialize.time+=performance.now()-r},q.s11n})(),s.sanityChecks&&(c("Running sanity checks because of opfs-sanity-check URL arg..."),function(){const t=_.scopedAllocPush(),e=new f;try{const t=e.pointer,n=d.SQLITE_OPEN_CREATE|d.SQLITE_OPEN_READWRITE|d.SQLITE_OPEN_MAIN_DB,i=_.scopedAlloc(8),s="/sanity/check/file"+C(8),r=_.scopedAllocCString(s);let o;if(q.s11n.serialize("This is ä string."),o=q.s11n.deserialize(),l("deserialize() says:",o),"This is ä string."!==o[0]&&h("String d13n error."),F.xAccess(y.pointer,r,0,i),o=_.peek(i,"i32"),l("xAccess(",s,") exists ?=",o),o=F.xOpen(y.pointer,r,t,n,i),l("open rc =",o,"state.sabOPView[xOpen] =",q.sabOPView[q.opIds.xOpen]),0!==o)return void u("open failed with code",o);F.xAccess(y.pointer,r,0,i),o=_.peek(i,"i32"),o||h("xAccess() failed to detect file."),o=P.xSync(e.pointer,0),o&&h("sync failed w/ rc",o),o=P.xTruncate(e.pointer,1024),o&&h("truncate failed w/ rc",o),_.poke(i,0,"i64"),o=P.xFileSize(e.pointer,i),o&&h("xFileSize failed w/ rc",o),l("xFileSize says:",_.peek(i,"i64")),o=P.xWrite(e.pointer,r,10,1),o&&h("xWrite() failed!");const a=_.scopedAlloc(16);o=P.xRead(e.pointer,a,6,2),_.poke(a+6,0);let p=_.cstrToJs(a);l("xRead() got:",p),"sanity"!==p&&h("Unexpected xRead() value."),F.xSleep&&(l("xSleep()ing before close()ing..."),F.xSleep(y.pointer,2e3),l("waking up from xSleep()")),o=P.xClose(t),l("xClose rc =",o,"sabOPView =",q.sabOPView),l("Deleting file:",s),F.xDelete(y.pointer,r,4660),F.xAccess(y.pointer,r,0,i),o=_.peek(i,"i32"),o&&h("Expecting 0 from xAccess(",s,") after xDelete()."),c("End of OPFS sanity checks.")}finally{e.dispose(),_.scopedAllocPop(t)}}()),globalThis.FileSystemHandle&&globalThis.FileSystemDirectoryHandle&&globalThis.FileSystemFileHandle&&globalThis.FileSystemFileHandle.prototype.createSyncAccessHandle&&navigator?.storage?.getDirectory?navigator.storage.getDirectory().then((e=>{w.onerror=w._originalOnError,delete w._originalOnError,t.opfs=m,m.rootDirectory=e,l("End of OPFS sqlite3_vfs setup.",y),n(t)})).catch(b):n(t)}catch(t){u(t),b(t)}break;default:b(e),u("Unexpected message from the async worker:",i)}}}));return o};n.defaultProxyUri="sqlite3-opfs-async-proxy.js",globalThis.sqlite3ApiBootstrap.initializersAsync.push((async t=>{try{let e=n.defaultProxyUri;return t.scriptInfo.sqlite3Dir&&(n.defaultProxyUri=t.scriptInfo.sqlite3Dir+e),n().catch((e=>{t.config.warn("Ignoring inability to install OPFS sqlite3_vfs:",e.message)}))}catch(e){throw t.config.error("installOpfsVfs() exception:",e),e}}))})),void 0!==t){const e=Object.assign(Object.create(null),{exports:t.asm,memory:t.wasmMemory},globalThis.sqlite3ApiConfig||{});let n;globalThis.sqlite3ApiConfig=e;try{n=globalThis.sqlite3ApiBootstrap()}catch(t){throw console.error("sqlite3ApiBootstrap() error:",t),t}finally{delete globalThis.sqlite3ApiBootstrap,delete globalThis.sqlite3ApiConfig}t.sqlite3=n}else console.warn("This is not running in an Emscripten module context, so","globalThis.sqlite3ApiBootstrap() is _not_ being called due to lack","of config info for the WASM environment.","It must be called manually.")})),t.ready});!function(){const t=o;if(!t)throw new Error("Expecting globalThis.sqlite3InitModule to be defined by the Emscripten build.");const e=globalThis.sqlite3InitModuleState=Object.assign(Object.create(null),{moduleScript:globalThis?.document?.currentScript,isWorker:"undefined"!=typeof WorkerGlobalScope,location:globalThis.location,urlParams:globalThis?.location?.href?new URL(globalThis.location.href).searchParams:new URLSearchParams});if(e.debugModule=e.urlParams.has("sqlite3.debugModule")?(...t)=>console.warn("sqlite3.debugModule:",...t):()=>{},e.urlParams.has("sqlite3.dir"))e.sqlite3Dir=e.urlParams.get("sqlite3.dir")+"/";else if(e.moduleScript){const t=e.moduleScript.src.split("/");t.pop(),e.sqlite3Dir=t.join("/")+"/"}if(globalThis.sqlite3InitModule=function n(...i){return t(...i).then((t=>{if("undefined"!=typeof WorkerGlobalScope&&(t.ENVIRONMENT_IS_PTHREAD||t._pthread_self||"function"==typeof threadAlert||globalThis?.location?.pathname?.endsWith?.(".worker.js")))return t;const i=t.sqlite3;i.scriptInfo=e,n.__isUnderTest&&(i.__isUnderTest=!0);const s=i.asyncPostInit;return delete i.asyncPostInit,s()})).catch((t=>{throw console.error("Exception loading sqlite3 module:",t),t}))},globalThis.sqlite3InitModule.ready=t.ready,globalThis.sqlite3InitModuleState.moduleScript){const t=globalThis.sqlite3InitModuleState;let e=t.moduleScript.src.split("/");e.pop(),t.scriptDir=e.join("/")+"/"}e.debugModule("sqlite3InitModuleState =",e),globalThis.sqlite3InitModule}(),globalThis.sqlite3Worker1Promiser=function t(e=t.defaultConfig){if(1===arguments.length&&"function"==typeof arguments[0]){const n=e;(e=Object.assign(Object.create(null),t.defaultConfig)).onready=n}else e=Object.assign(Object.create(null),t.defaultConfig,e);const n=Object.create(null),i=function(){},s=e.onerror||i,r=e.debug||i,o=e.generateMessageId?void 0:Object.create(null),a=e.generateMessageId||function(t){return t.type+"#"+(o[t.type]=(o[t.type]||0)+1)},l=(...t)=>{throw new Error(t.join(" "))};let c;return e.worker||(e.worker=t.defaultConfig.worker),"function"==typeof e.worker&&(e.worker=e.worker()),e.worker.onmessage=function(t){t=t.data,r("worker1.onmessage",t);let i=n[t.messageId];if(!i)return t&&"sqlite3-api"===t.type&&"worker1-ready"===t.result?void(e.onready&&e.onready()):(i=n[t.type],i&&i.onrow?void i.onrow(t):void(e.onunhandled?e.onunhandled(arguments[0]):s("sqlite3Worker1Promiser() unhandled worker message:",t)));switch(delete n[t.messageId],t.type){case"error":return void i.reject(t);case"open":c||(c=t.dbId);break;case"close":t.dbId===c&&(c=void 0)}try{i.resolve(t)}catch(t){i.reject(t)}},function(){let t;1===arguments.length?t=arguments[0]:2===arguments.length?t={type:arguments[0],args:arguments[1]}:l("Invalid arugments for sqlite3Worker1Promiser()-created factory."),t.dbId||(t.dbId=c),t.messageId=a(t),t.departureTime=performance.now();const i=Object.create(null);let s;i.message=t,"exec"===t.type&&t.args&&("function"==typeof t.args.callback?(s=t.messageId+":row",i.onrow=t.args.callback,t.args.callback=s,n[s]=i):"string"==typeof t.args.callback&&l("exec callback may not be a string when using the Promise interface."));let o=new Promise((function(s,o){i.resolve=s,i.reject=o,n[t.messageId]=i,r("Posting",t.type,"message to Worker dbId="+(c||"default")+":",t),e.worker.postMessage(t)}));return s&&(o=o.finally((()=>delete n[s]))),o}},globalThis.sqlite3Worker1Promiser.defaultConfig={worker:function(){return new Worker("sqlite3-worker1-bundler-friendly.mjs",{type:"module"})}.bind({currentScript:globalThis?.document?.currentScript}),onerror:(...t)=>console.error("worker1 promiser error",...t)};const a="undefined"!=typeof SQLITE_DEBUG&&SQLITE_DEBUG||"undefined"!=typeof process&&void 0!==(null===(r=null===process||void 0===process?void 0:process.env)||void 0===r?void 0:r.SQLITE_DEBUG)&&process.env.SQLITE_DEBUG||"",l=["threads","vfs","cache","http"],c={};for(const t of l)c[t]=a.includes(t)?console.debug.bind(console):()=>{};var u=function(t,e,n,i){return new(n||(n=Promise))((function(s,r){function o(t){try{l(i.next(t))}catch(t){r(t)}}function a(t){try{l(i.throw(t))}catch(t){r(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}l((i=i.apply(t,e||[])).next())}))};function h(t){let e;return c.threads("Creating new SQLite thread",t),new Promise(((n,s)=>{const r=sqlite3Worker1Promiser({onready:()=>{n(r)},worker:()=>{try{e=new Worker(new URL(i.p+i.u(490),i.b)),e.onerror=t=>console.error("Worker bootstrap failed",t);const n=null==t?void 0:t.http;return"shared"===(null==n?void 0:n.type)?n.createNewChannel().then((t=>{e.postMessage({httpChannel:t,httpOptions:n.options},[t.port])})):"sync"===(null==n?void 0:n.type)?e.postMessage({httpChannel:!0,httpOptions:n.options}):e.postMessage({}),e}catch(t){console.error("Failed to create SQLite worker",t),s(t)}}})})).then((t=>(t.close=()=>{e.terminate()},t)))}const d='SharedArrayBuffer is not available. If your browser supports it, the webserver must send "Cross-Origin-Opener-Policy: same-origin "and "Cross-Origin-Embedder-Policy: require-corp" headers.';function _(t){var e;return u(this,void 0,void 0,(function*(){const n=function(t){if(c.threads("Creating new HTTP VFS backend thread"),"undefined"==typeof SharedArrayBuffer||"sync"===(null==t?void 0:t.backendType)){if("shared"===(null==t?void 0:t.backendType))throw new Error(d);return"sync"!==(null==t?void 0:t.backendType)&&console.warn(d+" Falling back to the legacy HTTP backend."),{type:"sync",worker:null,options:t,createNewChannel:()=>{},close:()=>Promise.resolve(),terminate:()=>{}}}let e=1;const n=new Worker(new URL(i.p+i.u(945),i.b));t=function(t){var e,n,i,s;return{timeout:null!==(e=null==t?void 0:t.timeout)&&void 0!==e?e:2e4,maxPageSize:null!==(n=null==t?void 0:t.maxPageSize)&&void 0!==n?n:4096,cacheSize:null!==(i=null==t?void 0:t.cacheSize)&&void 0!==i?i:1024,headers:null!==(s=null==t?void 0:t.headers)&&void 0!==s?s:{}}}(t),n.postMessage({msg:"init",options:t});const s={};return n.onmessage=({data:t})=>{if(c.threads("Received control message reply",t),"ack"===t.msg)return s[t.id]?(c.threads("New HTTP VFS channel created",s),s[t.id].resolve({port:s[t.id].channel.port2,shm:t.shm}),clearTimeout(s[t.id].timeout),delete s[t.id].resolve,void delete s[t.id].timeout):void console.error("Invalid response received from backend",t)},{type:"shared",worker:n,options:t,createNewChannel:function(){c.threads("Creating a new HTTP VFS channel");const i=new MessageChannel,r=e++;return n.postMessage({msg:"handshake",port:i.port1,id:r},[i.port1]),new Promise(((e,n)=>{const o=setTimeout((()=>{delete s[r],n("Timeout while waiting on backend")}),t.timeout);s[r]={id:r,channel:i,resolve:e,timeout:o}}))},terminate:function(){n.terminate()},close:function(){return c.threads("Closing the HTTP VFS channel"),n.postMessage({msg:"close"}),new Promise(((e,i)=>{const s=setTimeout((()=>{i("Timeout while waiting on backend")}),t.timeout);n.onmessage=({data:t})=>{c.threads("Received close response",t),"ack"===t.msg&&void 0===t.id&&(e(),clearTimeout(s))}}))}}}(null==t?void 0:t.httpOptions),s=[],r=[];for(let i=0;i<(null!==(e=t.workers)&&void 0!==e?e:1);i++)r.push(h({http:n}).then((t=>s.push({worker:t,busy:null}))).then((()=>{})));return yield Promise.all(r),{open:t=>Promise.all(s.map((e=>e.worker("open",{filename:"file:"+encodeURI(t),vfs:"http"})))).then((()=>{})),close:()=>Promise.all(s.map((t=>t.worker.close()))).then((()=>n.close())),exec:function(t,e){return u(this,void 0,void 0,(function*(){let n;do{n=s.find((t=>!t.busy)),n||(yield Promise.race(s.map((t=>t.busy))).catch((()=>{})))}while(!n);const i=[];return n.busy=n.worker("exec",{sql:t,bind:e,callback:t=>{t.row&&i.push(t)}}).then((()=>{})).finally((()=>{n.busy=null})),yield n.busy,i}))}}}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,