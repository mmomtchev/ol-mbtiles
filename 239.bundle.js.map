{"version":3,"file":"239.bundle.js","mappings":"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","sources":["webpack://ol-mbtiles/./examples/code/reunion-raster.ts","webpack://ol-mbtiles/./dist/index.js","webpack://ol-mbtiles/./node_modules/ol/source/OSM.js"],"sourcesContent":["import Map from 'ol/Map.js';\nimport TileLayer from 'ol/layer/Tile.js';\nimport OSM from 'ol/source/OSM';\nimport View from 'ol/View.js';\nimport ImageTileLayer from 'ol/layer/Tile';\nimport TileDebug from 'ol/source/TileDebug';\nimport { fromLonLat } from 'ol/proj';\n\nimport { importMBTiles, MBTilesRasterSource } from 'ol-mbtiles';\n\n// Raster MBTiles from\n// https://www.data.gouv.fr/en/datasets/pyramide-de-tuiles-depuis-la-bd-ortho-r/\n// 240MB original file\n\nexport default async function () {\n  return new Map({\n    target: 'map',\n    layers: [\n      new TileLayer({\n        zIndex: 20,\n        source: new TileDebug()\n      }),\n      new TileLayer({\n        zIndex: 10,\n        opacity: 0.4,\n        source: new OSM(),\n      }),\n      new ImageTileLayer({\n        zIndex: 0,\n        source: new MBTilesRasterSource(\n          await importMBTiles({ url: 'https://velivole.b-cdn.net/tiles-RGR92UTM40S.mbtiles' }),\n        ),\n      })\n    ],\n    view: new View({\n      center: fromLonLat([55.47437, -21.08468]),\n      zoom: 9\n    }),\n  });\n}\n","import { createSQLiteHTTPPool } from 'sqlite-wasm-http';\nimport { get, transformExtent } from 'ol/proj.js';\nimport { getWidth } from 'ol/extent.js';\nimport TileGrid from 'ol/tilegrid/TileGrid.js';\nimport VectorTileSource from 'ol/source/VectorTile.js';\nimport Protobuf from 'pbf';\nimport { VectorTile } from '@mapbox/vector-tile';\nimport pako from 'pako';\nimport FeatureFormat from 'ol/format/Feature.js';\nimport Projection from 'ol/proj/Projection.js';\nimport RenderFeature from 'ol/render/Feature.js';\nimport { VERSION } from 'ol/util.js';\nimport ImageTileSource from 'ol/source/TileImage.js';\nimport TileState from 'ol/TileState.js';\n\nvar _a;\nconst debugEnabled = (typeof OL_MBTILES_DEBUG !== 'undefined' && OL_MBTILES_DEBUG) ||\n    (typeof process !== 'undefined' && typeof ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.OL_MBTILES_DEBUG) !== 'undefined' && process.env.OL_MBTILES_DEBUG);\nconst debug = debugEnabled ? console.debug.bind(console) : () => undefined;\n\nconst formats = {\n    'jpg': 'raster',\n    'png': 'raster',\n    'webp': 'raster',\n    'pbf': 'vector',\n    'mvt': 'vector'\n};\nfunction httpPoolOptions(options) {\n    var _a, _b, _c;\n    return {\n        workers: (_a = options === null || options === void 0 ? void 0 : options.sqlWorkers) !== null && _a !== void 0 ? _a : 4,\n        httpOptions: {\n            backendType: options === null || options === void 0 ? void 0 : options.backendType,\n            maxPageSize: (_b = options === null || options === void 0 ? void 0 : options.maxSqlPageSize) !== null && _b !== void 0 ? _b : 4096,\n            cacheSize: (_c = options === null || options === void 0 ? void 0 : options.sqlCacheSize) !== null && _c !== void 0 ? _c : 4096\n        },\n    };\n}\n/**\n * Automatically import MBTiles metadata and return an options object\n * compatible with the source constructors.\n *\n * @param {(MBTilesRasterOptions | MBTilesVectorOptions) & SQLOptions} opt Any MBTiles{Raster|Vector}Source options to be overridden\n * @param {string} opt.url URL of the remote tileset\n * @returns {(MBTilesRasterOptions | MBTilesVectorOptions)}\n */\nfunction importMBTiles(opt) {\n    const pool = createSQLiteHTTPPool(httpPoolOptions(opt));\n    return pool\n        .then((pool) => pool.open(opt.url).then(() => pool))\n        .then((p) => p.exec('SELECT name,value FROM metadata'))\n        .then((r) => {\n        if (r && r.length) {\n            // Transform an array of form [ ['name', 'value' ], ... ] to object\n            const data = r.reduce((a, x) => {\n                a[x.row[0]] = x.row[1];\n                return a;\n            }, {});\n            debug('Loaded metadata', data);\n            return data;\n        }\n        throw new Error('Could not load metadata');\n    })\n        .then((md) => {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const opts = Object.assign({}, opt);\n        const format = (_b = (_a = md['format']) === null || _a === void 0 ? void 0 : _a.toLowerCase) === null || _b === void 0 ? void 0 : _b.call(_a);\n        if (!formats[format])\n            console.warn('Unknown tile format', format);\n        // Sometimes, I wonder if Mapbox doesn't hold a patent or some\n        // other kind of investment related to everyone using 3857\n        opts.projection = (_c = opt.projection) !== null && _c !== void 0 ? _c : 'EPSG:3857';\n        opts.attributions = ((_d = md.attribution) !== null && _d !== void 0 ? _d : md.description);\n        opts.maxZoom = (_e = opt.maxZoom) !== null && _e !== void 0 ? _e : +md['maxzoom'];\n        opts.minZoom = (_f = opt.minZoom) !== null && _f !== void 0 ? _f : +md['minzoom'];\n        const projExtent = (_h = (_g = get(opts.projection)) === null || _g === void 0 ? void 0 : _g.getExtent) === null || _h === void 0 ? void 0 : _h.call(_g);\n        const bounds = md['bounds'];\n        const extent = bounds ?\n            transformExtent(bounds.split(',').map((r) => +r), 'EPSG:4326', opts.projection) :\n            projExtent;\n        if (formats[format] === 'raster') {\n            if (opts.maxZoom === undefined || opts.minZoom === undefined || projExtent === undefined)\n                throw new Error('Cannot determine tilegrid, need minZoom, maxZoom');\n            const baseResolution = getWidth(projExtent) / 256;\n            const resolutions = [baseResolution];\n            for (let z = 1; z <= opts.maxZoom; z++)\n                resolutions.push(resolutions[resolutions.length - 1] / 2);\n            opts.tileGrid = new TileGrid({\n                origin: [projExtent[0], projExtent[2]],\n                extent,\n                minZoom: opts.minZoom,\n                resolutions\n            });\n        }\n        else {\n            const vectorOpts = opts;\n            // Alas VectorTileSource in OpenLayers does not support\n            // constraining the extent while keeping the origin\n            vectorOpts.extent = projExtent;\n        }\n        opts.pool = pool;\n        opts.url = opt.url;\n        return opts;\n    })\n        .catch((e) => pool.then((p) => p.close()).then(() => Promise.reject(e)));\n}\n\nconst olVERSION = VERSION.split('.').map((v) => +v);\nconst olVersion_RenderFeatureStrides = (olVERSION[0] > 8 || (olVERSION[0] === 8 && olVERSION[1] >= 2));\nfunction createOLRenderFeature(klass, type, flatCoordinates, ends, properties, id) {\n    // This changed in OpenLayers 8.2.0\n    return olVersion_RenderFeatureStrides ?\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        new klass(type, flatCoordinates, ends, 2, properties, id) :\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        new klass(type, flatCoordinates, ends, properties, id);\n}\nclass MBTilesFormat extends FeatureFormat {\n    constructor(options) {\n        var _a, _b, _c;\n        super();\n        options = options ? options : {};\n        this.dataProjection = new Projection({\n            code: '',\n            units: 'tile-pixels',\n        });\n        this.featureClass_ = options.featureClass ? options.featureClass : RenderFeature;\n        this.geometryName_ = (_a = options.geometryName) !== null && _a !== void 0 ? _a : 'Geometry';\n        this.layers_ = (_b = options.layers) !== null && _b !== void 0 ? _b : null;\n        this.idProperty_ = options.idProperty;\n        this.extent = (_c = options.extent) !== null && _c !== void 0 ? _c : 4096;\n        /*\n         * As this is the very first time MBTiles will be distributed by HTTP\n         * there is still no official MIME type\n         */\n        this.supportedMediaTypes = [\n            'application/vnd-mbtiles'\n        ];\n    }\n    readFeature(source, options) {\n        const properties = source.properties;\n        let id;\n        if (!this.idProperty_) {\n            id = source.id;\n        }\n        else {\n            id = properties[this.idProperty_];\n            delete properties[this.idProperty_];\n        }\n        const points = source.loadGeometry();\n        const flatCoordinates = [];\n        const ends = [];\n        const type = MBTilesFormat.MBTypes[points.length > 1 ? 'multi' : 'mono'][source.type];\n        if (type === 'Unknown')\n            return null;\n        for (let i = 0; i < points.length; i++) {\n            if (points[i].length == 0)\n                continue;\n            for (let j = 0; j < points[i].length; j++) {\n                flatCoordinates.push(points[i][j].x, points[i][j].y);\n            }\n            ends.push(flatCoordinates.length);\n        }\n        const feature = createOLRenderFeature(this.featureClass_, type, flatCoordinates, ends, properties, id);\n        feature.transform(options === null || options === void 0 ? void 0 : options.dataProjection);\n        return feature;\n    }\n    readFeatures(source, options) {\n        const layers = this.layers_;\n        const features = [];\n        const tile = new VectorTile(new Protobuf(pako.ungzip(source)));\n        options = this.adaptOptions(options);\n        const dataProjection = get(options === null || options === void 0 ? void 0 : options.dataProjection);\n        const extent = options === null || options === void 0 ? void 0 : options.extent;\n        if (!dataProjection || !options || !extent)\n            throw new Error('Cannot determine the projection/extent');\n        dataProjection.setWorldExtent(extent);\n        dataProjection.setExtent([0, 0, this.extent, this.extent]);\n        options.dataProjection = dataProjection;\n        for (const layerName of Object.keys(tile.layers)) {\n            if (layers && !layers.includes(layerName)) {\n                continue;\n            }\n            const l = tile.layers[layerName];\n            for (let idx = 0; idx < l.length; idx++) {\n                const vectorFeature = l.feature(idx);\n                const feature = this.readFeature(vectorFeature, options);\n                feature.getProperties().layer = layerName;\n                features.push(feature);\n            }\n        }\n        return features;\n    }\n    readProjection() {\n        return this.dataProjection;\n    }\n}\nMBTilesFormat.MBTypes = {\n    mono: ['Unknown', 'Point', 'LineString', 'Polygon'],\n    multi: ['Unknown', 'MultiPoint', 'MultiLineString', 'Polygon']\n};\n\n/**\n * A tile source in a remote .mbtiles file accessible by HTTP\n *\n * WARNING\n * If your application continuously creates and removes MBTilesSource\n * objects, special care must be taken to properly dispose of them.\n * An MBTilesSource creates a thread pool that the JS engine is unable to\n * automatically garbage-collect unless the dispose() method\n * is invoked.\n * If you need to dispose a map that can potentially contain\n * MBTilesSource objects, check loadExample() in\n * https://github.com/mmomtchev/ol-mbtiles/blob/main/examples/index.ts#L15\n */\nclass MBTilesVectorSource extends VectorTileSource {\n    /**\n     * @param {MBTilesVectorOptions} options options\n     */\n    constructor(options) {\n        var _a;\n        if (options.url === undefined && options.pool === undefined)\n            throw new Error('Must specify url');\n        super(Object.assign(Object.assign({}, options), { url: undefined, format: new MBTilesFormat({\n                layers: options.layers\n            }), \n            // This is required to prevent Openlayers' cache from thinking that all tiles share the same URL\n            tileUrlFunction: (coords) => `${options.url}#${coords[0]}:${coords[1]}:${coords[2]}` }));\n        this.setTileLoadFunction(this.tileLoader.bind(this));\n        this.pool = (_a = options.pool) !== null && _a !== void 0 ? _a : createSQLiteHTTPPool(httpPoolOptions(options))\n            .then((pool) => pool.open(options.url).then(() => pool));\n    }\n    tileLoader(_tile, _url) {\n        // TODO fix the type in Openlayers after the war\n        const tile = _tile;\n        debug('loading tile', [tile.tileCoord[0], tile.tileCoord[1], tile.tileCoord[2]]);\n        tile.setLoader((extent, resolution, projection) => {\n            this.pool\n                .then((p) => p.exec('SELECT tile_data FROM tiles WHERE zoom_level = $zoom AND tile_column = $col AND tile_row = $row', {\n                $zoom: tile.tileCoord[0],\n                $col: tile.tileCoord[1],\n                $row: (1 << tile.tileCoord[0]) - 1 - tile.tileCoord[2]\n            }))\n                .then((r) => {\n                if (r && r[0] && r[0].row[0]) {\n                    const format = tile.getFormat();\n                    const features = format.readFeatures(r[0].row[0], {\n                        extent,\n                        featureProjection: projection\n                    });\n                    tile.setFeatures(features);\n                    tile.onLoad(features, projection);\n                    return;\n                }\n                throw new Error(`No data for ${tile.tileCoord}`);\n            })\n                .catch((e) => {\n                debug(e);\n                tile.onError();\n            });\n        });\n    }\n    disposeInternal() {\n        return this.pool.then((p) => p.close());\n    }\n}\n\n/**\n * A tile source in a remote .mbtiles file accessible by HTTP\n *\n * WARNING\n * If your application continuously creates and removes MBTilesSource\n * objects, special care must be taken to properly dispose of them.\n * An MBTilesSource creates a thread pool that the JS engine is unable to\n * automatically garbage-collect unless the dispose() method\n * is invoked.\n * If you need to dispose a map that can potentially contain\n * MBTilesSource objects, check loadExample() in\n * https://github.com/mmomtchev/ol-mbtiles/blob/main/examples/index.ts#L15\n */\nclass MBTilesRasterSource extends ImageTileSource {\n    /**\n     * @param {MBTilesRasterOptions} options options\n     */\n    constructor(options) {\n        var _a;\n        if (options.url === undefined && options.pool === undefined)\n            throw new Error('Must specify url');\n        super(Object.assign(Object.assign({}, options), { url: undefined, \n            // This is required to prevent Openlayers' cache from thinking that all tiles share the same URL\n            tileUrlFunction: (coords) => `${options.url}#${coords[0]}:${coords[1]}:${coords[2]}` }));\n        this.setTileLoadFunction(this.tileLoader.bind(this));\n        this.pool = (_a = options.pool) !== null && _a !== void 0 ? _a : createSQLiteHTTPPool(httpPoolOptions(options))\n            .then((pool) => pool.open(options.url).then(() => pool));\n    }\n    // TODO fix the tile type in Openlayers\n    tileLoader(tile, _url) {\n        debug('loading tile', [tile.tileCoord[0], tile.tileCoord[1], tile.tileCoord[2]]);\n        const image = tile.getImage();\n        this.pool\n            .then((p) => p.exec('SELECT tile_data FROM tiles WHERE zoom_level = $zoom AND tile_column = $col AND tile_row = $row', {\n            $zoom: tile.tileCoord[0],\n            $col: tile.tileCoord[1],\n            $row: (1 << tile.tileCoord[0]) - 1 - tile.tileCoord[2]\n        }))\n            .then((r) => {\n            if (r && r[0]) {\n                if (r[0].row[0] instanceof Uint8Array) {\n                    const blob = new Blob([r[0].row[0]]);\n                    const imageUrl = URL.createObjectURL(blob);\n                    image.src = imageUrl;\n                    return;\n                }\n            }\n            throw new Error(`No data for ${tile.tileCoord}`);\n        })\n            .catch((e) => {\n            debug(e);\n            tile.setState(TileState.ERROR);\n        });\n    }\n    disposeInternal() {\n        return this.pool.then((p) => p.close());\n    }\n}\n\nexport { MBTilesFormat, MBTilesRasterSource, MBTilesVectorSource, importMBTiles };\n//# sourceMappingURL=index.js.map\n","/**\n * @module ol/source/OSM\n */\n\nimport XYZ from './XYZ.js';\n\n/**\n * The attribution containing a link to the OpenStreetMap Copyright and License\n * page.\n * @const\n * @type {string}\n * @api\n */\nexport const ATTRIBUTION =\n  '&#169; ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a> ' +\n  'contributors.';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [maxZoom=19] Max zoom.\n * @property {boolean} [opaque=true] Whether the layer is opaque.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.\n * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n * @api\n */\nclass OSM extends XYZ {\n  /**\n   * @param {Options} [options] Open Street Map options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    let attributions;\n    if (options.attributions !== undefined) {\n      attributions = options.attributions;\n    } else {\n      attributions = [ATTRIBUTION];\n    }\n\n    const crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\n\n    const url =\n      options.url !== undefined\n        ? options.url\n        : 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n    super({\n      attributions: attributions,\n      attributionsCollapsible: false,\n      cacheSize: options.cacheSize,\n      crossOrigin: crossOrigin,\n      interpolate: options.interpolate,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n      opaque: options.opaque !== undefined ? options.opaque : true,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileLoadFunction: options.tileLoadFunction,\n      transition: options.transition,\n      url: url,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection,\n    });\n  }\n}\n\nexport default OSM;\n"],"names":["target","layers","zIndex","source","opacity","url","view","center","zoom","_a","debug","process","env","OL_MBTILES_DEBUG","console","bind","formats","httpPoolOptions","options","_b","_c","workers","sqlWorkers","httpOptions","backendType","maxPageSize","maxSqlPageSize","cacheSize","sqlCacheSize","importMBTiles","opt","pool","then","open","p","exec","r","length","data","reduce","a","x","row","Error","md","_d","_e","_f","_g","_h","opts","Object","assign","format","toLowerCase","call","warn","projection","attributions","attribution","description","maxZoom","minZoom","projExtent","getExtent","bounds","extent","split","map","undefined","resolutions","z","push","tileGrid","origin","catch","e","close","Promise","reject","olVERSION","v","olVersion_RenderFeatureStrides","MBTilesFormat","constructor","super","this","dataProjection","code","units","featureClass_","featureClass","geometryName_","geometryName","layers_","idProperty_","idProperty","supportedMediaTypes","readFeature","properties","id","points","loadGeometry","flatCoordinates","ends","type","MBTypes","i","j","y","feature","klass","createOLRenderFeature","transform","readFeatures","features","tile","VectorTile","adaptOptions","setWorldExtent","setExtent","layerName","keys","includes","l","idx","vectorFeature","getProperties","layer","readProjection","mono","multi","MBTilesVectorSource","tileUrlFunction","coords","setTileLoadFunction","tileLoader","_tile","_url","tileCoord","setLoader","resolution","$zoom","$col","$row","getFormat","featureProjection","setFeatures","onLoad","onError","disposeInternal","MBTilesRasterSource","image","getImage","Uint8Array","blob","Blob","imageUrl","URL","createObjectURL","src","setState","ERROR","OSM","crossOrigin","attributionsCollapsible","interpolate","opaque","reprojectionErrorThreshold","tileLoadFunction","transition","wrapX","zDirection"],"sourceRoot":""}