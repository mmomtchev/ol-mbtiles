(self.webpackChunkol_mbtiles=self.webpackChunkol_mbtiles||[]).push([[751],{5917:(e,t,r)=>{"use strict";r.d(t,{d_:()=>f,kY:()=>c,xl:()=>p,y8:()=>l});var n=r(7539),o=r(283),a=r(1345),i=r(8958),s=r(1280);function l(e,t){let r,l;switch(e){case 0:r=6,l="2em";break;case 1:r=5,l="1.2em";break;case 2:r=3,l="0.8em";break;default:r=1,l="0.5em"}l+=" helvetica, sans-serif";const c="#00007f";return new n.ZP({image:new o.Z({fill:new a.Z({color:c}),radius:r,stroke:new i.Z({color:c,width:r})}),text:new s.Z({font:l,text:t.get("n"),fill:new a.Z({color:"#ffffff"}),stroke:new i.Z({color:c,width:2})})})}const c=new n.ZP({stroke:new i.Z({color:"blue",width:2})}),u={},d={major_road:"#776",minor_road:"#ccb",highway:"#f39"},f=(new n.ZP({fill:new a.Z({color:"#666"}),stroke:new i.Z({color:"#444",width:1})}),new n.ZP({fill:new a.Z({color:"#9db9e8"})})),p=function(e){const t=e.get("kind"),r=e.get("railway"),o=e.get("sort_key"),a=t+"/"+r+"/"+o;let s=u[a];if(!s){let e,l;r?(e="#7de",l=1):(e=d[t],l="highway"==t?1.5:1),s=new n.ZP({stroke:new i.Z({color:e,width:l}),zIndex:o}),u[a]=s}return s}},5901:(e,t,r)=>{"use strict";r.d(t,{B:()=>w});var n=r(9305),o=r.n(n),a=r(7205),i=r(3614),s=r.n(i),l=r(8929),c=r(7885),u=r(9646),d=r(9619),f=r(3433),p=r(8661);class m extends u.ZP{constructor(e){var t,r,n;super(),e=e||{},this.dataProjection=new d.Z({code:"",units:"tile-pixels"}),this.featureClass_=e.featureClass?e.featureClass:f.ZP,this.geometryName_=null!==(t=e.geometryName)&&void 0!==t?t:"Geometry",this.layers_=null!==(r=e.layers)&&void 0!==r?r:null,this.idProperty_=e.idProperty,this.extent=null!==(n=e.extent)&&void 0!==n?n:4096,this.supportedMediaTypes=["application/vnd-mbtiles"]}readFeature(e,t){const r=e.properties;let n;this.idProperty_?(n=r[this.idProperty_],delete r[this.idProperty_]):n=e.id;const o=e.loadGeometry(),a=[],i=[];let s=m.MBTypes[e.type];if("Unknown"===s)return null;for(let e=0;e<o.length;e++){for(let t=0;t<o[e].length;t++)a.push(o[e][t].x,o[e][t].y);i.push(a.length)}const l=new this.featureClass_(s,a,i,r,n);return l.transform(t.dataProjection),l}readFeatures(e,t){const r=this.layers_,n=[],o=new l.VectorTile(new(s())(c.ec(e)));t=this.adaptOptions(t);const a=(0,p.U2)(t.dataProjection);a.setWorldExtent(t.extent),a.setExtent([0,0,this.extent,this.extent]),t.dataProjection=a;for(const e of Object.keys(o.layers)){if(r&&!r.includes(e))continue;const a=o.layers[e];for(let r=0;r<a.length;r++){const o=a.feature(r),i=this.readFeature(o,t);i.getProperties().layer=e,n.push(i)}}return n}readProjection(e){return this.dataProjection}}m.MBTypes=["Unknown","Point","LineString","Polygon"];const h=null!==o()&&void 0!==o()?o():n,g=new URL("file:///home/mmom/src/ol-mbtiles/test/sqlworker.js"),y=new URL("file:///home/mmom/src/ol-mbtiles/node_modules/sql.js-httpvfs/dist/sql-wasm.wasm");class w extends a.Z{constructor(e){var t;super(Object.assign(Object.assign({},e),{cacheSize:e.tileCacheSize,url:void 0,format:new m({layers:e.layers}),tileUrlFunction:e=>`${e[0]}:${e[1]}:${e[2]}`})),this.setTileLoadFunction(this.tileLoader.bind(this));const r={from:"inline",config:{serverMode:"full",requestChunkSize:1024,url:e.url}};this.worker=[];for(let n=0;n<(null!==(t=e.sqlWorkers)&&void 0!==t?t:4);n++)this.worker[n]=h.createDbWorker([r],g.toString(),y.toString(),10485760);this.currentWorker=0,this.metadata=this.worker[this.currentWorker++%this.worker.length].then((e=>e.db.query('SELECT name,value FROM metadata WHERE name="maxzoom" or name="minzoom"'))).then((t=>{if(t&&2==t.length){const r=t.reduce(((e,t)=>(e[t.name]=t.value,e)),{});return console.debug("Loaded metadata",r),e.maxZoom==r.maxzoom&&e.minZoom==r.minzoom||console.warn(`minZoom/maxZoom ${r.minzoom}/${r.maxzoom} of retrieved MBTiles do not match Openlayers configuration ${e.minZoom}/${e.maxZoom}`),r}throw new Error("Could not load metadata")})).catch((e=>(console.warn(e),null)))}tileLoader(e,t){console.debug("loading tile",[e.tileCoord[0],e.tileCoord[1],e.tileCoord[2]]),e.setLoader(((t,r,n)=>{12==e.tileCoord[0]&&2118==e.tileCoord[1]&&1461==e.tileCoord[2]&&console.log(e.tileCoord,t,r,n),this.worker[this.currentWorker++%this.worker.length].then((t=>t.db.query("SELECT tile_data FROM tiles WHERE zoom_level = ? AND tile_column = ? AND tile_row = ?",[e.tileCoord[0],e.tileCoord[1],(1<<e.tileCoord[0])-1-e.tileCoord[2]]))).then((r=>{if(r&&r[0]&&r[0].tile_data){const o=e.getFormat().readFeatures(r[0].tile_data,{extent:t,featureProjection:n});return e.setFeatures(o),void e.onLoad(o,n)}throw new Error(`No data for ${e.tileCoord}`)})).catch((t=>{console.warn(t),e.onError()}))}))}destroy(){for(const e of this.worker)e.then((e=>{e.release()}))}}},9305:function(e){var t;t=()=>(()=>{"use strict";var e={162:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.createDbWorker=void 0;const i=a(r(375));async function s(e){if(e.data&&"eval"===e.data.action){const t=new Int32Array(e.data.notify,0,2),r=new Uint8Array(e.data.notify,8);let n;try{n={ok:await u(e.data.request)}}catch(t){console.error("worker request error",e.data.request,t),n={err:String(t)}}const o=(new TextEncoder).encode(JSON.stringify(n));r.set(o,0),t[1]=o.length,Atomics.notify(t,0)}}function l(e){if("BODY"===e.tagName)return"body";const t=[];for(;e.parentElement&&"BODY"!==e.tagName;){if(e.id){t.unshift("#"+e.id);break}{let r=1,n=e;for(;n.previousElementSibling;)n=n.previousElementSibling,r++;t.unshift(e.tagName.toLowerCase()+":nth-child("+r+")")}e=e.parentElement}return t.join(" > ")}function c(e){return Object.keys(e)}async function u(e){if(console.log("dom vtable request",e),"select"===e.type)return[...document.querySelectorAll(e.selector)].map((t=>{const r={};for(const n of e.columns)"selector"===n?r.selector=l(t):"parent"===n?t.parentElement&&(r.parent=t.parentElement?l(t.parentElement):null):"idx"===n||(r[n]=t[n]);return r}));if("insert"===e.type){if(!e.value.parent)throw Error('"parent" column must be set when inserting');const t=document.querySelectorAll(e.value.parent);if(0===t.length)throw Error(`Parent element ${e.value.parent} could not be found`);if(t.length>1)throw Error(`Parent element ${e.value.parent} ambiguous (${t.length} results)`);const r=t[0];if(!e.value.tagName)throw Error("tagName must be set for inserting");const n=document.createElement(e.value.tagName);for(const t of c(e.value))if(null!==e.value[t]){if("tagName"===t||"parent"===t)continue;if("idx"===t||"selector"===t)throw Error(`${t} can't be set`);n[t]=e.value[t]}return r.appendChild(n),null}if("update"===e.type){const t=document.querySelector(e.value.selector);if(!t)throw Error(`Element ${e.value.selector} not found!`);const r=[];for(const n of c(e.value)){const o=e.value[n];if("parent"!==n){if("idx"!==n&&"selector"!==n&&o!==t[n]){if(console.log("SETTING ",n,t[n],"->",o),"tagName"===n)throw Error("can't change tagName");r.push(n)}}else if(o!==l(t.parentElement)){const e=document.querySelectorAll(o);if(1!==e.length)throw Error(`Invalid target parent: found ${e.length} matches`);e[0].appendChild(t)}}for(const n of r)t[n]=e.value[n];return null}throw Error(`unknown request ${e.type}`)}i.transferHandlers.set("WORKERSQLPROXIES",{canHandle:e=>!1,serialize(e){throw Error("no")},deserialize:e=>(e.start(),i.wrap(e))}),t.createDbWorker=async function(e,t,r,n=1/0){const o=new Worker(t),a=i.wrap(o),l=await a.SplitFileHttpDatabase(r,e,void 0,n);return o.addEventListener("message",s),{db:l,worker:a,configs:e,release:()=>{l[i.releaseProxy](),a[i.releaseProxy](),o.terminate()}}}},432:function(e,t,r){var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(162),t)},375:(e,t,r)=>{r.r(t),r.d(t,{createEndpoint:()=>o,expose:()=>c,proxy:()=>y,proxyMarker:()=>n,releaseProxy:()=>a,transfer:()=>g,transferHandlers:()=>l,windowEndpoint:()=>w,wrap:()=>d});const n=Symbol("Comlink.proxy"),o=Symbol("Comlink.endpoint"),a=Symbol("Comlink.releaseProxy"),i=Symbol("Comlink.thrown"),s=e=>"object"==typeof e&&null!==e||"function"==typeof e,l=new Map([["proxy",{canHandle:e=>s(e)&&e[n],serialize(e){const{port1:t,port2:r}=new MessageChannel;return c(e,t),[r,[r]]},deserialize:e=>(e.start(),d(e))}],["throw",{canHandle:e=>s(e)&&i in e,serialize({value:e}){let t;return t=e instanceof Error?{isError:!0,value:{message:e.message,name:e.name,stack:e.stack}}:{isError:!1,value:e},[t,[]]},deserialize(e){if(e.isError)throw Object.assign(new Error(e.value.message),e.value);throw e.value}}]]);function c(e,t=self){t.addEventListener("message",(function r(n){if(!n||!n.data)return;const{id:o,type:a,path:s}=Object.assign({path:[]},n.data),l=(n.data.argumentList||[]).map(b);let d;try{const t=s.slice(0,-1).reduce(((e,t)=>e[t]),e),r=s.reduce(((e,t)=>e[t]),e);switch(a){case 0:d=r;break;case 1:t[s.slice(-1)[0]]=b(n.data.value),d=!0;break;case 2:d=r.apply(t,l);break;case 3:d=y(new r(...l));break;case 4:{const{port1:t,port2:r}=new MessageChannel;c(e,r),d=g(t,[t])}break;case 5:d=void 0}}catch(e){d={value:e,[i]:0}}Promise.resolve(d).catch((e=>({value:e,[i]:0}))).then((e=>{const[n,i]=v(e);t.postMessage(Object.assign(Object.assign({},n),{id:o}),i),5===a&&(t.removeEventListener("message",r),u(t))}))})),t.start&&t.start()}function u(e){(function(e){return"MessagePort"===e.constructor.name})(e)&&e.close()}function d(e,t){return p(e,[],t)}function f(e){if(e)throw new Error("Proxy has been released and is not useable")}function p(e,t=[],r=function(){}){let n=!1;const i=new Proxy(r,{get(r,o){if(f(n),o===a)return()=>E(e,{type:5,path:t.map((e=>e.toString()))}).then((()=>{u(e),n=!0}));if("then"===o){if(0===t.length)return{then:()=>i};const r=E(e,{type:0,path:t.map((e=>e.toString()))}).then(b);return r.then.bind(r)}return p(e,[...t,o])},set(r,o,a){f(n);const[i,s]=v(a);return E(e,{type:1,path:[...t,o].map((e=>e.toString())),value:i},s).then(b)},apply(r,a,i){f(n);const s=t[t.length-1];if(s===o)return E(e,{type:4}).then(b);if("bind"===s)return p(e,t.slice(0,-1));const[l,c]=m(i);return E(e,{type:2,path:t.map((e=>e.toString())),argumentList:l},c).then(b)},construct(r,o){f(n);const[a,i]=m(o);return E(e,{type:3,path:t.map((e=>e.toString())),argumentList:a},i).then(b)}});return i}function m(e){const t=e.map(v);return[t.map((e=>e[0])),(r=t.map((e=>e[1])),Array.prototype.concat.apply([],r))];var r}const h=new WeakMap;function g(e,t){return h.set(e,t),e}function y(e){return Object.assign(e,{[n]:!0})}function w(e,t=self,r="*"){return{postMessage:(t,n)=>e.postMessage(t,r,n),addEventListener:t.addEventListener.bind(t),removeEventListener:t.removeEventListener.bind(t)}}function v(e){for(const[t,r]of l)if(r.canHandle(e)){const[n,o]=r.serialize(e);return[{type:3,name:t,value:n},o]}return[{type:0,value:e},h.get(e)||[]]}function b(e){switch(e.type){case 3:return l.get(e.name).deserialize(e.value);case 0:return e.value}}function E(e,t,r){return new Promise((n=>{const o=new Array(4).fill(0).map((()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16))).join("-");e.addEventListener("message",(function t(r){r.data&&r.data.id&&r.data.id===o&&(e.removeEventListener("message",t),n(r.data))})),e.start&&e.start(),e.postMessage(Object.assign({id:o},t),r)}))}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={exports:{}};return e[n].call(a.exports,a,a.exports,r),a.exports}return r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(432)})(),e.exports=t()},8266:(e,t,r)=>{"use strict";r.d(t,{Z:()=>a});var n=r(6841);class o extends n.Z{constructor(e){let t;t=void 0!==(e=e||{}).attributions?e.attributions:['&#169; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors.'];const r=void 0!==e.crossOrigin?e.crossOrigin:"anonymous",n=void 0!==e.url?e.url:"https://tile.openstreetmap.org/{z}/{x}/{y}.png";super({attributions:t,attributionsCollapsible:!1,cacheSize:e.cacheSize,crossOrigin:r,interpolate:e.interpolate,maxZoom:void 0!==e.maxZoom?e.maxZoom:19,opaque:void 0===e.opaque||e.opaque,reprojectionErrorThreshold:e.reprojectionErrorThreshold,tileLoadFunction:e.tileLoadFunction,transition:e.transition,url:n,wrapX:e.wrapX,zDirection:e.zDirection})}}const a=o}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,