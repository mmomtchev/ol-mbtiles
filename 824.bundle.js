"use strict";(self.webpackChunkol_mbtiles=self.webpackChunkol_mbtiles||[]).push([[824],{4824:(e,o,t)=>{t.r(o),t.d(o,{default:()=>p});var n=t(8854),r=t(8266),i=t(2479),l=t(9090),s=t(9731),a=t(6263),c=t(8661),d=t(5686),u=t(5917),h=function(e,o,t,n){return new(t||(t=Promise))((function(r,i){function l(e){try{a(n.next(e))}catch(e){i(e)}}function s(e){try{a(n.throw(e))}catch(e){i(e)}}function a(e){var o;e.done?r(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(l,s)}a((n=n.apply(e,o||[])).next())}))};function p(){return h(this,void 0,void 0,(function*(){return new n.Z({target:"map",layers:[new i.Z({source:new r.Z}),new i.Z({source:new a.Z}),new s.Z({source:new d.H5(yield(0,d.ri)({url:"https://velivole.b-cdn.net/mbtiles/place/0.mbtiles"})),style:u.y8.bind(null,0),renderBuffer:1024,minZoom:6}),new s.Z({source:new d.H5(yield(0,d.ri)({url:"https://velivole.b-cdn.net/mbtiles/place/1.mbtiles"})),style:u.y8.bind(null,1),renderBuffer:256,minZoom:8}),new s.Z({source:new d.H5(yield(0,d.ri)({url:"https://velivole.b-cdn.net/mbtiles/place/2.mbtiles"})),style:u.y8.bind(null,2),minZoom:10})],view:new l.ZP({center:(0,c.mi)([6,45]),zoom:8})})}))}},5917:(e,o,t)=>{t.d(o,{Hh:()=>Z,Xu:()=>h,d_:()=>p,kY:()=>c,oj:()=>w,xl:()=>m,y8:()=>a});var n=t(7539),r=t(283),i=t(1345),l=t(8958),s=t(1280);function a(e,o){let t,a;switch(e){case 0:t=6,a="2em";break;case 1:t=5,a="1.2em";break;case 2:t=3,a="0.8em";break;default:t=1,a="0.5em"}a+=" helvetica, sans-serif";const c="#00007f";return new n.ZP({image:new r.Z({fill:new i.Z({color:c}),radius:t,stroke:new l.Z({color:c,width:t})}),text:new s.Z({font:a,text:o.get("n"),fill:new i.Z({color:"#ffffff"}),stroke:new l.Z({color:c,width:2})})})}const c=new n.ZP({stroke:new l.Z({color:"blue",width:2})}),d={},u={motorway:"#776",trunk:"#ccb",highway:"#f39"},h=new n.ZP({fill:new i.Z({color:"#666"}),stroke:new l.Z({color:"#444",width:1})}),p=new n.ZP({fill:new i.Z({color:"#9db9e8"})}),w=new n.ZP({stroke:new l.Z({color:"#8B008B",width:2})}),m=function(e){const o=e.get("class"),t=e.get("railway"),r=e.get("sort_key"),i=o+"/"+t+"/"+r;let s=d[i];if(!s){let e,a;t?(e="#7de",a=1):(e=u[o],a="highway"==o?1.5:1),s=new n.ZP({stroke:new l.Z({color:e,width:a}),zIndex:r}),d[i]=s}return s},f=new n.ZP({image:new r.Z({radius:5,fill:new i.Z({color:"#000080"})})}),v=new l.Z({color:"white",width:2}),Z=function(e){if("country"==e.get("class"))return null;if(e.get("name")){const o=f.clone();return o.setText(new s.Z({text:e.get("name"),offsetY:-5,font:"bold 16px sans-serif",stroke:v})),o}return null}},5686:(e,o,t)=>{t.d(o,{Yr:()=>P,H5:()=>b,ri:()=>u});var n,r=t(9759),i=t(8661),l=t(8641),s=t(8738);const a="undefined"!=typeof OL_MBTILES_DEBUG&&OL_MBTILES_DEBUG||"undefined"!=typeof process&&void 0!==(null===(n=null===process||void 0===process?void 0:process.env)||void 0===n?void 0:n.OL_MBTILES_DEBUG)&&process.env.OL_MBTILES_DEBUG?console.debug.bind(console):()=>{},c={jpg:"raster",png:"raster",webp:"raster",pbf:"vector",mvt:"vector"};function d(e){var o,t,n;return{workers:null!==(o=null==e?void 0:e.sqlWorkers)&&void 0!==o?o:4,httpOptions:{maxPageSize:null!==(t=null==e?void 0:e.maxSqlPageSize)&&void 0!==t?t:4096,cacheSize:null!==(n=null==e?void 0:e.sqlCacheSize)&&void 0!==n?n:4096}}}function u(e){const o=(0,r.he)(d(e)).then((o=>o.open(e.url).then((()=>o))));return o.then((e=>e.exec("SELECT name,value FROM metadata"))).then((e=>{if(e&&e.length){const o=e.reduce(((e,o)=>(e[o.row[0]]=o.row[1],e)),{});return a("Loaded metadata",o),o}throw new Error("Could not load metadata")})).then((t=>{var n,r,a,d,u,h,p,w;const m=Object.assign({},e),f=null===(r=null===(n=t.format)||void 0===n?void 0:n.toLowerCase)||void 0===r?void 0:r.call(n);c[f]||console.warn("Unknown tile format",f),m.projection=null!==(a=e.projection)&&void 0!==a?a:"EPSG:3857",m.attributions=null!==(d=t.attribution)&&void 0!==d?d:t.description,m.maxZoom=null!==(u=e.maxZoom)&&void 0!==u?u:+t.maxzoom,m.minZoom=null!==(h=e.minZoom)&&void 0!==h?h:+t.minzoom;const v=null===(w=null===(p=(0,i.U2)(m.projection))||void 0===p?void 0:p.getExtent)||void 0===w?void 0:w.call(p),Z=t.bounds,g=Z?(0,i.$A)(Z.split(",").map((e=>+e)),"EPSG:4326",m.projection):v;if("raster"===c[f]){if(void 0===m.maxZoom||void 0===m.minZoom||void 0===v)throw new Error("Cannot determine tilegrid, need minZoom, maxZoom");const e=[(0,l.dz)(v)/256];for(let o=1;o<=m.maxZoom;o++)e.push(e[e.length-1]/2);m.tileGrid=new s.Z({origin:[v[0],v[2]],extent:g,minZoom:m.minZoom,resolutions:e})}else m.extent=v;return m.pool=o,m.url=e.url,m}))}var h=t(7205),p=t(3614),w=t.n(p),m=t(8929),f=t(7885),v=t(9646),Z=t(9619),g=t(3433);class y extends v.ZP{constructor(e){var o,t,n;super(),e=e||{},this.dataProjection=new Z.Z({code:"",units:"tile-pixels"}),this.featureClass_=e.featureClass?e.featureClass:g.ZP,this.geometryName_=null!==(o=e.geometryName)&&void 0!==o?o:"Geometry",this.layers_=null!==(t=e.layers)&&void 0!==t?t:null,this.idProperty_=e.idProperty,this.extent=null!==(n=e.extent)&&void 0!==n?n:4096,this.supportedMediaTypes=["application/vnd-mbtiles"]}readFeature(e,o){const t=e.properties;let n;this.idProperty_?(n=t[this.idProperty_],delete t[this.idProperty_]):n=e.id;const r=e.loadGeometry(),i=[],l=[],s=y.MBTypes[r.length>1?"multi":"mono"][e.type];if("Unknown"===s)return null;for(let e=0;e<r.length;e++)if(0!=r[e].length){for(let o=0;o<r[e].length;o++)i.push(r[e][o].x,r[e][o].y);l.push(i.length)}const a=new this.featureClass_(s,i,l,t,n);return a.transform(null==o?void 0:o.dataProjection),a}readFeatures(e,o){const t=this.layers_,n=[],r=new m.VectorTile(new(w())(f.ZP.ungzip(e)));o=this.adaptOptions(o);const l=(0,i.U2)(null==o?void 0:o.dataProjection),s=null==o?void 0:o.extent;if(!l||!o||!s)throw new Error("Cannot determine the projection/extent");l.setWorldExtent(s),l.setExtent([0,0,this.extent,this.extent]),o.dataProjection=l;for(const e of Object.keys(r.layers)){if(t&&!t.includes(e))continue;const i=r.layers[e];for(let t=0;t<i.length;t++){const r=i.feature(t),l=this.readFeature(r,o);l.getProperties().layer=e,n.push(l)}}return n}readProjection(){return this.dataProjection}}y.MBTypes={mono:["Unknown","Point","LineString","Polygon"],multi:["Unknown","MultiPoint","MultiLineString","Polygon"]};class b extends h.Z{constructor(e){var o;if(void 0===e.url&&void 0===e.pool)throw new Error("Must specify url");super(Object.assign(Object.assign({},e),{url:void 0,format:new y({layers:e.layers}),tileUrlFunction:o=>`${e.url}#${o[0]}:${o[1]}:${o[2]}`})),this.setTileLoadFunction(this.tileLoader.bind(this)),this.pool=null!==(o=e.pool)&&void 0!==o?o:(0,r.he)(d(e)).then((o=>o.open(e.url).then((()=>o))))}tileLoader(e,o){const t=e;a("loading tile",[t.tileCoord[0],t.tileCoord[1],t.tileCoord[2]]),t.setLoader(((e,o,n)=>{this.pool.then((e=>e.exec("SELECT tile_data FROM tiles WHERE zoom_level = $zoom AND tile_column = $col AND tile_row = $row",{$zoom:t.tileCoord[0],$col:t.tileCoord[1],$row:(1<<t.tileCoord[0])-1-t.tileCoord[2]}))).then((o=>{if(o&&o[0]&&o[0].row[0]){const r=t.getFormat().readFeatures(o[0].row[0],{extent:e,featureProjection:n});return t.setFeatures(r),void t.onLoad(r,n)}throw new Error(`No data for ${t.tileCoord}`)})).catch((e=>{a(e),t.onError()}))}))}disposeInternal(){return this.pool.then((e=>e.close()))}}var x=t(928),E=t(7195);class P extends x.Z{constructor(e){var o;if(void 0===e.url&&void 0===e.pool)throw new Error("Must specify url");super(Object.assign(Object.assign({},e),{url:void 0,tileUrlFunction:o=>`${e.url}#${o[0]}:${o[1]}:${o[2]}`})),this.setTileLoadFunction(this.tileLoader.bind(this)),this.pool=null!==(o=e.pool)&&void 0!==o?o:(0,r.he)(d(e)).then((o=>o.open(e.url).then((()=>o))))}tileLoader(e,o){a("loading tile",[e.tileCoord[0],e.tileCoord[1],e.tileCoord[2]]);const t=e.getImage();this.pool.then((o=>o.exec("SELECT tile_data FROM tiles WHERE zoom_level = $zoom AND tile_column = $col AND tile_row = $row",{$zoom:e.tileCoord[0],$col:e.tileCoord[1],$row:(1<<e.tileCoord[0])-1-e.tileCoord[2]}))).then((o=>{if(!(o&&o[0]&&o[0].row[0]instanceof Uint8Array))throw new Error(`No data for ${e.tileCoord}`);{const e=new Blob([o[0].row[0]]),n=URL.createObjectURL(e);t.src=n}})).catch((o=>{a(o),e.setState(E.Z.ERROR)}))}disposeInternal(){return this.pool.then((e=>e.close()))}}},8266:(e,o,t)=>{t.d(o,{Z:()=>i});var n=t(4680);class r extends n.Z{constructor(e){let o;o=void 0!==(e=e||{}).attributions?e.attributions:['&#169; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors.'];const t=void 0!==e.crossOrigin?e.crossOrigin:"anonymous",n=void 0!==e.url?e.url:"https://tile.openstreetmap.org/{z}/{x}/{y}.png";super({attributions:o,attributionsCollapsible:!1,cacheSize:e.cacheSize,crossOrigin:t,interpolate:e.interpolate,maxZoom:void 0!==e.maxZoom?e.maxZoom:19,opaque:void 0===e.opaque||e.opaque,reprojectionErrorThreshold:e.reprojectionErrorThreshold,tileLoadFunction:e.tileLoadFunction,transition:e.transition,url:n,wrapX:e.wrapX,zDirection:e.zDirection})}}const i=r}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,