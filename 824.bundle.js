"use strict";(self.webpackChunkol_mbtiles=self.webpackChunkol_mbtiles||[]).push([[824],{4824:(e,t,o)=>{o.r(t),o.d(t,{default:()=>m});var r=o(8854),n=o(8266),i=o(2479),s=o(9090),l=o(9731),a=o(6263),c=o(8661),u=o(5901),d=o(5917);function m(){return new r.Z({target:"map",layers:[new i.Z({source:new n.Z}),new i.Z({source:new a.Z}),new l.Z({source:new u.B({url:"https://velivole.b-cdn.net/mbtiles/place/0.mbtiles"}),style:d.y8.bind(null,0),renderBuffer:1024,minZoom:6}),new l.Z({source:new u.B({url:"https://velivole.b-cdn.net/mbtiles/place/1.mbtiles"}),style:d.y8.bind(null,1),renderBuffer:256,minZoom:8}),new l.Z({source:new u.B({url:"https://velivole.b-cdn.net/mbtiles/place/2.mbtiles"}),style:d.y8.bind(null,2),minZoom:10})],view:new s.ZP({center:(0,c.mi)([6,45]),zoom:8})})}},5917:(e,t,o)=>{o.d(t,{Hh:()=>g,Xu:()=>m,d_:()=>h,kY:()=>c,oj:()=>w,xl:()=>f,y8:()=>a});var r=o(7539),n=o(283),i=o(1345),s=o(8958),l=o(1280);function a(e,t){let o,a;switch(e){case 0:o=6,a="2em";break;case 1:o=5,a="1.2em";break;case 2:o=3,a="0.8em";break;default:o=1,a="0.5em"}a+=" helvetica, sans-serif";const c="#00007f";return new r.ZP({image:new n.Z({fill:new i.Z({color:c}),radius:o,stroke:new s.Z({color:c,width:o})}),text:new l.Z({font:a,text:t.get("n"),fill:new i.Z({color:"#ffffff"}),stroke:new s.Z({color:c,width:2})})})}const c=new r.ZP({stroke:new s.Z({color:"blue",width:2})}),u={},d={motorway:"#776",trunk:"#ccb",highway:"#f39"},m=new r.ZP({fill:new i.Z({color:"#666"}),stroke:new s.Z({color:"#444",width:1})}),h=new r.ZP({fill:new i.Z({color:"#9db9e8"})}),w=new r.ZP({stroke:new s.Z({color:"#8B008B",width:2})}),f=function(e){const t=e.get("class"),o=e.get("railway"),n=e.get("sort_key"),i=t+"/"+o+"/"+n;let l=u[i];if(!l){let e,a;o?(e="#7de",a=1):(e=d[t],a="highway"==t?1.5:1),l=new r.ZP({stroke:new s.Z({color:e,width:a}),zIndex:n}),u[i]=l}return l},p=new r.ZP({image:new n.Z({radius:5,fill:new i.Z({color:"#000080"})})}),Z=new s.Z({color:"white",width:2}),g=function(e){if("country"==e.get("class"))return null;if(e.get("name")){const t=p.clone();return t.setText(new l.Z({text:e.get("name"),offsetY:-5,font:"bold 16px sans-serif",stroke:Z})),t}}},5901:(e,t,o)=>{o.d(t,{B:()=>p});var r=o(2891),n=o.n(r),i=o(7205),s=o(3614),l=o.n(s),a=o(8929),c=o(7885),u=o(9646),d=o(9619),m=o(3433),h=o(8661);class w extends u.ZP{constructor(e){var t,o,r;super(),e=e||{},this.dataProjection=new d.Z({code:"",units:"tile-pixels"}),this.featureClass_=e.featureClass?e.featureClass:m.ZP,this.geometryName_=null!==(t=e.geometryName)&&void 0!==t?t:"Geometry",this.layers_=null!==(o=e.layers)&&void 0!==o?o:null,this.idProperty_=e.idProperty,this.extent=null!==(r=e.extent)&&void 0!==r?r:4096,this.supportedMediaTypes=["application/vnd-mbtiles"]}readFeature(e,t){const o=e.properties;let r;this.idProperty_?(r=o[this.idProperty_],delete o[this.idProperty_]):r=e.id;const n=e.loadGeometry(),i=[],s=[],l=w.MBTypes[n.length>1?"multi":"mono"][e.type];if("Unknown"===l)return null;for(let e=0;e<n.length;e++)if(0!=n[e].length){for(let t=0;t<n[e].length;t++)i.push(n[e][t].x,n[e][t].y);s.push(i.length)}const a=new this.featureClass_(l,i,s,o,r);return a.transform(t.dataProjection),a}readFeatures(e,t){const o=this.layers_,r=[],n=new a.VectorTile(new(l())(c.ec(e)));t=this.adaptOptions(t);const i=(0,h.U2)(t.dataProjection);i.setWorldExtent(t.extent),i.setExtent([0,0,this.extent,this.extent]),t.dataProjection=i;for(const e of Object.keys(n.layers)){if(o&&!o.includes(e))continue;const i=n.layers[e];for(let o=0;o<i.length;o++){const n=i.feature(o),s=this.readFeature(n,t);s.getProperties().layer=e,r.push(s)}}return r}readProjection(){return this.dataProjection}}w.MBTypes={mono:["Unknown","Point","LineString","Polygon"],multi:["Unknown","MultiPoint","MultiLineString","Polygon"]};const f=null!==n()&&void 0!==n()?n():r;class p extends i.Z{constructor(e){var t,o;super(Object.assign(Object.assign({},e),{url:void 0,format:new w({layers:e.layers}),tileUrlFunction:e=>`${e[0]}:${e[1]}:${e[2]}`})),this.setTileLoadFunction(this.tileLoader.bind(this));const r={from:"inline",config:{serverMode:"full",requestChunkSize:1024,url:e.url}};this.worker=[];for(let n=0;n<(null!==(t=e.sqlWorkers)&&void 0!==t?t:4);n++)this.worker[n]=f.createDbWorker([r],p.workerUrl.toString(),p.wasmUrl.toString(),null!==(o=e.maxSingleTransfer)&&void 0!==o?o:10485760);this.currentWorker=0,this.metadata=this.worker[this.currentWorker++%this.worker.length].then((e=>e.db.query('SELECT name,value FROM metadata WHERE name="maxzoom" or name="minzoom"'))).then((t=>{if(t&&2==t.length){const o=t.reduce(((e,t)=>(e[t.name]=t.value,e)),{});return console.debug("Loaded metadata",o),e.maxZoom==o.maxzoom&&e.minZoom==o.minzoom||console.warn(`minZoom/maxZoom ${o.minzoom}/${o.maxzoom} of retrieved MBTiles do not match Openlayers configuration ${e.minZoom}/${e.maxZoom}`),o}throw new Error("Could not load metadata")})).catch((e=>(console.warn(e),null)))}tileLoader(e,t){console.debug("loading tile",[e.tileCoord[0],e.tileCoord[1],e.tileCoord[2]]),e.setLoader(((t,o,r)=>{this.worker[this.currentWorker++%this.worker.length].then((t=>t.db.query("SELECT tile_data FROM tiles WHERE zoom_level = ? AND tile_column = ? AND tile_row = ?",[e.tileCoord[0],e.tileCoord[1],(1<<e.tileCoord[0])-1-e.tileCoord[2]]))).then((o=>{if(o&&o[0]&&o[0].tile_data){const n=e.getFormat().readFeatures(o[0].tile_data,{extent:t,featureProjection:r});return e.setFeatures(n),void e.onLoad(n,r)}throw new Error(`No data for ${e.tileCoord}`)})).catch((t=>{console.warn(t),e.onError()}))}))}destroy(){for(const e of this.worker)e.then((e=>{e.release()}))}}p.workerUrl=new URL(o(421),o.b),p.wasmUrl=new URL(o(3611),o.b)},8266:(e,t,o)=>{o.d(t,{Z:()=>i});var r=o(6841);class n extends r.Z{constructor(e){let t;t=void 0!==(e=e||{}).attributions?e.attributions:['&#169; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors.'];const o=void 0!==e.crossOrigin?e.crossOrigin:"anonymous",r=void 0!==e.url?e.url:"https://tile.openstreetmap.org/{z}/{x}/{y}.png";super({attributions:t,attributionsCollapsible:!1,cacheSize:e.cacheSize,crossOrigin:o,interpolate:e.interpolate,maxZoom:void 0!==e.maxZoom?e.maxZoom:19,opaque:void 0===e.opaque||e.opaque,reprojectionErrorThreshold:e.reprojectionErrorThreshold,tileLoadFunction:e.tileLoadFunction,transition:e.transition,url:r,wrapX:e.wrapX,zDirection:e.zDirection})}}const i=n}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,