{"version":3,"file":"824.bundle.js","mappings":"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","sources":["webpack://ol-mbtiles/./examples/code/velivole.ts","webpack://ol-mbtiles/./examples/style.ts","webpack://ol-mbtiles/./src/debug.ts","webpack://ol-mbtiles/./src/mbtiles.ts","webpack://ol-mbtiles/./src/mbtiles-format.ts","webpack://ol-mbtiles/./src/mbtiles-vector-source.ts","webpack://ol-mbtiles/./src/mbtiles-raster-source.ts","webpack://ol-mbtiles/./node_modules/ol/source/OSM.js"],"sourcesContent":["import Map from 'ol/Map.js';\nimport OSM from 'ol/source/OSM.js';\nimport TileLayer from 'ol/layer/Tile.js';\nimport View from 'ol/View.js';\nimport VectorTileLayer from 'ol/layer/VectorTile';\nimport TileDebug from 'ol/source/TileDebug';\nimport { fromLonLat } from 'ol/proj';\n\nimport { importMBTiles, MBTilesVectorSource } from 'ol-mbtiles';\nimport { styleTown } from '../style';\n\nexport default async function () {\n  return new Map({\n    target: 'map',\n    layers: [\n      new TileLayer({\n        source: new OSM(),\n      }),\n      new TileLayer({\n        source: new TileDebug()\n      }),\n      new VectorTileLayer({\n        source: new MBTilesVectorSource(await importMBTiles({\n          url: 'https://velivole.b-cdn.net/mbtiles/place/0.mbtiles',\n        })),\n        style: styleTown.bind(null, 0),\n        renderBuffer: 1024,\n        minZoom: 6\n      }),\n      new VectorTileLayer({\n        source: new MBTilesVectorSource(await importMBTiles({\n          url: 'https://velivole.b-cdn.net/mbtiles/place/1.mbtiles',\n        })),\n        style: styleTown.bind(null, 1),\n        renderBuffer: 256,\n        minZoom: 8\n      }),\n      new VectorTileLayer({\n        source: new MBTilesVectorSource(await importMBTiles({\n          url: 'https://velivole.b-cdn.net/mbtiles/place/2.mbtiles',\n        })),\n        style: styleTown.bind(null, 2),\n        minZoom: 10\n      }),\n    ],\n    view: new View({\n      center: fromLonLat([6, 45]),\n      zoom: 8\n    }),\n  });\n}","import { FeatureLike } from 'ol/Feature';\nimport { Style, Text, Fill, Stroke, Circle } from 'ol/style';\n\nexport function styleTown(size: number, feature: FeatureLike): Style {\n  let width: number;\n  let font: string;\n  switch (size) {\n    case 0:\n      width = 6;\n      font = '2em';\n      break;\n    case 1:\n      width = 5;\n      font = '1.2em';\n      break;\n    case 2:\n      width = 3;\n      font = '0.8em';\n      break;\n    default:\n      width = 1;\n      font = '0.5em';\n      break;\n  }\n  font += ' helvetica, sans-serif';\n  const color1 = '#00007f';\n  const color2 = '#ffffff';\n\n  const style = new Style({\n    image: new Circle({\n      fill: new Fill({\n        color: color1,\n      }),\n      radius: width,\n      stroke: new Stroke({\n        color: color1,\n        width: width,\n      }),\n    }),\n    text: new Text({\n      font: font,\n      text: feature.get('n'),\n      fill: new Fill({\n        color: color2\n      }),\n      stroke: new Stroke({\n        color: color1,\n        width: 2\n      })\n    })\n  });\n  return style;\n}\n\nexport const styleBorder = new Style({\n  stroke: new Stroke({\n    color: 'blue',\n    width: 2\n  })\n});\n\n\n// Styles inspired from https://openlayers.org/en/latest/examples/osm-vector-tiles.html\nconst roadStyleCache: Record<string, Style> = {};\nconst roadColor: Record<string, string> = {\n  'motorway': '#776',\n  'trunk': '#ccb',\n  'highway': '#f39',\n};\nexport const buildingStyle = new Style({\n  fill: new Fill({\n    color: '#666'\n  }),\n  stroke: new Stroke({\n    color: '#444',\n    width: 1,\n  }),\n});\nexport const waterStyle = new Style({\n  fill: new Fill({\n    color: '#9db9e8',\n  }),\n});\nexport const boundaryStyle = new Style({\n  stroke: new Stroke({\n    color: '#8B008B',\n    width: 2,\n  }),\n});\nexport const roadStyle = function (feature: FeatureLike) {\n  const kind = feature.get('class');\n  const railway = feature.get('railway');\n  const sort_key = feature.get('sort_key');\n  const styleKey = kind + '/' + railway + '/' + sort_key;\n  let style = roadStyleCache[styleKey];\n  if (!style) {\n    let color, width;\n    if (railway) {\n      color = '#7de';\n      width = 1;\n    } else {\n      color = roadColor[kind];\n      width = kind == 'highway' ? 1.5 : 1;\n    }\n    style = new Style({\n      stroke: new Stroke({\n        color: color,\n        width: width,\n      }),\n      zIndex: sort_key,\n    });\n    roadStyleCache[styleKey] = style;\n  }\n  return style;\n};\nconst placeBase = new Style({\n  image: new Circle({\n    radius: 5,\n    fill: new Fill({\n      color: '#000080'\n    })\n  })\n});\nconst textStroke = new Stroke({\n  color: 'white',\n  width: 2\n});\nexport const placeStyle = function (feature: FeatureLike): Style {\n  if (feature.get('class') == 'country')\n    return null as unknown as Style;\n  if (feature.get('name')) {\n    const style = placeBase.clone();\n    style.setText(new Text({\n      text: feature.get('name'),\n      offsetY: -5,\n      font: 'bold 16px sans-serif',\n      stroke: textStroke\n    }));\n    return style;\n  }\n  return null as unknown as Style;\n};","declare const OL_MBTILES_DEBUG: string;\nconst debugEnabled = (typeof OL_MBTILES_DEBUG !== 'undefined' && OL_MBTILES_DEBUG) ||\n  (typeof process !== 'undefined' && typeof process?.env?.OL_MBTILES_DEBUG !== 'undefined' && process.env.OL_MBTILES_DEBUG);\n\nexport const debug = debugEnabled ? console.debug.bind(console) : () => undefined;\n","import { createSQLiteHTTPPool, SQLiteHTTPPool, VFSHTTP } from 'sqlite-wasm-http';\n\nimport { Options as ImageTileOptions } from 'ol/source/TileImage.js';\nimport { Options as VectorTileOptions } from 'ol/source/VectorTile.js';\nimport { get as getProjection, transformExtent } from 'ol/proj.js';\nimport { getWidth } from 'ol/extent.js';\nimport TileGrid from 'ol/tilegrid/TileGrid.js';\nimport { debug } from './debug';\n\n/**\n * Options for creating a MBTilesRasterSource\n */\nexport interface MBTilesRasterOptions extends ImageTileOptions {\n  /**\n   * Number of parallel workers to use for retrieving tiles, @default 4\n   */\n  sqlWorkers?: number;\n  /**\n   * List of layer names to selectively include, @default everything\n   */\n  layers?: string[];\n\n  tileUrlFunction?: never;\n  tileLoadFunction?: never;\n\n  /**\n   * Alternative method of specifying minZoom, mutually exclusive with tileGrid, requires explicit projection\n   */\n  minZoom?: number;\n\n  /**\n   * Alternative method of specifying minZoom, mutually exclusive with tileGrid, requires explicit projection\n   */\n  maxZoom?: number;\n\n  /**\n   * Optional tile grid, refer to the Openlayers manual\n   */\n  tileGrid?: TileGrid;\n\n  /**\n   * Optional already open SQLiteHTTP pool (mutually exclusive with url)\n   */\n  pool?: Promise<SQLiteHTTPPool>;\n}\n\n/**\n * Options for creating a MBTilesVectorSource\n */\nexport interface MBTilesVectorOptions extends VectorTileOptions {\n  /**\n   * Number of parallel workers to use for retrieving tiles, @default 4\n   */\n  sqlWorkers?: number;\n  /**\n   * List of layer names to selectively include, @default everything\n   */\n  layers?: string[];\n\n  /**\n   * Optional already open SQLiteHTTP pool (mutually exclusive with url)\n   */\n  pool?: Promise<SQLiteHTTPPool>;\n\n  tileUrlFunction?: never;\n  tileLoadFunction?: never;\n  format?: never;\n}\n\n/**\n * Shared options for all MBTiles\n */\nexport interface SQLOptions {\n  /**\n   * URL of the remote MBTiles source\n   */\n  url: string;\n  /**\n   * Number of parallel workers to use for retrieving tiles, @default 4\n   */\n  sqlWorkers?: number;\n\n  /**\n   * Maximum expected page size in bytes for SQLite3 files, @default 4096\n   */\n  maxSqlPageSize?: number;\n\n  /**\n   * Memory to use for SQLite cache in KB, @default 4096\n   */\n  sqlCacheSize?: number;\n\n  /**\n   * Use a specific backend type, @default 'shared'\n   */\n  backendType?: VFSHTTP.Options['backendType'];\n}\n\nexport type MBTilesOptions = MBTilesVectorOptions | MBTilesRasterOptions;\n\nconst formats: Record<string, 'raster' | 'vector'> = {\n  'jpg': 'raster',\n  'png': 'raster',\n  'webp': 'raster',\n  'pbf': 'vector',\n  'mvt': 'vector'\n};\n\nexport function httpPoolOptions(options?: SQLOptions) {\n  return {\n    workers: options?.sqlWorkers ?? 4,\n    httpOptions: {\n      backendType: options?.backendType,\n      maxPageSize: options?.maxSqlPageSize ?? 4096,\n      cacheSize: options?.sqlCacheSize ?? 4096\n    } as VFSHTTP.Options,\n  };\n}\n\n/**\n * Automatically import MBTiles metadata and return an options object\n * compatible with the source constructors.\n * \n * @param {(MBTilesRasterOptions | MBTilesVectorOptions) & SQLOptions} opt Any MBTiles{Raster|Vector}Source options to be overridden\n * @param {string} opt.url URL of the remote tileset\n * @returns {(MBTilesRasterOptions | MBTilesVectorOptions)}\n */\nexport function importMBTiles<T extends MBTilesOptions>(opt: SQLOptions & T): Promise<T & SQLOptions> {\n  const pool: Promise<SQLiteHTTPPool> = createSQLiteHTTPPool(httpPoolOptions(opt))\n    .then((pool) => pool.open(opt.url).then(() => pool));\n\n  return pool\n    .then((p) => p.exec('SELECT name,value FROM metadata'))\n    .then((r) => {\n      if (r && r.length) {\n        // Transform an array of form [ ['name', 'value' ], ... ] to object\n        const data = r.reduce((a, x) => {\n          a[x.row[0] as string] = x.row[1] as string;\n          return a;\n        }, {} as Record<string, string>);\n        debug('Loaded metadata', data);\n        return data;\n      }\n      throw new Error('Could not load metadata');\n    })\n    .then((md) => {\n      const opts = {...opt} as T & SQLOptions;\n\n      const format = (md['format'] as string)?.toLowerCase?.();\n      if (!formats[format])\n        console.warn('Unknown tile format', format);\n\n      // Sometimes, I wonder if Mapbox doesn't hold a patent or some\n      // other kind of investment related to everyone using 3857\n      opts.projection = opt.projection ?? 'EPSG:3857';\n      opts.attributions = (md.attribution ?? md.description) as string;\n      opts.maxZoom = opt.maxZoom ?? +md['maxzoom'];\n      opts.minZoom = opt.minZoom ?? +md['minzoom'];\n\n      const projExtent = getProjection(opts.projection)?.getExtent?.();\n      const bounds = md['bounds'] as string;\n      const extent = bounds ?\n        transformExtent(bounds.split(',').map((r) => +r), 'EPSG:4326', opts.projection) :\n        projExtent;\n\n      if (formats[format] === 'raster') {\n        if (opts.maxZoom === undefined || opts.minZoom === undefined || projExtent === undefined)\n          throw new Error('Cannot determine tilegrid, need minZoom, maxZoom');\n        const baseResolution = getWidth(projExtent) / 256;\n        const resolutions = [baseResolution];\n        for (let z = 1; z <= opts.maxZoom; z++)\n          resolutions.push(resolutions[resolutions.length - 1] / 2);\n\n        opts.tileGrid = new TileGrid({\n          origin: [projExtent[0], projExtent[2]],\n          extent,\n          minZoom: opts.minZoom,\n          resolutions\n        });\n      } else {\n        const vectorOpts = opts as MBTilesVectorOptions;\n        // Alas VectorTileSource in Openlayers does not support\n        // constraining the extent while keeping the origin\n        vectorOpts.extent = projExtent;\n      }\n      opts.pool = pool;\n      opts.url = opt.url;\n\n      return opts;\n    });\n}\n","import Protobuf from 'pbf';\nimport { VectorTile, VectorTileFeature } from '@mapbox/vector-tile';\nimport pako from 'pako';\n\nimport FeatureFormat, { ReadOptions } from 'ol/format/Feature.js';\nimport Projection from 'ol/proj/Projection.js';\nimport RenderFeature from 'ol/render/Feature.js';\nimport { FeatureLike } from 'ol/Feature.js';\nimport { get as getProjection } from 'ol/proj.js';\nimport { Type } from 'ol/geom/Geometry.js';\n\ndeclare module '@mapbox/vector-tile' {\n  interface VectorTileFeature {\n    toGeoJSON(x: number, y: number, z: number, project?: (xy: [number, number]) => [number, number]): GeoJSON.Feature;\n  }\n}\n\nexport interface Options {\n  layers?: string[];\n  featureClass?: typeof RenderFeature;\n  geometryName?: string;\n  idProperty?: string;\n  extent?: number;\n}\n\nexport class MBTilesFormat extends FeatureFormat {\n  dataProjection: Projection;\n  private featureClass_: typeof RenderFeature;\n  private geometryName_: string;\n  private layers_: string[] | null;\n  private idProperty_: string | undefined;\n  supportedMediaTypes: string[];\n  extent: number;\n  static MBTypes = {\n    mono: ['Unknown', 'Point', 'LineString', 'Polygon' ],\n    multi: ['Unknown', 'MultiPoint', 'MultiLineString', 'Polygon']\n   } as Record<'mono' | 'multi', (Type | 'Unknown')[]>;\n\n  constructor(options?: Options) {\n    super();\n\n    options = options ? options : {};\n\n    this.dataProjection = new Projection({\n      code: '',\n      units: 'tile-pixels',\n    });\n\n    this.featureClass_ = options.featureClass ? options.featureClass : RenderFeature;\n    this.geometryName_ = options.geometryName ?? 'Geometry';\n    this.layers_ = options.layers ?? null;\n    this.idProperty_ = options.idProperty;\n    this.extent = options.extent ?? 4096;\n\n    /*\n     * As this is the very first time MBTiles will be distributed by HTTP\n     * there is still no official MIME type\n     */\n    this.supportedMediaTypes = [\n      'application/vnd-mbtiles'\n    ];\n  }\n\n  readFeature(source: VectorTileFeature, options?: ReadOptions): FeatureLike {\n    const properties = source.properties;\n\n    let id: string | number;\n    if (!this.idProperty_) {\n      id = source.id;\n    } else {\n      id = properties[this.idProperty_] as string | number;\n      delete properties[this.idProperty_];\n    }\n    const points = source.loadGeometry();\n    const flatCoordinates = [] as number[];\n    const ends = [] as number[];\n\n    const type: Type | 'Unknown' = MBTilesFormat.MBTypes[points.length > 1 ? 'multi' : 'mono'][source.type];\n    if (type === 'Unknown')\n    // TODO: fix in Openlayers\n      return null as unknown as FeatureLike;\n\n    for (let i = 0; i < points.length; i++) {\n      if (points[i].length == 0)\n        continue;\n      for (let j = 0; j < points[i].length; j++) {\n        flatCoordinates.push(points[i][j].x, points[i][j].y);\n      }\n      ends.push(flatCoordinates.length);\n    }\n\n    const feature = new this.featureClass_(type, flatCoordinates, ends, properties, id);\n    feature.transform(options?.dataProjection);\n\n    return feature;\n  }\n\n  readFeatures(source: ArrayBuffer, options?: ReadOptions): FeatureLike[] {\n    const layers = this.layers_;\n\n    const features: FeatureLike[] = [];\n    const tile = new VectorTile(new Protobuf(pako.ungzip(source)));\n    options = this.adaptOptions(options);\n    const dataProjection = getProjection(options?.dataProjection);\n    const extent = options?.extent;\n    if (!dataProjection || !options || !extent)\n      throw new Error('Cannot determine the projection/extent');\n    dataProjection.setWorldExtent(extent);\n    dataProjection.setExtent([0, 0, this.extent, this.extent]);\n    options.dataProjection = dataProjection;\n\n    for (const layerName of Object.keys(tile.layers)) {\n      if (layers && !layers.includes(layerName)) {\n        continue;\n      }\n      const l = tile.layers[layerName];\n      for (let idx = 0; idx < l.length; idx++) {\n        const vectorFeature = l.feature(idx);\n        const feature = this.readFeature(vectorFeature, options);\n        feature.getProperties().layer = layerName;\n        features.push(feature);\n      }\n    }\n\n    return features;\n  }\n\n  readProjection() {\n    return this.dataProjection;\n  }\n}\n","import { createSQLiteHTTPPool, SQLiteHTTPPool } from 'sqlite-wasm-http';\n\nimport VectorTileSource from 'ol/source/VectorTile.js';\nimport VectorTile from 'ol/VectorTile.js';\nimport { TileCoord } from 'ol/tilecoord.js';\nimport Feature from 'ol/Feature.js';\nimport { Geometry } from 'ol/geom.js';\n\nimport { httpPoolOptions, MBTilesVectorOptions, SQLOptions } from './mbtiles';\nimport { MBTilesFormat } from './mbtiles-format';\nimport { debug } from './debug';\nimport Tile from 'ol/Tile';\n\n/**\n * A tile source in a remote .mbtiles file accessible by HTTP\n * \n * WARNING\n * If your application continuously creates and removes MBTilesSource\n * objects, special care must be taken to properly dispose of them.\n * An MBTilesSource creates a thread pool that the JS engine is unable to\n * automatically garbage-collect unless the dispose() method\n * is invoked.\n * If you need to dispose a map that can potentially contain\n * MBTilesSource objects, check loadExample() in\n * https://github.com/mmomtchev/ol-mbtiles/blob/main/examples/index.ts#L15\n */\nexport class MBTilesVectorSource extends VectorTileSource {\n  private pool: Promise<SQLiteHTTPPool>;\n\n  /**\n   * @param {MBTilesVectorOptions} options options\n   */\n  constructor(options: MBTilesVectorOptions & SQLOptions) {\n    if (options.url === undefined && options.pool === undefined)\n      throw new Error('Must specify url');\n\n      super({\n      ...options,\n      url: undefined,\n      format: new MBTilesFormat({\n        layers: options.layers\n      }),\n      // This is required to prevent Openlayers' cache from thinking that all tiles share the same URL\n      tileUrlFunction: (coords: TileCoord) => `${options.url}#${coords[0]}:${coords[1]}:${coords[2]}`\n    });\n\n    this.setTileLoadFunction(this.tileLoader.bind(this));\n\n    this.pool = options.pool ?? createSQLiteHTTPPool(httpPoolOptions(options))\n      .then((pool) => pool.open(options.url).then(() => pool));\n  }\n\n  private tileLoader(_tile: Tile, _url: string) {\n    // TODO fix the type in Openlayers after the war\n    const tile = _tile as VectorTile;\n    debug('loading tile', [tile.tileCoord[0], tile.tileCoord[1], tile.tileCoord[2]]);\n    tile.setLoader((extent, resolution, projection) => {\n      this.pool\n        .then((p) =>\n          p.exec(\n            'SELECT tile_data FROM tiles WHERE zoom_level = $zoom AND tile_column = $col AND tile_row = $row',\n            {\n              $zoom: tile.tileCoord[0],\n              $col: tile.tileCoord[1],\n              $row: (1 << tile.tileCoord[0]) - 1 - tile.tileCoord[2]\n            }\n          ))\n        .then((r) => {\n          if (r && r[0] && r[0].row[0]) {\n            const format = tile.getFormat();\n            const features = format.readFeatures(r[0].row[0], {\n              extent,\n              featureProjection: projection\n            }) as Feature<Geometry>[];\n            tile.setFeatures(features);\n            tile.onLoad(features, projection);\n            return;\n          }\n          throw new Error(`No data for ${tile.tileCoord}`);\n        })\n        .catch((e) => {\n          debug(e);\n          tile.onError();\n        });\n    });\n  }\n\n  disposeInternal() {\n    return this.pool.then((p) => p.close());\n  }\n}\n","import { createSQLiteHTTPPool, SQLiteHTTPPool } from 'sqlite-wasm-http';\n\nimport ImageTileSource from 'ol/source/TileImage.js';\nimport Tile from 'ol/Tile.js';\nimport ImageTile from 'ol/ImageTile.js';\nimport { TileCoord } from 'ol/tilecoord.js';\nimport TileState from 'ol/TileState.js';\n\nimport { httpPoolOptions, MBTilesRasterOptions, SQLOptions } from './mbtiles';\nimport { debug } from './debug';\n\n/**\n * A tile source in a remote .mbtiles file accessible by HTTP\n * \n * WARNING\n * If your application continuously creates and removes MBTilesSource\n * objects, special care must be taken to properly dispose of them.\n * An MBTilesSource creates a thread pool that the JS engine is unable to\n * automatically garbage-collect unless the dispose() method\n * is invoked.\n * If you need to dispose a map that can potentially contain\n * MBTilesSource objects, check loadExample() in\n * https://github.com/mmomtchev/ol-mbtiles/blob/main/examples/index.ts#L15\n */\nexport class MBTilesRasterSource extends ImageTileSource {\n  private pool: Promise<SQLiteHTTPPool>;\n\n  /**\n   * @param {MBTilesRasterOptions} options options\n   */\n  constructor(options: MBTilesRasterOptions & SQLOptions) {\n    if (options.url === undefined && options.pool === undefined)\n      throw new Error('Must specify url');\n\n    super({\n      ...options,\n      url: undefined,\n      // This is required to prevent Openlayers' cache from thinking that all tiles share the same URL\n      tileUrlFunction: (coords: TileCoord) => `${options.url}#${coords[0]}:${coords[1]}:${coords[2]}`\n    });\n\n    this.setTileLoadFunction(this.tileLoader.bind(this));\n\n    this.pool = options.pool ?? createSQLiteHTTPPool(httpPoolOptions(options))\n      .then((pool) => pool.open(options.url).then(() => pool));\n  }\n\n  // TODO fix the tile type in Openlayers\n  private tileLoader(tile: Tile, _url: string) {\n    debug('loading tile', [tile.tileCoord[0], tile.tileCoord[1], tile.tileCoord[2]]);\n    const image = (tile as ImageTile).getImage() as HTMLImageElement;\n    this.pool\n      .then((p) =>\n        p.exec(\n          'SELECT tile_data FROM tiles WHERE zoom_level = $zoom AND tile_column = $col AND tile_row = $row',\n          {\n            $zoom: tile.tileCoord[0],\n            $col: tile.tileCoord[1],\n            $row: (1 << tile.tileCoord[0]) - 1 - tile.tileCoord[2]\n          }\n        ))\n      .then((r) => {\n        if (r && r[0]) {\n          if (r[0].row[0] instanceof Uint8Array) {\n            const blob = new Blob([r[0].row[0] as Uint8Array]);\n            const imageUrl = URL.createObjectURL(blob);\n            image.src = imageUrl;\n            return;\n          }\n        }\n        throw new Error(`No data for ${tile.tileCoord}`);\n      })\n      .catch((e) => {\n        debug(e);\n        tile.setState(TileState.ERROR);\n      });\n  }\n\n  disposeInternal() {\n    return this.pool.then((p) => p.close());\n  }\n}\n","/**\n * @module ol/source/OSM\n */\n\nimport XYZ from './XYZ.js';\n\n/**\n * The attribution containing a link to the OpenStreetMap Copyright and License\n * page.\n * @const\n * @type {string}\n * @api\n */\nexport const ATTRIBUTION =\n  '&#169; ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a> ' +\n  'contributors.';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [maxZoom=19] Max zoom.\n * @property {boolean} [opaque=true] Whether the layer is opaque.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.\n * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n * @api\n */\nclass OSM extends XYZ {\n  /**\n   * @param {Options} [options] Open Street Map options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    let attributions;\n    if (options.attributions !== undefined) {\n      attributions = options.attributions;\n    } else {\n      attributions = [ATTRIBUTION];\n    }\n\n    const crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\n\n    const url =\n      options.url !== undefined\n        ? options.url\n        : 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n    super({\n      attributions: attributions,\n      attributionsCollapsible: false,\n      cacheSize: options.cacheSize,\n      crossOrigin: crossOrigin,\n      interpolate: options.interpolate,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n      opaque: options.opaque !== undefined ? options.opaque : true,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileLoadFunction: options.tileLoadFunction,\n      transition: options.transition,\n      url: url,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection,\n    });\n  }\n}\n\nexport default OSM;\n"],"names":["target","layers","source","url","style","renderBuffer","minZoom","view","center","zoom","styleTown","size","feature","width","font","color1","image","fill","color","radius","stroke","text","get","styleBorder","roadStyleCache","roadColor","buildingStyle","waterStyle","boundaryStyle","roadStyle","kind","railway","sort_key","styleKey","zIndex","placeBase","textStroke","placeStyle","clone","setText","offsetY","debug","process","env","OL_MBTILES_DEBUG","console","bind","formats","httpPoolOptions","options","workers","sqlWorkers","httpOptions","backendType","maxPageSize","maxSqlPageSize","cacheSize","sqlCacheSize","importMBTiles","opt","pool","then","open","p","exec","r","length","data","reduce","a","x","row","Error","md","opts","format","toLowerCase","warn","projection","attributions","attribution","description","maxZoom","projExtent","getExtent","bounds","extent","split","map","undefined","resolutions","z","push","tileGrid","TileGrid","origin","MBTilesFormat","Feature","constructor","super","this","dataProjection","Projection","code","units","featureClass_","featureClass","geometryName_","geometryName","layers_","idProperty_","idProperty","supportedMediaTypes","readFeature","properties","id","points","loadGeometry","flatCoordinates","ends","type","MBTypes","i","j","y","transform","readFeatures","features","tile","VectorTile","adaptOptions","setWorldExtent","setExtent","layerName","Object","keys","includes","l","idx","vectorFeature","getProperties","layer","readProjection","mono","multi","MBTilesVectorSource","tileUrlFunction","coords","setTileLoadFunction","tileLoader","_tile","_url","tileCoord","setLoader","resolution","$zoom","$col","$row","getFormat","featureProjection","setFeatures","onLoad","catch","e","onError","disposeInternal","close","MBTilesRasterSource","getImage","Uint8Array","blob","Blob","imageUrl","URL","createObjectURL","src","setState","TileState","OSM","crossOrigin","attributionsCollapsible","interpolate","opaque","reprojectionErrorThreshold","tileLoadFunction","transition","wrapX","zDirection"],"sourceRoot":""}