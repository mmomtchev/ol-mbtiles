(self.webpackChunkol_mbtiles=self.webpackChunkol_mbtiles||[]).push([[731],{2582:function(t){t.exports=function(){"use strict";function t(t,s,n,o,r){!function t(i,s,n,o,r){for(;o>n;){if(o-n>600){var a=o-n+1,h=s-n+1,l=Math.log(a),c=.5*Math.exp(2*l/3),g=.5*Math.sqrt(l*c*(a-c)/a)*(h-a/2<0?-1:1);t(i,s,Math.max(n,Math.floor(s-h*c/a+g)),Math.min(o,Math.floor(s+(a-h)*c/a+g)),r)}var d=i[s],u=n,_=o;for(e(i,n,s),r(i[o],d)>0&&e(i,n,o);u<_;){for(e(i,u,_),u++,_--;r(i[u],d)<0;)u++;for(;r(i[_],d)>0;)_--}0===r(i[n],d)?e(i,n,_):e(i,++_,o),_<=s&&(n=_+1),s<=_&&(o=_-1)}}(t,s,n||0,o||t.length-1,r||i)}function e(t,e,i){var s=t[e];t[e]=t[i],t[i]=s}function i(t,e){return t<e?-1:t>e?1:0}var s=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function n(t,e,i){if(!i)return e.indexOf(t);for(var s=0;s<e.length;s++)if(i(t,e[s]))return s;return-1}function o(t,e){r(t,0,t.children.length,e,t)}function r(t,e,i,s,n){n||(n=_(null)),n.minX=1/0,n.minY=1/0,n.maxX=-1/0,n.maxY=-1/0;for(var o=e;o<i;o++){var r=t.children[o];a(n,t.leaf?s(r):r)}return n}function a(t,e){return t.minX=Math.min(t.minX,e.minX),t.minY=Math.min(t.minY,e.minY),t.maxX=Math.max(t.maxX,e.maxX),t.maxY=Math.max(t.maxY,e.maxY),t}function h(t,e){return t.minX-e.minX}function l(t,e){return t.minY-e.minY}function c(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function g(t){return t.maxX-t.minX+(t.maxY-t.minY)}function d(t,e){return t.minX<=e.minX&&t.minY<=e.minY&&e.maxX<=t.maxX&&e.maxY<=t.maxY}function u(t,e){return e.minX<=t.maxX&&e.minY<=t.maxY&&e.maxX>=t.minX&&e.maxY>=t.minY}function _(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function f(e,i,s,n,o){for(var r=[i,s];r.length;)if(!((s=r.pop())-(i=r.pop())<=n)){var a=i+Math.ceil((s-i)/n/2)*n;t(e,a,i,s,o),r.push(i,a,a,s)}}return s.prototype.all=function(){return this._all(this.data,[])},s.prototype.search=function(t){var e=this.data,i=[];if(!u(t,e))return i;for(var s=this.toBBox,n=[];e;){for(var o=0;o<e.children.length;o++){var r=e.children[o],a=e.leaf?s(r):r;u(t,a)&&(e.leaf?i.push(r):d(t,a)?this._all(r,i):n.push(r))}e=n.pop()}return i},s.prototype.collides=function(t){var e=this.data;if(!u(t,e))return!1;for(var i=[];e;){for(var s=0;s<e.children.length;s++){var n=e.children[s],o=e.leaf?this.toBBox(n):n;if(u(t,o)){if(e.leaf||d(t,o))return!0;i.push(n)}}e=i.pop()}return!1},s.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var e=0;e<t.length;e++)this.insert(t[e]);return this}var i=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===i.height)this._splitRoot(this.data,i);else{if(this.data.height<i.height){var s=this.data;this.data=i,i=s}this._insert(i,this.data.height-i.height-1,!0)}else this.data=i;return this},s.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},s.prototype.clear=function(){return this.data=_([]),this},s.prototype.remove=function(t,e){if(!t)return this;for(var i,s,o,r=this.data,a=this.toBBox(t),h=[],l=[];r||h.length;){if(r||(r=h.pop(),s=h[h.length-1],i=l.pop(),o=!0),r.leaf){var c=n(t,r.children,e);if(-1!==c)return r.children.splice(c,1),h.push(r),this._condense(h),this}o||r.leaf||!d(r,a)?s?(i++,r=s.children[i],o=!1):r=null:(h.push(r),l.push(i),i=0,s=r,r=r.children[0])}return this},s.prototype.toBBox=function(t){return t},s.prototype.compareMinX=function(t,e){return t.minX-e.minX},s.prototype.compareMinY=function(t,e){return t.minY-e.minY},s.prototype.toJSON=function(){return this.data},s.prototype.fromJSON=function(t){return this.data=t,this},s.prototype._all=function(t,e){for(var i=[];t;)t.leaf?e.push.apply(e,t.children):i.push.apply(i,t.children),t=i.pop();return e},s.prototype._build=function(t,e,i,s){var n,r=i-e+1,a=this._maxEntries;if(r<=a)return o(n=_(t.slice(e,i+1)),this.toBBox),n;s||(s=Math.ceil(Math.log(r)/Math.log(a)),a=Math.ceil(r/Math.pow(a,s-1))),(n=_([])).leaf=!1,n.height=s;var h=Math.ceil(r/a),l=h*Math.ceil(Math.sqrt(a));f(t,e,i,l,this.compareMinX);for(var c=e;c<=i;c+=l){var g=Math.min(c+l-1,i);f(t,c,g,h,this.compareMinY);for(var d=c;d<=g;d+=h){var u=Math.min(d+h-1,g);n.children.push(this._build(t,d,u,s-1))}}return o(n,this.toBBox),n},s.prototype._chooseSubtree=function(t,e,i,s){for(;s.push(e),!e.leaf&&s.length-1!==i;){for(var n=1/0,o=1/0,r=void 0,a=0;a<e.children.length;a++){var h=e.children[a],l=c(h),g=(d=t,u=h,(Math.max(u.maxX,d.maxX)-Math.min(u.minX,d.minX))*(Math.max(u.maxY,d.maxY)-Math.min(u.minY,d.minY))-l);g<o?(o=g,n=l<n?l:n,r=h):g===o&&l<n&&(n=l,r=h)}e=r||e.children[0]}var d,u;return e},s.prototype._insert=function(t,e,i){var s=i?t:this.toBBox(t),n=[],o=this._chooseSubtree(s,this.data,e,n);for(o.children.push(t),a(o,s);e>=0&&n[e].children.length>this._maxEntries;)this._split(n,e),e--;this._adjustParentBBoxes(s,n,e)},s.prototype._split=function(t,e){var i=t[e],s=i.children.length,n=this._minEntries;this._chooseSplitAxis(i,n,s);var r=this._chooseSplitIndex(i,n,s),a=_(i.children.splice(r,i.children.length-r));a.height=i.height,a.leaf=i.leaf,o(i,this.toBBox),o(a,this.toBBox),e?t[e-1].children.push(a):this._splitRoot(i,a)},s.prototype._splitRoot=function(t,e){this.data=_([t,e]),this.data.height=t.height+1,this.data.leaf=!1,o(this.data,this.toBBox)},s.prototype._chooseSplitIndex=function(t,e,i){for(var s,n,o,a,h,l,g,d=1/0,u=1/0,_=e;_<=i-e;_++){var f=r(t,0,_,this.toBBox),m=r(t,_,i,this.toBBox),x=(n=f,o=m,void 0,void 0,void 0,void 0,a=Math.max(n.minX,o.minX),h=Math.max(n.minY,o.minY),l=Math.min(n.maxX,o.maxX),g=Math.min(n.maxY,o.maxY),Math.max(0,l-a)*Math.max(0,g-h)),p=c(f)+c(m);x<d?(d=x,s=_,u=p<u?p:u):x===d&&p<u&&(u=p,s=_)}return s||i-e},s.prototype._chooseSplitAxis=function(t,e,i){var s=t.leaf?this.compareMinX:h,n=t.leaf?this.compareMinY:l;this._allDistMargin(t,e,i,s)<this._allDistMargin(t,e,i,n)&&t.children.sort(s)},s.prototype._allDistMargin=function(t,e,i,s){t.children.sort(s);for(var n=this.toBBox,o=r(t,0,e,n),h=r(t,i-e,i,n),l=g(o)+g(h),c=e;c<i-e;c++){var d=t.children[c];a(o,t.leaf?n(d):d),l+=g(o)}for(var u=i-e-1;u>=e;u--){var _=t.children[u];a(h,t.leaf?n(_):_),l+=g(h)}return l},s.prototype._adjustParentBBoxes=function(t,e,i){for(var s=i;s>=0;s--)a(e[s],t)},s.prototype._condense=function(t){for(var e=t.length-1,i=void 0;e>=0;e--)0===t[e].children.length?e>0?(i=t[e-1].children).splice(i.indexOf(t[e]),1):this.clear():o(t[e],this.toBBox)},s}()},6620:(t,e,i)=>{"use strict";i.d(e,{y:()=>n});var s=i(9706);function n(t){return Array.isArray(t)?(0,s.BB)(t):t}},9731:(t,e,i)=>{"use strict";i.d(e,{Z:()=>Wt});var s=i(1295),n=i(2582),o=i(7539),r=i(283),a=i(1345),h=i(5487),l=i(553),c=i(8443),g=i(9706),d=i(9515),u=i(208),_=i(8326),f=i(2710),m=i(8096);let x=null;class p extends u.Z{constructor(t,e,i,s,n,o){super(),this.hitDetectionImage_=null,this.image_=t,this.crossOrigin_=s,this.canvas_={},this.color_=o,this.unlisten_=null,this.imageState_=n,this.size_=i,this.src_=e,this.tainted_}initializeImage_(){this.image_=new Image,null!==this.crossOrigin_&&(this.image_.crossOrigin=this.crossOrigin_)}isTainted_(){if(void 0===this.tainted_&&this.imageState_===l.Z.LOADED){x||(x=(0,_.E4)(1,1,void 0,{willReadFrequently:!0})),x.drawImage(this.image_,0,0);try{x.getImageData(0,0,1,1),this.tainted_=!1}catch(t){x=null,this.tainted_=!0}}return!0===this.tainted_}dispatchChangeEvent_(){this.dispatchEvent(h.Z.CHANGE)}handleImageError_(){this.imageState_=l.Z.ERROR,this.unlistenImage_(),this.dispatchChangeEvent_()}handleImageLoad_(){this.imageState_=l.Z.LOADED,this.size_?(this.image_.width=this.size_[0],this.image_.height=this.size_[1]):this.size_=[this.image_.width,this.image_.height],this.unlistenImage_(),this.dispatchChangeEvent_()}getImage(t){return this.image_||this.initializeImage_(),this.replaceColor_(t),this.canvas_[t]?this.canvas_[t]:this.image_}getPixelRatio(t){return this.replaceColor_(t),this.canvas_[t]?t:1}getImageState(){return this.imageState_}getHitDetectionImage(){if(this.image_||this.initializeImage_(),!this.hitDetectionImage_)if(this.isTainted_()){const t=this.size_[0],e=this.size_[1],i=(0,_.E4)(t,e);i.fillRect(0,0,t,e),this.hitDetectionImage_=i.canvas}else this.hitDetectionImage_=this.image_;return this.hitDetectionImage_}getSize(){return this.size_}getSrc(){return this.src_}load(){if(this.imageState_===l.Z.IDLE){this.image_||this.initializeImage_(),this.imageState_=l.Z.LOADING;try{this.image_.src=this.src_}catch(t){this.handleImageError_()}this.unlisten_=(0,m.K)(this.image_,this.handleImageLoad_.bind(this),this.handleImageError_.bind(this))}}replaceColor_(t){if(!this.color_||this.canvas_[t]||this.imageState_!==l.Z.LOADED)return;const e=this.image_,i=document.createElement("canvas");i.width=Math.ceil(e.width*t),i.height=Math.ceil(e.height*t);const s=i.getContext("2d");s.scale(t,t),s.drawImage(e,0,0),s.globalCompositeOperation="multiply",s.fillStyle=(0,g.XC)(this.color_),s.fillRect(0,0,i.width/t,i.height/t),s.globalCompositeOperation="destination-in",s.drawImage(e,0,0),this.canvas_[t]=i}unlistenImage_(){this.unlisten_&&(this.unlisten_(),this.unlisten_=null)}}var S=i(4187);class y extends c.Z{constructor(t){const e=void 0!==(t=t||{}).opacity?t.opacity:1,i=void 0!==t.rotation?t.rotation:0,s=void 0!==t.scale?t.scale:1,n=void 0!==t.rotateWithView&&t.rotateWithView;super({opacity:e,rotation:i,scale:s,displacement:void 0!==t.displacement?t.displacement:[0,0],rotateWithView:n,declutterMode:t.declutterMode}),this.anchor_=void 0!==t.anchor?t.anchor:[.5,.5],this.normalizedAnchor_=null,this.anchorOrigin_=void 0!==t.anchorOrigin?t.anchorOrigin:"top-left",this.anchorXUnits_=void 0!==t.anchorXUnits?t.anchorXUnits:"fraction",this.anchorYUnits_=void 0!==t.anchorYUnits?t.anchorYUnits:"fraction",this.crossOrigin_=void 0!==t.crossOrigin?t.crossOrigin:null;const o=void 0!==t.img?t.img:null;this.imgSize_=t.imgSize;let r=t.src;(0,d.h)(!(void 0!==r&&o),4),(0,d.h)(!o||o&&this.imgSize_,5),void 0!==r&&0!==r.length||!o||(r=o.src||(0,S.sq)(o)),(0,d.h)(void 0!==r&&r.length>0,6),(0,d.h)(!((void 0!==t.width||void 0!==t.height)&&void 0!==t.scale),69);const a=void 0!==t.src?l.Z.IDLE:l.Z.LOADED;if(this.color_=void 0!==t.color?(0,g._2)(t.color):null,this.iconImage_=function(t,e,i,s,n,o){let r=f.c.get(e,s,o);return r||(r=new p(t,e,i,s,n,o),f.c.set(e,s,o,r)),r}(o,r,void 0!==this.imgSize_?this.imgSize_:null,this.crossOrigin_,a,this.color_),this.offset_=void 0!==t.offset?t.offset:[0,0],this.offsetOrigin_=void 0!==t.offsetOrigin?t.offsetOrigin:"top-left",this.origin_=null,this.size_=void 0!==t.size?t.size:null,this.width_=t.width,this.height_=t.height,void 0!==this.width_||void 0!==this.height_){const t=this.getImage(1),e=()=>{this.updateScaleFromWidthAndHeight(this.width_,this.height_)};t.width>0?this.updateScaleFromWidthAndHeight(this.width_,this.height_):t.addEventListener("load",e)}}clone(){const t=this.getScale();return new y({anchor:this.anchor_.slice(),anchorOrigin:this.anchorOrigin_,anchorXUnits:this.anchorXUnits_,anchorYUnits:this.anchorYUnits_,color:this.color_&&this.color_.slice?this.color_.slice():this.color_||void 0,crossOrigin:this.crossOrigin_,imgSize:this.imgSize_,offset:this.offset_.slice(),offsetOrigin:this.offsetOrigin_,opacity:this.getOpacity(),rotateWithView:this.getRotateWithView(),rotation:this.getRotation(),scale:Array.isArray(t)?t.slice():t,size:null!==this.size_?this.size_.slice():void 0,src:this.getSrc(),displacement:this.getDisplacement().slice(),declutterMode:this.getDeclutterMode(),width:this.width_,height:this.height_})}updateScaleFromWidthAndHeight(t,e){const i=this.getImage(1);void 0!==t&&void 0!==e?super.setScale([t/i.width,e/i.height]):void 0!==t?super.setScale([t/i.width,t/i.width]):void 0!==e?super.setScale([e/i.height,e/i.height]):super.setScale([1,1])}getAnchor(){let t=this.normalizedAnchor_;if(!t){t=this.anchor_;const e=this.getSize();if("fraction"==this.anchorXUnits_||"fraction"==this.anchorYUnits_){if(!e)return null;t=this.anchor_.slice(),"fraction"==this.anchorXUnits_&&(t[0]*=e[0]),"fraction"==this.anchorYUnits_&&(t[1]*=e[1])}if("top-left"!=this.anchorOrigin_){if(!e)return null;t===this.anchor_&&(t=this.anchor_.slice()),"top-right"!=this.anchorOrigin_&&"bottom-right"!=this.anchorOrigin_||(t[0]=-t[0]+e[0]),"bottom-left"!=this.anchorOrigin_&&"bottom-right"!=this.anchorOrigin_||(t[1]=-t[1]+e[1])}this.normalizedAnchor_=t}const e=this.getDisplacement(),i=this.getScaleArray();return[t[0]-e[0]/i[0],t[1]+e[1]/i[1]]}setAnchor(t){this.anchor_=t,this.normalizedAnchor_=null}getColor(){return this.color_}getImage(t){return this.iconImage_.getImage(t)}getPixelRatio(t){return this.iconImage_.getPixelRatio(t)}getImageSize(){return this.iconImage_.getSize()}getImageState(){return this.iconImage_.getImageState()}getHitDetectionImage(){return this.iconImage_.getHitDetectionImage()}getOrigin(){if(this.origin_)return this.origin_;let t=this.offset_;if("top-left"!=this.offsetOrigin_){const e=this.getSize(),i=this.iconImage_.getSize();if(!e||!i)return null;t=t.slice(),"top-right"!=this.offsetOrigin_&&"bottom-right"!=this.offsetOrigin_||(t[0]=i[0]-e[0]-t[0]),"bottom-left"!=this.offsetOrigin_&&"bottom-right"!=this.offsetOrigin_||(t[1]=i[1]-e[1]-t[1])}return this.origin_=t,this.origin_}getSrc(){return this.iconImage_.getSrc()}getSize(){return this.size_?this.size_:this.iconImage_.getSize()}getWidth(){return this.width_}getHeight(){return this.height_}setWidth(t){this.width_=t,this.updateScaleFromWidthAndHeight(t,this.height_)}setHeight(t){this.height_=t,this.updateScaleFromWidthAndHeight(this.width_,t)}setScale(t){super.setScale(t);const e=this.getImage(1);if(e){const i=Array.isArray(t)?t[0]:t;void 0!==i&&(this.width_=i*e.width);const s=Array.isArray(t)?t[1]:t;void 0!==s&&(this.height_=s*e.height)}}listenImageChange(t){this.iconImage_.addEventListener(h.Z.CHANGE,t)}load(){this.iconImage_.load()}unlistenImageChange(t){this.iconImage_.removeEventListener(h.Z.CHANGE,t)}}const v=y;var T=i(5393),k=i(8958),I=i(1280);function w(t){return new o.ZP({fill:C(t,""),stroke:R(t,""),text:D(t),image:O(t)})}function C(t,e){const i=t[e+"fill-color"];if(i)return new a.Z({color:i})}function R(t,e){const i=t[e+"stroke-width"],s=t[e+"stroke-color"];if(i||s)return new k.Z({width:i,color:s,lineCap:t[e+"stroke-line-cap"],lineJoin:t[e+"stroke-line-join"],lineDash:t[e+"stroke-line-dash"],lineDashOffset:t[e+"stroke-line-dash-offset"],miterLimit:t[e+"stroke-miter-limit"]})}function D(t){const e=t["text-value"];if(e)return new I.Z({text:e,font:t["text-font"],maxAngle:t["text-max-angle"],offsetX:t["text-offset-x"],offsetY:t["text-offset-y"],overflow:t["text-overflow"],placement:t["text-placement"],scale:t["text-scale"],rotateWithView:t["text-rotate-with-view"],rotation:t["text-rotation"],textAlign:t["text-align"],justify:t["text-justify"],textBaseline:t["text-baseline"],padding:t["text-padding"],fill:C(t,"text-"),backgroundFill:C(t,"text-background-"),stroke:R(t,"text-"),backgroundStroke:R(t,"text-background-")})}function O(t){const e=t["icon-src"],i=t["icon-img"];if(e||i)return new v({src:e,img:i,imgSize:t["icon-img-size"],anchor:t["icon-anchor"],anchorOrigin:t["icon-anchor-origin"],anchorXUnits:t["icon-anchor-x-units"],anchorYUnits:t["icon-anchor-y-units"],color:t["icon-color"],crossOrigin:t["icon-cross-origin"],offset:t["icon-offset"],displacement:t["icon-displacement"],opacity:t["icon-opacity"],scale:t["icon-scale"],rotation:t["icon-rotation"],rotateWithView:t["icon-rotate-with-view"],size:t["icon-size"],declutterMode:t["icon-declutter-mode"]});const s=t["shape-points"];if(s){const e="shape-";return new T.Z({points:s,fill:C(t,e),stroke:R(t,e),radius:t["shape-radius"],radius1:t["shape-radius1"],radius2:t["shape-radius2"],angle:t["shape-angle"],displacement:t["shape-displacement"],rotation:t["shape-rotation"],rotateWithView:t["shape-rotate-with-view"],scale:t["shape-scale"],declutterMode:t["shape-declutter-mode"]})}const n=t["circle-radius"];if(n){const e="circle-";return new r.Z({radius:n,fill:C(t,e),stroke:R(t,e),displacement:t["circle-displacement"],scale:t["circle-scale"],rotation:t["circle-rotation"],rotateWithView:t["circle-rotate-with-view"],declutterMode:t["circle-declutter-mode"]})}}const L="renderOrder";class M extends s.Z{constructor(t){t=t||{};const e=Object.assign({},t);delete e.style,delete e.renderBuffer,delete e.updateWhileAnimating,delete e.updateWhileInteracting,super(e),this.declutter_=void 0!==t.declutter&&t.declutter,this.renderBuffer_=void 0!==t.renderBuffer?t.renderBuffer:100,this.style_=null,this.styleFunction_=void 0,this.setStyle(t.style),this.updateWhileAnimating_=void 0!==t.updateWhileAnimating&&t.updateWhileAnimating,this.updateWhileInteracting_=void 0!==t.updateWhileInteracting&&t.updateWhileInteracting}getDeclutter(){return this.declutter_}getFeatures(t){return super.getFeatures(t)}getRenderBuffer(){return this.renderBuffer_}getRenderOrder(){return this.get(L)}getStyle(){return this.style_}getStyleFunction(){return this.styleFunction_}getUpdateWhileAnimating(){return this.updateWhileAnimating_}getUpdateWhileInteracting(){return this.updateWhileInteracting_}renderDeclutter(t){t.declutterTree||(t.declutterTree=new n(9)),this.getRenderer().renderDeclutter(t)}setRenderOrder(t){this.set(L,t)}setStyle(t){let e;if(void 0===t)e=o.yF;else if(null===t)e=null;else if("function"==typeof t)e=t;else if(t instanceof o.ZP)e=t;else if(Array.isArray(t)){const i=t.length,s=new Array(i);for(let e=0;e<i;++e){const i=t[e];i instanceof o.ZP?s[e]=i:s[e]=w(i)}e=s}else e=w(t);this.style_=e,this.styleFunction_=null===t?void 0:(0,o.J$)(this.style_),this.changed()}}const E=M,A={BEGIN_GEOMETRY:0,BEGIN_PATH:1,CIRCLE:2,CLOSE_PATH:3,CUSTOM:4,DRAW_CHARS:5,DRAW_IMAGE:6,END_GEOMETRY:7,FILL:8,MOVE_TO_LINE_TO:9,SET_FILL_STYLE:10,SET_STROKE_STYLE:11,STROKE:12},b=[A.FILL],F=[A.STROKE],W=[A.BEGIN_PATH],P=[A.CLOSE_PATH],B=A;var Y=i(8716);const G=class{drawCustom(t,e,i,s){}drawGeometry(t){}setStyle(t){}drawCircle(t,e){}drawFeature(t,e){}drawGeometryCollection(t,e){}drawLineString(t,e){}drawMultiLineString(t,e){}drawMultiPoint(t,e){}drawMultiPolygon(t,e){}drawPoint(t,e){}drawPolygon(t,e){}drawText(t,e){}setFillStrokeStyle(t,e){}setImageStyle(t,e){}setTextStyle(t,e){}};var X=i(6620),Z=i(8641),z=i(147),V=i(5537),N=i(9241);const H=class extends G{constructor(t,e,i,s){super(),this.tolerance=t,this.maxExtent=e,this.pixelRatio=s,this.maxLineWidth=0,this.resolution=i,this.beginGeometryInstruction1_=null,this.beginGeometryInstruction2_=null,this.bufferedMaxExtent_=null,this.instructions=[],this.coordinates=[],this.tmpCoordinate_=[],this.hitDetectionInstructions=[],this.state={}}applyPixelRatio(t){const e=this.pixelRatio;return 1==e?t:t.map((function(t){return t*e}))}appendFlatPointCoordinates(t,e){const i=this.getBufferedMaxExtent(),s=this.tmpCoordinate_,n=this.coordinates;let o=n.length;for(let r=0,a=t.length;r<a;r+=e)s[0]=t[r],s[1]=t[r+1],(0,Z.b8)(i,s)&&(n[o++]=s[0],n[o++]=s[1]);return o}appendFlatLineCoordinates(t,e,i,s,n,o){const r=this.coordinates;let a=r.length;const h=this.getBufferedMaxExtent();o&&(e+=s);let l=t[e],c=t[e+1];const g=this.tmpCoordinate_;let d,u,_,f=!0;for(d=e+s;d<i;d+=s)g[0]=t[d],g[1]=t[d+1],_=(0,Z.pX)(h,g),_!==u?(f&&(r[a++]=l,r[a++]=c,f=!1),r[a++]=g[0],r[a++]=g[1]):_===Y.Z.INTERSECTING?(r[a++]=g[0],r[a++]=g[1],f=!1):f=!0,l=g[0],c=g[1],u=_;return(n&&f||d===e+s)&&(r[a++]=l,r[a++]=c),a}drawCustomCoordinates_(t,e,i,s,n){for(let o=0,r=i.length;o<r;++o){const r=i[o],a=this.appendFlatLineCoordinates(t,e,r,s,!1,!1);n.push(a),e=r}return e}drawCustom(t,e,i,s){this.beginGeometry(t,e);const n=t.getType(),o=t.getStride(),r=this.coordinates.length;let a,h,l,c,g;switch(n){case"MultiPolygon":a=t.getOrientedFlatCoordinates(),c=[];const e=t.getEndss();g=0;for(let t=0,i=e.length;t<i;++t){const i=[];g=this.drawCustomCoordinates_(a,g,e[t],o,i),c.push(i)}this.instructions.push([B.CUSTOM,r,c,t,i,N.ug]),this.hitDetectionInstructions.push([B.CUSTOM,r,c,t,s||i,N.ug]);break;case"Polygon":case"MultiLineString":l=[],a="Polygon"==n?t.getOrientedFlatCoordinates():t.getFlatCoordinates(),g=this.drawCustomCoordinates_(a,0,t.getEnds(),o,l),this.instructions.push([B.CUSTOM,r,l,t,i,N.o1]),this.hitDetectionInstructions.push([B.CUSTOM,r,l,t,s||i,N.o1]);break;case"LineString":case"Circle":a=t.getFlatCoordinates(),h=this.appendFlatLineCoordinates(a,0,a.length,o,!1,!1),this.instructions.push([B.CUSTOM,r,h,t,i,N.Ml]),this.hitDetectionInstructions.push([B.CUSTOM,r,h,t,s||i,N.Ml]);break;case"MultiPoint":a=t.getFlatCoordinates(),h=this.appendFlatPointCoordinates(a,o),h>r&&(this.instructions.push([B.CUSTOM,r,h,t,i,N.Ml]),this.hitDetectionInstructions.push([B.CUSTOM,r,h,t,s||i,N.Ml]));break;case"Point":a=t.getFlatCoordinates(),this.coordinates.push(a[0],a[1]),h=this.coordinates.length,this.instructions.push([B.CUSTOM,r,h,t,i]),this.hitDetectionInstructions.push([B.CUSTOM,r,h,t,s||i])}this.endGeometry(e)}beginGeometry(t,e){this.beginGeometryInstruction1_=[B.BEGIN_GEOMETRY,e,0,t],this.instructions.push(this.beginGeometryInstruction1_),this.beginGeometryInstruction2_=[B.BEGIN_GEOMETRY,e,0,t],this.hitDetectionInstructions.push(this.beginGeometryInstruction2_)}finish(){return{instructions:this.instructions,hitDetectionInstructions:this.hitDetectionInstructions,coordinates:this.coordinates}}reverseHitDetectionInstructions(){const t=this.hitDetectionInstructions;let e;t.reverse();const i=t.length;let s,n,o=-1;for(e=0;e<i;++e)s=t[e],n=s[0],n==B.END_GEOMETRY?o=e:n==B.BEGIN_GEOMETRY&&(s[2]=e,(0,V.FZ)(this.hitDetectionInstructions,o,e),o=-1)}setFillStrokeStyle(t,e){const i=this.state;if(t){const e=t.getColor();i.fillStyle=(0,X.y)(e||z.bL)}else i.fillStyle=void 0;if(e){const t=e.getColor();i.strokeStyle=(0,X.y)(t||z.Tx);const s=e.getLineCap();i.lineCap=void 0!==s?s:z.mb;const n=e.getLineDash();i.lineDash=n?n.slice():z.X9;const o=e.getLineDashOffset();i.lineDashOffset=o||z.He;const r=e.getLineJoin();i.lineJoin=void 0!==r?r:z.rc;const a=e.getWidth();i.lineWidth=void 0!==a?a:z.yC;const h=e.getMiterLimit();i.miterLimit=void 0!==h?h:z.V4,i.lineWidth>this.maxLineWidth&&(this.maxLineWidth=i.lineWidth,this.bufferedMaxExtent_=null)}else i.strokeStyle=void 0,i.lineCap=void 0,i.lineDash=null,i.lineDashOffset=void 0,i.lineJoin=void 0,i.lineWidth=void 0,i.miterLimit=void 0}createFill(t){const e=t.fillStyle,i=[B.SET_FILL_STYLE,e];return"string"!=typeof e&&i.push(!0),i}applyStroke(t){this.instructions.push(this.createStroke(t))}createStroke(t){return[B.SET_STROKE_STYLE,t.strokeStyle,t.lineWidth*this.pixelRatio,t.lineCap,t.lineJoin,t.miterLimit,this.applyPixelRatio(t.lineDash),t.lineDashOffset*this.pixelRatio]}updateFillStyle(t,e){const i=t.fillStyle;"string"==typeof i&&t.currentFillStyle==i||(void 0!==i&&this.instructions.push(e.call(this,t)),t.currentFillStyle=i)}updateStrokeStyle(t,e){const i=t.strokeStyle,s=t.lineCap,n=t.lineDash,o=t.lineDashOffset,r=t.lineJoin,a=t.lineWidth,h=t.miterLimit;(t.currentStrokeStyle!=i||t.currentLineCap!=s||n!=t.currentLineDash&&!(0,V.fS)(t.currentLineDash,n)||t.currentLineDashOffset!=o||t.currentLineJoin!=r||t.currentLineWidth!=a||t.currentMiterLimit!=h)&&(void 0!==i&&e.call(this,t),t.currentStrokeStyle=i,t.currentLineCap=s,t.currentLineDash=n,t.currentLineDashOffset=o,t.currentLineJoin=r,t.currentLineWidth=a,t.currentMiterLimit=h)}endGeometry(t){this.beginGeometryInstruction1_[2]=this.instructions.length,this.beginGeometryInstruction1_=null,this.beginGeometryInstruction2_[2]=this.hitDetectionInstructions.length,this.beginGeometryInstruction2_=null;const e=[B.END_GEOMETRY,t];this.instructions.push(e),this.hitDetectionInstructions.push(e)}getBufferedMaxExtent(){if(!this.bufferedMaxExtent_&&(this.bufferedMaxExtent_=(0,Z.d9)(this.maxExtent),this.maxLineWidth>0)){const t=this.resolution*(this.maxLineWidth+1)/2;(0,Z.f3)(this.bufferedMaxExtent_,t,this.bufferedMaxExtent_)}return this.bufferedMaxExtent_}};var J=i(226);const q=class extends H{constructor(t,e,i,s){super(t,e,i,s)}drawFlatCoordinatess_(t,e,i,s){const n=this.state,o=void 0!==n.fillStyle,r=void 0!==n.strokeStyle,a=i.length;this.instructions.push(W),this.hitDetectionInstructions.push(W);for(let n=0;n<a;++n){const o=i[n],a=this.coordinates.length,h=this.appendFlatLineCoordinates(t,e,o,s,!0,!r),l=[B.MOVE_TO_LINE_TO,a,h];this.instructions.push(l),this.hitDetectionInstructions.push(l),r&&(this.instructions.push(P),this.hitDetectionInstructions.push(P)),e=o}return o&&(this.instructions.push(b),this.hitDetectionInstructions.push(b)),r&&(this.instructions.push(F),this.hitDetectionInstructions.push(F)),e}drawCircle(t,e){const i=this.state,s=i.fillStyle,n=i.strokeStyle;if(void 0===s&&void 0===n)return;this.setFillStrokeStyles_(),this.beginGeometry(t,e),void 0!==i.fillStyle&&this.hitDetectionInstructions.push([B.SET_FILL_STYLE,z.bL]),void 0!==i.strokeStyle&&this.hitDetectionInstructions.push([B.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,i.lineDash,i.lineDashOffset]);const o=t.getFlatCoordinates(),r=t.getStride(),a=this.coordinates.length;this.appendFlatLineCoordinates(o,0,o.length,r,!1,!1);const h=[B.CIRCLE,a];this.instructions.push(W,h),this.hitDetectionInstructions.push(W,h),void 0!==i.fillStyle&&(this.instructions.push(b),this.hitDetectionInstructions.push(b)),void 0!==i.strokeStyle&&(this.instructions.push(F),this.hitDetectionInstructions.push(F)),this.endGeometry(e)}drawPolygon(t,e){const i=this.state,s=i.fillStyle,n=i.strokeStyle;if(void 0===s&&void 0===n)return;this.setFillStrokeStyles_(),this.beginGeometry(t,e),void 0!==i.fillStyle&&this.hitDetectionInstructions.push([B.SET_FILL_STYLE,z.bL]),void 0!==i.strokeStyle&&this.hitDetectionInstructions.push([B.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,i.lineDash,i.lineDashOffset]);const o=t.getEnds(),r=t.getOrientedFlatCoordinates(),a=t.getStride();this.drawFlatCoordinatess_(r,0,o,a),this.endGeometry(e)}drawMultiPolygon(t,e){const i=this.state,s=i.fillStyle,n=i.strokeStyle;if(void 0===s&&void 0===n)return;this.setFillStrokeStyles_(),this.beginGeometry(t,e),void 0!==i.fillStyle&&this.hitDetectionInstructions.push([B.SET_FILL_STYLE,z.bL]),void 0!==i.strokeStyle&&this.hitDetectionInstructions.push([B.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,i.lineDash,i.lineDashOffset]);const o=t.getEndss(),r=t.getOrientedFlatCoordinates(),a=t.getStride();let h=0;for(let t=0,e=o.length;t<e;++t)h=this.drawFlatCoordinatess_(r,h,o[t],a);this.endGeometry(e)}finish(){this.reverseHitDetectionInstructions(),this.state=null;const t=this.tolerance;if(0!==t){const e=this.coordinates;for(let i=0,s=e.length;i<s;++i)e[i]=(0,J.uZ)(e[i],t)}return super.finish()}setFillStrokeStyles_(){const t=this.state;void 0!==t.fillStyle&&this.updateFillStyle(t,this.createFill),void 0!==t.strokeStyle&&this.updateStrokeStyle(t,this.applyStroke)}};function K(t,e,i,s,n){let o,r,a,h,l,c,g,d,u,_,f=i,m=i,x=0,p=0,S=i;for(r=i;r<s;r+=n){const i=e[r],s=e[r+1];void 0!==l&&(u=i-l,_=s-c,h=Math.sqrt(u*u+_*_),void 0!==g&&(p+=a,o=Math.acos((g*u+d*_)/(a*h)),o>t&&(p>x&&(x=p,f=S,m=r),p=0,S=r-n)),a=h,g=u,d=_),l=i,c=s}return p+=h,p>x?[S,r]:[f,m]}const U={left:0,end:0,center:.5,right:1,start:1,top:0,middle:.5,hanging:.2,alphabetic:.8,ideographic:.8,bottom:1},j={Circle:q,Default:H,Image:class extends H{constructor(t,e,i,s){super(t,e,i,s),this.hitDetectionImage_=null,this.image_=null,this.imagePixelRatio_=void 0,this.anchorX_=void 0,this.anchorY_=void 0,this.height_=void 0,this.opacity_=void 0,this.originX_=void 0,this.originY_=void 0,this.rotateWithView_=void 0,this.rotation_=void 0,this.scale_=void 0,this.width_=void 0,this.declutterMode_=void 0,this.declutterImageWithText_=void 0}drawPoint(t,e){if(!this.image_)return;this.beginGeometry(t,e);const i=t.getFlatCoordinates(),s=t.getStride(),n=this.coordinates.length,o=this.appendFlatPointCoordinates(i,s);this.instructions.push([B.DRAW_IMAGE,n,o,this.image_,this.anchorX_*this.imagePixelRatio_,this.anchorY_*this.imagePixelRatio_,Math.ceil(this.height_*this.imagePixelRatio_),this.opacity_,this.originX_*this.imagePixelRatio_,this.originY_*this.imagePixelRatio_,this.rotateWithView_,this.rotation_,[this.scale_[0]*this.pixelRatio/this.imagePixelRatio_,this.scale_[1]*this.pixelRatio/this.imagePixelRatio_],Math.ceil(this.width_*this.imagePixelRatio_),this.declutterMode_,this.declutterImageWithText_]),this.hitDetectionInstructions.push([B.DRAW_IMAGE,n,o,this.hitDetectionImage_,this.anchorX_,this.anchorY_,this.height_,this.opacity_,this.originX_,this.originY_,this.rotateWithView_,this.rotation_,this.scale_,this.width_,this.declutterMode_,this.declutterImageWithText_]),this.endGeometry(e)}drawMultiPoint(t,e){if(!this.image_)return;this.beginGeometry(t,e);const i=t.getFlatCoordinates(),s=t.getStride(),n=this.coordinates.length,o=this.appendFlatPointCoordinates(i,s);this.instructions.push([B.DRAW_IMAGE,n,o,this.image_,this.anchorX_*this.imagePixelRatio_,this.anchorY_*this.imagePixelRatio_,Math.ceil(this.height_*this.imagePixelRatio_),this.opacity_,this.originX_*this.imagePixelRatio_,this.originY_*this.imagePixelRatio_,this.rotateWithView_,this.rotation_,[this.scale_[0]*this.pixelRatio/this.imagePixelRatio_,this.scale_[1]*this.pixelRatio/this.imagePixelRatio_],Math.ceil(this.width_*this.imagePixelRatio_),this.declutterMode_,this.declutterImageWithText_]),this.hitDetectionInstructions.push([B.DRAW_IMAGE,n,o,this.hitDetectionImage_,this.anchorX_,this.anchorY_,this.height_,this.opacity_,this.originX_,this.originY_,this.rotateWithView_,this.rotation_,this.scale_,this.width_,this.declutterMode_,this.declutterImageWithText_]),this.endGeometry(e)}finish(){return this.reverseHitDetectionInstructions(),this.anchorX_=void 0,this.anchorY_=void 0,this.hitDetectionImage_=null,this.image_=null,this.imagePixelRatio_=void 0,this.height_=void 0,this.scale_=void 0,this.opacity_=void 0,this.originX_=void 0,this.originY_=void 0,this.rotateWithView_=void 0,this.rotation_=void 0,this.width_=void 0,super.finish()}setImageStyle(t,e){const i=t.getAnchor(),s=t.getSize(),n=t.getOrigin();this.imagePixelRatio_=t.getPixelRatio(this.pixelRatio),this.anchorX_=i[0],this.anchorY_=i[1],this.hitDetectionImage_=t.getHitDetectionImage(),this.image_=t.getImage(this.pixelRatio),this.height_=s[1],this.opacity_=t.getOpacity(),this.originX_=n[0],this.originY_=n[1],this.rotateWithView_=t.getRotateWithView(),this.rotation_=t.getRotation(),this.scale_=t.getScaleArray(),this.width_=s[0],this.declutterMode_=t.getDeclutterMode(),this.declutterImageWithText_=e}},LineString:class extends H{constructor(t,e,i,s){super(t,e,i,s)}drawFlatCoordinates_(t,e,i,s){const n=this.coordinates.length,o=this.appendFlatLineCoordinates(t,e,i,s,!1,!1),r=[B.MOVE_TO_LINE_TO,n,o];return this.instructions.push(r),this.hitDetectionInstructions.push(r),i}drawLineString(t,e){const i=this.state,s=i.strokeStyle,n=i.lineWidth;if(void 0===s||void 0===n)return;this.updateStrokeStyle(i,this.applyStroke),this.beginGeometry(t,e),this.hitDetectionInstructions.push([B.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,z.X9,z.He],W);const o=t.getFlatCoordinates(),r=t.getStride();this.drawFlatCoordinates_(o,0,o.length,r),this.hitDetectionInstructions.push(F),this.endGeometry(e)}drawMultiLineString(t,e){const i=this.state,s=i.strokeStyle,n=i.lineWidth;if(void 0===s||void 0===n)return;this.updateStrokeStyle(i,this.applyStroke),this.beginGeometry(t,e),this.hitDetectionInstructions.push([B.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,i.lineDash,i.lineDashOffset],W);const o=t.getEnds(),r=t.getFlatCoordinates(),a=t.getStride();let h=0;for(let t=0,e=o.length;t<e;++t)h=this.drawFlatCoordinates_(r,h,o[t],a);this.hitDetectionInstructions.push(F),this.endGeometry(e)}finish(){const t=this.state;return null!=t.lastStroke&&t.lastStroke!=this.coordinates.length&&this.instructions.push(F),this.reverseHitDetectionInstructions(),this.state=null,super.finish()}applyStroke(t){null!=t.lastStroke&&t.lastStroke!=this.coordinates.length&&(this.instructions.push(F),t.lastStroke=this.coordinates.length),t.lastStroke=0,super.applyStroke(t),this.instructions.push(W)}},Polygon:q,Text:class extends H{constructor(t,e,i,s){super(t,e,i,s),this.labels_=null,this.text_="",this.textOffsetX_=0,this.textOffsetY_=0,this.textRotateWithView_=void 0,this.textRotation_=0,this.textFillState_=null,this.fillStates={},this.textStrokeState_=null,this.strokeStates={},this.textState_={},this.textStates={},this.textKey_="",this.fillKey_="",this.strokeKey_="",this.declutterImageWithText_=void 0}finish(){const t=super.finish();return t.textStates=this.textStates,t.fillStates=this.fillStates,t.strokeStates=this.strokeStates,t}drawText(t,e){const i=this.textFillState_,s=this.textStrokeState_,n=this.textState_;if(""===this.text_||!n||!i&&!s)return;const o=this.coordinates;let r=o.length;const a=t.getType();let h=null,l=t.getStride();if("line"!==n.placement||"LineString"!=a&&"MultiLineString"!=a&&"Polygon"!=a&&"MultiPolygon"!=a){let i=n.overflow?null:[];switch(a){case"Point":case"MultiPoint":h=t.getFlatCoordinates();break;case"LineString":h=t.getFlatMidpoint();break;case"Circle":h=t.getCenter();break;case"MultiLineString":h=t.getFlatMidpoints(),l=2;break;case"Polygon":h=t.getFlatInteriorPoint(),n.overflow||i.push(h[2]/this.resolution),l=3;break;case"MultiPolygon":const e=t.getFlatInteriorPoints();h=[];for(let t=0,s=e.length;t<s;t+=3)n.overflow||i.push(e[t+2]/this.resolution),h.push(e[t],e[t+1]);if(0===h.length)return;l=2}const s=this.appendFlatPointCoordinates(h,l);if(s===r)return;if(i&&(s-r)/2!=h.length/l){let t=r/2;i=i.filter(((e,i)=>{const s=o[2*(t+i)]===h[i*l]&&o[2*(t+i)+1]===h[i*l+1];return s||--t,s}))}this.saveTextStates_(),(n.backgroundFill||n.backgroundStroke)&&(this.setFillStrokeStyle(n.backgroundFill,n.backgroundStroke),n.backgroundFill&&(this.updateFillStyle(this.state,this.createFill),this.hitDetectionInstructions.push(this.createFill(this.state))),n.backgroundStroke&&(this.updateStrokeStyle(this.state,this.applyStroke),this.hitDetectionInstructions.push(this.createStroke(this.state)))),this.beginGeometry(t,e);let c=n.padding;if(c!=z.oB&&(n.scale[0]<0||n.scale[1]<0)){let t=n.padding[0],e=n.padding[1],i=n.padding[2],s=n.padding[3];n.scale[0]<0&&(e=-e,s=-s),n.scale[1]<0&&(t=-t,i=-i),c=[t,e,i,s]}const g=this.pixelRatio;this.instructions.push([B.DRAW_IMAGE,r,s,null,NaN,NaN,NaN,1,0,0,this.textRotateWithView_,this.textRotation_,[1,1],NaN,void 0,this.declutterImageWithText_,c==z.oB?z.oB:c.map((function(t){return t*g})),!!n.backgroundFill,!!n.backgroundStroke,this.text_,this.textKey_,this.strokeKey_,this.fillKey_,this.textOffsetX_,this.textOffsetY_,i]);const d=1/g;this.hitDetectionInstructions.push([B.DRAW_IMAGE,r,s,null,NaN,NaN,NaN,1,0,0,this.textRotateWithView_,this.textRotation_,[d,d],NaN,void 0,this.declutterImageWithText_,c,!!n.backgroundFill,!!n.backgroundStroke,this.text_,this.textKey_,this.strokeKey_,this.fillKey_,this.textOffsetX_,this.textOffsetY_,i]),this.endGeometry(e)}else{if(!(0,Z.kK)(this.getBufferedMaxExtent(),t.getExtent()))return;let i;if(h=t.getFlatCoordinates(),"LineString"==a)i=[h.length];else if("MultiLineString"==a)i=t.getEnds();else if("Polygon"==a)i=t.getEnds().slice(0,1);else if("MultiPolygon"==a){const e=t.getEndss();i=[];for(let t=0,s=e.length;t<s;++t)i.push(e[t][0])}this.beginGeometry(t,e);const s=n.textAlign;let c,g=0;for(let t=0,e=i.length;t<e;++t){if(null==s){const e=K(n.maxAngle,h,g,i[t],l);g=e[0],c=e[1]}else c=i[t];for(let t=g;t<c;t+=l)o.push(h[t],h[t+1]);const e=o.length;g=i[t],this.drawChars_(r,e),r=e}this.endGeometry(e)}}saveTextStates_(){const t=this.textStrokeState_,e=this.textState_,i=this.textFillState_,s=this.strokeKey_;t&&(s in this.strokeStates||(this.strokeStates[s]={strokeStyle:t.strokeStyle,lineCap:t.lineCap,lineDashOffset:t.lineDashOffset,lineWidth:t.lineWidth,lineJoin:t.lineJoin,miterLimit:t.miterLimit,lineDash:t.lineDash}));const n=this.textKey_;n in this.textStates||(this.textStates[n]={font:e.font,textAlign:e.textAlign||z.PH,justify:e.justify,textBaseline:e.textBaseline||z.ru,scale:e.scale});const o=this.fillKey_;i&&(o in this.fillStates||(this.fillStates[o]={fillStyle:i.fillStyle}))}drawChars_(t,e){const i=this.textStrokeState_,s=this.textState_,n=this.strokeKey_,o=this.textKey_,r=this.fillKey_;this.saveTextStates_();const a=this.pixelRatio,h=U[s.textBaseline],l=this.textOffsetY_*a,c=this.text_,g=i?i.lineWidth*Math.abs(s.scale[0])/2:0;this.instructions.push([B.DRAW_CHARS,t,e,h,s.overflow,r,s.maxAngle,a,l,n,g*a,c,o,1]),this.hitDetectionInstructions.push([B.DRAW_CHARS,t,e,h,s.overflow,r,s.maxAngle,1,l,n,g,c,o,1/a])}setTextStyle(t,e){let i,s,n;if(t){const e=t.getFill();e?(s=this.textFillState_,s||(s={},this.textFillState_=s),s.fillStyle=(0,X.y)(e.getColor()||z.bL)):(s=null,this.textFillState_=s);const o=t.getStroke();if(o){n=this.textStrokeState_,n||(n={},this.textStrokeState_=n);const t=o.getLineDash(),e=o.getLineDashOffset(),i=o.getWidth(),s=o.getMiterLimit();n.lineCap=o.getLineCap()||z.mb,n.lineDash=t?t.slice():z.X9,n.lineDashOffset=void 0===e?z.He:e,n.lineJoin=o.getLineJoin()||z.rc,n.lineWidth=void 0===i?z.yC:i,n.miterLimit=void 0===s?z.V4:s,n.strokeStyle=(0,X.y)(o.getColor()||z.Tx)}else n=null,this.textStrokeState_=n;i=this.textState_;const r=t.getFont()||z.Df;(0,z.Qx)(r);const a=t.getScaleArray();i.overflow=t.getOverflow(),i.font=r,i.maxAngle=t.getMaxAngle(),i.placement=t.getPlacement(),i.textAlign=t.getTextAlign(),i.justify=t.getJustify(),i.textBaseline=t.getTextBaseline()||z.ru,i.backgroundFill=t.getBackgroundFill(),i.backgroundStroke=t.getBackgroundStroke(),i.padding=t.getPadding()||z.oB,i.scale=void 0===a?[1,1]:a;const h=t.getOffsetX(),l=t.getOffsetY(),c=t.getRotateWithView(),g=t.getRotation();this.text_=t.getText()||"",this.textOffsetX_=void 0===h?0:h,this.textOffsetY_=void 0===l?0:l,this.textRotateWithView_=void 0!==c&&c,this.textRotation_=void 0===g?0:g,this.strokeKey_=n?("string"==typeof n.strokeStyle?n.strokeStyle:(0,S.sq)(n.strokeStyle))+n.lineCap+n.lineDashOffset+"|"+n.lineWidth+n.lineJoin+n.miterLimit+"["+n.lineDash.join()+"]":"",this.textKey_=i.font+i.scale+(i.textAlign||"?")+(i.justify||"?")+(i.textBaseline||"?"),this.fillKey_=s?"string"==typeof s.fillStyle?s.fillStyle:"|"+(0,S.sq)(s.fillStyle):""}else this.text_="";this.declutterImageWithText_=e}}},$=class{constructor(t,e,i,s){this.tolerance_=t,this.maxExtent_=e,this.pixelRatio_=s,this.resolution_=i,this.buildersByZIndex_={}}finish(){const t={};for(const e in this.buildersByZIndex_){t[e]=t[e]||{};const i=this.buildersByZIndex_[e];for(const s in i){const n=i[s].finish();t[e][s]=n}}return t}getBuilder(t,e){const i=void 0!==t?t.toString():"0";let s=this.buildersByZIndex_[i];void 0===s&&(s={},this.buildersByZIndex_[i]=s);let n=s[e];return void 0===n&&(n=new(0,j[e])(this.tolerance_,this.maxExtent_,this.resolution_,this.pixelRatio_),s[e]=n),n}};var Q=i(6101),tt=i(3983),et=i(6442);function it(t,e,i,s,n,o,r,a,h,l,c,g){let d=t[e],u=t[e+1],_=0,f=0,m=0,x=0;function p(){_=d,f=u,d=t[e+=s],u=t[e+1],x+=m,m=Math.sqrt((d-_)*(d-_)+(u-f)*(u-f))}do{p()}while(e<i-s&&x+m<o);let S=0===m?0:(o-x)/m;const y=(0,tt.t7)(_,d,S),v=(0,tt.t7)(f,u,S),T=e-s,k=x,I=o+a*h(l,n,c);for(;e<i-s&&x+m<I;)p();S=0===m?0:(I-x)/m;const w=(0,tt.t7)(_,d,S),C=(0,tt.t7)(f,u,S);let R;if(g){const t=[y,v,w,C];(0,et.U1)(t,0,4,2,g,t,t),R=t[0]>t[2]}else R=y>w;const D=Math.PI,O=[],L=T+s===e;let M;if(m=0,x=k,d=t[e=T],u=t[e+1],L){p(),M=Math.atan2(u-f,d-_),R&&(M+=M>0?-D:D);const t=(w+y)/2,e=(C+v)/2;return O[0]=[t,e,(I-o)/2,M,n],O}for(let t=0,g=(n=n.replace(/\n/g," ")).length;t<g;){p();let y=Math.atan2(u-f,d-_);if(R&&(y+=y>0?-D:D),void 0!==M){let t=y-M;if(t+=t>D?-2*D:t<-D?2*D:0,Math.abs(t)>r)return null}M=y;const v=t;let T=0;for(;t<g;++t){const r=a*h(l,n[R?g-t-1:t],c);if(e+s<i&&x+m<o+T+r/2)break;T+=r}if(t===v)continue;const k=R?n.substring(g-v,g-t):n.substring(v,t);S=0===m?0:(o+T/2-x)/m;const I=(0,tt.t7)(_,d,S),w=(0,tt.t7)(f,u,S);O.push([I,w,T/2,y,k]),o+=T}return O}function st(t,e,i,s){let n=t[e],o=t[e+1],r=0;for(let a=e+s;a<i;a+=s){const e=t[a],i=t[a+1];r+=Math.sqrt((e-n)*(e-n)+(i-o)*(i-o)),n=e,o=i}return r}const nt=(0,Z.lJ)(),ot=[],rt=[],at=[],ht=[];function lt(t){return t[3].declutterBox}const ct=new RegExp("["+String.fromCharCode(1425)+"-"+String.fromCharCode(2303)+String.fromCharCode(64285)+"-"+String.fromCharCode(65023)+String.fromCharCode(65136)+"-"+String.fromCharCode(65276)+String.fromCharCode(67584)+"-"+String.fromCharCode(69631)+String.fromCharCode(124928)+"-"+String.fromCharCode(126975)+"]");function gt(t,e){return"start"!==e&&"end"!==e||ct.test(t)||(e="start"===e?"left":"right"),U[e]}function dt(t,e,i){return i>0&&t.push("\n",""),t.push(e,""),t}const ut=class{constructor(t,e,i,s){this.overlaps=i,this.pixelRatio=e,this.resolution=t,this.alignFill_,this.instructions=s.instructions,this.coordinates=s.coordinates,this.coordinateCache_={},this.renderedTransform_=(0,Q.Ue)(),this.hitDetectionInstructions=s.hitDetectionInstructions,this.pixelCoordinates_=null,this.viewRotation_=0,this.fillStates=s.fillStates||{},this.strokeStates=s.strokeStates||{},this.textStates=s.textStates||{},this.widths_={},this.labels_={}}createLabel(t,e,i,s){const n=t+e+i+s;if(this.labels_[n])return this.labels_[n];const o=s?this.strokeStates[s]:null,r=i?this.fillStates[i]:null,a=this.textStates[e],h=this.pixelRatio,l=[a.scale[0]*h,a.scale[1]*h],c=Array.isArray(t),g=a.justify?U[a.justify]:gt(Array.isArray(t)?t[0]:t,a.textAlign||z.PH),d=s&&o.lineWidth?o.lineWidth:0,u=c?t:t.split("\n").reduce(dt,[]),{width:_,height:f,widths:m,heights:x,lineWidths:p}=(0,z.Zw)(a,u),S=_+d,y=[],v=(S+2)*l[0],T=(f+d)*l[1],k={width:v<0?Math.floor(v):Math.ceil(v),height:T<0?Math.floor(T):Math.ceil(T),contextInstructions:y};1==l[0]&&1==l[1]||y.push("scale",l),s&&(y.push("strokeStyle",o.strokeStyle),y.push("lineWidth",d),y.push("lineCap",o.lineCap),y.push("lineJoin",o.lineJoin),y.push("miterLimit",o.miterLimit),y.push("setLineDash",[o.lineDash]),y.push("lineDashOffset",o.lineDashOffset)),i&&y.push("fillStyle",r.fillStyle),y.push("textBaseline","middle"),y.push("textAlign","center");const I=.5-g;let w=g*S+I*d;const C=[],R=[];let D,O=0,L=0,M=0,E=0;for(let t=0,e=u.length;t<e;t+=2){const e=u[t];if("\n"===e){L+=O,O=0,w=g*S+I*d,++E;continue}const n=u[t+1]||a.font;n!==D&&(s&&C.push("font",n),i&&R.push("font",n),D=n),O=Math.max(O,x[M]);const o=[e,w+I*m[M]+g*(m[M]-p[E]),.5*(d+O)+L];w+=m[M],s&&C.push("strokeText",o),i&&R.push("fillText",o),++M}return Array.prototype.push.apply(y,C),Array.prototype.push.apply(y,R),this.labels_[n]=k,k}replayTextBackground_(t,e,i,s,n,o,r){t.beginPath(),t.moveTo.apply(t,e),t.lineTo.apply(t,i),t.lineTo.apply(t,s),t.lineTo.apply(t,n),t.lineTo.apply(t,e),o&&(this.alignFill_=o[2],this.fill_(t)),r&&(this.setStrokeStyle_(t,r),t.stroke())}calculateImageOrLabelDimensions_(t,e,i,s,n,o,r,a,h,l,c,g,d,u,_,f){let m=i-(r*=g[0]),x=s-(a*=g[1]);const p=n+h>t?t-h:n,S=o+l>e?e-l:o,y=u[3]+p*g[0]+u[1],v=u[0]+S*g[1]+u[2],T=m-u[3],k=x-u[0];let I;return(_||0!==c)&&(ot[0]=T,ht[0]=T,ot[1]=k,rt[1]=k,rt[0]=T+y,at[0]=rt[0],at[1]=k+v,ht[1]=at[1]),0!==c?(I=(0,Q.qC)((0,Q.Ue)(),i,s,1,1,c,-i,-s),(0,Q.nn)(I,ot),(0,Q.nn)(I,rt),(0,Q.nn)(I,at),(0,Q.nn)(I,ht),(0,Z.T9)(Math.min(ot[0],rt[0],at[0],ht[0]),Math.min(ot[1],rt[1],at[1],ht[1]),Math.max(ot[0],rt[0],at[0],ht[0]),Math.max(ot[1],rt[1],at[1],ht[1]),nt)):(0,Z.T9)(Math.min(T,T+y),Math.min(k,k+v),Math.max(T,T+y),Math.max(k,k+v),nt),d&&(m=Math.round(m),x=Math.round(x)),{drawImageX:m,drawImageY:x,drawImageW:p,drawImageH:S,originX:h,originY:l,declutterBox:{minX:nt[0],minY:nt[1],maxX:nt[2],maxY:nt[3],value:f},canvasTransform:I,scale:g}}replayImageOrLabel_(t,e,i,s,n,o,r){const a=!(!o&&!r),h=s.declutterBox,l=t.canvas,c=r?r[2]*s.scale[0]/2:0;return h.minX-c<=l.width/e&&h.maxX+c>=0&&h.minY-c<=l.height/e&&h.maxY+c>=0&&(a&&this.replayTextBackground_(t,ot,rt,at,ht,o,r),(0,z._f)(t,s.canvasTransform,n,i,s.originX,s.originY,s.drawImageW,s.drawImageH,s.drawImageX,s.drawImageY,s.scale)),!0}fill_(t){if(this.alignFill_){const e=(0,Q.nn)(this.renderedTransform_,[0,0]),i=512*this.pixelRatio;t.save(),t.translate(e[0]%i,e[1]%i),t.rotate(this.viewRotation_)}t.fill(),this.alignFill_&&t.restore()}setStrokeStyle_(t,e){t.strokeStyle=e[1],t.lineWidth=e[2],t.lineCap=e[3],t.lineJoin=e[4],t.miterLimit=e[5],t.lineDashOffset=e[7],t.setLineDash(e[6])}drawLabelWithPointPlacement_(t,e,i,s){const n=this.textStates[e],o=this.createLabel(t,e,s,i),r=this.strokeStates[i],a=this.pixelRatio,h=gt(Array.isArray(t)?t[0]:t,n.textAlign||z.PH),l=U[n.textBaseline||z.ru],c=r&&r.lineWidth?r.lineWidth:0;return{label:o,anchorX:h*(o.width/a-2*n.scale[0])+2*(.5-h)*c,anchorY:l*o.height/a+2*(.5-l)*c}}execute_(t,e,i,s,n,o,r,a){let h;this.pixelCoordinates_&&(0,V.fS)(i,this.renderedTransform_)?h=this.pixelCoordinates_:(this.pixelCoordinates_||(this.pixelCoordinates_=[]),h=(0,et.vT)(this.coordinates,0,this.coordinates.length,2,i,this.pixelCoordinates_),(0,Q.lk)(this.renderedTransform_,i));let l=0;const c=s.length;let g,d,u,_,f,m,x,p,S,y,v,T,k=0,I=0,w=0,C=null,R=null;const D=this.coordinateCache_,O=this.viewRotation_,L=Math.round(1e12*Math.atan2(-i[1],i[0]))/1e12,M={context:t,pixelRatio:this.pixelRatio,resolution:this.resolution,rotation:O},E=this.instructions!=s||this.overlaps?0:200;let A,b,F,W;for(;l<c;){const i=s[l];switch(i[0]){case B.BEGIN_GEOMETRY:A=i[1],W=i[3],A.getGeometry()?void 0===r||(0,Z.kK)(r,W.getExtent())?++l:l=i[2]+1:l=i[2];break;case B.BEGIN_PATH:I>E&&(this.fill_(t),I=0),w>E&&(t.stroke(),w=0),I||w||(t.beginPath(),_=NaN,f=NaN),++l;break;case B.CIRCLE:k=i[1];const s=h[k],c=h[k+1],P=h[k+2]-s,Y=h[k+3]-c,G=Math.sqrt(P*P+Y*Y);t.moveTo(s+G,c),t.arc(s,c,G,0,2*Math.PI,!0),++l;break;case B.CLOSE_PATH:t.closePath(),++l;break;case B.CUSTOM:k=i[1],g=i[2];const X=i[3],V=i[4],N=6==i.length?i[5]:void 0;M.geometry=X,M.feature=A,l in D||(D[l]=[]);const H=D[l];N?N(h,k,g,2,H):(H[0]=h[k],H[1]=h[k+1],H.length=2),V(H,M),++l;break;case B.DRAW_IMAGE:k=i[1],g=i[2],p=i[3],d=i[4],u=i[5];let J=i[6];const q=i[7],K=i[8],j=i[9],$=i[10];let Q=i[11];const tt=i[12];let et=i[13];const nt=i[14],ot=i[15];if(!p&&i.length>=20){S=i[19],y=i[20],v=i[21],T=i[22];const t=this.drawLabelWithPointPlacement_(S,y,v,T);p=t.label,i[3]=p;const e=i[23];d=(t.anchorX-e)*this.pixelRatio,i[4]=d;const s=i[24];u=(t.anchorY-s)*this.pixelRatio,i[5]=u,J=p.height,i[6]=J,et=p.width,i[13]=et}let rt,at,ht,ct;i.length>25&&(rt=i[25]),i.length>17?(at=i[16],ht=i[17],ct=i[18]):(at=z.oB,ht=!1,ct=!1),$&&L?Q+=O:$||L||(Q-=O);let gt=0;for(;k<g;k+=2){if(rt&&rt[gt++]<et/this.pixelRatio)continue;const i=this.calculateImageOrLabelDimensions_(p.width,p.height,h[k],h[k+1],et,J,d,u,K,j,Q,tt,n,at,ht||ct,A),s=[t,e,p,i,q,ht?C:null,ct?R:null];if(a){if("none"===nt)continue;if("obstacle"===nt){a.insert(i.declutterBox);continue}{let t,e;if(ot){const i=g-k;if(!ot[i]){ot[i]=s;continue}if(t=ot[i],delete ot[i],e=lt(t),a.collides(e))continue}if(a.collides(i.declutterBox))continue;t&&(a.insert(e),this.replayImageOrLabel_.apply(this,t)),a.insert(i.declutterBox)}}this.replayImageOrLabel_.apply(this,s)}++l;break;case B.DRAW_CHARS:const dt=i[1],ut=i[2],_t=i[3],ft=i[4];T=i[5];const mt=i[6],xt=i[7],pt=i[8];v=i[9];const St=i[10];S=i[11],y=i[12];const yt=[i[13],i[13]],vt=this.textStates[y],Tt=vt.font,kt=[vt.scale[0]*xt,vt.scale[1]*xt];let It;Tt in this.widths_?It=this.widths_[Tt]:(It={},this.widths_[Tt]=It);const wt=st(h,dt,ut,2),Ct=Math.abs(kt[0])*(0,z.Kd)(Tt,S,It);if(ft||Ct<=wt){const i=this.textStates[y].textAlign,s=it(h,dt,ut,2,S,(wt-Ct)*U[i],mt,Math.abs(kt[0]),z.Kd,Tt,It,L?0:this.viewRotation_);t:if(s){const i=[];let n,o,r,h,l;if(v)for(n=0,o=s.length;n<o;++n){l=s[n],r=l[4],h=this.createLabel(r,y,"",v),d=l[2]+(kt[0]<0?-St:St),u=_t*h.height+2*(.5-_t)*St*kt[1]/kt[0]-pt;const o=this.calculateImageOrLabelDimensions_(h.width,h.height,l[0],l[1],h.width,h.height,d,u,0,0,l[3],yt,!1,z.oB,!1,A);if(a&&a.collides(o.declutterBox))break t;i.push([t,e,h,o,1,null,null])}if(T)for(n=0,o=s.length;n<o;++n){l=s[n],r=l[4],h=this.createLabel(r,y,T,""),d=l[2],u=_t*h.height-pt;const o=this.calculateImageOrLabelDimensions_(h.width,h.height,l[0],l[1],h.width,h.height,d,u,0,0,l[3],yt,!1,z.oB,!1,A);if(a&&a.collides(o.declutterBox))break t;i.push([t,e,h,o,1,null,null])}a&&a.load(i.map(lt));for(let t=0,e=i.length;t<e;++t)this.replayImageOrLabel_.apply(this,i[t])}}++l;break;case B.END_GEOMETRY:if(void 0!==o){A=i[1];const t=o(A,W);if(t)return t}++l;break;case B.FILL:E?I++:this.fill_(t),++l;break;case B.MOVE_TO_LINE_TO:for(k=i[1],g=i[2],b=h[k],F=h[k+1],m=b+.5|0,x=F+.5|0,m===_&&x===f||(t.moveTo(b,F),_=m,f=x),k+=2;k<g;k+=2)b=h[k],F=h[k+1],m=b+.5|0,x=F+.5|0,k!=g-2&&m===_&&x===f||(t.lineTo(b,F),_=m,f=x);++l;break;case B.SET_FILL_STYLE:C=i,this.alignFill_=i[2],I&&(this.fill_(t),I=0,w&&(t.stroke(),w=0)),t.fillStyle=i[1],++l;break;case B.SET_STROKE_STYLE:R=i,w&&(t.stroke(),w=0),this.setStrokeStyle_(t,i),++l;break;case B.STROKE:E?w++:t.stroke(),++l;break;default:++l}}I&&this.fill_(t),w&&t.stroke()}execute(t,e,i,s,n,o){this.viewRotation_=s,this.execute_(t,e,i,this.instructions,n,void 0,void 0,o)}executeHitDetection(t,e,i,s,n){return this.viewRotation_=i,this.execute_(t,1,e,this.hitDetectionInstructions,!0,s,n)}};var _t=i(9374);const ft=["Polygon","Circle","LineString","Image","Text","Default"],mt={},xt=class{constructor(t,e,i,s,n,o){this.maxExtent_=t,this.overlaps_=s,this.pixelRatio_=i,this.resolution_=e,this.renderBuffer_=o,this.executorsByZIndex_={},this.hitDetectionContext_=null,this.hitDetectionTransform_=(0,Q.Ue)(),this.createExecutors_(n)}clip(t,e){const i=this.getClipCoords(e);t.beginPath(),t.moveTo(i[0],i[1]),t.lineTo(i[2],i[3]),t.lineTo(i[4],i[5]),t.lineTo(i[6],i[7]),t.clip()}createExecutors_(t){for(const e in t){let i=this.executorsByZIndex_[e];void 0===i&&(i={},this.executorsByZIndex_[e]=i);const s=t[e];for(const t in s){const e=s[t];i[t]=new ut(this.resolution_,this.pixelRatio_,this.overlaps_,e)}}}hasExecutors(t){for(const e in this.executorsByZIndex_){const i=this.executorsByZIndex_[e];for(let e=0,s=t.length;e<s;++e)if(t[e]in i)return!0}return!1}forEachFeatureAtCoordinate(t,e,i,s,n,o){const r=2*(s=Math.round(s))+1,a=(0,Q.qC)(this.hitDetectionTransform_,s+.5,s+.5,1/e,-1/e,-i,-t[0],-t[1]),h=!this.hitDetectionContext_;h&&(this.hitDetectionContext_=(0,_.E4)(r,r,void 0,{willReadFrequently:!0}));const l=this.hitDetectionContext_;let c;l.canvas.width!==r||l.canvas.height!==r?(l.canvas.width=r,l.canvas.height=r):h||l.clearRect(0,0,r,r),void 0!==this.renderBuffer_&&(c=(0,Z.lJ)(),(0,Z.Wj)(c,t),(0,Z.f3)(c,e*(this.renderBuffer_+s),c));const g=function(t){if(void 0!==mt[t])return mt[t];const e=2*t+1,i=t*t,s=new Array(i+1);for(let n=0;n<=t;++n)for(let o=0;o<=t;++o){const r=n*n+o*o;if(r>i)break;let a=s[r];a||(a=[],s[r]=a),a.push(4*((t+n)*e+(t+o))+3),n>0&&a.push(4*((t-n)*e+(t+o))+3),o>0&&(a.push(4*((t+n)*e+(t-o))+3),n>0&&a.push(4*((t-n)*e+(t-o))+3))}const n=[];for(let t=0,e=s.length;t<e;++t)s[t]&&n.push(...s[t]);return mt[t]=n,n}(s);let d;function u(t,e){const i=l.getImageData(0,0,r,r).data;for(let a=0,h=g.length;a<h;a++)if(i[g[a]]>0){if(!o||"Image"!==d&&"Text"!==d||o.includes(t)){const i=(g[a]-3)/4,o=s-i%r,h=s-(i/r|0),l=n(t,e,o*o+h*h);if(l)return l}l.clearRect(0,0,r,r);break}}const f=Object.keys(this.executorsByZIndex_).map(Number);let m,x,p,S,y;for(f.sort(V.j2),m=f.length-1;m>=0;--m){const t=f[m].toString();for(p=this.executorsByZIndex_[t],x=ft.length-1;x>=0;--x)if(d=ft[x],S=p[d],void 0!==S&&(y=S.executeHitDetection(l,a,i,u,c),y))return y}}getClipCoords(t){const e=this.maxExtent_;if(!e)return null;const i=e[0],s=e[1],n=e[2],o=e[3],r=[i,s,i,o,n,o,n,s];return(0,et.vT)(r,0,8,2,t,r),r}isEmpty(){return(0,_t.x)(this.executorsByZIndex_)}execute(t,e,i,s,n,o,r){const a=Object.keys(this.executorsByZIndex_).map(Number);let h,l,c,g,d,u;for(a.sort(V.j2),this.maxExtent_&&(t.save(),this.clip(t,i)),o=o||ft,r&&a.reverse(),h=0,l=a.length;h<l;++h){const l=a[h].toString();for(d=this.executorsByZIndex_[l],c=0,g=o.length;c<g;++c)u=d[o[c]],void 0!==u&&u.execute(t,e,i,s,n,r)}this.maxExtent_&&t.restore()}};var pt=i(4708),St=i(7195),yt=i(7755),vt=i(6762);const Tt=class extends G{constructor(t,e,i,s,n,o,r){super(),this.context_=t,this.pixelRatio_=e,this.extent_=i,this.transform_=s,this.transformRotation_=s?(0,tt.FH)(Math.atan2(s[1],s[0]),10):0,this.viewRotation_=n,this.squaredTolerance_=o,this.userTransform_=r,this.contextFillState_=null,this.contextStrokeState_=null,this.contextTextState_=null,this.fillState_=null,this.strokeState_=null,this.image_=null,this.imageAnchorX_=0,this.imageAnchorY_=0,this.imageHeight_=0,this.imageOpacity_=0,this.imageOriginX_=0,this.imageOriginY_=0,this.imageRotateWithView_=!1,this.imageRotation_=0,this.imageScale_=[0,0],this.imageWidth_=0,this.text_="",this.textOffsetX_=0,this.textOffsetY_=0,this.textRotateWithView_=!1,this.textRotation_=0,this.textScale_=[0,0],this.textFillState_=null,this.textStrokeState_=null,this.textState_=null,this.pixelCoordinates_=[],this.tmpLocalTransform_=(0,Q.Ue)()}drawImages_(t,e,i,s){if(!this.image_)return;const n=(0,et.vT)(t,e,i,s,this.transform_,this.pixelCoordinates_),o=this.context_,r=this.tmpLocalTransform_,a=o.globalAlpha;1!=this.imageOpacity_&&(o.globalAlpha=a*this.imageOpacity_);let h=this.imageRotation_;0===this.transformRotation_&&(h-=this.viewRotation_),this.imageRotateWithView_&&(h+=this.viewRotation_);for(let t=0,e=n.length;t<e;t+=2){const e=n[t]-this.imageAnchorX_,i=n[t+1]-this.imageAnchorY_;if(0!==h||1!=this.imageScale_[0]||1!=this.imageScale_[1]){const t=e+this.imageAnchorX_,s=i+this.imageAnchorY_;(0,Q.qC)(r,t,s,1,1,h,-t,-s),o.setTransform.apply(o,r),o.translate(t,s),o.scale(this.imageScale_[0],this.imageScale_[1]),o.drawImage(this.image_,this.imageOriginX_,this.imageOriginY_,this.imageWidth_,this.imageHeight_,-this.imageAnchorX_,-this.imageAnchorY_,this.imageWidth_,this.imageHeight_),o.setTransform(1,0,0,1,0,0)}else o.drawImage(this.image_,this.imageOriginX_,this.imageOriginY_,this.imageWidth_,this.imageHeight_,e,i,this.imageWidth_,this.imageHeight_)}1!=this.imageOpacity_&&(o.globalAlpha=a)}drawText_(t,e,i,s){if(!this.textState_||""===this.text_)return;this.textFillState_&&this.setContextFillState_(this.textFillState_),this.textStrokeState_&&this.setContextStrokeState_(this.textStrokeState_),this.setContextTextState_(this.textState_);const n=(0,et.vT)(t,e,i,s,this.transform_,this.pixelCoordinates_),o=this.context_;let r=this.textRotation_;for(0===this.transformRotation_&&(r-=this.viewRotation_),this.textRotateWithView_&&(r+=this.viewRotation_);e<i;e+=s){const t=n[e]+this.textOffsetX_,i=n[e+1]+this.textOffsetY_;0!==r||1!=this.textScale_[0]||1!=this.textScale_[1]?(o.translate(t-this.textOffsetX_,i-this.textOffsetY_),o.rotate(r),o.translate(this.textOffsetX_,this.textOffsetY_),o.scale(this.textScale_[0],this.textScale_[1]),this.textStrokeState_&&o.strokeText(this.text_,0,0),this.textFillState_&&o.fillText(this.text_,0,0),o.setTransform(1,0,0,1,0,0)):(this.textStrokeState_&&o.strokeText(this.text_,t,i),this.textFillState_&&o.fillText(this.text_,t,i))}}moveToLineTo_(t,e,i,s,n){const o=this.context_,r=(0,et.vT)(t,e,i,s,this.transform_,this.pixelCoordinates_);o.moveTo(r[0],r[1]);let a=r.length;n&&(a-=2);for(let t=2;t<a;t+=2)o.lineTo(r[t],r[t+1]);return n&&o.closePath(),i}drawRings_(t,e,i,s){for(let n=0,o=i.length;n<o;++n)e=this.moveToLineTo_(t,e,i[n],s,!0);return e}drawCircle(t){if((0,Z.kK)(this.extent_,t.getExtent())){if(this.fillState_||this.strokeState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);const e=(0,vt.Kr)(t,this.transform_,this.pixelCoordinates_),i=e[2]-e[0],s=e[3]-e[1],n=Math.sqrt(i*i+s*s),o=this.context_;o.beginPath(),o.arc(e[0],e[1],n,0,2*Math.PI),this.fillState_&&o.fill(),this.strokeState_&&o.stroke()}""!==this.text_&&this.drawText_(t.getCenter(),0,2,2)}}setStyle(t){this.setFillStrokeStyle(t.getFill(),t.getStroke()),this.setImageStyle(t.getImage()),this.setTextStyle(t.getText())}setTransform(t){this.transform_=t}drawGeometry(t){switch(t.getType()){case"Point":this.drawPoint(t);break;case"LineString":this.drawLineString(t);break;case"Polygon":this.drawPolygon(t);break;case"MultiPoint":this.drawMultiPoint(t);break;case"MultiLineString":this.drawMultiLineString(t);break;case"MultiPolygon":this.drawMultiPolygon(t);break;case"GeometryCollection":this.drawGeometryCollection(t);break;case"Circle":this.drawCircle(t)}}drawFeature(t,e){const i=e.getGeometryFunction()(t);i&&(0,Z.kK)(this.extent_,i.getExtent())&&(this.setStyle(e),this.drawGeometry(i))}drawGeometryCollection(t){const e=t.getGeometriesArray();for(let t=0,i=e.length;t<i;++t)this.drawGeometry(e[t])}drawPoint(t){this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_));const e=t.getFlatCoordinates(),i=t.getStride();this.image_&&this.drawImages_(e,0,e.length,i),""!==this.text_&&this.drawText_(e,0,e.length,i)}drawMultiPoint(t){this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_));const e=t.getFlatCoordinates(),i=t.getStride();this.image_&&this.drawImages_(e,0,e.length,i),""!==this.text_&&this.drawText_(e,0,e.length,i)}drawLineString(t){if(this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_)),(0,Z.kK)(this.extent_,t.getExtent())){if(this.strokeState_){this.setContextStrokeState_(this.strokeState_);const e=this.context_,i=t.getFlatCoordinates();e.beginPath(),this.moveToLineTo_(i,0,i.length,t.getStride(),!1),e.stroke()}if(""!==this.text_){const e=t.getFlatMidpoint();this.drawText_(e,0,2,2)}}}drawMultiLineString(t){this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_));const e=t.getExtent();if((0,Z.kK)(this.extent_,e)){if(this.strokeState_){this.setContextStrokeState_(this.strokeState_);const e=this.context_,i=t.getFlatCoordinates();let s=0;const n=t.getEnds(),o=t.getStride();e.beginPath();for(let t=0,e=n.length;t<e;++t)s=this.moveToLineTo_(i,s,n[t],o,!1);e.stroke()}if(""!==this.text_){const e=t.getFlatMidpoints();this.drawText_(e,0,e.length,2)}}}drawPolygon(t){if(this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_)),(0,Z.kK)(this.extent_,t.getExtent())){if(this.strokeState_||this.fillState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);const e=this.context_;e.beginPath(),this.drawRings_(t.getOrientedFlatCoordinates(),0,t.getEnds(),t.getStride()),this.fillState_&&e.fill(),this.strokeState_&&e.stroke()}if(""!==this.text_){const e=t.getFlatInteriorPoint();this.drawText_(e,0,2,2)}}}drawMultiPolygon(t){if(this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_)),(0,Z.kK)(this.extent_,t.getExtent())){if(this.strokeState_||this.fillState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);const e=this.context_,i=t.getOrientedFlatCoordinates();let s=0;const n=t.getEndss(),o=t.getStride();e.beginPath();for(let t=0,e=n.length;t<e;++t){const e=n[t];s=this.drawRings_(i,s,e,o)}this.fillState_&&e.fill(),this.strokeState_&&e.stroke()}if(""!==this.text_){const e=t.getFlatInteriorPoints();this.drawText_(e,0,e.length,2)}}}setContextFillState_(t){const e=this.context_,i=this.contextFillState_;i?i.fillStyle!=t.fillStyle&&(i.fillStyle=t.fillStyle,e.fillStyle=t.fillStyle):(e.fillStyle=t.fillStyle,this.contextFillState_={fillStyle:t.fillStyle})}setContextStrokeState_(t){const e=this.context_,i=this.contextStrokeState_;i?(i.lineCap!=t.lineCap&&(i.lineCap=t.lineCap,e.lineCap=t.lineCap),(0,V.fS)(i.lineDash,t.lineDash)||e.setLineDash(i.lineDash=t.lineDash),i.lineDashOffset!=t.lineDashOffset&&(i.lineDashOffset=t.lineDashOffset,e.lineDashOffset=t.lineDashOffset),i.lineJoin!=t.lineJoin&&(i.lineJoin=t.lineJoin,e.lineJoin=t.lineJoin),i.lineWidth!=t.lineWidth&&(i.lineWidth=t.lineWidth,e.lineWidth=t.lineWidth),i.miterLimit!=t.miterLimit&&(i.miterLimit=t.miterLimit,e.miterLimit=t.miterLimit),i.strokeStyle!=t.strokeStyle&&(i.strokeStyle=t.strokeStyle,e.strokeStyle=t.strokeStyle)):(e.lineCap=t.lineCap,e.setLineDash(t.lineDash),e.lineDashOffset=t.lineDashOffset,e.lineJoin=t.lineJoin,e.lineWidth=t.lineWidth,e.miterLimit=t.miterLimit,e.strokeStyle=t.strokeStyle,this.contextStrokeState_={lineCap:t.lineCap,lineDash:t.lineDash,lineDashOffset:t.lineDashOffset,lineJoin:t.lineJoin,lineWidth:t.lineWidth,miterLimit:t.miterLimit,strokeStyle:t.strokeStyle})}setContextTextState_(t){const e=this.context_,i=this.contextTextState_,s=t.textAlign?t.textAlign:z.PH;i?(i.font!=t.font&&(i.font=t.font,e.font=t.font),i.textAlign!=s&&(i.textAlign=s,e.textAlign=s),i.textBaseline!=t.textBaseline&&(i.textBaseline=t.textBaseline,e.textBaseline=t.textBaseline)):(e.font=t.font,e.textAlign=s,e.textBaseline=t.textBaseline,this.contextTextState_={font:t.font,textAlign:s,textBaseline:t.textBaseline})}setFillStrokeStyle(t,e){if(t){const e=t.getColor();this.fillState_={fillStyle:(0,X.y)(e||z.bL)}}else this.fillState_=null;if(e){const t=e.getColor(),i=e.getLineCap(),s=e.getLineDash(),n=e.getLineDashOffset(),o=e.getLineJoin(),r=e.getWidth(),a=e.getMiterLimit(),h=s||z.X9;this.strokeState_={lineCap:void 0!==i?i:z.mb,lineDash:1===this.pixelRatio_?h:h.map((t=>t*this.pixelRatio_)),lineDashOffset:(n||z.He)*this.pixelRatio_,lineJoin:void 0!==o?o:z.rc,lineWidth:(void 0!==r?r:z.yC)*this.pixelRatio_,miterLimit:void 0!==a?a:z.V4,strokeStyle:(0,X.y)(t||z.Tx)}}else this.strokeState_=null}setImageStyle(t){let e;if(!t||!(e=t.getSize()))return void(this.image_=null);const i=t.getPixelRatio(this.pixelRatio_),s=t.getAnchor(),n=t.getOrigin();this.image_=t.getImage(this.pixelRatio_),this.imageAnchorX_=s[0]*i,this.imageAnchorY_=s[1]*i,this.imageHeight_=e[1]*i,this.imageOpacity_=t.getOpacity(),this.imageOriginX_=n[0],this.imageOriginY_=n[1],this.imageRotateWithView_=t.getRotateWithView(),this.imageRotation_=t.getRotation();const o=t.getScaleArray();this.imageScale_=[o[0]*this.pixelRatio_/i,o[1]*this.pixelRatio_/i],this.imageWidth_=e[0]*i}setTextStyle(t){if(t){const e=t.getFill();if(e){const t=e.getColor();this.textFillState_={fillStyle:(0,X.y)(t||z.bL)}}else this.textFillState_=null;const i=t.getStroke();if(i){const t=i.getColor(),e=i.getLineCap(),s=i.getLineDash(),n=i.getLineDashOffset(),o=i.getLineJoin(),r=i.getWidth(),a=i.getMiterLimit();this.textStrokeState_={lineCap:void 0!==e?e:z.mb,lineDash:s||z.X9,lineDashOffset:n||z.He,lineJoin:void 0!==o?o:z.rc,lineWidth:void 0!==r?r:z.yC,miterLimit:void 0!==a?a:z.V4,strokeStyle:(0,X.y)(t||z.Tx)}}else this.textStrokeState_=null;const s=t.getFont(),n=t.getOffsetX(),o=t.getOffsetY(),r=t.getRotateWithView(),a=t.getRotation(),h=t.getScaleArray(),l=t.getText(),c=t.getTextAlign(),g=t.getTextBaseline();this.textState_={font:void 0!==s?s:z.Df,textAlign:void 0!==c?c:z.PH,textBaseline:void 0!==g?g:z.ru},this.text_=void 0!==l?Array.isArray(l)?l.reduce(((t,e,i)=>t+(i%2?" ":e)),""):l:"",this.textOffsetX_=void 0!==n?this.pixelRatio_*n:0,this.textOffsetY_=void 0!==o?this.pixelRatio_*o:0,this.textRotateWithView_=void 0!==r&&r,this.textRotation_=void 0!==a?a:0,this.textScale_=[this.pixelRatio_*h[0],this.pixelRatio_*h[1]]}else this.text_=""}},kt=.5,It=.5,wt={Point:function(t,e,i,s,n){const o=i.getImage(),r=i.getText();let a;if(o){if(o.getImageState()!=l.Z.LOADED)return;let h=t;if(n){const l=o.getDeclutterMode();if("none"!==l)if(h=n,"obstacle"===l){const n=t.getBuilder(i.getZIndex(),"Image");n.setImageStyle(o,a),n.drawPoint(e,s)}else r&&r.getText()&&(a={})}const c=h.getBuilder(i.getZIndex(),"Image");c.setImageStyle(o,a),c.drawPoint(e,s)}if(r&&r.getText()){let o=t;n&&(o=n);const h=o.getBuilder(i.getZIndex(),"Text");h.setTextStyle(r,a),h.drawText(e,s)}},LineString:function(t,e,i,s,n){const o=i.getStroke();if(o){const n=t.getBuilder(i.getZIndex(),"LineString");n.setFillStrokeStyle(null,o),n.drawLineString(e,s)}const r=i.getText();if(r&&r.getText()){const o=(n||t).getBuilder(i.getZIndex(),"Text");o.setTextStyle(r),o.drawText(e,s)}},Polygon:function(t,e,i,s,n){const o=i.getFill(),r=i.getStroke();if(o||r){const n=t.getBuilder(i.getZIndex(),"Polygon");n.setFillStrokeStyle(o,r),n.drawPolygon(e,s)}const a=i.getText();if(a&&a.getText()){const o=(n||t).getBuilder(i.getZIndex(),"Text");o.setTextStyle(a),o.drawText(e,s)}},MultiPoint:function(t,e,i,s,n){const o=i.getImage(),r=i.getText();let a;if(o){if(o.getImageState()!=l.Z.LOADED)return;let h=t;if(n){const l=o.getDeclutterMode();if("none"!==l)if(h=n,"obstacle"===l){const n=t.getBuilder(i.getZIndex(),"Image");n.setImageStyle(o,a),n.drawMultiPoint(e,s)}else r&&r.getText()&&(a={})}const c=h.getBuilder(i.getZIndex(),"Image");c.setImageStyle(o,a),c.drawMultiPoint(e,s)}if(r&&r.getText()){let o=t;n&&(o=n);const h=o.getBuilder(i.getZIndex(),"Text");h.setTextStyle(r,a),h.drawText(e,s)}},MultiLineString:function(t,e,i,s,n){const o=i.getStroke();if(o){const n=t.getBuilder(i.getZIndex(),"LineString");n.setFillStrokeStyle(null,o),n.drawMultiLineString(e,s)}const r=i.getText();if(r&&r.getText()){const o=(n||t).getBuilder(i.getZIndex(),"Text");o.setTextStyle(r),o.drawText(e,s)}},MultiPolygon:function(t,e,i,s,n){const o=i.getFill(),r=i.getStroke();if(r||o){const n=t.getBuilder(i.getZIndex(),"Polygon");n.setFillStrokeStyle(o,r),n.drawMultiPolygon(e,s)}const a=i.getText();if(a&&a.getText()){const o=(n||t).getBuilder(i.getZIndex(),"Text");o.setTextStyle(a),o.drawText(e,s)}},GeometryCollection:function(t,e,i,s,n){const o=e.getGeometriesArray();let r,a;for(r=0,a=o.length;r<a;++r)(0,wt[o[r].getType()])(t,o[r],i,s,n)},Circle:function(t,e,i,s,n){const o=i.getFill(),r=i.getStroke();if(o||r){const n=t.getBuilder(i.getZIndex(),"Circle");n.setFillStrokeStyle(o,r),n.drawCircle(e,s)}const a=i.getText();if(a&&a.getText()){const o=(n||t).getBuilder(i.getZIndex(),"Text");o.setTextStyle(a),o.drawText(e,s)}}};function Ct(t,e){const i=function(t,e){return It*t/e}(t,e);return i*i}function Rt(t,e,i,s,n,o,r){let a=!1;const h=i.getImage();if(h){const t=h.getImageState();t==l.Z.LOADED||t==l.Z.ERROR?h.unlistenImageChange(n):(t==l.Z.IDLE&&h.load(),h.listenImageChange(n),a=!0)}return function(t,e,i,s,n,o){const r=i.getGeometryFunction()(e);if(!r)return;const a=r.simplifyTransformed(s,n);i.getRenderer()?Dt(t,a,i,e):(0,wt[a.getType()])(t,a,i,e,o)}(t,e,i,s,o,r),a}function Dt(t,e,i,s){if("GeometryCollection"!=e.getType())t.getBuilder(i.getZIndex(),"Default").drawCustom(e,s,i.getRenderer(),i.getHitDetectionRenderer());else{const n=e.getGeometries();for(let e=0,o=n.length;e<o;++e)Dt(t,n[e],i,s)}}var Ot=i(4307),Lt=i(1900);const Mt={image:["Polygon","Circle","LineString","Image","Text"],hybrid:["Polygon","LineString"],vector:[]},Et={hybrid:["Image","Text","Default"],vector:["Polygon","Circle","LineString","Image","Text","Default"]};class At extends pt.Z{constructor(t){super(t),this.boundHandleStyleImageChange_=this.handleStyleImageChange_.bind(this),this.renderedLayerRevision_,this.renderedPixelToCoordinateTransform_=null,this.renderedRotation_,this.tmpTransform_=(0,Q.Ue)()}prepareTile(t,e,i){let s;const n=t.getState();return n!==St.Z.LOADED&&n!==St.Z.ERROR||(this.updateExecutorGroup_(t,e,i),this.tileImageNeedsRender_(t)&&(s=!0)),s}getTile(t,e,i,s){const n=s.pixelRatio,o=s.viewState,r=o.resolution,a=o.projection,h=this.getLayer(),l=h.getSource().getTile(t,e,i,n,a),c=s.viewHints,g=!(c[yt.Z.ANIMATING]||c[yt.Z.INTERACTING]);return!g&&l.wantedResolution||(l.wantedResolution=r),this.prepareTile(l,n,a)&&(g||Date.now()-s.time<8)&&"vector"!==h.getRenderMode()&&this.renderTileImage_(l,s),super.getTile(t,e,i,s)}isDrawableTile(t){const e=this.getLayer();return super.isDrawableTile(t)&&("vector"===e.getRenderMode()?(0,S.sq)(e)in t.executorGroups:t.hasContext(e))}getTileImage(t){return t.getImage(this.getLayer())}prepareFrame(t){const e=this.getLayer().getRevision();return this.renderedLayerRevision_!==e&&(this.renderedLayerRevision_=e,this.renderedTiles.length=0),super.prepareFrame(t)}updateExecutorGroup_(t,e,i){const s=this.getLayer(),n=s.getRevision(),o=s.getRenderOrder()||null,r=t.wantedResolution,a=t.getReplayState(s);if(!a.dirty&&a.renderedResolution===r&&a.renderedRevision==n&&a.renderedRenderOrder==o)return;const h=s.getSource(),l=s.getDeclutter(),c=h.getTileGrid(),g=h.getTileGridForProjection(i).getTileCoordExtent(t.wrappedTileCoord),d=h.getSourceTiles(e,i,t),u=(0,S.sq)(s);delete t.hitDetectionImageData[u],t.executorGroups[u]=[],l&&(t.declutterExecutorGroups[u]=[]),a.dirty=!1;for(let i=0,n=d.length;i<n;++i){const n=d[i];if(n.getState()!=St.Z.LOADED)continue;const _=n.tileCoord,f=c.getTileCoordExtent(_),m=(0,Z.Ed)(g,f),x=(0,Z.f3)(m,s.getRenderBuffer()*r,this.tmpExtent),p=(0,Z.fS)(f,m)?null:x,S=new $(0,x,r,e),y=l?new $(0,m,r,e):void 0,v=Ct(r,e),T=function(t){let e;const i=t.getStyleFunction()||s.getStyleFunction();if(i&&(e=i(t,r)),e){const i=this.renderFeature(t,v,e,S,y);a.dirty=a.dirty||i}},k=n.getFeatures();o&&o!==a.renderedRenderOrder&&k.sort(o);for(let t=0,e=k.length;t<e;++t){const e=k[t];p&&!(0,Z.kK)(p,e.getGeometry().getExtent())||T.call(this,e)}const I=S.finish(),w="vector"!==s.getRenderMode()&&l&&1===d.length?null:m,C=new xt(w,r,e,h.getOverlaps(),I,s.getRenderBuffer());if(t.executorGroups[u].push(C),y){const i=new xt(null,r,e,h.getOverlaps(),y.finish(),s.getRenderBuffer());t.declutterExecutorGroups[u].push(i)}}a.renderedRevision=n,a.renderedRenderOrder=o,a.renderedResolution=r}forEachFeatureAtCoordinate(t,e,i,s,n){const o=e.viewState.resolution,r=e.viewState.rotation;i=null==i?0:i;const a=this.getLayer(),h=a.getSource().getTileGridForProjection(e.viewState.projection),l=(0,Z.hI)([t]);(0,Z.f3)(l,o*i,l);const c={},g=function(t,e,i){let o=t.getId();void 0===o&&(o=(0,S.sq)(t));const r=c[o];if(r){if(!0!==r&&i<r.distanceSq){if(0===i)return c[o]=!0,n.splice(n.lastIndexOf(r),1),s(t,a,e);r.geometry=e,r.distanceSq=i}}else{if(0===i)return c[o]=!0,s(t,a,e);n.push(c[o]={feature:t,layer:a,geometry:e,distanceSq:i,callback:s})}},d=this.renderedTiles;let u;for(let s=0,n=d.length;!u&&s<n;++s){const n=d[s],c=h.getTileCoordExtent(n.wrappedTileCoord);if(!(0,Z.kK)(c,l))continue;const _=(0,S.sq)(a),f=[n.executorGroups[_]],m=n.declutterExecutorGroups[_];m&&f.push(m),f.some((s=>{const n=s===m?e.declutterTree.all().map((t=>t.value)):null;for(let e=0,a=s.length;e<a;++e){const a=s[e];if(u=a.forEachFeatureAtCoordinate(t,o,r,i,g,n),u)return!0}}))}return u}getFeatures(t){return new Promise(((e,i)=>{const s=this.getLayer(),n=(0,S.sq)(s),o=s.getSource(),r=this.renderedProjection,a=r.getExtent(),h=this.renderedResolution,l=o.getTileGridForProjection(r),c=(0,Q.nn)(this.renderedPixelToCoordinateTransform_,t.slice()),g=l.getTileCoordForCoordAndResolution(c,h);let d;for(let t=0,e=this.renderedTiles.length;t<e;++t)if(g.toString()===this.renderedTiles[t].tileCoord.toString()){if(d=this.renderedTiles[t],d.getState()===St.Z.LOADED){const t=l.getTileCoordExtent(d.tileCoord);o.getWrapX()&&r.canWrapX()&&!(0,Z.r4)(a,t)&&(0,Lt.Cf)(c,r);break}d=void 0}if(!d||d.loadingSourceTiles>0)return void e([]);const u=l.getTileCoordExtent(d.wrappedTileCoord),f=(0,Z.rL)(u),m=[(c[0]-f[0])/h,(f[1]-c[1])/h],x=d.getSourceTiles().reduce((function(t,e){return t.concat(e.getFeatures())}),[]);let p=d.hitDetectionImageData[n];if(!p){const t=(0,Ot.Pq)(l.getTileSize(l.getZForResolution(h,o.zDirection))),e=this.renderedRotation_;p=function(t,e,i,s,n,o,r){const a=t[0]*kt,h=t[1]*kt,l=(0,_.E4)(a,h);l.imageSmoothingEnabled=!1;const c=l.canvas,g=new Tt(l,kt,n,null,r),d=i.length,u=Math.floor(16777215/d),f={};for(let t=1;t<=d;++t){const e=i[t-1],r=e.getStyleFunction()||s;if(!s)continue;let a=r(e,o);if(!a)continue;Array.isArray(a)||(a=[a]);const h=(t*u).toString(16).padStart(7,"#00000");for(let t=0,i=a.length;t<i;++t){const i=a[t],s=i.getGeometryFunction()(e);if(!s||!(0,Z.kK)(n,s.getExtent()))continue;const o=i.clone(),r=o.getFill();r&&r.setColor(h);const l=o.getStroke();l&&(l.setColor(h),l.setLineDash(null)),o.setText(void 0);const c=i.getImage();if(c&&0!==c.getOpacity()){const t=c.getImageSize();if(!t)continue;const e=(0,_.E4)(t[0],t[1],void 0,{alpha:!1}),i=e.canvas;e.fillStyle=h,e.fillRect(0,0,i.width,i.height),o.setImage(new v({img:i,imgSize:t,anchor:c.getAnchor(),anchorXUnits:"pixels",anchorYUnits:"pixels",offset:c.getOrigin(),opacity:1,size:c.getSize(),scale:c.getScale(),rotation:c.getRotation(),rotateWithView:c.getRotateWithView()}))}const g=o.getZIndex()||0;let d=f[g];d||(d={},f[g]=d,d.Polygon=[],d.Circle=[],d.LineString=[],d.Point=[]);const u=s.getType();if("GeometryCollection"===u){const t=s.getGeometriesArrayRecursive();for(let e=0,i=t.length;e<i;++e){const i=t[e];d[i.getType().replace("Multi","")].push(i,o)}}else d[u.replace("Multi","")].push(s,o)}}const m=Object.keys(f).map(Number).sort(V.j2);for(let t=0,i=m.length;t<i;++t){const i=f[m[t]];for(const t in i){const s=i[t];for(let t=0,i=s.length;t<i;t+=2){g.setStyle(s[t+1]);for(let i=0,n=e.length;i<n;++i)g.setTransform(e[i]),g.drawGeometry(s[t])}}}return l.getImageData(0,0,c.width,c.height)}(t,[this.getRenderTransform(l.getTileCoordCenter(d.wrappedTileCoord),h,0,kt,t[0]*kt,t[1]*kt,0)],x,s.getStyleFunction(),l.getTileCoordExtent(d.wrappedTileCoord),d.getReplayState(s).renderedResolution,e),d.hitDetectionImageData[n]=p}e(function(t,e,i){const s=[];if(i){const n=Math.floor(Math.round(t[0])*kt),o=Math.floor(Math.round(t[1])*kt),r=4*((0,tt.uZ)(n,0,i.width-1)+(0,tt.uZ)(o,0,i.height-1)*i.width),a=i.data[r],h=i.data[r+1],l=i.data[r+2]+256*(h+256*a),c=Math.floor(16777215/e.length);l&&l%c==0&&s.push(e[l/c-1])}return s}(m,x,p))}))}handleFontsChanged(){const t=this.getLayer();t.getVisible()&&void 0!==this.renderedLayerRevision_&&t.changed()}handleStyleImageChange_(t){this.renderIfReadyAndVisible()}renderDeclutter(t){const e=this.context,i=e.globalAlpha;e.globalAlpha=this.getLayer().getOpacity();const s=t.viewHints,n=!(s[yt.Z.ANIMATING]||s[yt.Z.INTERACTING]),o=this.renderedTiles;for(let e=0,i=o.length;e<i;++e){const i=o[e],s=i.declutterExecutorGroups[(0,S.sq)(this.getLayer())];if(s)for(let e=s.length-1;e>=0;--e)s[e].execute(this.context,1,this.getTileRenderTransform(i,t),t.viewState.rotation,n,void 0,t.declutterTree)}e.globalAlpha=i}getTileRenderTransform(t,e){const i=e.pixelRatio,s=e.viewState,n=s.center,o=s.resolution,r=s.rotation,a=e.size,h=Math.round(a[0]*i),l=Math.round(a[1]*i),c=this.getLayer().getSource().getTileGridForProjection(e.viewState.projection),g=t.tileCoord,d=c.getTileCoordExtent(t.wrappedTileCoord),u=c.getTileCoordExtent(g,this.tmpExtent)[0]-d[0];return(0,Q.Jp)((0,Q.bA)(this.inversePixelTransform.slice(),1/i,1/i),this.getRenderTransform(n,o,r,i,h,l,u))}postRender(t,e){const i=e.viewHints,s=!(i[yt.Z.ANIMATING]||i[yt.Z.INTERACTING]);this.renderedPixelToCoordinateTransform_=e.pixelToCoordinateTransform.slice(),this.renderedRotation_=e.viewState.rotation;const n=this.getLayer(),o=n.getRenderMode(),r=t.globalAlpha;t.globalAlpha=n.getOpacity();const a=Et[o],h=e.viewState,l=h.rotation,c=n.getSource(),g=c.getTileGridForProjection(h.projection).getZForResolution(h.resolution,c.zDirection),d=this.renderedTiles,u=[],_=[];let f=!0;for(let i=d.length-1;i>=0;--i){const o=d[i];f=f&&!o.getReplayState(n).dirty;const r=o.executorGroups[(0,S.sq)(n)].filter((t=>t.hasExecutors(a)));if(0===r.length)continue;const h=this.getTileRenderTransform(o,e),c=o.tileCoord[0];let m=!1;const x=r[0].getClipCoords(h);if(x){for(let e=0,i=u.length;e<i;++e)if(g!==c&&c<_[e]){const i=u[e];(0,Z.kK)([x[0],x[3],x[4],x[7]],[i[0],i[3],i[4],i[7]])&&(m||(t.save(),m=!0),t.beginPath(),t.moveTo(x[0],x[1]),t.lineTo(x[2],x[3]),t.lineTo(x[4],x[5]),t.lineTo(x[6],x[7]),t.moveTo(i[6],i[7]),t.lineTo(i[4],i[5]),t.lineTo(i[2],i[3]),t.lineTo(i[0],i[1]),t.clip())}u.push(x),_.push(c)}for(let e=0,i=r.length;e<i;++e)r[e].execute(t,1,h,l,s,a);m&&t.restore()}t.globalAlpha=r,this.ready=f,super.postRender(t,e)}renderFeature(t,e,i,s,n){if(!i)return!1;let o=!1;if(Array.isArray(i))for(let r=0,a=i.length;r<a;++r)o=Rt(s,t,i[r],e,this.boundHandleStyleImageChange_,void 0,n)||o;else o=Rt(s,t,i,e,this.boundHandleStyleImageChange_,void 0,n);return o}tileImageNeedsRender_(t){const e=this.getLayer();if("vector"===e.getRenderMode())return!1;const i=t.getReplayState(e),s=e.getRevision(),n=t.wantedResolution;return i.renderedTileResolution!==n||i.renderedTileRevision!==s}renderTileImage_(t,e){const i=this.getLayer(),s=t.getReplayState(i),n=i.getRevision(),o=t.executorGroups[(0,S.sq)(i)];s.renderedTileRevision=n;const r=t.wrappedTileCoord,a=r[0],h=i.getSource();let l=e.pixelRatio;const c=e.viewState.projection,g=h.getTileGridForProjection(c),d=g.getResolution(t.tileCoord[0]),u=e.pixelRatio/t.wantedResolution*d,_=g.getResolution(a),f=t.getContext(i);l=Math.round(Math.max(l,u/l));const m=h.getTilePixelSize(a,l,c);f.canvas.width=m[0],f.canvas.height=m[1];const x=l/u;if(1!==x){const t=(0,Q.mc)(this.tmpTransform_);(0,Q.bA)(t,x,x),f.setTransform.apply(f,t)}const p=g.getTileCoordExtent(r,this.tmpExtent),y=u/_,v=(0,Q.mc)(this.tmpTransform_);(0,Q.bA)(v,y,-y),(0,Q.Iu)(v,-p[0],-p[3]);for(let t=0,e=o.length;t<e;++t)o[t].execute(f,x,v,0,!0,Mt[i.getRenderMode()]);s.renderedTileResolution=t.wantedResolution}}const bt=At;var Ft=i(8280);const Wt=class extends E{constructor(t){t=t||{};const e=Object.assign({},t);delete e.preload,delete e.useInterimTilesOnError,super(e),this.on,this.once,this.un;const i=t.renderMode||"hybrid";(0,d.h)("hybrid"==i||"vector"==i,28),this.renderMode_=i,this.setPreload(t.preload?t.preload:0),this.setUseInterimTilesOnError(void 0===t.useInterimTilesOnError||t.useInterimTilesOnError),this.getBackground,this.setBackground}createRenderer(){return new bt(this)}getFeatures(t){return super.getFeatures(t)}getRenderMode(){return this.renderMode_}getPreload(){return this.get(Ft.Z.PRELOAD)}getUseInterimTilesOnError(){return this.get(Ft.Z.USE_INTERIM_TILES_ON_ERROR)}setPreload(t){this.set(Ft.Z.PRELOAD,t)}setUseInterimTilesOnError(t){this.set(Ft.Z.USE_INTERIM_TILES_ON_ERROR,t)}}},283:(t,e,i)=>{"use strict";i.d(e,{Z:()=>o});var s=i(5393);class n extends s.Z{constructor(t){super({points:1/0,fill:(t=t||{radius:5}).fill,radius:t.radius,stroke:t.stroke,scale:void 0!==t.scale?t.scale:1,rotation:void 0!==t.rotation?t.rotation:0,rotateWithView:void 0!==t.rotateWithView&&t.rotateWithView,displacement:void 0!==t.displacement?t.displacement:[0,0],declutterMode:t.declutterMode})}clone(){const t=this.getScale(),e=new n({fill:this.getFill()?this.getFill().clone():void 0,stroke:this.getStroke()?this.getStroke().clone():void 0,radius:this.getRadius(),scale:Array.isArray(t)?t.slice():t,rotation:this.getRotation(),rotateWithView:this.getRotateWithView(),displacement:this.getDisplacement().slice(),declutterMode:this.getDeclutterMode()});return e.setOpacity(this.getOpacity()),e}setRadius(t){this.radius_=t,this.render()}}const o=n},1345:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});class s{constructor(t){t=t||{},this.color_=void 0!==t.color?t.color:null}clone(){const t=this.getColor();return new s({color:Array.isArray(t)?t.slice():t||void 0})}getColor(){return this.color_}setColor(t){this.color_=t}}const n=s},8443:(t,e,i)=>{"use strict";i.d(e,{Z:()=>r});var s=i(4187),n=i(4307);class o{constructor(t){this.opacity_=t.opacity,this.rotateWithView_=t.rotateWithView,this.rotation_=t.rotation,this.scale_=t.scale,this.scaleArray_=(0,n.Pq)(t.scale),this.displacement_=t.displacement,this.declutterMode_=t.declutterMode}clone(){const t=this.getScale();return new o({opacity:this.getOpacity(),scale:Array.isArray(t)?t.slice():t,rotation:this.getRotation(),rotateWithView:this.getRotateWithView(),displacement:this.getDisplacement().slice(),declutterMode:this.getDeclutterMode()})}getOpacity(){return this.opacity_}getRotateWithView(){return this.rotateWithView_}getRotation(){return this.rotation_}getScale(){return this.scale_}getScaleArray(){return this.scaleArray_}getDisplacement(){return this.displacement_}getDeclutterMode(){return this.declutterMode_}getAnchor(){return(0,s.O3)()}getImage(t){return(0,s.O3)()}getHitDetectionImage(){return(0,s.O3)()}getPixelRatio(t){return 1}getImageState(){return(0,s.O3)()}getImageSize(){return(0,s.O3)()}getOrigin(){return(0,s.O3)()}getSize(){return(0,s.O3)()}setDisplacement(t){this.displacement_=t}setOpacity(t){this.opacity_=t}setRotateWithView(t){this.rotateWithView_=t}setRotation(t){this.rotation_=t}setScale(t){this.scale_=t,this.scaleArray_=(0,n.Pq)(t)}listenImageChange(t){(0,s.O3)()}load(){(0,s.O3)()}unlistenImageChange(t){(0,s.O3)()}}const r=o},5393:(t,e,i)=>{"use strict";i.d(e,{Z:()=>c});var s=i(553),n=i(8443),o=i(9706),r=i(6620),a=i(8326),h=i(147);class l extends n.Z{constructor(t){super({opacity:1,rotateWithView:void 0!==t.rotateWithView&&t.rotateWithView,rotation:void 0!==t.rotation?t.rotation:0,scale:void 0!==t.scale?t.scale:1,displacement:void 0!==t.displacement?t.displacement:[0,0],declutterMode:t.declutterMode}),this.canvas_=void 0,this.hitDetectionCanvas_=null,this.fill_=void 0!==t.fill?t.fill:null,this.origin_=[0,0],this.points_=t.points,this.radius_=void 0!==t.radius?t.radius:t.radius1,this.radius2_=t.radius2,this.angle_=void 0!==t.angle?t.angle:0,this.stroke_=void 0!==t.stroke?t.stroke:null,this.size_=null,this.renderOptions_=null,this.render()}clone(){const t=this.getScale(),e=new l({fill:this.getFill()?this.getFill().clone():void 0,points:this.getPoints(),radius:this.getRadius(),radius2:this.getRadius2(),angle:this.getAngle(),stroke:this.getStroke()?this.getStroke().clone():void 0,rotation:this.getRotation(),rotateWithView:this.getRotateWithView(),scale:Array.isArray(t)?t.slice():t,displacement:this.getDisplacement().slice(),declutterMode:this.getDeclutterMode()});return e.setOpacity(this.getOpacity()),e}getAnchor(){const t=this.size_;if(!t)return null;const e=this.getDisplacement(),i=this.getScaleArray();return[t[0]/2-e[0]/i[0],t[1]/2+e[1]/i[1]]}getAngle(){return this.angle_}getFill(){return this.fill_}setFill(t){this.fill_=t,this.render()}getHitDetectionImage(){return this.hitDetectionCanvas_||this.createHitDetectionCanvas_(this.renderOptions_),this.hitDetectionCanvas_}getImage(t){let e=this.canvas_[t];if(!e){const i=this.renderOptions_,s=(0,a.E4)(i.size*t,i.size*t);this.draw_(i,s,t),e=s.canvas,this.canvas_[t]=e}return e}getPixelRatio(t){return t}getImageSize(){return this.size_}getImageState(){return s.Z.LOADED}getOrigin(){return this.origin_}getPoints(){return this.points_}getRadius(){return this.radius_}getRadius2(){return this.radius2_}getSize(){return this.size_}getStroke(){return this.stroke_}setStroke(t){this.stroke_=t,this.render()}listenImageChange(t){}load(){}unlistenImageChange(t){}calculateLineJoinSize_(t,e,i){if(0===e||this.points_===1/0||"bevel"!==t&&"miter"!==t)return e;let s=this.radius_,n=void 0===this.radius2_?s:this.radius2_;if(s<n){const t=s;s=n,n=t}const o=void 0===this.radius2_?this.points_:2*this.points_,r=2*Math.PI/o,a=n*Math.sin(r),h=s-Math.sqrt(n*n-a*a),l=Math.sqrt(a*a+h*h),c=l/a;if("miter"===t&&c<=i)return c*e;const g=e/2/c,d=e/2*(h/l),u=Math.sqrt((s+g)*(s+g)+d*d)-s;if(void 0===this.radius2_||"bevel"===t)return 2*u;const _=s*Math.sin(r),f=n-Math.sqrt(s*s-_*_),m=Math.sqrt(_*_+f*f)/_;if(m<=i){const t=m*e/2-n-s;return 2*Math.max(u,t)}return 2*u}createRenderOptions(){let t,e=h.rc,i=0,s=null,n=0,o=0;this.stroke_&&(t=this.stroke_.getColor(),null===t&&(t=h.Tx),t=(0,r.y)(t),o=this.stroke_.getWidth(),void 0===o&&(o=h.yC),s=this.stroke_.getLineDash(),n=this.stroke_.getLineDashOffset(),e=this.stroke_.getLineJoin(),void 0===e&&(e=h.rc),i=this.stroke_.getMiterLimit(),void 0===i&&(i=h.V4));const a=this.calculateLineJoinSize_(e,o,i),l=Math.max(this.radius_,this.radius2_||0);return{strokeStyle:t,strokeWidth:o,size:Math.ceil(2*l+a),lineDash:s,lineDashOffset:n,lineJoin:e,miterLimit:i}}render(){this.renderOptions_=this.createRenderOptions();const t=this.renderOptions_.size;this.canvas_={},this.size_=[t,t]}draw_(t,e,i){if(e.scale(i,i),e.translate(t.size/2,t.size/2),this.createPath_(e),this.fill_){let t=this.fill_.getColor();null===t&&(t=h.bL),e.fillStyle=(0,r.y)(t),e.fill()}this.stroke_&&(e.strokeStyle=t.strokeStyle,e.lineWidth=t.strokeWidth,t.lineDash&&(e.setLineDash(t.lineDash),e.lineDashOffset=t.lineDashOffset),e.lineJoin=t.lineJoin,e.miterLimit=t.miterLimit,e.stroke())}createHitDetectionCanvas_(t){if(this.fill_){let e=this.fill_.getColor(),i=0;if("string"==typeof e&&(e=(0,o._2)(e)),null===e?i=1:Array.isArray(e)&&(i=4===e.length?e[3]:1),0===i){const e=(0,a.E4)(t.size,t.size);this.hitDetectionCanvas_=e.canvas,this.drawHitDetectionCanvas_(t,e)}}this.hitDetectionCanvas_||(this.hitDetectionCanvas_=this.getImage(1))}createPath_(t){let e=this.points_;const i=this.radius_;if(e===1/0)t.arc(0,0,i,0,2*Math.PI);else{const s=void 0===this.radius2_?i:this.radius2_;void 0!==this.radius2_&&(e*=2);const n=this.angle_-Math.PI/2,o=2*Math.PI/e;for(let r=0;r<e;r++){const e=n+r*o,a=r%2==0?i:s;t.lineTo(a*Math.cos(e),a*Math.sin(e))}t.closePath()}}drawHitDetectionCanvas_(t,e){e.translate(t.size/2,t.size/2),this.createPath_(e),e.fillStyle=h.bL,e.fill(),this.stroke_&&(e.strokeStyle=t.strokeStyle,e.lineWidth=t.strokeWidth,t.lineDash&&(e.setLineDash(t.lineDash),e.lineDashOffset=t.lineDashOffset),e.lineJoin=t.lineJoin,e.miterLimit=t.miterLimit,e.stroke())}}const c=l},8958:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});class s{constructor(t){t=t||{},this.color_=void 0!==t.color?t.color:null,this.lineCap_=t.lineCap,this.lineDash_=void 0!==t.lineDash?t.lineDash:null,this.lineDashOffset_=t.lineDashOffset,this.lineJoin_=t.lineJoin,this.miterLimit_=t.miterLimit,this.width_=t.width}clone(){const t=this.getColor();return new s({color:Array.isArray(t)?t.slice():t||void 0,lineCap:this.getLineCap(),lineDash:this.getLineDash()?this.getLineDash().slice():void 0,lineDashOffset:this.getLineDashOffset(),lineJoin:this.getLineJoin(),miterLimit:this.getMiterLimit(),width:this.getWidth()})}getColor(){return this.color_}getLineCap(){return this.lineCap_}getLineDash(){return this.lineDash_}getLineDashOffset(){return this.lineDashOffset_}getLineJoin(){return this.lineJoin_}getMiterLimit(){return this.miterLimit_}getWidth(){return this.width_}setColor(t){this.color_=t}setLineCap(t){this.lineCap_=t}setLineDash(t){this.lineDash_=t}setLineDashOffset(t){this.lineDashOffset_=t}setLineJoin(t){this.lineJoin_=t}setMiterLimit(t){this.miterLimit_=t}setWidth(t){this.width_=t}}const n=s},7539:(t,e,i)=>{"use strict";i.d(e,{J$:()=>h,ZP:()=>d,yF:()=>c});var s=i(283),n=i(1345),o=i(8958),r=i(9515);class a{constructor(t){t=t||{},this.geometry_=null,this.geometryFunction_=g,void 0!==t.geometry&&this.setGeometry(t.geometry),this.fill_=void 0!==t.fill?t.fill:null,this.image_=void 0!==t.image?t.image:null,this.renderer_=void 0!==t.renderer?t.renderer:null,this.hitDetectionRenderer_=void 0!==t.hitDetectionRenderer?t.hitDetectionRenderer:null,this.stroke_=void 0!==t.stroke?t.stroke:null,this.text_=void 0!==t.text?t.text:null,this.zIndex_=t.zIndex}clone(){let t=this.getGeometry();return t&&"object"==typeof t&&(t=t.clone()),new a({geometry:t,fill:this.getFill()?this.getFill().clone():void 0,image:this.getImage()?this.getImage().clone():void 0,renderer:this.getRenderer(),stroke:this.getStroke()?this.getStroke().clone():void 0,text:this.getText()?this.getText().clone():void 0,zIndex:this.getZIndex()})}getRenderer(){return this.renderer_}setRenderer(t){this.renderer_=t}setHitDetectionRenderer(t){this.hitDetectionRenderer_=t}getHitDetectionRenderer(){return this.hitDetectionRenderer_}getGeometry(){return this.geometry_}getGeometryFunction(){return this.geometryFunction_}getFill(){return this.fill_}setFill(t){this.fill_=t}getImage(){return this.image_}setImage(t){this.image_=t}getStroke(){return this.stroke_}setStroke(t){this.stroke_=t}getText(){return this.text_}setText(t){this.text_=t}getZIndex(){return this.zIndex_}setGeometry(t){"function"==typeof t?this.geometryFunction_=t:"string"==typeof t?this.geometryFunction_=function(e){return e.get(t)}:t?void 0!==t&&(this.geometryFunction_=function(){return t}):this.geometryFunction_=g,this.geometry_=t}setZIndex(t){this.zIndex_=t}}function h(t){let e;if("function"==typeof t)e=t;else{let i;Array.isArray(t)?i=t:((0,r.h)("function"==typeof t.getZIndex,41),i=[t]),e=function(){return i}}return e}let l=null;function c(t,e){if(!l){const t=new n.Z({color:"rgba(255,255,255,0.4)"}),e=new o.Z({color:"#3399CC",width:1.25});l=[new a({image:new s.Z({fill:t,stroke:e,radius:5}),fill:t,stroke:e})]}return l}function g(t){return t.getGeometry()}const d=a},1280:(t,e,i)=>{"use strict";i.d(e,{Z:()=>r});var s=i(1345),n=i(4307);class o{constructor(t){t=t||{},this.font_=t.font,this.rotation_=t.rotation,this.rotateWithView_=t.rotateWithView,this.scale_=t.scale,this.scaleArray_=(0,n.Pq)(void 0!==t.scale?t.scale:1),this.text_=t.text,this.textAlign_=t.textAlign,this.justify_=t.justify,this.textBaseline_=t.textBaseline,this.fill_=void 0!==t.fill?t.fill:new s.Z({color:"#333"}),this.maxAngle_=void 0!==t.maxAngle?t.maxAngle:Math.PI/4,this.placement_=void 0!==t.placement?t.placement:"point",this.overflow_=!!t.overflow,this.stroke_=void 0!==t.stroke?t.stroke:null,this.offsetX_=void 0!==t.offsetX?t.offsetX:0,this.offsetY_=void 0!==t.offsetY?t.offsetY:0,this.backgroundFill_=t.backgroundFill?t.backgroundFill:null,this.backgroundStroke_=t.backgroundStroke?t.backgroundStroke:null,this.padding_=void 0===t.padding?null:t.padding}clone(){const t=this.getScale();return new o({font:this.getFont(),placement:this.getPlacement(),maxAngle:this.getMaxAngle(),overflow:this.getOverflow(),rotation:this.getRotation(),rotateWithView:this.getRotateWithView(),scale:Array.isArray(t)?t.slice():t,text:this.getText(),textAlign:this.getTextAlign(),justify:this.getJustify(),textBaseline:this.getTextBaseline(),fill:this.getFill()?this.getFill().clone():void 0,stroke:this.getStroke()?this.getStroke().clone():void 0,offsetX:this.getOffsetX(),offsetY:this.getOffsetY(),backgroundFill:this.getBackgroundFill()?this.getBackgroundFill().clone():void 0,backgroundStroke:this.getBackgroundStroke()?this.getBackgroundStroke().clone():void 0,padding:this.getPadding()||void 0})}getOverflow(){return this.overflow_}getFont(){return this.font_}getMaxAngle(){return this.maxAngle_}getPlacement(){return this.placement_}getOffsetX(){return this.offsetX_}getOffsetY(){return this.offsetY_}getFill(){return this.fill_}getRotateWithView(){return this.rotateWithView_}getRotation(){return this.rotation_}getScale(){return this.scale_}getScaleArray(){return this.scaleArray_}getStroke(){return this.stroke_}getText(){return this.text_}getTextAlign(){return this.textAlign_}getJustify(){return this.justify_}getTextBaseline(){return this.textBaseline_}getBackgroundFill(){return this.backgroundFill_}getBackgroundStroke(){return this.backgroundStroke_}getPadding(){return this.padding_}setOverflow(t){this.overflow_=t}setFont(t){this.font_=t}setMaxAngle(t){this.maxAngle_=t}setOffsetX(t){this.offsetX_=t}setOffsetY(t){this.offsetY_=t}setPlacement(t){this.placement_=t}setRotateWithView(t){this.rotateWithView_=t}setFill(t){this.fill_=t}setRotation(t){this.rotation_=t}setScale(t){this.scale_=t,this.scaleArray_=(0,n.Pq)(void 0!==t?t:1)}setStroke(t){this.stroke_=t}setText(t){this.text_=t}setTextAlign(t){this.textAlign_=t}setJustify(t){this.justify_=t}setTextBaseline(t){this.textBaseline_=t}setBackgroundFill(t){this.backgroundFill_=t}setBackgroundStroke(t){this.backgroundStroke_=t}setPadding(t){this.padding_=t}}const r=o}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,