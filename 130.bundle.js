"use strict";(self.webpackChunkol_mbtiles=self.webpackChunkol_mbtiles||[]).push([[130],{5130:(e,o,t)=>{t.r(o),t.d(o,{default:()=>u});var r=t(8854),n=t(2479),i=t(8266),l=t(9090),s=t(6263),a=t(8661),c=t(5686),d=function(e,o,t,r){return new(t||(t=Promise))((function(n,i){function l(e){try{a(r.next(e))}catch(e){i(e)}}function s(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){var o;e.done?n(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(l,s)}a((r=r.apply(e,o||[])).next())}))};function u(){return d(this,void 0,void 0,(function*(){return new r.Z({target:"map",layers:[new n.Z({zIndex:20,source:new s.Z}),new n.Z({zIndex:10,opacity:.4,source:new i.Z}),new n.Z({zIndex:0,source:new c.Yr(yield(0,c.ri)({url:"https://velivole.b-cdn.net/tiles-RGR92UTM40S.mbtiles"}))})],view:new l.ZP({center:(0,a.mi)([55.47437,-21.08468]),zoom:9})})}))}},5686:(e,o,t)=>{t.d(o,{Yr:()=>b,H5:()=>x,ri:()=>d});var r,n=t(9759),i=t(8661),l=t(8641),s=t(8738);const a="undefined"!=typeof OL_MBTILES_DEBUG&&OL_MBTILES_DEBUG||"undefined"!=typeof process&&void 0!==(null===(r=null===process||void 0===process?void 0:process.env)||void 0===r?void 0:r.OL_MBTILES_DEBUG)&&process.env.OL_MBTILES_DEBUG?console.debug.bind(console):()=>{},c={jpg:"raster",png:"raster",webp:"raster",pbf:"vector",mvt:"vector"};function d(e){var o;const t=(0,n.he)({workers:null!==(o=e.sqlWorkers)&&void 0!==o?o:4,httpOptions:{maxPageSize:e.maxSqlPageSize,cacheSize:e.sqlCacheSize}}).then((o=>o.open(e.url).then((()=>o)))).catch((e=>(console.error(e),null)));return t.then((e=>e.exec("SELECT name,value FROM metadata"))).then((e=>{if(e&&e.length){const o=e.reduce(((e,o)=>(e[o.row[0]]=o.row[1],e)),{});return a("Loaded metadata",o),o}throw new Error("Could not load metadata")})).then((o=>{var r,n,a,d,u,p,h,m;const v={},w=null===(n=null===(r=o.format)||void 0===r?void 0:r.toLowerCase)||void 0===n?void 0:n.call(r);c[w]||console.warn("Unknown tile format",w),v.projection=null!==(a=e.projection)&&void 0!==a?a:"EPSG:3857",v.attributions=null!==(d=o.attribution)&&void 0!==d?d:o.description,v.maxZoom=null!==(u=e.maxZoom)&&void 0!==u?u:+o.maxzoom,v.minZoom=null!==(p=e.minZoom)&&void 0!==p?p:+o.minzoom;const f=null===(m=null===(h=(0,i.U2)(v.projection))||void 0===h?void 0:h.getExtent)||void 0===m?void 0:m.call(h);if("raster"===c[w]){if(void 0===v.maxZoom||void 0===v.minZoom)throw new Error("Cannot determine tilegrid, need minZoom, maxZoom");const e=[(0,l.dz)(f)/256];for(let o=1;o<=v.maxZoom;o++)e.push(e[e.length-1]/2);v.tileGrid=new s.Z({extent:f,minZoom:v.minZoom,resolutions:e})}return v.pool=t,v.url=e.url,v})).catch((e=>(console.warn(e),null)))}var u=t(7205),p=t(3614),h=t.n(p),m=t(8929),v=t(7885),w=t(9646),f=t(9619),g=t(3433);class y extends w.ZP{constructor(e){var o,t,r;super(),e=e||{},this.dataProjection=new f.Z({code:"",units:"tile-pixels"}),this.featureClass_=e.featureClass?e.featureClass:g.ZP,this.geometryName_=null!==(o=e.geometryName)&&void 0!==o?o:"Geometry",this.layers_=null!==(t=e.layers)&&void 0!==t?t:null,this.idProperty_=e.idProperty,this.extent=null!==(r=e.extent)&&void 0!==r?r:4096,this.supportedMediaTypes=["application/vnd-mbtiles"]}readFeature(e,o){const t=e.properties;let r;this.idProperty_?(r=t[this.idProperty_],delete t[this.idProperty_]):r=e.id;const n=e.loadGeometry(),i=[],l=[],s=y.MBTypes[n.length>1?"multi":"mono"][e.type];if("Unknown"===s)return null;for(let e=0;e<n.length;e++)if(0!=n[e].length){for(let o=0;o<n[e].length;o++)i.push(n[e][o].x,n[e][o].y);l.push(i.length)}const a=new this.featureClass_(s,i,l,t,r);return a.transform(o.dataProjection),a}readFeatures(e,o){const t=this.layers_,r=[],n=new m.VectorTile(new(h())(v.ec(e)));o=this.adaptOptions(o);const l=(0,i.U2)(o.dataProjection);l.setWorldExtent(o.extent),l.setExtent([0,0,this.extent,this.extent]),o.dataProjection=l;for(const e of Object.keys(n.layers)){if(t&&!t.includes(e))continue;const i=n.layers[e];for(let t=0;t<i.length;t++){const n=i.feature(t),l=this.readFeature(n,o);l.getProperties().layer=e,r.push(l)}}return r}readProjection(){return this.dataProjection}}y.MBTypes={mono:["Unknown","Point","LineString","Polygon"],multi:["Unknown","MultiPoint","MultiLineString","Polygon"]};class x extends u.Z{constructor(e){var o,t;if(void 0===e.url&&void 0===e.pool)throw new Error("Must specify url");super(Object.assign(Object.assign({},e),{url:void 0,format:new y({layers:e.layers}),tileUrlFunction:o=>`${e.url}#${o[0]}:${o[1]}:${o[2]}`})),this.setTileLoadFunction(this.tileLoader.bind(this)),this.pool=null!==(o=e.pool)&&void 0!==o?o:(0,n.he)({workers:null!==(t=e.sqlWorkers)&&void 0!==t?t:4,httpOptions:{maxPageSize:4096}}).then((o=>o.open(e.url).then((()=>o))))}tileLoader(e,o){a("loading tile",[e.tileCoord[0],e.tileCoord[1],e.tileCoord[2]]),e.setLoader(((o,t,r)=>{this.pool.then((o=>o.exec("SELECT tile_data FROM tiles WHERE zoom_level = $zoom AND tile_column = $col AND tile_row = $row",{$zoom:e.tileCoord[0],$col:e.tileCoord[1],$row:(1<<e.tileCoord[0])-1-e.tileCoord[2]}))).then((t=>{if(t&&t[0]&&t[0].row[0]){const n=e.getFormat().readFeatures(t[0].row[0],{extent:o,featureProjection:r});return e.setFeatures(n),void e.onLoad(n,r)}throw new Error(`No data for ${e.tileCoord}`)})).catch((o=>{console.warn(o),e.onError()}))}))}disposeInternal(){return this.pool.then((e=>e.close()))}}var E=t(928);class b extends E.Z{constructor(e){var o,t;if(void 0===e.url&&void 0===e.pool)throw new Error("Must specify url");super(Object.assign(Object.assign({},e),{url:void 0,tileUrlFunction:o=>`${e.url}#${o[0]}:${o[1]}:${o[2]}`})),this.setTileLoadFunction(this.tileLoader.bind(this)),this.pool=null!==(o=e.pool)&&void 0!==o?o:(0,n.he)({workers:null!==(t=e.sqlWorkers)&&void 0!==t?t:4,httpOptions:{maxPageSize:4096}}).then((o=>o.open(e.url).then((()=>o))))}tileLoader(e,o){a("loading tile",[e.tileCoord[0],e.tileCoord[1],e.tileCoord[2]]);const t=e.getImage();this.pool.then((o=>o.exec("SELECT tile_data FROM tiles WHERE zoom_level = $zoom AND tile_column = $col AND tile_row = $row",{$zoom:e.tileCoord[0],$col:e.tileCoord[1],$row:(1<<e.tileCoord[0])-1-e.tileCoord[2]}))).then((o=>{if(o&&o[0]&&o[0].row[0]instanceof Uint8Array){const e=new Blob([o[0].row[0]]),r=URL.createObjectURL(e);t.src=r}else e.setState(3)})).catch((()=>e.setState(3)))}disposeInternal(){return this.pool.then((e=>e.close()))}}},8266:(e,o,t)=>{t.d(o,{Z:()=>i});var r=t(4680);class n extends r.Z{constructor(e){let o;o=void 0!==(e=e||{}).attributions?e.attributions:['&#169; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors.'];const t=void 0!==e.crossOrigin?e.crossOrigin:"anonymous",r=void 0!==e.url?e.url:"https://tile.openstreetmap.org/{z}/{x}/{y}.png";super({attributions:o,attributionsCollapsible:!1,cacheSize:e.cacheSize,crossOrigin:t,interpolate:e.interpolate,maxZoom:void 0!==e.maxZoom?e.maxZoom:19,opaque:void 0===e.opaque||e.opaque,reprojectionErrorThreshold:e.reprojectionErrorThreshold,tileLoadFunction:e.tileLoadFunction,transition:e.transition,url:r,wrapX:e.wrapX,zDirection:e.zDirection})}}const i=n}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZXhhbXBsZXMvY29kZS9hc3luYy1pbml0LnRzIiwid2VicGFjazovL29sLW1idGlsZXMvLi9zcmMvZGVidWcudHMiLCJ3ZWJwYWNrOi8vb2wtbWJ0aWxlcy8uL3NyYy9tYnRpbGVzLnRzIiwid2VicGFjazovL29sLW1idGlsZXMvLi9zcmMvbWJ0aWxlcy1mb3JtYXQudHMiLCJ3ZWJwYWNrOi8vb2wtbWJ0aWxlcy8uL3NyYy9tYnRpbGVzLXZlY3Rvci1zb3VyY2UudHMiLCJ3ZWJwYWNrOi8vb2wtbWJ0aWxlcy8uL3NyYy9tYnRpbGVzLXJhc3Rlci1zb3VyY2UudHMiLCJ3ZWJwYWNrOi8vb2wtbWJ0aWxlcy8uL25vZGVfbW9kdWxlcy9vbC9zb3VyY2UvT1NNLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYXAgZnJvbSAnb2wvTWFwLmpzJztcbmltcG9ydCBUaWxlTGF5ZXIgZnJvbSAnb2wvbGF5ZXIvVGlsZS5qcyc7XG5pbXBvcnQgT1NNIGZyb20gJ29sL3NvdXJjZS9PU00nO1xuaW1wb3J0IFZpZXcgZnJvbSAnb2wvVmlldy5qcyc7XG5pbXBvcnQgSW1hZ2VUaWxlTGF5ZXIgZnJvbSAnb2wvbGF5ZXIvVGlsZSc7XG5pbXBvcnQgVGlsZURlYnVnIGZyb20gJ29sL3NvdXJjZS9UaWxlRGVidWcnO1xuaW1wb3J0IHsgZnJvbUxvbkxhdCB9IGZyb20gJ29sL3Byb2onO1xuXG5pbXBvcnQgeyBpbXBvcnRNQlRpbGVzLCBNQlRpbGVzUmFzdGVyU291cmNlIH0gZnJvbSAnb2wtbWJ0aWxlcyc7XG5cbi8vIEluaXRpYWxpemF0aW9uIGNhbiBiZSBhdXRvbWF0aWMgZnJvbSB0aGUgTUJUaWxlcyBtZXRhZGF0YVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgTWFwKHtcbiAgICB0YXJnZXQ6ICdtYXAnLFxuICAgIGxheWVyczogW1xuICAgICAgbmV3IFRpbGVMYXllcih7XG4gICAgICAgIHpJbmRleDogMjAsXG4gICAgICAgIHNvdXJjZTogbmV3IFRpbGVEZWJ1ZygpXG4gICAgICB9KSxcbiAgICAgIG5ldyBUaWxlTGF5ZXIoe1xuICAgICAgICB6SW5kZXg6IDEwLFxuICAgICAgICBvcGFjaXR5OiAwLjQsXG4gICAgICAgIHNvdXJjZTogbmV3IE9TTSgpLFxuICAgICAgfSksXG4gICAgICBuZXcgSW1hZ2VUaWxlTGF5ZXIoe1xuICAgICAgICB6SW5kZXg6IDAsXG4gICAgICAgIHNvdXJjZTogbmV3IE1CVGlsZXNSYXN0ZXJTb3VyY2UoXG4gICAgICAgICAgYXdhaXQgaW1wb3J0TUJUaWxlcyh7IHVybDogJ2h0dHBzOi8vdmVsaXZvbGUuYi1jZG4ubmV0L3RpbGVzLVJHUjkyVVRNNDBTLm1idGlsZXMnIH0pLFxuICAgICAgICApLFxuICAgICAgfSlcbiAgICBdLFxuICAgIHZpZXc6IG5ldyBWaWV3KHtcbiAgICAgIGNlbnRlcjogZnJvbUxvbkxhdChbNTUuNDc0MzcsIC0yMS4wODQ2OF0pLFxuICAgICAgem9vbTogOVxuICAgIH0pLFxuICB9KTtcbn1cbiIsImRlY2xhcmUgY29uc3QgT0xfTUJUSUxFU19ERUJVRzogc3RyaW5nO1xuY29uc3QgZGVidWdFbmFibGVkID0gKHR5cGVvZiBPTF9NQlRJTEVTX0RFQlVHICE9PSAndW5kZWZpbmVkJyAmJiBPTF9NQlRJTEVTX0RFQlVHKSB8fFxuICAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwcm9jZXNzPy5lbnY/Lk9MX01CVElMRVNfREVCVUcgIT09ICd1bmRlZmluZWQnICYmIHByb2Nlc3MuZW52Lk9MX01CVElMRVNfREVCVUcpO1xuXG5leHBvcnQgY29uc3QgZGVidWcgPSBkZWJ1Z0VuYWJsZWQgPyBjb25zb2xlLmRlYnVnLmJpbmQoY29uc29sZSkgOiAoKSA9PiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyBjcmVhdGVTUUxpdGVIVFRQUG9vbCwgU1FMaXRlSFRUUFBvb2wgfSBmcm9tICdzcWxpdGUtd2FzbS1odHRwJztcblxuaW1wb3J0IHsgT3B0aW9ucyBhcyBJbWFnZVRpbGVPcHRpb25zIH0gZnJvbSAnb2wvc291cmNlL1RpbGVJbWFnZS5qcyc7XG5pbXBvcnQgeyBPcHRpb25zIGFzIFZlY3RvclRpbGVPcHRpb25zIH0gZnJvbSAnb2wvc291cmNlL1ZlY3RvclRpbGUuanMnO1xuaW1wb3J0IHsgZ2V0IGFzIGdldFByb2plY3Rpb24gfSBmcm9tICdvbC9wcm9qLmpzJztcbmltcG9ydCB7IGdldFdpZHRoIH0gZnJvbSAnb2wvZXh0ZW50LmpzJztcbmltcG9ydCBUaWxlR3JpZCBmcm9tICdvbC90aWxlZ3JpZC9UaWxlR3JpZC5qcyc7XG5pbXBvcnQgeyBkZWJ1ZyB9IGZyb20gJy4vZGVidWcnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE1CVGlsZXNSYXN0ZXJPcHRpb25zIGV4dGVuZHMgSW1hZ2VUaWxlT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcGFyYWxsZWwgd29ya2VycyB0byB1c2UgZm9yIHJldHJpZXZpbmcgdGlsZXMsIEBkZWZhdWx0IDRcbiAgICovXG4gIHNxbFdvcmtlcnM/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBMaXN0IG9mIGxheWVyIG5hbWVzIHRvIHNlbGVjdGl2ZWx5IGluY2x1ZGUsIEBkZWZhdWx0IGV2ZXJ5dGhpbmdcbiAgICovXG4gIGxheWVycz86IHN0cmluZ1tdO1xuXG4gIHRpbGVVcmxGdW5jdGlvbj86IG5ldmVyO1xuICB0aWxlTG9hZEZ1bmN0aW9uPzogbmV2ZXI7XG5cbiAgLyoqXG4gICAqIEFsdGVybmF0aXZlIG1ldGhvZCBvZiBzcGVjaWZ5aW5nIG1pblpvb20sIG11dHVhbGx5IGV4Y2x1c2l2ZSB3aXRoIHRpbGVHcmlkLCByZXF1aXJlcyBleHBsaWNpdCBwcm9qZWN0aW9uXG4gICAqL1xuICBtaW5ab29tPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBBbHRlcm5hdGl2ZSBtZXRob2Qgb2Ygc3BlY2lmeWluZyBtaW5ab29tLCBtdXR1YWxseSBleGNsdXNpdmUgd2l0aCB0aWxlR3JpZCwgcmVxdWlyZXMgZXhwbGljaXQgcHJvamVjdGlvblxuICAgKi9cbiAgbWF4Wm9vbT86IG51bWJlcjtcblxuICAvKipcbiAgICogT3B0aW9uYWwgdGlsZSBncmlkLCByZWZlciB0byB0aGUgT3BlbmxheWVycyBtYW51YWxcbiAgICovXG4gIHRpbGVHcmlkPzogVGlsZUdyaWQ7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIGFscmVhZHkgb3BlbiBTUUxpdGVIVFRQIHBvb2wgKG11dHVhbGx5IGV4Y2x1c2l2ZSB3aXRoIHVybClcbiAgICovXG4gIHBvb2w/OiBQcm9taXNlPFNRTGl0ZUhUVFBQb29sPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNQlRpbGVzVmVjdG9yT3B0aW9ucyBleHRlbmRzIFZlY3RvclRpbGVPcHRpb25zIHtcbiAgLyoqXG4gICAqIE51bWJlciBvZiBwYXJhbGxlbCB3b3JrZXJzIHRvIHVzZSBmb3IgcmV0cmlldmluZyB0aWxlcywgQGRlZmF1bHQgNFxuICAgKi9cbiAgc3FsV29ya2Vycz86IG51bWJlcjtcbiAgLyoqXG4gICAqIExpc3Qgb2YgbGF5ZXIgbmFtZXMgdG8gc2VsZWN0aXZlbHkgaW5jbHVkZSwgQGRlZmF1bHQgZXZlcnl0aGluZ1xuICAgKi9cbiAgbGF5ZXJzPzogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsIGFscmVhZHkgb3BlbiBTUUxpdGVIVFRQIHBvb2wgKG11dHVhbGx5IGV4Y2x1c2l2ZSB3aXRoIHVybClcbiAgICovXG4gIHBvb2w/OiBQcm9taXNlPFNRTGl0ZUhUVFBQb29sPjtcblxuICB0aWxlVXJsRnVuY3Rpb24/OiBuZXZlcjtcbiAgdGlsZUxvYWRGdW5jdGlvbj86IG5ldmVyO1xuICBmb3JtYXQ/OiBuZXZlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTUUxPcHRpb25zIHtcbiAgdXJsOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgcGFyYWxsZWwgd29ya2VycyB0byB1c2UgZm9yIHJldHJpZXZpbmcgdGlsZXMsIEBkZWZhdWx0IDRcbiAgICovXG4gIHNxbFdvcmtlcnM/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE1heGltdW0gZXhwZWN0ZWQgcGFnZSBzaXplIGluIGJ5dGVzIGZvciBTUUxpdGUzIGZpbGVzLCBAZGVmYXVsdCA0MDk2XG4gICAqL1xuICBtYXhTcWxQYWdlU2l6ZT86IG51bWJlcjtcblxuICAvKipcbiAgICogTWVtb3J5IHRvIHVzZSBmb3IgU1FMaXRlIGNhY2hlIGluIEtCLCBAZGVmYXVsdCA0MDk2XG4gICAqL1xuICBzcWxDYWNoZVNpemU/OiBudW1iZXI7XG59XG5cbmV4cG9ydCB0eXBlIE1CVGlsZXNPcHRpb25zID0gTUJUaWxlc1ZlY3Rvck9wdGlvbnMgfCBNQlRpbGVzUmFzdGVyT3B0aW9ucztcblxuY29uc3QgZm9ybWF0czogUmVjb3JkPHN0cmluZywgJ3Jhc3RlcicgfCAndmVjdG9yJz4gPSB7XG4gICdqcGcnOiAncmFzdGVyJyxcbiAgJ3BuZyc6ICdyYXN0ZXInLFxuICAnd2VicCc6ICdyYXN0ZXInLFxuICAncGJmJzogJ3ZlY3RvcicsXG4gICdtdnQnOiAndmVjdG9yJ1xufTtcblxuLyoqXG4gKiBBdXRvbWF0aWNhbGx5IGltcG9ydCBcbiAqIFxuICogQHBhcmFtIG9wdCBcbiAqIEByZXR1cm5zIFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW1wb3J0TUJUaWxlczxUIGV4dGVuZHMgTUJUaWxlc09wdGlvbnM+KG9wdDogU1FMT3B0aW9ucyAmIFQpOiBQcm9taXNlIDwgVCB8IG51bGwgPiB7XG4gIGNvbnN0IHBvb2w6IFByb21pc2U8U1FMaXRlSFRUUFBvb2w+ID0gY3JlYXRlU1FMaXRlSFRUUFBvb2woe1xuICAgIHdvcmtlcnM6IG9wdC5zcWxXb3JrZXJzID8/IDQsXG4gIGh0dHBPcHRpb25zOiB7IG1heFBhZ2VTaXplOiBvcHQubWF4U3FsUGFnZVNpemUsIGNhY2hlU2l6ZTogb3B0LnNxbENhY2hlU2l6ZSB9XG59KVxuICAgIC50aGVuKChwb29sKSA9PiBwb29sLm9wZW4ob3B0LnVybCkudGhlbigoKSA9PiBwb29sKSlcbiAgLmNhdGNoKChlKSA9PiB7XG4gICAgY29uc29sZS5lcnJvcihlKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSk7XG5cbnJldHVybiBwb29sXG4gIC50aGVuKChwKSA9PiBwLmV4ZWMoJ1NFTEVDVCBuYW1lLHZhbHVlIEZST00gbWV0YWRhdGEnKSlcbiAgLnRoZW4oKHIpID0+IHtcbiAgICBpZiAociAmJiByLmxlbmd0aCkge1xuICAgICAgLy8gVHJhbnNmb3JtIGFuIGFycmF5IG9mIGZvcm0gWyBbJ25hbWUnLCAndmFsdWUnIF0sIC4uLiBdIHRvIG9iamVjdFxuICAgICAgY29uc3QgZGF0YSA9IHIucmVkdWNlKChhLCB4KSA9PiB7XG4gICAgICAgIGFbeC5yb3dbMF0gYXMgc3RyaW5nXSA9IHgucm93WzFdO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH0sIHt9KSBhcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBudW1iZXI+O1xuICAgICAgZGVidWcoJ0xvYWRlZCBtZXRhZGF0YScsIGRhdGEpO1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGxvYWQgbWV0YWRhdGEnKTtcbiAgfSlcbiAgLnRoZW4oKG1kOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPikgPT4ge1xuICAgIGNvbnN0IG9wdHM6IFQgPSB7fSBhcyBUO1xuXG4gICAgY29uc3QgZm9ybWF0ID0gKG1kWydmb3JtYXQnXSBhcyBzdHJpbmcpPy50b0xvd2VyQ2FzZT8uKCk7XG4gICAgaWYgKCFmb3JtYXRzW2Zvcm1hdF0pXG4gICAgICBjb25zb2xlLndhcm4oJ1Vua25vd24gdGlsZSBmb3JtYXQnLCBmb3JtYXQpO1xuXG4gICAgLy8gU29tZXRpbWVzLCBJIHdvbmRlciBpZiBNYXBib3ggZG9lc24ndCBob2xkIGEgcGF0ZW50IG9yIHNvbWVcbiAgICAvLyBvdGhlciBraW5kIG9mIGludmVzdG1lbnQgcmVsYXRlZCB0byBldmVyeW9uZSB1c2luZyAzODU3XG4gICAgb3B0cy5wcm9qZWN0aW9uID0gb3B0LnByb2plY3Rpb24gPz8gJ0VQU0c6Mzg1Nyc7XG4gICAgb3B0cy5hdHRyaWJ1dGlvbnMgPSAobWQuYXR0cmlidXRpb24gPz8gbWQuZGVzY3JpcHRpb24pIGFzIHN0cmluZztcbiAgICBvcHRzLm1heFpvb20gPSBvcHQubWF4Wm9vbSA/PyArbWRbJ21heHpvb20nXSBhcyBudW1iZXI7XG4gICAgb3B0cy5taW5ab29tID0gb3B0Lm1pblpvb20gPz8gK21kWydtaW56b29tJ10gYXMgbnVtYmVyO1xuICAgIGNvbnN0IHByb2pFeHRlbnQgPSBnZXRQcm9qZWN0aW9uKG9wdHMucHJvamVjdGlvbik/LmdldEV4dGVudD8uKCk7XG4gICAgaWYgKGZvcm1hdHNbZm9ybWF0XSA9PT0gJ3Jhc3RlcicpIHtcbiAgICAgIGlmIChvcHRzLm1heFpvb20gPT09IHVuZGVmaW5lZCB8fCBvcHRzLm1pblpvb20gPT09IHVuZGVmaW5lZClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZGV0ZXJtaW5lIHRpbGVncmlkLCBuZWVkIG1pblpvb20sIG1heFpvb20nKTtcbiAgICAgIGNvbnN0IGJhc2VSZXNvbHV0aW9uID0gZ2V0V2lkdGgocHJvakV4dGVudCkgLyAyNTY7XG4gICAgICBjb25zdCByZXNvbHV0aW9ucyA9IFtiYXNlUmVzb2x1dGlvbl07XG4gICAgICBmb3IgKGxldCB6ID0gMTsgeiA8PSBvcHRzLm1heFpvb207IHorKylcbiAgICAgICAgcmVzb2x1dGlvbnMucHVzaChyZXNvbHV0aW9uc1tyZXNvbHV0aW9ucy5sZW5ndGggLSAxXSAvIDIpO1xuICAgICAgb3B0cy50aWxlR3JpZCA9IG5ldyBUaWxlR3JpZCh7XG4gICAgICAgIGV4dGVudDogcHJvakV4dGVudCxcbiAgICAgICAgbWluWm9vbTogb3B0cy5taW5ab29tLFxuICAgICAgICByZXNvbHV0aW9uc1xuICAgICAgfSk7XG4gICAgfVxuICAgIG9wdHMucG9vbCA9IHBvb2w7XG4gICAgb3B0cy51cmwgPSBvcHQudXJsO1xuXG4gICAgcmV0dXJuIG9wdHM7XG4gIH0pXG4gIC5jYXRjaChlID0+IHtcbiAgICBjb25zb2xlLndhcm4oZSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0pO1xufVxuIiwiaW1wb3J0IFByb3RvYnVmIGZyb20gJ3BiZic7XG5pbXBvcnQgeyBWZWN0b3JUaWxlLCBWZWN0b3JUaWxlRmVhdHVyZSB9IGZyb20gJ0BtYXBib3gvdmVjdG9yLXRpbGUnO1xuaW1wb3J0ICogYXMgcGFrbyBmcm9tICdwYWtvJztcblxuaW1wb3J0IEZlYXR1cmVGb3JtYXQsIHsgUmVhZE9wdGlvbnMgfSBmcm9tICdvbC9mb3JtYXQvRmVhdHVyZS5qcyc7XG5pbXBvcnQgUHJvamVjdGlvbiBmcm9tICdvbC9wcm9qL1Byb2plY3Rpb24uanMnO1xuaW1wb3J0IFJlbmRlckZlYXR1cmUgZnJvbSAnb2wvcmVuZGVyL0ZlYXR1cmUuanMnO1xuaW1wb3J0IHsgRmVhdHVyZUxpa2UgfSBmcm9tICdvbC9GZWF0dXJlLmpzJztcbmltcG9ydCB7IGdldCBhcyBnZXRQcm9qZWN0aW9uIH0gZnJvbSAnb2wvcHJvai5qcyc7XG5pbXBvcnQgeyBUeXBlIH0gZnJvbSAnb2wvZ2VvbS9HZW9tZXRyeS5qcyc7XG5cbmRlY2xhcmUgbW9kdWxlICdAbWFwYm94L3ZlY3Rvci10aWxlJyB7XG4gIGludGVyZmFjZSBWZWN0b3JUaWxlRmVhdHVyZSB7XG4gICAgdG9HZW9KU09OKHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIsIHByb2plY3Q/OiAoeHk6IFtudW1iZXIsIG51bWJlcl0pID0+IFtudW1iZXIsIG51bWJlcl0pOiBHZW9KU09OLkZlYXR1cmU7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBPcHRpb25zIHtcbiAgbGF5ZXJzPzogc3RyaW5nW107XG4gIGZlYXR1cmVDbGFzcz86IHR5cGVvZiBSZW5kZXJGZWF0dXJlO1xuICBnZW9tZXRyeU5hbWU/OiBzdHJpbmc7XG4gIGlkUHJvcGVydHk/OiBzdHJpbmc7XG4gIGV4dGVudD86IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIE1CVGlsZXNGb3JtYXQgZXh0ZW5kcyBGZWF0dXJlRm9ybWF0IHtcbiAgZGF0YVByb2plY3Rpb246IFByb2plY3Rpb247XG4gIHByaXZhdGUgZmVhdHVyZUNsYXNzXzogdHlwZW9mIFJlbmRlckZlYXR1cmU7XG4gIHByaXZhdGUgZ2VvbWV0cnlOYW1lXzogc3RyaW5nO1xuICBwcml2YXRlIGxheWVyc186IHN0cmluZ1tdIHwgbnVsbDtcbiAgcHJpdmF0ZSBpZFByb3BlcnR5Xzogc3RyaW5nO1xuICBzdXBwb3J0ZWRNZWRpYVR5cGVzOiBzdHJpbmdbXTtcbiAgZXh0ZW50OiBudW1iZXI7XG4gIHN0YXRpYyBNQlR5cGVzID0ge1xuICAgIG1vbm86IFsnVW5rbm93bicsICdQb2ludCcsICdMaW5lU3RyaW5nJywgJ1BvbHlnb24nIF0sXG4gICAgbXVsdGk6IFsnVW5rbm93bicsICdNdWx0aVBvaW50JywgJ011bHRpTGluZVN0cmluZycsICdQb2x5Z29uJ11cbiAgIH0gYXMgUmVjb3JkPCdtb25vJyB8ICdtdWx0aScsIChUeXBlIHwgJ1Vua25vd24nKVtdPjtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zPzogT3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyA/IG9wdGlvbnMgOiB7fTtcblxuICAgIHRoaXMuZGF0YVByb2plY3Rpb24gPSBuZXcgUHJvamVjdGlvbih7XG4gICAgICBjb2RlOiAnJyxcbiAgICAgIHVuaXRzOiAndGlsZS1waXhlbHMnLFxuICAgIH0pO1xuXG4gICAgdGhpcy5mZWF0dXJlQ2xhc3NfID0gb3B0aW9ucy5mZWF0dXJlQ2xhc3MgPyBvcHRpb25zLmZlYXR1cmVDbGFzcyA6IFJlbmRlckZlYXR1cmU7XG4gICAgdGhpcy5nZW9tZXRyeU5hbWVfID0gb3B0aW9ucy5nZW9tZXRyeU5hbWUgPz8gJ0dlb21ldHJ5JztcbiAgICB0aGlzLmxheWVyc18gPSBvcHRpb25zLmxheWVycyA/PyBudWxsO1xuICAgIHRoaXMuaWRQcm9wZXJ0eV8gPSBvcHRpb25zLmlkUHJvcGVydHk7XG4gICAgdGhpcy5leHRlbnQgPSBvcHRpb25zLmV4dGVudCA/PyA0MDk2O1xuXG4gICAgLyoqXG4gICAgICogQXMgdGhpcyBpcyB0aGUgdmVyeSBmaXJzdCB0aW1lIE1CVGlsZXMgd2lsbCBiZSBkaXN0cmlidXRlZCBieSBIVFRQXG4gICAgICogdGhlcmUgaXMgc3RpbGwgbm8gb2ZmaWNpYWwgTUlNRSB0eXBlXG4gICAgICovXG4gICAgdGhpcy5zdXBwb3J0ZWRNZWRpYVR5cGVzID0gW1xuICAgICAgJ2FwcGxpY2F0aW9uL3ZuZC1tYnRpbGVzJ1xuICAgIF07XG4gIH1cblxuICByZWFkRmVhdHVyZShzb3VyY2U6IFZlY3RvclRpbGVGZWF0dXJlLCBvcHRpb25zPzogUmVhZE9wdGlvbnMpOiBGZWF0dXJlTGlrZSB7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IHNvdXJjZS5wcm9wZXJ0aWVzO1xuXG4gICAgbGV0IGlkOiBzdHJpbmcgfCBudW1iZXI7XG4gICAgaWYgKCF0aGlzLmlkUHJvcGVydHlfKSB7XG4gICAgICBpZCA9IHNvdXJjZS5pZDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWQgPSBwcm9wZXJ0aWVzW3RoaXMuaWRQcm9wZXJ0eV9dIGFzIHN0cmluZyB8IG51bWJlcjtcbiAgICAgIGRlbGV0ZSBwcm9wZXJ0aWVzW3RoaXMuaWRQcm9wZXJ0eV9dO1xuICAgIH1cbiAgICBjb25zdCBwb2ludHMgPSBzb3VyY2UubG9hZEdlb21ldHJ5KCk7XG4gICAgY29uc3QgZmxhdENvb3JkaW5hdGVzID0gW10gYXMgbnVtYmVyW107XG4gICAgY29uc3QgZW5kcyA9IFtdIGFzIG51bWJlcltdO1xuXG4gICAgY29uc3QgdHlwZTogVHlwZSB8ICdVbmtub3duJyA9IE1CVGlsZXNGb3JtYXQuTUJUeXBlc1twb2ludHMubGVuZ3RoID4gMSA/ICdtdWx0aScgOiAnbW9ubyddW3NvdXJjZS50eXBlXTtcbiAgICBpZiAodHlwZSA9PT0gJ1Vua25vd24nKVxuICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHBvaW50c1tpXS5sZW5ndGggPT0gMClcbiAgICAgICAgY29udGludWU7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBvaW50c1tpXS5sZW5ndGg7IGorKykge1xuICAgICAgICBmbGF0Q29vcmRpbmF0ZXMucHVzaChwb2ludHNbaV1bal0ueCwgcG9pbnRzW2ldW2pdLnkpO1xuICAgICAgfVxuICAgICAgZW5kcy5wdXNoKGZsYXRDb29yZGluYXRlcy5sZW5ndGgpO1xuICAgIH1cblxuICAgIGNvbnN0IGZlYXR1cmUgPSBuZXcgdGhpcy5mZWF0dXJlQ2xhc3NfKHR5cGUsIGZsYXRDb29yZGluYXRlcywgZW5kcywgcHJvcGVydGllcywgaWQpO1xuICAgIGZlYXR1cmUudHJhbnNmb3JtKG9wdGlvbnMuZGF0YVByb2plY3Rpb24pO1xuXG4gICAgcmV0dXJuIGZlYXR1cmU7XG4gIH1cblxuICByZWFkRmVhdHVyZXMoc291cmNlOiBBcnJheUJ1ZmZlciwgb3B0aW9ucz86IFJlYWRPcHRpb25zKTogRmVhdHVyZUxpa2VbXSB7XG4gICAgY29uc3QgbGF5ZXJzID0gdGhpcy5sYXllcnNfO1xuXG4gICAgY29uc3QgZmVhdHVyZXM6IEZlYXR1cmVMaWtlW10gPSBbXTtcbiAgICBjb25zdCB0aWxlID0gbmV3IFZlY3RvclRpbGUobmV3IFByb3RvYnVmKHBha28udW5nemlwKHNvdXJjZSkpKTtcbiAgICBvcHRpb25zID0gdGhpcy5hZGFwdE9wdGlvbnMob3B0aW9ucyk7XG4gICAgY29uc3QgZGF0YVByb2plY3Rpb24gPSBnZXRQcm9qZWN0aW9uKG9wdGlvbnMuZGF0YVByb2plY3Rpb24pO1xuICAgIGRhdGFQcm9qZWN0aW9uLnNldFdvcmxkRXh0ZW50KG9wdGlvbnMuZXh0ZW50KTtcbiAgICBkYXRhUHJvamVjdGlvbi5zZXRFeHRlbnQoWzAsIDAsIHRoaXMuZXh0ZW50LCB0aGlzLmV4dGVudF0pO1xuICAgIG9wdGlvbnMuZGF0YVByb2plY3Rpb24gPSBkYXRhUHJvamVjdGlvbjtcblxuICAgIGZvciAoY29uc3QgbGF5ZXJOYW1lIG9mIE9iamVjdC5rZXlzKHRpbGUubGF5ZXJzKSkge1xuICAgICAgaWYgKGxheWVycyAmJiAhbGF5ZXJzLmluY2x1ZGVzKGxheWVyTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBsID0gdGlsZS5sYXllcnNbbGF5ZXJOYW1lXTtcbiAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGwubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICBjb25zdCB2ZWN0b3JGZWF0dXJlID0gbC5mZWF0dXJlKGlkeCk7XG4gICAgICAgIGNvbnN0IGZlYXR1cmUgPSB0aGlzLnJlYWRGZWF0dXJlKHZlY3RvckZlYXR1cmUsIG9wdGlvbnMpO1xuICAgICAgICBmZWF0dXJlLmdldFByb3BlcnRpZXMoKS5sYXllciA9IGxheWVyTmFtZTtcbiAgICAgICAgZmVhdHVyZXMucHVzaChmZWF0dXJlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmVhdHVyZXM7XG4gIH1cblxuICByZWFkUHJvamVjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhUHJvamVjdGlvbjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY3JlYXRlU1FMaXRlSFRUUFBvb2wsIFNRTGl0ZUhUVFBQb29sIH0gZnJvbSAnc3FsaXRlLXdhc20taHR0cCc7XG5cbmltcG9ydCBWZWN0b3JUaWxlU291cmNlIGZyb20gJ29sL3NvdXJjZS9WZWN0b3JUaWxlLmpzJztcbmltcG9ydCBWZWN0b3JUaWxlIGZyb20gJ29sL1ZlY3RvclRpbGUuanMnO1xuaW1wb3J0IHsgVGlsZUNvb3JkIH0gZnJvbSAnb2wvdGlsZWNvb3JkLmpzJztcbmltcG9ydCBGZWF0dXJlIGZyb20gJ29sL0ZlYXR1cmUuanMnO1xuaW1wb3J0IHsgR2VvbWV0cnkgfSBmcm9tICdvbC9nZW9tLmpzJztcblxuaW1wb3J0IHsgTUJUaWxlc1ZlY3Rvck9wdGlvbnMgfSBmcm9tICcuL21idGlsZXMnO1xuaW1wb3J0IHsgTUJUaWxlc0Zvcm1hdCB9IGZyb20gJy4vbWJ0aWxlcy1mb3JtYXQnO1xuaW1wb3J0IHsgZGVidWcgfSBmcm9tICcuL2RlYnVnJztcblxuLyoqXG4gKiBBIHRpbGUgc291cmNlIGluIGEgcmVtb3RlIC5tYnRpbGVzIGZpbGUgYWNjZXNzaWJsZSBieSBIVFRQXG4gKiBcbiAqIFdBUk5JTkdcbiAqIElmIHlvdXIgYXBwbGljYXRpb24gY29udGludW91c2x5IGNyZWF0ZXMgYW5kIHJlbW92ZXMgTUJUaWxlc1NvdXJjZVxuICogb2JqZWN0cywgc3BlY2lhbCBjYXJlIG11c3QgYmUgdGFrZW4gdG8gcHJvcGVybHkgZGlzcG9zZSBvZiB0aGVtLlxuICogQW4gTUJUaWxlc1NvdXJjZSBjcmVhdGVzIGEgdGhyZWFkIHBvb2wgdGhhdCB0aGUgSlMgZW5naW5lIGlzIHVuYWJsZSB0b1xuICogYXV0b21hdGljYWxseSBnYXJiYWdlLWNvbGxlY3QgdW5sZXNzIHRoZSBkaXNwb3NlKCkgbWV0aG9kXG4gKiBpcyBpbnZva2VkLlxuICogSWYgeW91IG5lZWQgdG8gZGlzcG9zZSBhIG1hcCB0aGF0IGNhbiBwb3RlbnRpYWxseSBjb250YWluXG4gKiBNQlRpbGVzU291cmNlIG9iamVjdHMsIGNoZWNrIGxvYWRFeGFtcGxlKCkgaW5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tbW9tdGNoZXYvb2wtbWJ0aWxlcy9ibG9iL21haW4vZXhhbXBsZXMvaW5kZXgudHMjTDE1XG4gKi9cbmV4cG9ydCBjbGFzcyBNQlRpbGVzVmVjdG9yU291cmNlIGV4dGVuZHMgVmVjdG9yVGlsZVNvdXJjZSB7XG4gIHByaXZhdGUgcG9vbDogUHJvbWlzZTxTUUxpdGVIVFRQUG9vbD47XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogTUJUaWxlc1ZlY3Rvck9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy51cmwgPT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnBvb2wgPT09IHVuZGVmaW5lZClcbiAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBzcGVjaWZ5IHVybCcpO1xuXG4gICAgICBzdXBlcih7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgdXJsOiB1bmRlZmluZWQsXG4gICAgICBmb3JtYXQ6IG5ldyBNQlRpbGVzRm9ybWF0KHtcbiAgICAgICAgbGF5ZXJzOiBvcHRpb25zLmxheWVyc1xuICAgICAgfSksXG4gICAgICAvLyBUaGlzIGlzIHJlcXVpcmVkIHRvIHByZXZlbnQgT3BlbmxheWVycycgY2FjaGUgZnJvbSB0aGlua2luZyB0aGF0IGFsbCB0aWxlcyBzaGFyZSB0aGUgc2FtZSBVUkxcbiAgICAgIHRpbGVVcmxGdW5jdGlvbjogKGNvb3JkczogVGlsZUNvb3JkKSA9PiBgJHtvcHRpb25zLnVybH0jJHtjb29yZHNbMF19OiR7Y29vcmRzWzFdfToke2Nvb3Jkc1syXX1gXG4gICAgfSk7XG5cbiAgICB0aGlzLnNldFRpbGVMb2FkRnVuY3Rpb24odGhpcy50aWxlTG9hZGVyLmJpbmQodGhpcykpO1xuXG4gICAgdGhpcy5wb29sID0gb3B0aW9ucy5wb29sID8/IGNyZWF0ZVNRTGl0ZUhUVFBQb29sKHtcbiAgICAgIHdvcmtlcnM6IG9wdGlvbnMuc3FsV29ya2VycyA/PyA0LFxuICAgICAgaHR0cE9wdGlvbnM6IHsgbWF4UGFnZVNpemU6IDQwOTYgfVxuICAgIH0pXG4gICAgICAudGhlbigocG9vbCkgPT4gcG9vbC5vcGVuKG9wdGlvbnMudXJsKS50aGVuKCgpID0+IHBvb2wpKTtcbiAgfVxuXG4gIHByaXZhdGUgdGlsZUxvYWRlcih0aWxlOiBWZWN0b3JUaWxlLCBfdXJsOiBzdHJpbmcpIHtcbiAgICBkZWJ1ZygnbG9hZGluZyB0aWxlJywgW3RpbGUudGlsZUNvb3JkWzBdLCB0aWxlLnRpbGVDb29yZFsxXSwgdGlsZS50aWxlQ29vcmRbMl1dKTtcbiAgICB0aWxlLnNldExvYWRlcigoZXh0ZW50LCByZXNvbHV0aW9uLCBwcm9qZWN0aW9uKSA9PiB7XG4gICAgICB0aGlzLnBvb2xcbiAgICAgICAgLnRoZW4oKHApID0+XG4gICAgICAgICAgcC5leGVjKFxuICAgICAgICAgICAgJ1NFTEVDVCB0aWxlX2RhdGEgRlJPTSB0aWxlcyBXSEVSRSB6b29tX2xldmVsID0gJHpvb20gQU5EIHRpbGVfY29sdW1uID0gJGNvbCBBTkQgdGlsZV9yb3cgPSAkcm93JyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgJHpvb206IHRpbGUudGlsZUNvb3JkWzBdLFxuICAgICAgICAgICAgICAkY29sOiB0aWxlLnRpbGVDb29yZFsxXSxcbiAgICAgICAgICAgICAgJHJvdzogKDEgPDwgdGlsZS50aWxlQ29vcmRbMF0pIC0gMSAtIHRpbGUudGlsZUNvb3JkWzJdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgKSlcbiAgICAgICAgLnRoZW4oKHIpID0+IHtcbiAgICAgICAgICBpZiAociAmJiByWzBdICYmIHJbMF0ucm93WzBdKSB7XG4gICAgICAgICAgICBjb25zdCBmb3JtYXQgPSB0aWxlLmdldEZvcm1hdCgpO1xuICAgICAgICAgICAgY29uc3QgZmVhdHVyZXMgPSBmb3JtYXQucmVhZEZlYXR1cmVzKHJbMF0ucm93WzBdLCB7XG4gICAgICAgICAgICAgIGV4dGVudCxcbiAgICAgICAgICAgICAgZmVhdHVyZVByb2plY3Rpb246IHByb2plY3Rpb25cbiAgICAgICAgICAgIH0pIGFzIEZlYXR1cmU8R2VvbWV0cnk+W107XG4gICAgICAgICAgICB0aWxlLnNldEZlYXR1cmVzKGZlYXR1cmVzKTtcbiAgICAgICAgICAgIHRpbGUub25Mb2FkKGZlYXR1cmVzLCBwcm9qZWN0aW9uKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBkYXRhIGZvciAke3RpbGUudGlsZUNvb3JkfWApO1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oZSk7XG4gICAgICAgICAgdGlsZS5vbkVycm9yKCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZGlzcG9zZUludGVybmFsKCkge1xuICAgIHJldHVybiB0aGlzLnBvb2wudGhlbigocCkgPT4gcC5jbG9zZSgpKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY3JlYXRlU1FMaXRlSFRUUFBvb2wsIFNRTGl0ZUhUVFBQb29sIH0gZnJvbSAnc3FsaXRlLXdhc20taHR0cCc7XG5cbmltcG9ydCBJbWFnZVRpbGVTb3VyY2UgZnJvbSAnb2wvc291cmNlL1RpbGVJbWFnZS5qcyc7XG5pbXBvcnQgSW1hZ2VUaWxlIGZyb20gJ29sL0ltYWdlVGlsZS5qcyc7XG5pbXBvcnQgeyBUaWxlQ29vcmQgfSBmcm9tICdvbC90aWxlY29vcmQuanMnO1xuXG5pbXBvcnQgeyBNQlRpbGVzUmFzdGVyT3B0aW9ucyB9IGZyb20gJy4vbWJ0aWxlcyc7XG5pbXBvcnQgeyBkZWJ1ZyB9IGZyb20gJy4vZGVidWcnO1xuXG4vKipcbiAqIEEgdGlsZSBzb3VyY2UgaW4gYSByZW1vdGUgLm1idGlsZXMgZmlsZSBhY2Nlc3NpYmxlIGJ5IEhUVFBcbiAqIFxuICogV0FSTklOR1xuICogSWYgeW91ciBhcHBsaWNhdGlvbiBjb250aW51b3VzbHkgY3JlYXRlcyBhbmQgcmVtb3ZlcyBNQlRpbGVzU291cmNlXG4gKiBvYmplY3RzLCBzcGVjaWFsIGNhcmUgbXVzdCBiZSB0YWtlbiB0byBwcm9wZXJseSBkaXNwb3NlIG9mIHRoZW0uXG4gKiBBbiBNQlRpbGVzU291cmNlIGNyZWF0ZXMgYSB0aHJlYWQgcG9vbCB0aGF0IHRoZSBKUyBlbmdpbmUgaXMgdW5hYmxlIHRvXG4gKiBhdXRvbWF0aWNhbGx5IGdhcmJhZ2UtY29sbGVjdCB1bmxlc3MgdGhlIGRpc3Bvc2UoKSBtZXRob2RcbiAqIGlzIGludm9rZWQuXG4gKiBJZiB5b3UgbmVlZCB0byBkaXNwb3NlIGEgbWFwIHRoYXQgY2FuIHBvdGVudGlhbGx5IGNvbnRhaW5cbiAqIE1CVGlsZXNTb3VyY2Ugb2JqZWN0cywgY2hlY2sgbG9hZEV4YW1wbGUoKSBpblxuICogaHR0cHM6Ly9naXRodWIuY29tL21tb210Y2hldi9vbC1tYnRpbGVzL2Jsb2IvbWFpbi9leGFtcGxlcy9pbmRleC50cyNMMTVcbiAqL1xuZXhwb3J0IGNsYXNzIE1CVGlsZXNSYXN0ZXJTb3VyY2UgZXh0ZW5kcyBJbWFnZVRpbGVTb3VyY2Uge1xuICBwcml2YXRlIHBvb2w6IFByb21pc2U8U1FMaXRlSFRUUFBvb2w+O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge01CVGlsZXNSYXN0ZXJPcHRpb25zfSBvcHRpb25zIG9wdGlvbnNcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IE1CVGlsZXNSYXN0ZXJPcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMudXJsID09PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5wb29sID09PSB1bmRlZmluZWQpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3Qgc3BlY2lmeSB1cmwnKTtcblxuICAgIHN1cGVyKHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICB1cmw6IHVuZGVmaW5lZCxcbiAgICAgIC8vIFRoaXMgaXMgcmVxdWlyZWQgdG8gcHJldmVudCBPcGVubGF5ZXJzJyBjYWNoZSBmcm9tIHRoaW5raW5nIHRoYXQgYWxsIHRpbGVzIHNoYXJlIHRoZSBzYW1lIFVSTFxuICAgICAgdGlsZVVybEZ1bmN0aW9uOiAoY29vcmRzOiBUaWxlQ29vcmQpID0+IGAke29wdGlvbnMudXJsfSMke2Nvb3Jkc1swXX06JHtjb29yZHNbMV19OiR7Y29vcmRzWzJdfWBcbiAgICB9KTtcblxuICAgIHRoaXMuc2V0VGlsZUxvYWRGdW5jdGlvbih0aGlzLnRpbGVMb2FkZXIuYmluZCh0aGlzKSk7XG5cbiAgICB0aGlzLnBvb2wgPSBvcHRpb25zLnBvb2wgPz8gY3JlYXRlU1FMaXRlSFRUUFBvb2woe1xuICAgICAgd29ya2Vyczogb3B0aW9ucy5zcWxXb3JrZXJzID8/IDQsXG4gICAgICBodHRwT3B0aW9uczogeyBtYXhQYWdlU2l6ZTogNDA5NiB9XG4gICAgfSlcbiAgICAgIC50aGVuKChwb29sKSA9PiBwb29sLm9wZW4ob3B0aW9ucy51cmwpLnRoZW4oKCkgPT4gcG9vbCkpO1xuICB9XG5cbiAgcHJpdmF0ZSB0aWxlTG9hZGVyKHRpbGU6IEltYWdlVGlsZSwgX3VybDogc3RyaW5nKSB7XG4gICAgZGVidWcoJ2xvYWRpbmcgdGlsZScsIFt0aWxlLnRpbGVDb29yZFswXSwgdGlsZS50aWxlQ29vcmRbMV0sIHRpbGUudGlsZUNvb3JkWzJdXSk7XG4gICAgY29uc3QgaW1hZ2UgPSB0aWxlLmdldEltYWdlKCkgYXMgSFRNTEltYWdlRWxlbWVudDtcbiAgICB0aGlzLnBvb2xcbiAgICAgIC50aGVuKChwKSA9PlxuICAgICAgICBwLmV4ZWMoXG4gICAgICAgICAgJ1NFTEVDVCB0aWxlX2RhdGEgRlJPTSB0aWxlcyBXSEVSRSB6b29tX2xldmVsID0gJHpvb20gQU5EIHRpbGVfY29sdW1uID0gJGNvbCBBTkQgdGlsZV9yb3cgPSAkcm93JyxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAkem9vbTogdGlsZS50aWxlQ29vcmRbMF0sXG4gICAgICAgICAgICAkY29sOiB0aWxlLnRpbGVDb29yZFsxXSxcbiAgICAgICAgICAgICRyb3c6ICgxIDw8IHRpbGUudGlsZUNvb3JkWzBdKSAtIDEgLSB0aWxlLnRpbGVDb29yZFsyXVxuICAgICAgICAgIH1cbiAgICAgICAgKSlcbiAgICAgIC50aGVuKChyKSA9PiB7XG4gICAgICAgIGlmIChyICYmIHJbMF0pIHtcbiAgICAgICAgICBpZiAoclswXS5yb3dbMF0gaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW3JbMF0ucm93WzBdIGFzIFVpbnQ4QXJyYXldKTtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlVXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgICAgICAgIGltYWdlLnNyYyA9IGltYWdlVXJsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aWxlLnNldFN0YXRlKDMpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoKSA9PiB0aWxlLnNldFN0YXRlKDMpKTtcbiAgfVxuXG4gIGRpc3Bvc2VJbnRlcm5hbCgpIHtcbiAgICByZXR1cm4gdGhpcy5wb29sLnRoZW4oKHApID0+IHAuY2xvc2UoKSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQG1vZHVsZSBvbC9zb3VyY2UvT1NNXG4gKi9cblxuaW1wb3J0IFhZWiBmcm9tICcuL1hZWi5qcyc7XG5cbi8qKlxuICogVGhlIGF0dHJpYnV0aW9uIGNvbnRhaW5pbmcgYSBsaW5rIHRvIHRoZSBPcGVuU3RyZWV0TWFwIENvcHlyaWdodCBhbmQgTGljZW5zZVxuICogcGFnZS5cbiAqIEBjb25zdFxuICogQHR5cGUge3N0cmluZ31cbiAqIEBhcGlcbiAqL1xuZXhwb3J0IGNvbnN0IEFUVFJJQlVUSU9OID1cbiAgJyYjMTY5OyAnICtcbiAgJzxhIGhyZWY9XCJodHRwczovL3d3dy5vcGVuc3RyZWV0bWFwLm9yZy9jb3B5cmlnaHRcIiB0YXJnZXQ9XCJfYmxhbmtcIj5PcGVuU3RyZWV0TWFwPC9hPiAnICtcbiAgJ2NvbnRyaWJ1dG9ycy4nO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7aW1wb3J0KFwiLi9Tb3VyY2UuanNcIikuQXR0cmlidXRpb25MaWtlfSBbYXR0cmlidXRpb25zXSBBdHRyaWJ1dGlvbnMuXG4gKiBAcHJvcGVydHkge251bWJlcn0gW2NhY2hlU2l6ZV0gSW5pdGlhbCB0aWxlIGNhY2hlIHNpemUuIFdpbGwgYXV0by1ncm93IHRvIGhvbGQgYXQgbGVhc3QgdGhlIG51bWJlciBvZiB0aWxlcyBpbiB0aGUgdmlld3BvcnQuXG4gKiBAcHJvcGVydHkge251bGx8c3RyaW5nfSBbY3Jvc3NPcmlnaW49J2Fub255bW91cyddIFRoZSBgY3Jvc3NPcmlnaW5gIGF0dHJpYnV0ZSBmb3IgbG9hZGVkIGltYWdlcy4gIE5vdGUgdGhhdFxuICogeW91IG11c3QgcHJvdmlkZSBhIGBjcm9zc09yaWdpbmAgdmFsdWUgaWYgeW91IHdhbnQgdG8gYWNjZXNzIHBpeGVsIGRhdGEgd2l0aCB0aGUgQ2FudmFzIHJlbmRlcmVyLlxuICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvQ09SU19lbmFibGVkX2ltYWdlIGZvciBtb3JlIGRldGFpbC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2ludGVycG9sYXRlPXRydWVdIFVzZSBpbnRlcnBvbGF0ZWQgdmFsdWVzIHdoZW4gcmVzYW1wbGluZy4gIEJ5IGRlZmF1bHQsXG4gKiBsaW5lYXIgaW50ZXJwb2xhdGlvbiBpcyB1c2VkIHdoZW4gcmVzYW1wbGluZy4gIFNldCB0byBmYWxzZSB0byB1c2UgdGhlIG5lYXJlc3QgbmVpZ2hib3IgaW5zdGVhZC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbWF4Wm9vbT0xOV0gTWF4IHpvb20uXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFtvcGFxdWU9dHJ1ZV0gV2hldGhlciB0aGUgbGF5ZXIgaXMgb3BhcXVlLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtyZXByb2plY3Rpb25FcnJvclRocmVzaG9sZD0wLjVdIE1heGltdW0gYWxsb3dlZCByZXByb2plY3Rpb24gZXJyb3IgKGluIHBpeGVscykuXG4gKiBIaWdoZXIgdmFsdWVzIGNhbiBpbmNyZWFzZSByZXByb2plY3Rpb24gcGVyZm9ybWFuY2UsIGJ1dCBkZWNyZWFzZSBwcmVjaXNpb24uXG4gKiBAcHJvcGVydHkge2ltcG9ydChcIi4uL1RpbGUuanNcIikuTG9hZEZ1bmN0aW9ufSBbdGlsZUxvYWRGdW5jdGlvbl0gT3B0aW9uYWwgZnVuY3Rpb24gdG8gbG9hZCBhIHRpbGUgZ2l2ZW4gYSBVUkwuIFRoZSBkZWZhdWx0IGlzXG4gKiBgYGBqc1xuICogZnVuY3Rpb24oaW1hZ2VUaWxlLCBzcmMpIHtcbiAqICAgaW1hZ2VUaWxlLmdldEltYWdlKCkuc3JjID0gc3JjO1xuICogfTtcbiAqIGBgYFxuICogQHByb3BlcnR5IHtudW1iZXJ9IFt0cmFuc2l0aW9uPTI1MF0gRHVyYXRpb24gb2YgdGhlIG9wYWNpdHkgdHJhbnNpdGlvbiBmb3IgcmVuZGVyaW5nLlxuICogVG8gZGlzYWJsZSB0aGUgb3BhY2l0eSB0cmFuc2l0aW9uLCBwYXNzIGB0cmFuc2l0aW9uOiAwYC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdXJsPSdodHRwczovL3RpbGUub3BlbnN0cmVldG1hcC5vcmcve3p9L3t4fS97eX0ucG5nJ10gVVJMIHRlbXBsYXRlLlxuICogTXVzdCBpbmNsdWRlIGB7eH1gLCBge3l9YCBvciBgey15fWAsIGFuZCBge3p9YCBwbGFjZWhvbGRlcnMuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFt3cmFwWD10cnVlXSBXaGV0aGVyIHRvIHdyYXAgdGhlIHdvcmxkIGhvcml6b250YWxseS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfGltcG9ydChcIi4uL2FycmF5LmpzXCIpLk5lYXJlc3REaXJlY3Rpb25GdW5jdGlvbn0gW3pEaXJlY3Rpb249MF1cbiAqIENob29zZSB3aGV0aGVyIHRvIHVzZSB0aWxlcyB3aXRoIGEgaGlnaGVyIG9yIGxvd2VyIHpvb20gbGV2ZWwgd2hlbiBiZXR3ZWVuIGludGVnZXJcbiAqIHpvb20gbGV2ZWxzLiBTZWUge0BsaW5rIG1vZHVsZTpvbC90aWxlZ3JpZC9UaWxlR3JpZH5UaWxlR3JpZCNnZXRaRm9yUmVzb2x1dGlvbn0uXG4gKi9cblxuLyoqXG4gKiBAY2xhc3NkZXNjXG4gKiBMYXllciBzb3VyY2UgZm9yIHRoZSBPcGVuU3RyZWV0TWFwIHRpbGUgc2VydmVyLlxuICogQGFwaVxuICovXG5jbGFzcyBPU00gZXh0ZW5kcyBYWVoge1xuICAvKipcbiAgICogQHBhcmFtIHtPcHRpb25zfSBbb3B0aW9uc10gT3BlbiBTdHJlZXQgTWFwIG9wdGlvbnMuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICBsZXQgYXR0cmlidXRpb25zO1xuICAgIGlmIChvcHRpb25zLmF0dHJpYnV0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBhdHRyaWJ1dGlvbnMgPSBvcHRpb25zLmF0dHJpYnV0aW9ucztcbiAgICB9IGVsc2Uge1xuICAgICAgYXR0cmlidXRpb25zID0gW0FUVFJJQlVUSU9OXTtcbiAgICB9XG5cbiAgICBjb25zdCBjcm9zc09yaWdpbiA9XG4gICAgICBvcHRpb25zLmNyb3NzT3JpZ2luICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmNyb3NzT3JpZ2luIDogJ2Fub255bW91cyc7XG5cbiAgICBjb25zdCB1cmwgPVxuICAgICAgb3B0aW9ucy51cmwgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IG9wdGlvbnMudXJsXG4gICAgICAgIDogJ2h0dHBzOi8vdGlsZS5vcGVuc3RyZWV0bWFwLm9yZy97en0ve3h9L3t5fS5wbmcnO1xuXG4gICAgc3VwZXIoe1xuICAgICAgYXR0cmlidXRpb25zOiBhdHRyaWJ1dGlvbnMsXG4gICAgICBhdHRyaWJ1dGlvbnNDb2xsYXBzaWJsZTogZmFsc2UsXG4gICAgICBjYWNoZVNpemU6IG9wdGlvbnMuY2FjaGVTaXplLFxuICAgICAgY3Jvc3NPcmlnaW46IGNyb3NzT3JpZ2luLFxuICAgICAgaW50ZXJwb2xhdGU6IG9wdGlvbnMuaW50ZXJwb2xhdGUsXG4gICAgICBtYXhab29tOiBvcHRpb25zLm1heFpvb20gIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubWF4Wm9vbSA6IDE5LFxuICAgICAgb3BhcXVlOiBvcHRpb25zLm9wYXF1ZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5vcGFxdWUgOiB0cnVlLFxuICAgICAgcmVwcm9qZWN0aW9uRXJyb3JUaHJlc2hvbGQ6IG9wdGlvbnMucmVwcm9qZWN0aW9uRXJyb3JUaHJlc2hvbGQsXG4gICAgICB0aWxlTG9hZEZ1bmN0aW9uOiBvcHRpb25zLnRpbGVMb2FkRnVuY3Rpb24sXG4gICAgICB0cmFuc2l0aW9uOiBvcHRpb25zLnRyYW5zaXRpb24sXG4gICAgICB1cmw6IHVybCxcbiAgICAgIHdyYXBYOiBvcHRpb25zLndyYXBYLFxuICAgICAgekRpcmVjdGlvbjogb3B0aW9ucy56RGlyZWN0aW9uLFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE9TTTtcbiJdLCJuYW1lcyI6WyJ0YXJnZXQiLCJsYXllcnMiLCJ6SW5kZXgiLCJzb3VyY2UiLCJvcGFjaXR5IiwidXJsIiwidmlldyIsImNlbnRlciIsInpvb20iLCJkZWJ1ZyIsIk9MX01CVElMRVNfREVCVUciLCJwcm9jZXNzIiwiZW52IiwiY29uc29sZSIsImJpbmQiLCJmb3JtYXRzIiwiaW1wb3J0TUJUaWxlcyIsIm9wdCIsInBvb2wiLCJ3b3JrZXJzIiwic3FsV29ya2VycyIsImh0dHBPcHRpb25zIiwibWF4UGFnZVNpemUiLCJtYXhTcWxQYWdlU2l6ZSIsImNhY2hlU2l6ZSIsInNxbENhY2hlU2l6ZSIsInRoZW4iLCJvcGVuIiwiY2F0Y2giLCJlIiwiZXJyb3IiLCJwIiwiZXhlYyIsInIiLCJsZW5ndGgiLCJkYXRhIiwicmVkdWNlIiwiYSIsIngiLCJyb3ciLCJFcnJvciIsIm1kIiwib3B0cyIsImZvcm1hdCIsInRvTG93ZXJDYXNlIiwid2FybiIsInByb2plY3Rpb24iLCJhdHRyaWJ1dGlvbnMiLCJhdHRyaWJ1dGlvbiIsImRlc2NyaXB0aW9uIiwibWF4Wm9vbSIsIm1pblpvb20iLCJwcm9qRXh0ZW50IiwiZ2V0RXh0ZW50IiwidW5kZWZpbmVkIiwicmVzb2x1dGlvbnMiLCJ6IiwicHVzaCIsInRpbGVHcmlkIiwiVGlsZUdyaWQiLCJleHRlbnQiLCJNQlRpbGVzRm9ybWF0IiwiRmVhdHVyZSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInN1cGVyIiwidGhpcyIsImRhdGFQcm9qZWN0aW9uIiwiUHJvamVjdGlvbiIsImNvZGUiLCJ1bml0cyIsImZlYXR1cmVDbGFzc18iLCJmZWF0dXJlQ2xhc3MiLCJnZW9tZXRyeU5hbWVfIiwiZ2VvbWV0cnlOYW1lIiwibGF5ZXJzXyIsImlkUHJvcGVydHlfIiwiaWRQcm9wZXJ0eSIsInN1cHBvcnRlZE1lZGlhVHlwZXMiLCJyZWFkRmVhdHVyZSIsInByb3BlcnRpZXMiLCJpZCIsInBvaW50cyIsImxvYWRHZW9tZXRyeSIsImZsYXRDb29yZGluYXRlcyIsImVuZHMiLCJ0eXBlIiwiTUJUeXBlcyIsImkiLCJqIiwieSIsImZlYXR1cmUiLCJ0cmFuc2Zvcm0iLCJyZWFkRmVhdHVyZXMiLCJmZWF0dXJlcyIsInRpbGUiLCJWZWN0b3JUaWxlIiwiYWRhcHRPcHRpb25zIiwic2V0V29ybGRFeHRlbnQiLCJzZXRFeHRlbnQiLCJsYXllck5hbWUiLCJPYmplY3QiLCJrZXlzIiwiaW5jbHVkZXMiLCJsIiwiaWR4IiwidmVjdG9yRmVhdHVyZSIsImdldFByb3BlcnRpZXMiLCJsYXllciIsInJlYWRQcm9qZWN0aW9uIiwibW9ubyIsIm11bHRpIiwiTUJUaWxlc1ZlY3RvclNvdXJjZSIsInRpbGVVcmxGdW5jdGlvbiIsImNvb3JkcyIsInNldFRpbGVMb2FkRnVuY3Rpb24iLCJ0aWxlTG9hZGVyIiwiX3VybCIsInRpbGVDb29yZCIsInNldExvYWRlciIsInJlc29sdXRpb24iLCIkem9vbSIsIiRjb2wiLCIkcm93IiwiZ2V0Rm9ybWF0IiwiZmVhdHVyZVByb2plY3Rpb24iLCJzZXRGZWF0dXJlcyIsIm9uTG9hZCIsIm9uRXJyb3IiLCJkaXNwb3NlSW50ZXJuYWwiLCJjbG9zZSIsIk1CVGlsZXNSYXN0ZXJTb3VyY2UiLCJpbWFnZSIsImdldEltYWdlIiwiVWludDhBcnJheSIsImJsb2IiLCJCbG9iIiwiaW1hZ2VVcmwiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJzcmMiLCJzZXRTdGF0ZSIsIk9TTSIsImNyb3NzT3JpZ2luIiwiYXR0cmlidXRpb25zQ29sbGFwc2libGUiLCJpbnRlcnBvbGF0ZSIsIm9wYXF1ZSIsInJlcHJvamVjdGlvbkVycm9yVGhyZXNob2xkIiwidGlsZUxvYWRGdW5jdGlvbiIsInRyYW5zaXRpb24iLCJ3cmFwWCIsInpEaXJlY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9