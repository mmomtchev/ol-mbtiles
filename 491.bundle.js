"use strict";(self.webpackChunkol_mbtiles=self.webpackChunkol_mbtiles||[]).push([[491],{9491:(e,t,o)=>{o.r(t),o.d(t,{default:()=>d});var r=o(8854),n=o(2479),a=o(9090),s=o(9731),l=o(6263),i=o(8661),c=o(5901),u=o(5917);function d(){return new r.Z({target:"map",layers:[new n.Z({source:new l.Z}),new s.Z({source:new c.B({url:"https://velivole.b-cdn.net/maptiler-osm-2017-07-03-v3.6.1-europe.mbtiles",layers:["transportation","water","waterway","landuse","place"],attributions:["MapTiler","OSM","https://data.maptiler.com/downloads/dataset/osm/europe/"],maxZoom:14,minZoom:0}),style:function(e){switch(e.get("layer")){case"water":case"waterway":return u.d_;case"transportation":return(0,u.xl)(e);case"landuse":return u.Xu;case"boundary":return u.oj;case"place":return(0,u.Hh)(e);default:return null}}})],view:new a.ZP({center:(0,i.mi)([12,50]),zoom:6})})}},5917:(e,t,o)=>{o.d(t,{Hh:()=>g,Xu:()=>w,d_:()=>m,kY:()=>c,oj:()=>h,xl:()=>f,y8:()=>i});var r=o(7539),n=o(283),a=o(1345),s=o(8958),l=o(1280);function i(e,t){let o,i;switch(e){case 0:o=6,i="2em";break;case 1:o=5,i="1.2em";break;case 2:o=3,i="0.8em";break;default:o=1,i="0.5em"}i+=" helvetica, sans-serif";const c="#00007f";return new r.ZP({image:new n.Z({fill:new a.Z({color:c}),radius:o,stroke:new s.Z({color:c,width:o})}),text:new l.Z({font:i,text:t.get("n"),fill:new a.Z({color:"#ffffff"}),stroke:new s.Z({color:c,width:2})})})}const c=new r.ZP({stroke:new s.Z({color:"blue",width:2})}),u={},d={motorway:"#776",trunk:"#ccb",highway:"#f39"},w=new r.ZP({fill:new a.Z({color:"#666"}),stroke:new s.Z({color:"#444",width:1})}),m=new r.ZP({fill:new a.Z({color:"#9db9e8"})}),h=new r.ZP({stroke:new s.Z({color:"#8B008B",width:2})}),f=function(e){const t=e.get("class"),o=e.get("railway"),n=e.get("sort_key"),a=t+"/"+o+"/"+n;let l=u[a];if(!l){let e,i;o?(e="#7de",i=1):(e=d[t],i="highway"==t?1.5:1),l=new r.ZP({stroke:new s.Z({color:e,width:i}),zIndex:n}),u[a]=l}return l},y=new r.ZP({image:new n.Z({radius:5,fill:new a.Z({color:"#000080"})})}),p=new s.Z({color:"white",width:2}),g=function(e){if("country"==e.get("class"))return null;if(e.get("name")){const t=y.clone();return t.setText(new l.Z({text:e.get("name"),offsetY:-5,font:"bold 16px sans-serif",stroke:p})),t}}},5901:(e,t,o)=>{o.d(t,{B:()=>y});var r=o(2891),n=o.n(r),a=o(7205),s=o(3614),l=o.n(s),i=o(8929),c=o(7885),u=o(9646),d=o(9619),w=o(3433),m=o(8661);class h extends u.ZP{constructor(e){var t,o,r;super(),e=e||{},this.dataProjection=new d.Z({code:"",units:"tile-pixels"}),this.featureClass_=e.featureClass?e.featureClass:w.ZP,this.geometryName_=null!==(t=e.geometryName)&&void 0!==t?t:"Geometry",this.layers_=null!==(o=e.layers)&&void 0!==o?o:null,this.idProperty_=e.idProperty,this.extent=null!==(r=e.extent)&&void 0!==r?r:4096,this.supportedMediaTypes=["application/vnd-mbtiles"]}readFeature(e,t){const o=e.properties;let r;this.idProperty_?(r=o[this.idProperty_],delete o[this.idProperty_]):r=e.id;const n=e.loadGeometry(),a=[],s=[],l=h.MBTypes[n.length>1?"multi":"mono"][e.type];if("Unknown"===l)return null;for(let e=0;e<n.length;e++)if(0!=n[e].length){for(let t=0;t<n[e].length;t++)a.push(n[e][t].x,n[e][t].y);s.push(a.length)}const i=new this.featureClass_(l,a,s,o,r);return i.transform(t.dataProjection),i}readFeatures(e,t){const o=this.layers_,r=[],n=new i.VectorTile(new(l())(c.ec(e)));t=this.adaptOptions(t);const a=(0,m.U2)(t.dataProjection);a.setWorldExtent(t.extent),a.setExtent([0,0,this.extent,this.extent]),t.dataProjection=a;for(const e of Object.keys(n.layers)){if(o&&!o.includes(e))continue;const a=n.layers[e];for(let o=0;o<a.length;o++){const n=a.feature(o),s=this.readFeature(n,t);s.getProperties().layer=e,r.push(s)}}return r}readProjection(){return this.dataProjection}}h.MBTypes={mono:["Unknown","Point","LineString","Polygon"],multi:["Unknown","MultiPoint","MultiLineString","Polygon"]};const f=null!==n()&&void 0!==n()?n():r;class y extends a.Z{constructor(e){var t,o;super(Object.assign(Object.assign({},e),{url:void 0,format:new h({layers:e.layers}),tileUrlFunction:e=>`${e[0]}:${e[1]}:${e[2]}`})),this.setTileLoadFunction(this.tileLoader.bind(this));const r={from:"inline",config:{serverMode:"full",requestChunkSize:1024,url:e.url}};this.worker=[];for(let n=0;n<(null!==(t=e.sqlWorkers)&&void 0!==t?t:4);n++)this.worker[n]=f.createDbWorker([r],y.workerUrl.toString(),y.wasmUrl.toString(),null!==(o=e.maxSingleTransfer)&&void 0!==o?o:10485760);this.currentWorker=0,this.metadata=this.worker[this.currentWorker++%this.worker.length].then((e=>e.db.query('SELECT name,value FROM metadata WHERE name="maxzoom" or name="minzoom"'))).then((t=>{if(t&&2==t.length){const o=t.reduce(((e,t)=>(e[t.name]=t.value,e)),{});return console.debug("Loaded metadata",o),e.maxZoom==o.maxzoom&&e.minZoom==o.minzoom||console.warn(`minZoom/maxZoom ${o.minzoom}/${o.maxzoom} of retrieved MBTiles do not match Openlayers configuration ${e.minZoom}/${e.maxZoom}`),o}throw new Error("Could not load metadata")})).catch((e=>(console.warn(e),null)))}tileLoader(e,t){console.debug("loading tile",[e.tileCoord[0],e.tileCoord[1],e.tileCoord[2]]),e.setLoader(((t,o,r)=>{this.worker[this.currentWorker++%this.worker.length].then((t=>t.db.query("SELECT tile_data FROM tiles WHERE zoom_level = ? AND tile_column = ? AND tile_row = ?",[e.tileCoord[0],e.tileCoord[1],(1<<e.tileCoord[0])-1-e.tileCoord[2]]))).then((o=>{if(o&&o[0]&&o[0].tile_data){const n=e.getFormat().readFeatures(o[0].tile_data,{extent:t,featureProjection:r});return e.setFeatures(n),void e.onLoad(n,r)}throw new Error(`No data for ${e.tileCoord}`)})).catch((t=>{console.warn(t),e.onError()}))}))}destroy(){for(const e of this.worker)e.then((e=>{e.release()}))}}y.workerUrl=new URL(o(421),o.b),y.wasmUrl=new URL(o(3611),o.b)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,