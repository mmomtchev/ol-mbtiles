"use strict";(self.webpackChunkol_mbtiles=self.webpackChunkol_mbtiles||[]).push([[491],{9491:(e,t,o)=>{o.r(t),o.d(t,{default:()=>u});var r=o(8854),n=o(2479),a=o(9090),i=o(9731),s=o(6263),l=o(8661),d=o(5901),c=o(5917);function u(){new r.Z({target:"map",layers:[new n.Z({source:new s.Z}),new i.Z({source:new d.B({url:"https://velivole.b-cdn.net/maptiler-osm-2017-07-03-v3.6.1-europe.mbtiles",layers:["transportation","water","waterway"],attributions:["MapTiler","OSM","https://data.maptiler.com/downloads/dataset/osm/europe/"],maxZoom:14,minZoom:0,sqlWorkers:1}),style:function(e,t){switch(e.get("layer")){case"water":case"waterway":return c.d_;case"transportation":return(0,c.xl)(e);default:return null}}})],view:new a.ZP({center:(0,l.mi)([12,50]),zoom:6})})}},5917:(e,t,o)=>{o.d(t,{d_:()=>h,kY:()=>d,xl:()=>m,y8:()=>l});var r=o(7539),n=o(283),a=o(1345),i=o(8958),s=o(1280);function l(e,t){let o,l;switch(e){case 0:o=6,l="2em";break;case 1:o=5,l="1.2em";break;case 2:o=3,l="0.8em";break;default:o=1,l="0.5em"}l+=" helvetica, sans-serif";const d="#00007f";return new r.ZP({image:new n.Z({fill:new a.Z({color:d}),radius:o,stroke:new i.Z({color:d,width:o})}),text:new s.Z({font:l,text:t.get("n"),fill:new a.Z({color:"#ffffff"}),stroke:new i.Z({color:d,width:2})})})}const d=new r.ZP({stroke:new i.Z({color:"blue",width:2})}),c={},u={major_road:"#776",minor_road:"#ccb",highway:"#f39"},h=(new r.ZP({fill:new a.Z({color:"#666"}),stroke:new i.Z({color:"#444",width:1})}),new r.ZP({fill:new a.Z({color:"#9db9e8"})})),m=function(e){const t=e.get("kind"),o=e.get("railway"),n=e.get("sort_key"),a=t+"/"+o+"/"+n;let s=c[a];if(!s){let e,l;o?(e="#7de",l=1):(e=u[t],l="highway"==t?1.5:1),s=new r.ZP({stroke:new i.Z({color:e,width:l}),zIndex:n}),c[a]=s}return s}},5901:(e,t,o)=>{o.d(t,{B:()=>p});var r=o(2891),n=o(7205),a=o(3614),i=o.n(a),s=o(8929),l=o(7885),d=o(9646),c=o(9619),u=o(3433),h=o(8661);class m extends d.ZP{constructor(e){var t,o,r;super(),e=e||{},this.dataProjection=new c.Z({code:"",units:"tile-pixels"}),this.featureClass_=e.featureClass?e.featureClass:u.ZP,this.geometryName_=null!==(t=e.geometryName)&&void 0!==t?t:"Geometry",this.layers_=null!==(o=e.layers)&&void 0!==o?o:null,this.idProperty_=e.idProperty,this.extent=null!==(r=e.extent)&&void 0!==r?r:4096,this.supportedMediaTypes=["application/vnd-mbtiles"]}readFeature(e,t){const o=e.properties;let r;this.idProperty_?(r=o[this.idProperty_],delete o[this.idProperty_]):r=e.id;const n=e.loadGeometry(),a=[],i=[];let s=m.MBTypes[e.type];if("Unknown"===s)return null;for(let e=0;e<n.length;e++){for(let t=0;t<n[e].length;t++)a.push(n[e][t].x,n[e][t].y);i.push(a.length)}const l=new this.featureClass_(s,a,i,o,r);return l.transform(t.dataProjection),l}readFeatures(e,t){const o=this.layers_,r=[],n=new s.VectorTile(new(i())(l.ec(e)));t=this.adaptOptions(t);const a=(0,h.U2)(t.dataProjection);a.setWorldExtent(t.extent),a.setExtent([0,0,this.extent,this.extent]),t.dataProjection=a;for(const e of Object.keys(n.layers)){if(o&&!o.includes(e))continue;const a=n.layers[e];for(let o=0;o<a.length;o++){const n=a.feature(o),i=this.readFeature(n,t);i.getProperties().layer=e,r.push(i)}}return r}readProjection(e){return this.dataProjection}}m.MBTypes=["Unknown","Point","LineString","Polygon"];const w=new URL(o(421),o.b),f=new URL(o(3611),o.b);class p extends n.Z{constructor(e){var t;super(Object.assign(Object.assign({},e),{cacheSize:e.tileCacheSize,url:void 0,format:new m({layers:e.layers}),tileUrlFunction:e=>`${e[0]}:${e[1]}:${e[2]}`})),this.setTileLoadFunction(this.tileLoader.bind(this));const o={from:"inline",config:{serverMode:"full",requestChunkSize:1024,url:e.url}};this.worker=[];for(let n=0;n<(null!==(t=e.sqlWorkers)&&void 0!==t?t:4);n++)this.worker[n]=(0,r.createDbWorker)([o],w.toString(),f.toString(),10485760);this.currentWorker=0,this.metadata=this.worker[this.currentWorker++%this.worker.length].then((e=>e.db.query('SELECT name,value FROM metadata WHERE name="maxzoom" or name="minzoom"'))).then((t=>{if(t&&2==t.length){const o=t.reduce(((e,t)=>(e[t.name]=t.value,e)),{});return console.debug("Loaded metadata",o),e.maxZoom==o.maxzoom&&e.minZoom==o.minzoom||console.warn(`minZoom/maxZoom ${o.minzoom}/${o.maxzoom} of retrieved MBTiles do not match Openlayers configuration ${e.minZoom}/${e.maxZoom}`),o}throw new Error("Could not load metadata")})).catch((e=>(console.warn(e),null)))}tileLoader(e,t){console.debug("loading tile",[e.tileCoord[0],e.tileCoord[1],e.tileCoord[2]]),e.setLoader(((t,o,r)=>{this.worker[this.currentWorker++%this.worker.length].then((t=>t.db.query("SELECT tile_data FROM tiles WHERE zoom_level = ? AND tile_column = ? AND tile_row = ?",[e.tileCoord[0],e.tileCoord[1],(1<<e.tileCoord[0])-1-e.tileCoord[2]]))).then((o=>{if(o&&o[0]&&o[0].tile_data){const n=e.getFormat().readFeatures(o[0].tile_data,{extent:t,featureProjection:r});return e.setFeatures(n),void e.onLoad(n,r)}throw new Error(`No data for ${e.tileCoord}`)})).catch((t=>{console.warn(t),e.onError()}))}))}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,