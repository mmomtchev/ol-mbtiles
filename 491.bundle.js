"use strict";(self.webpackChunkol_mbtiles=self.webpackChunkol_mbtiles||[]).push([[491],{9491:(e,t,o)=>{o.r(t),o.d(t,{default:()=>u});var r=o(8854),n=o(2479),a=o(9090),i=o(9731),s=o(6263),l=o(8661),d=o(5901),c=o(5917);function u(){new r.Z({target:"map",layers:[new n.Z({source:new s.Z}),new i.Z({source:new d.B({url:"https://velivole.b-cdn.net/maptiler-osm-2017-07-03-v3.6.1-europe.mbtiles",layers:["transportation","water","waterway"],attributions:["MapTiler","OSM","https://data.maptiler.com/downloads/dataset/osm/europe/"],maxZoom:14,minZoom:0}),style:function(e,t){switch(e.get("layer")){case"water":case"waterway":return c.d_;case"transportation":return(0,c.xl)(e);default:return null}}})],view:new a.ZP({center:(0,l.mi)([12,50]),zoom:6})})}},5917:(e,t,o)=>{o.d(t,{d_:()=>h,kY:()=>d,xl:()=>m,y8:()=>l});var r=o(7539),n=o(283),a=o(1345),i=o(8958),s=o(1280);function l(e,t){let o,l;switch(e){case 0:o=6,l="2em";break;case 1:o=5,l="1.2em";break;case 2:o=3,l="0.8em";break;default:o=1,l="0.5em"}l+=" helvetica, sans-serif";const d="#00007f";return new r.ZP({image:new n.Z({fill:new a.Z({color:d}),radius:o,stroke:new i.Z({color:d,width:o})}),text:new s.Z({font:l,text:t.get("n"),fill:new a.Z({color:"#ffffff"}),stroke:new i.Z({color:d,width:2})})})}const d=new r.ZP({stroke:new i.Z({color:"blue",width:2})}),c={},u={major_road:"#776",minor_road:"#ccb",highway:"#f39"},h=(new r.ZP({fill:new a.Z({color:"#666"}),stroke:new i.Z({color:"#444",width:1})}),new r.ZP({fill:new a.Z({color:"#9db9e8"})})),m=function(e){const t=e.get("kind"),o=e.get("railway"),n=e.get("sort_key"),a=t+"/"+o+"/"+n;let s=c[a];if(!s){let e,l;o?(e="#7de",l=1):(e=u[t],l="highway"==t?1.5:1),s=new r.ZP({stroke:new i.Z({color:e,width:l}),zIndex:n}),c[a]=s}return s}},5901:(e,t,o)=>{o.d(t,{B:()=>p});var r=o(2891),n=o(7205),a=o(3614),i=o.n(a),s=o(8929),l=o(7885),d=o(9646),c=o(9619),u=o(3433),h=o(8661);class m extends d.ZP{constructor(e){var t,o,r;super(),e=e||{},this.dataProjection=new c.Z({code:"",units:"tile-pixels"}),this.featureClass_=e.featureClass?e.featureClass:u.ZP,this.geometryName_=null!==(t=e.geometryName)&&void 0!==t?t:"Geometry",this.layers_=null!==(o=e.layers)&&void 0!==o?o:null,this.idProperty_=e.idProperty,this.extent=null!==(r=e.extent)&&void 0!==r?r:4096,this.supportedMediaTypes=["application/vnd-mbtiles"]}readFeature(e,t){const o=e.properties;let r;this.idProperty_?(r=o[this.idProperty_],delete o[this.idProperty_]):r=e.id;const n=e.loadGeometry(),a=[],i=[];let s=m.MBTypes[e.type];if("Unknown"===s)return null;for(let e=0;e<n.length;e++){for(let t=0;t<n[e].length;t++)a.push(n[e][t].x,n[e][t].y);i.push(a.length)}const l=new this.featureClass_(s,a,i,o,r);return l.transform(t.dataProjection),l}readFeatures(e,t){const o=this.layers_,r=[],n=new s.VectorTile(new(i())(l.ec(e)));t=this.adaptOptions(t);const a=(0,h.U2)(t.dataProjection);a.setWorldExtent(t.extent),a.setExtent([0,0,this.extent,this.extent]),t.dataProjection=a;for(const e of Object.keys(n.layers)){if(o&&!o.includes(e))continue;const a=n.layers[e];for(let o=0;o<a.length;o++){const n=a.feature(o),i=this.readFeature(n,t);i.getProperties().layer=e,r.push(i)}}return r}readProjection(e){return this.dataProjection}}m.MBTypes=["Unknown","Point","LineString","Polygon"];const w=new URL(o(421),o.b),f=new URL(o(3611),o.b);class p extends n.Z{constructor(e){var t;super(Object.assign(Object.assign({},e),{cacheSize:e.tileCacheSize,url:void 0,format:new m({layers:e.layers}),tileUrlFunction:e=>`${e[0]}:${e[1]}:${e[2]}`})),this.setTileLoadFunction(this.tileLoader.bind(this));const o={from:"inline",config:{serverMode:"full",requestChunkSize:1024,url:e.url}};this.worker=[];for(let n=0;n<(null!==(t=e.sqlWorkers)&&void 0!==t?t:4);n++)this.worker[n]=(0,r.createDbWorker)([o],w.toString(),f.toString(),10485760);this.currentWorker=0,this.metadata=this.worker[this.currentWorker++%this.worker.length].then((e=>e.db.query('SELECT name,value FROM metadata WHERE name="maxzoom" or name="minzoom"'))).then((t=>{if(t&&2==t.length){const o=t.reduce(((e,t)=>(e[t.name]=t.value,e)),{});return console.debug("Loaded metadata",o),e.maxZoom==o.maxzoom&&e.minZoom==o.minzoom||console.warn(`minZoom/maxZoom ${o.minzoom}/${o.maxzoom} of retrieved MBTiles do not match Openlayers configuration ${e.minZoom}/${e.maxZoom}`),o}throw new Error("Could not load metadata")})).catch((e=>(console.warn(e),null)))}tileLoader(e,t){console.debug("loading tile",[e.tileCoord[0],e.tileCoord[1],e.tileCoord[2]]),e.setLoader(((t,o,r)=>{this.worker[this.currentWorker++%this.worker.length].then((t=>t.db.query("SELECT tile_data FROM tiles WHERE zoom_level = ? AND tile_column = ? AND tile_row = ?",[e.tileCoord[0],e.tileCoord[1],(1<<e.tileCoord[0])-1-e.tileCoord[2]]))).then((o=>{if(o&&o[0]&&o[0].tile_data){const n=e.getFormat().readFeatures(o[0].tile_data,{extent:t,featureProjection:r});return e.setFeatures(n),void e.onLoad(n,r)}throw new Error(`No data for ${e.tileCoord}`)})).catch((t=>{console.warn(t),e.onError()}))}))}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUN6QyxFQUFLc0QsVUFBVSxHQUFJdEQsRUFBS3NELFVBQVUsSUFBSyxHQUFLdEQsRUFBS3NELFVBQVUsSUFBTSxFQUFJdEQsRUFBS3NELFVBQVUsT0FFeEZoQixNQUFNSSxJQUNMLEdBQUlBLEdBQUtBLEVBQUUsSUFBTUEsRUFBRSxHQUFjLFVBQUcsQ0FDbEMsTUFDTTNDLEVBRFNDLEVBQUt5RCxZQUNJM0QsYUFBYTRDLEVBQUUsR0FBYyxVQUFHLENBQ3REOUQsU0FDQThFLGtCQUFtQkYsSUFJckIsT0FGQXhELEVBQUsyRCxZQUFZNUQsUUFDakJDLEVBQUs0RCxPQUFPN0QsRUFBVXlELEUsQ0FHeEIsTUFBTSxJQUFJTCxNQUFNLGVBQWVuRCxFQUFLc0QsWUFBWSxJQUVqREYsT0FBT0MsSUFDTlAsUUFBUUksS0FBS0csR0FDYnJELEVBQUs2RCxTQUFTLEdBQ2QsR0FFUixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2wtbWJ0aWxlcy8uL2V4YW1wbGVzL2NvZGUvb3NtLXZlY3Rvci10aWxlcy50cyIsIndlYnBhY2s6Ly9vbC1tYnRpbGVzLy4vZXhhbXBsZXMvc3R5bGUudHMiLCJ3ZWJwYWNrOi8vb2wtbWJ0aWxlcy8uL3NyYy9tYnRpbGVzLWZvcm1hdC50cyIsIndlYnBhY2s6Ly9vbC1tYnRpbGVzLy4vc3JjL21idGlsZXMtc291cmNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYXAgZnJvbSAnb2wvTWFwLmpzJztcbmltcG9ydCBPU00gZnJvbSAnb2wvc291cmNlL09TTS5qcyc7XG5pbXBvcnQgVGlsZUxheWVyIGZyb20gJ29sL2xheWVyL1RpbGUuanMnO1xuaW1wb3J0IFZpZXcgZnJvbSAnb2wvVmlldy5qcyc7XG5pbXBvcnQgVmVjdG9yVGlsZUxheWVyIGZyb20gJ29sL2xheWVyL1ZlY3RvclRpbGUnO1xuaW1wb3J0IFRpbGVEZWJ1ZyBmcm9tICdvbC9zb3VyY2UvVGlsZURlYnVnJztcbmltcG9ydCB7IGZyb21Mb25MYXQgfSBmcm9tICdvbC9wcm9qJztcblxuaW1wb3J0IHsgTUJUaWxlc1NvdXJjZSB9IGZyb20gJ29sLW1idGlsZXMnO1xuaW1wb3J0IHsgd2F0ZXJTdHlsZSwgcm9hZFN0eWxlLCBidWlsZGluZ1N0eWxlIH0gZnJvbSAnLi4vc3R5bGUnO1xuXG4vLyBNQlRpbGVzIGZyb21cbi8vIGh0dHBzOi8vZGF0YS5tYXB0aWxlci5jb20vZG93bmxvYWRzL2RhdGFzZXQvb3NtL2V1cm9wZS9cbi8vIDM0LjQgR0Igb3JpZ2luYWwgZmlsZVxuLy8gZG93biB0byAxOS4yR0IgYWZ0ZXIgdmFjdXVtIChNYXBUaWxlciwgd3RmPylcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICBjb25zdCBtYXAgPSBuZXcgTWFwKHtcbiAgICB0YXJnZXQ6ICdtYXAnLFxuICAgIGxheWVyczogW1xuICAgICAgbmV3IFRpbGVMYXllcih7XG4gICAgICAgIHNvdXJjZTogbmV3IFRpbGVEZWJ1ZygpXG4gICAgICB9KSxcbiAgICAgIG5ldyBWZWN0b3JUaWxlTGF5ZXIoe1xuICAgICAgICBzb3VyY2U6IG5ldyBNQlRpbGVzU291cmNlKHtcbiAgICAgICAgICB1cmw6ICdodHRwczovL3ZlbGl2b2xlLmItY2RuLm5ldC9tYXB0aWxlci1vc20tMjAxNy0wNy0wMy12My42LjEtZXVyb3BlLm1idGlsZXMnLFxuICAgICAgICAgIGxheWVyczogWyd0cmFuc3BvcnRhdGlvbicsICd3YXRlcicsICd3YXRlcndheSddLFxuICAgICAgICAgIGF0dHJpYnV0aW9uczogWydNYXBUaWxlcicsICdPU00nLCAnaHR0cHM6Ly9kYXRhLm1hcHRpbGVyLmNvbS9kb3dubG9hZHMvZGF0YXNldC9vc20vZXVyb3BlLyddLFxuICAgICAgICAgIG1heFpvb206IDE0LFxuICAgICAgICAgIG1pblpvb206IDBcbiAgICAgICAgfSksXG4gICAgICAgIHN0eWxlOiBmdW5jdGlvbiAoZmVhdHVyZSwgcmVzb2x1dGlvbikge1xuICAgICAgICAgIHN3aXRjaCAoZmVhdHVyZS5nZXQoJ2xheWVyJykpIHtcbiAgICAgICAgICAgIGNhc2UgJ3dhdGVyJzpcbiAgICAgICAgICAgIGNhc2UgJ3dhdGVyd2F5JzpcbiAgICAgICAgICAgICAgcmV0dXJuIHdhdGVyU3R5bGU7XG4gICAgICAgICAgICBjYXNlICd0cmFuc3BvcnRhdGlvbic6XG4gICAgICAgICAgICAgIHJldHVybiByb2FkU3R5bGUoZmVhdHVyZSk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgXSxcbiAgICB2aWV3OiBuZXcgVmlldyh7XG4gICAgICBjZW50ZXI6IGZyb21Mb25MYXQoWzEyLCA1MF0pLFxuICAgICAgem9vbTogNlxuICAgIH0pLFxuICB9KTtcbn0iLCJpbXBvcnQgRmVhdHVyZSBmcm9tICdvbC9GZWF0dXJlJztcbmltcG9ydCB7IFN0eWxlLCBUZXh0LCBGaWxsLCBTdHJva2UsIENpcmNsZSB9IGZyb20gJ29sL3N0eWxlJztcblxuZXhwb3J0IGZ1bmN0aW9uIHN0eWxlVG93bihzaXplOiBudW1iZXIsIGZlYXR1cmU6IEZlYXR1cmUpOiBTdHlsZSB7XG4gIGxldCB3aWR0aDogbnVtYmVyO1xuICBsZXQgZm9udDogc3RyaW5nO1xuICBzd2l0Y2ggKHNpemUpIHtcbiAgICBjYXNlIDA6XG4gICAgICB3aWR0aCA9IDY7XG4gICAgICBmb250ID0gJzJlbSc7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICB3aWR0aCA9IDU7XG4gICAgICBmb250ID0gJzEuMmVtJztcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIHdpZHRoID0gMztcbiAgICAgIGZvbnQgPSAnMC44ZW0nO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHdpZHRoID0gMTtcbiAgICAgIGZvbnQgPSAnMC41ZW0nO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgZm9udCArPSAnIGhlbHZldGljYSwgc2Fucy1zZXJpZic7XG4gIGNvbnN0IGNvbG9yMSA9ICcjMDAwMDdmJztcbiAgY29uc3QgY29sb3IyID0gJyNmZmZmZmYnO1xuXG4gIGNvbnN0IHN0eWxlID0gbmV3IFN0eWxlKHtcbiAgICBpbWFnZTogbmV3IENpcmNsZSh7XG4gICAgICBmaWxsOiBuZXcgRmlsbCh7XG4gICAgICAgIGNvbG9yOiBjb2xvcjEsXG4gICAgICB9KSxcbiAgICAgIHJhZGl1czogd2lkdGgsXG4gICAgICBzdHJva2U6IG5ldyBTdHJva2Uoe1xuICAgICAgICBjb2xvcjogY29sb3IxLFxuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICB9KSxcbiAgICB9KSxcbiAgICB0ZXh0OiBuZXcgVGV4dCh7XG4gICAgICBmb250OiBmb250LFxuICAgICAgdGV4dDogZmVhdHVyZS5nZXQoJ24nKSxcbiAgICAgIGZpbGw6IG5ldyBGaWxsKHtcbiAgICAgICAgY29sb3I6IGNvbG9yMlxuICAgICAgfSksXG4gICAgICBzdHJva2U6IG5ldyBTdHJva2Uoe1xuICAgICAgICBjb2xvcjogY29sb3IxLFxuICAgICAgICB3aWR0aDogMlxuICAgICAgfSlcbiAgICB9KVxuICB9KTtcbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5leHBvcnQgY29uc3Qgc3R5bGVCb3JkZXIgPSBuZXcgU3R5bGUoe1xuICBzdHJva2U6IG5ldyBTdHJva2Uoe1xuICAgIGNvbG9yOiAnYmx1ZScsXG4gICAgd2lkdGg6IDJcbiAgfSlcbn0pO1xuXG5cbi8vIFN0eWxlcyBmcm9tIGh0dHBzOi8vb3BlbmxheWVycy5vcmcvZW4vbGF0ZXN0L2V4YW1wbGVzL29zbS12ZWN0b3ItdGlsZXMuaHRtbFxuY29uc3Qgcm9hZFN0eWxlQ2FjaGUgPSB7fTtcbmNvbnN0IHJvYWRDb2xvciA9IHtcbiAgJ21ham9yX3JvYWQnOiAnIzc3NicsXG4gICdtaW5vcl9yb2FkJzogJyNjY2InLFxuICAnaGlnaHdheSc6ICcjZjM5Jyxcbn07XG5leHBvcnQgY29uc3QgYnVpbGRpbmdTdHlsZSA9IG5ldyBTdHlsZSh7XG4gIGZpbGw6IG5ldyBGaWxsKHtcbiAgICBjb2xvcjogJyM2NjYnXG4gIH0pLFxuICBzdHJva2U6IG5ldyBTdHJva2Uoe1xuICAgIGNvbG9yOiAnIzQ0NCcsXG4gICAgd2lkdGg6IDEsXG4gIH0pLFxufSk7XG5leHBvcnQgY29uc3Qgd2F0ZXJTdHlsZSA9IG5ldyBTdHlsZSh7XG4gIGZpbGw6IG5ldyBGaWxsKHtcbiAgICBjb2xvcjogJyM5ZGI5ZTgnLFxuICB9KSxcbn0pO1xuZXhwb3J0IGNvbnN0IHJvYWRTdHlsZSA9IGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gIGNvbnN0IGtpbmQgPSBmZWF0dXJlLmdldCgna2luZCcpO1xuICBjb25zdCByYWlsd2F5ID0gZmVhdHVyZS5nZXQoJ3JhaWx3YXknKTtcbiAgY29uc3Qgc29ydF9rZXkgPSBmZWF0dXJlLmdldCgnc29ydF9rZXknKTtcbiAgY29uc3Qgc3R5bGVLZXkgPSBraW5kICsgJy8nICsgcmFpbHdheSArICcvJyArIHNvcnRfa2V5O1xuICBsZXQgc3R5bGUgPSByb2FkU3R5bGVDYWNoZVtzdHlsZUtleV07XG4gIGlmICghc3R5bGUpIHtcbiAgICBsZXQgY29sb3IsIHdpZHRoO1xuICAgIGlmIChyYWlsd2F5KSB7XG4gICAgICBjb2xvciA9ICcjN2RlJztcbiAgICAgIHdpZHRoID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29sb3IgPSByb2FkQ29sb3Jba2luZF07XG4gICAgICB3aWR0aCA9IGtpbmQgPT0gJ2hpZ2h3YXknID8gMS41IDogMTtcbiAgICB9XG4gICAgc3R5bGUgPSBuZXcgU3R5bGUoe1xuICAgICAgc3Ryb2tlOiBuZXcgU3Ryb2tlKHtcbiAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICB9KSxcbiAgICAgIHpJbmRleDogc29ydF9rZXksXG4gICAgfSk7XG4gICAgcm9hZFN0eWxlQ2FjaGVbc3R5bGVLZXldID0gc3R5bGU7XG4gIH1cbiAgcmV0dXJuIHN0eWxlO1xufTtcbiIsImltcG9ydCBQcm90b2J1ZiBmcm9tICdwYmYnO1xuaW1wb3J0IHsgVmVjdG9yVGlsZSwgVmVjdG9yVGlsZUZlYXR1cmUgfSBmcm9tICdAbWFwYm94L3ZlY3Rvci10aWxlJztcbmltcG9ydCAqIGFzIHBha28gZnJvbSAncGFrbyc7XG5cbmltcG9ydCBGZWF0dXJlRm9ybWF0LCB7IFJlYWRPcHRpb25zIH0gZnJvbSAnb2wvZm9ybWF0L0ZlYXR1cmUnO1xuaW1wb3J0IFByb2plY3Rpb24gZnJvbSAnb2wvcHJvai9Qcm9qZWN0aW9uJztcbmltcG9ydCBSZW5kZXJGZWF0dXJlIGZyb20gJ29sL3JlbmRlci9GZWF0dXJlJztcbmltcG9ydCB7IEV4dGVudCB9IGZyb20gJ29sL2V4dGVudCc7XG5pbXBvcnQgeyBGZWF0dXJlTGlrZSB9IGZyb20gJ29sL0ZlYXR1cmUnO1xuaW1wb3J0IHsgR2VvbWV0cnkgfSBmcm9tICdvbC9nZW9tJztcbmltcG9ydCB7IFByb2plY3Rpb25MaWtlLCBnZXQgYXMgZ2V0UHJvamVjdGlvbiB9IGZyb20gJ29sL3Byb2onO1xuXG5kZWNsYXJlIG1vZHVsZSAnQG1hcGJveC92ZWN0b3ItdGlsZScge1xuICBpbnRlcmZhY2UgVmVjdG9yVGlsZUZlYXR1cmUge1xuICAgIHRvR2VvSlNPTih4OiBudW1iZXIsIHk6IG51bWJlciwgejogbnVtYmVyLCBwcm9qZWN0PzogKHh5OiBbbnVtYmVyLCBudW1iZXJdKSA9PiBbbnVtYmVyLCBudW1iZXJdKTogR2VvSlNPTi5GZWF0dXJlO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT3B0aW9ucyB7XG4gIGxheWVycz86IHN0cmluZ1tdO1xuICBmZWF0dXJlQ2xhc3M/OiB0eXBlb2YgUmVuZGVyRmVhdHVyZTtcbiAgZ2VvbWV0cnlOYW1lPzogc3RyaW5nO1xuICBpZFByb3BlcnR5Pzogc3RyaW5nO1xuICBleHRlbnQ/OiBudW1iZXI7XG59O1xuXG5leHBvcnQgY2xhc3MgTUJUaWxlc0Zvcm1hdCBleHRlbmRzIEZlYXR1cmVGb3JtYXQge1xuICBkYXRhUHJvamVjdGlvbjogUHJvamVjdGlvbjtcbiAgcHJpdmF0ZSBmZWF0dXJlQ2xhc3NfOiB0eXBlb2YgUmVuZGVyRmVhdHVyZTtcbiAgcHJpdmF0ZSBnZW9tZXRyeU5hbWVfOiBzdHJpbmc7XG4gIHByaXZhdGUgbGF5ZXJzXzogc3RyaW5nW10gfCBudWxsO1xuICBwcml2YXRlIGlkUHJvcGVydHlfOiBzdHJpbmc7XG4gIHByaXZhdGUgbGF5ZXJOYW1lXzogc3RyaW5nO1xuICBzdXBwb3J0ZWRNZWRpYVR5cGVzOiBzdHJpbmdbXTtcbiAgZXh0ZW50OiBudW1iZXI7XG4gIHN0YXRpYyBNQlR5cGVzID0gW1xuICAgICdVbmtub3duJywgJ1BvaW50JywgJ0xpbmVTdHJpbmcnLCAnUG9seWdvbidcbiAgXSBhcyAoJ1Vua25vd24nIHwgJ1BvaW50JyB8ICdMaW5lU3RyaW5nJyB8ICdQb2x5Z29uJylbXTtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zPzogT3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyA/IG9wdGlvbnMgOiB7fTtcblxuICAgIHRoaXMuZGF0YVByb2plY3Rpb24gPSBuZXcgUHJvamVjdGlvbih7XG4gICAgICBjb2RlOiAnJyxcbiAgICAgIHVuaXRzOiAndGlsZS1waXhlbHMnLFxuICAgIH0pO1xuXG4gICAgdGhpcy5mZWF0dXJlQ2xhc3NfID0gb3B0aW9ucy5mZWF0dXJlQ2xhc3MgPyBvcHRpb25zLmZlYXR1cmVDbGFzcyA6IFJlbmRlckZlYXR1cmU7XG4gICAgdGhpcy5nZW9tZXRyeU5hbWVfID0gb3B0aW9ucy5nZW9tZXRyeU5hbWUgPz8gJ0dlb21ldHJ5JztcbiAgICB0aGlzLmxheWVyc18gPSBvcHRpb25zLmxheWVycyA/PyBudWxsO1xuICAgIHRoaXMuaWRQcm9wZXJ0eV8gPSBvcHRpb25zLmlkUHJvcGVydHk7XG4gICAgdGhpcy5leHRlbnQgPSBvcHRpb25zLmV4dGVudCA/PyA0MDk2O1xuXG4gICAgLyoqXG4gICAgICogQXMgdGhpcyBpcyB0aGUgdmVyeSBmaXJzdCB0aW1lIE1CVGlsZXMgd2lsbCBiZSBkaXN0cmlidXRlZCBieSBIVFRQXG4gICAgICogdGhlcmUgaXMgc3RpbGwgbm8gb2ZmaWNpYWwgTUlNRSB0eXBlXG4gICAgICovXG4gICAgdGhpcy5zdXBwb3J0ZWRNZWRpYVR5cGVzID0gW1xuICAgICAgJ2FwcGxpY2F0aW9uL3ZuZC1tYnRpbGVzJ1xuICAgIF07XG4gIH1cblxuICByZWFkRmVhdHVyZShzb3VyY2U6IFZlY3RvclRpbGVGZWF0dXJlLCBvcHRpb25zPzogUmVhZE9wdGlvbnMpOiBGZWF0dXJlTGlrZSB7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IHNvdXJjZS5wcm9wZXJ0aWVzO1xuXG4gICAgbGV0IGlkOiBzdHJpbmcgfCBudW1iZXI7XG4gICAgaWYgKCF0aGlzLmlkUHJvcGVydHlfKSB7XG4gICAgICBpZCA9IHNvdXJjZS5pZDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWQgPSBwcm9wZXJ0aWVzW3RoaXMuaWRQcm9wZXJ0eV9dIGFzIHN0cmluZyB8IG51bWJlcjtcbiAgICAgIGRlbGV0ZSBwcm9wZXJ0aWVzW3RoaXMuaWRQcm9wZXJ0eV9dO1xuICAgIH1cbiAgICBjb25zdCBwb2ludHMgPSBzb3VyY2UubG9hZEdlb21ldHJ5KCk7XG4gICAgY29uc3QgZmxhdENvb3JkaW5hdGVzID0gW10gYXMgbnVtYmVyW107XG4gICAgY29uc3QgZW5kcyA9IFtdIGFzIG51bWJlcltdO1xuXG4gICAgbGV0IHR5cGUgPSBNQlRpbGVzRm9ybWF0Lk1CVHlwZXNbc291cmNlLnR5cGVdO1xuICAgIGlmICh0eXBlID09PSAnVW5rbm93bicpXG4gICAgICByZXR1cm4gbnVsbDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBvaW50c1tpXS5sZW5ndGg7IGorKykge1xuICAgICAgICBmbGF0Q29vcmRpbmF0ZXMucHVzaChwb2ludHNbaV1bal0ueCwgcG9pbnRzW2ldW2pdLnkpO1xuICAgICAgfVxuICAgICAgZW5kcy5wdXNoKGZsYXRDb29yZGluYXRlcy5sZW5ndGgpO1xuICAgIH1cblxuICAgIGNvbnN0IGZlYXR1cmUgPSBuZXcgdGhpcy5mZWF0dXJlQ2xhc3NfKHR5cGUsIGZsYXRDb29yZGluYXRlcywgZW5kcywgcHJvcGVydGllcywgaWQpO1xuICAgIGZlYXR1cmUudHJhbnNmb3JtKG9wdGlvbnMuZGF0YVByb2plY3Rpb24pO1xuXG4gICAgcmV0dXJuIGZlYXR1cmU7XG4gIH1cblxuICByZWFkRmVhdHVyZXMoc291cmNlOiBBcnJheUJ1ZmZlciwgb3B0aW9ucz86IFJlYWRPcHRpb25zKTogRmVhdHVyZUxpa2VbXSB7XG4gICAgY29uc3QgbGF5ZXJzID0gdGhpcy5sYXllcnNfO1xuXG4gICAgY29uc3QgZmVhdHVyZXM6IEZlYXR1cmVMaWtlW10gPSBbXTtcbiAgICBjb25zdCB0aWxlID0gbmV3IFZlY3RvclRpbGUobmV3IFByb3RvYnVmKHBha28udW5nemlwKHNvdXJjZSkpKTtcbiAgICBvcHRpb25zID0gdGhpcy5hZGFwdE9wdGlvbnMob3B0aW9ucyk7XG4gICAgY29uc3QgZGF0YVByb2plY3Rpb24gPSBnZXRQcm9qZWN0aW9uKG9wdGlvbnMuZGF0YVByb2plY3Rpb24pO1xuICAgIGRhdGFQcm9qZWN0aW9uLnNldFdvcmxkRXh0ZW50KG9wdGlvbnMuZXh0ZW50KTtcbiAgICBkYXRhUHJvamVjdGlvbi5zZXRFeHRlbnQoWzAsIDAsIHRoaXMuZXh0ZW50LCB0aGlzLmV4dGVudF0pO1xuICAgIG9wdGlvbnMuZGF0YVByb2plY3Rpb24gPSBkYXRhUHJvamVjdGlvbjtcblxuICAgIGZvciAoY29uc3QgbGF5ZXJOYW1lIG9mIE9iamVjdC5rZXlzKHRpbGUubGF5ZXJzKSkge1xuICAgICAgaWYgKGxheWVycyAmJiAhbGF5ZXJzLmluY2x1ZGVzKGxheWVyTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBsID0gdGlsZS5sYXllcnNbbGF5ZXJOYW1lXTtcbiAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGwubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICBjb25zdCB2ZWN0b3JGZWF0dXJlID0gbC5mZWF0dXJlKGlkeCk7XG4gICAgICAgIGNvbnN0IGZlYXR1cmUgPSB0aGlzLnJlYWRGZWF0dXJlKHZlY3RvckZlYXR1cmUsIG9wdGlvbnMpO1xuICAgICAgICBmZWF0dXJlLmdldFByb3BlcnRpZXMoKS5sYXllciA9IGxheWVyTmFtZTtcbiAgICAgICAgZmVhdHVyZXMucHVzaChmZWF0dXJlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmVhdHVyZXM7XG4gIH1cblxuICByZWFkUHJvamVjdGlvbihzb3VyY2UpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhUHJvamVjdGlvbjtcbiAgfVxuXG59IiwiaW1wb3J0IHsgY3JlYXRlRGJXb3JrZXIsIFdvcmtlckh0dHB2ZnMgfSBmcm9tICdzcWwuanMtaHR0cHZmcyc7XG5pbXBvcnQgeyBTcGxpdEZpbGVDb25maWdQdXJlIH0gZnJvbSAnc3FsLmpzLWh0dHB2ZnMvZGlzdC9zcWxpdGUud29ya2VyJztcblxuaW1wb3J0IHsgRXh0ZW50IH0gZnJvbSAnb2wvZXh0ZW50JztcbmltcG9ydCB7IFByb2plY3Rpb25MaWtlIH0gZnJvbSAnb2wvcHJvaic7XG5pbXBvcnQgVmVjdG9yVGlsZVNvdXJjZSwgeyBPcHRpb25zIGFzIFZlY3RvclRpbGVPcHRpb25zIH0gZnJvbSAnb2wvc291cmNlL1ZlY3RvclRpbGUuanMnO1xuaW1wb3J0IFZlY3RvclRpbGUgZnJvbSAnb2wvVmVjdG9yVGlsZSc7XG5pbXBvcnQgeyBUaWxlQ29vcmQgfSBmcm9tICdvbC90aWxlY29vcmQnO1xuaW1wb3J0IFRpbGVHcmlkIGZyb20gJ29sL3RpbGVncmlkL1RpbGVHcmlkJztcbmltcG9ydCBGZWF0dXJlIGZyb20gJ29sL0ZlYXR1cmUnO1xuaW1wb3J0IHsgR2VvbWV0cnkgfSBmcm9tICdvbC9nZW9tJztcblxuaW1wb3J0IHsgTUJUaWxlc0Zvcm1hdCB9IGZyb20gJy4vbWJ0aWxlcy1mb3JtYXQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE9wdGlvbnMgZXh0ZW5kcyBWZWN0b3JUaWxlT3B0aW9ucyB7XG4gIHRpbGVDYWNoZVNpemU/OiBudW1iZXI7XG4gIHNxbENhY2hlU2l6ZT86IG51bWJlcjtcbiAgc3FsV29ya2Vycz86IG51bWJlcjtcbiAgbGF5ZXJzPzogc3RyaW5nW107XG59XG5cbmNvbnN0IHdvcmtlclVybCA9IG5ldyBVUkwoXG4gICdzcWwuanMtaHR0cHZmcy9kaXN0L3NxbGl0ZS53b3JrZXIuanMnLFxuICBpbXBvcnQubWV0YS51cmwsXG4pO1xuY29uc3Qgd2FzbVVybCA9IG5ldyBVUkwoXG4gICdzcWwuanMtaHR0cHZmcy9kaXN0L3NxbC13YXNtLndhc20nLFxuICBpbXBvcnQubWV0YS51cmwsXG4pO1xuXG5jb25zdCBtYXhCeXRlc1RvUmVhZCA9IDEwICogMTAyNCAqIDEwMjQ7XG5cbmludGVyZmFjZSBNZXRhZGF0YSB7XG4gIG1pbnpvb206IG51bWJlcjtcbiAgbWF4em9vbTogbnVtYmVyO1xufTtcblxuZXhwb3J0IGNsYXNzIE1CVGlsZXNTb3VyY2UgZXh0ZW5kcyBWZWN0b3JUaWxlU291cmNlIHtcbiAgd29ya2VyOiBQcm9taXNlPFdvcmtlckh0dHB2ZnM+W107XG4gIG1ldGFkYXRhOiBQcm9taXNlPE1ldGFkYXRhIHwgbnVsbD47XG4gIGN1cnJlbnRXb3JrZXI6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBPcHRpb25zKSB7XG4gICAgc3VwZXIoe1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGNhY2hlU2l6ZTogb3B0aW9ucy50aWxlQ2FjaGVTaXplLFxuICAgICAgdXJsOiB1bmRlZmluZWQsXG4gICAgICBmb3JtYXQ6IG5ldyBNQlRpbGVzRm9ybWF0KHtcbiAgICAgICAgbGF5ZXJzOiBvcHRpb25zLmxheWVyc1xuICAgICAgfSksXG4gICAgICAvLyBUaGlzIGlzIHJlcXVpcmVkIHRvIHByZXZlbnQgT3BlbmxheWVycycgY2FjaGUgZnJvbSB0aGlua2luZyB0aGF0IGFsbCB0aWxlcyBzaGFyZSB0aGUgc2FtZSBVUkxcbiAgICAgIHRpbGVVcmxGdW5jdGlvbjogKGNvb3JkczogVGlsZUNvb3JkKSA9PiBgJHtjb29yZHNbMF19OiR7Y29vcmRzWzFdfToke2Nvb3Jkc1syXX1gXG4gICAgfSk7XG5cbiAgICB0aGlzLnNldFRpbGVMb2FkRnVuY3Rpb24odGhpcy50aWxlTG9hZGVyLmJpbmQodGhpcykpO1xuXG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgZnJvbTogJ2lubGluZScsXG4gICAgICBjb25maWc6IHtcbiAgICAgICAgc2VydmVyTW9kZTogJ2Z1bGwnLFxuICAgICAgICByZXF1ZXN0Q2h1bmtTaXplOiAxMDI0LFxuICAgICAgICB1cmw6IG9wdGlvbnMudXJsXG4gICAgICB9XG4gICAgfSBhcyBTcGxpdEZpbGVDb25maWdQdXJlO1xuXG4gICAgdGhpcy53b3JrZXIgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IChvcHRpb25zLnNxbFdvcmtlcnMgPz8gNCk7IGkrKykge1xuICAgICAgdGhpcy53b3JrZXJbaV0gPSBjcmVhdGVEYldvcmtlcihcbiAgICAgICAgW2NvbmZpZ10sXG4gICAgICAgIHdvcmtlclVybC50b1N0cmluZygpLFxuICAgICAgICB3YXNtVXJsLnRvU3RyaW5nKCksXG4gICAgICAgIG1heEJ5dGVzVG9SZWFkXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnRXb3JrZXIgPSAwO1xuXG4gICAgdGhpcy5tZXRhZGF0YSA9IHRoaXMud29ya2VyWyh0aGlzLmN1cnJlbnRXb3JrZXIrKykgJSB0aGlzLndvcmtlci5sZW5ndGhdXG4gICAgICAudGhlbigodykgPT4gdy5kYi5xdWVyeSgnU0VMRUNUIG5hbWUsdmFsdWUgRlJPTSBtZXRhZGF0YSBXSEVSRSBuYW1lPVwibWF4em9vbVwiIG9yIG5hbWU9XCJtaW56b29tXCInKSlcbiAgICAgIC50aGVuKChyKSA9PiB7XG4gICAgICAgIC8vIEFsYXMsIGF0IHRoZSBtb21lbnQgaXQgaXMgbm90IHBvc3NpYmxlIHRvIHJlcGxhY2UgdGhlIFRpbGVHcmlkIGFmdGVyIGNvbnN0cnVjdGluZyB0aGUgbGF5ZXJcbiAgICAgICAgaWYgKHIgJiYgci5sZW5ndGggPT0gMikge1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSByLnJlZHVjZSgoYSwgeCkgPT4ge1xuICAgICAgICAgICAgYVt4WyduYW1lJ11dID0geFsndmFsdWUnXTtcbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICAgIH0sIHt9KSBhcyBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+O1xuICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ0xvYWRlZCBtZXRhZGF0YScsIGRhdGEpO1xuICAgICAgICAgIGlmIChvcHRpb25zLm1heFpvb20gIT0gZGF0YS5tYXh6b29tIHx8IG9wdGlvbnMubWluWm9vbSAhPSBkYXRhLm1pbnpvb20pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgbWluWm9vbS9tYXhab29tICR7ZGF0YS5taW56b29tfS8ke2RhdGEubWF4em9vbX1gICtcbiAgICAgICAgICAgICAgYCBvZiByZXRyaWV2ZWQgTUJUaWxlcyBkbyBub3QgbWF0Y2ggT3BlbmxheWVycyBjb25maWd1cmF0aW9uICR7b3B0aW9ucy5taW5ab29tfS8ke29wdGlvbnMubWF4Wm9vbX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGRhdGEgYXMgdW5rbm93biBhcyBNZXRhZGF0YTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBsb2FkIG1ldGFkYXRhJyk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGUgPT4ge1xuICAgICAgICBjb25zb2xlLndhcm4oZSk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSk7XG4gIH1cblxuICB0aWxlTG9hZGVyKHRpbGU6IFZlY3RvclRpbGUsIHVybDogc3RyaW5nKSB7XG4gICAgY29uc29sZS5kZWJ1ZygnbG9hZGluZyB0aWxlJywgW3RpbGUudGlsZUNvb3JkWzBdLCB0aWxlLnRpbGVDb29yZFsxXSwgdGlsZS50aWxlQ29vcmRbMl1dKTtcbiAgICB0aWxlLnNldExvYWRlcigoZXh0ZW50LCByZXNvbHV0aW9uLCBwcm9qZWN0aW9uKSA9PiB7XG4gICAgICB0aGlzLndvcmtlclsodGhpcy5jdXJyZW50V29ya2VyKyspICUgdGhpcy53b3JrZXIubGVuZ3RoXVxuICAgICAgICAudGhlbigodykgPT5cbiAgICAgICAgICB3LmRiLnF1ZXJ5KFxuICAgICAgICAgICAgJ1NFTEVDVCB0aWxlX2RhdGEgRlJPTSB0aWxlcyBXSEVSRSB6b29tX2xldmVsID0gPyBBTkQgdGlsZV9jb2x1bW4gPSA/IEFORCB0aWxlX3JvdyA9ID8nLFxuICAgICAgICAgICAgW3RpbGUudGlsZUNvb3JkWzBdLCB0aWxlLnRpbGVDb29yZFsxXSwgKDEgPDwgdGlsZS50aWxlQ29vcmRbMF0pIC0gMSAtIHRpbGUudGlsZUNvb3JkWzJdXVxuICAgICAgICAgICkpXG4gICAgICAgIC50aGVuKChyKSA9PiB7XG4gICAgICAgICAgaWYgKHIgJiYgclswXSAmJiByWzBdWyd0aWxlX2RhdGEnXSkge1xuICAgICAgICAgICAgY29uc3QgZm9ybWF0ID0gdGlsZS5nZXRGb3JtYXQoKTtcbiAgICAgICAgICAgIGNvbnN0IGZlYXR1cmVzID0gZm9ybWF0LnJlYWRGZWF0dXJlcyhyWzBdWyd0aWxlX2RhdGEnXSwge1xuICAgICAgICAgICAgICBleHRlbnQsXG4gICAgICAgICAgICAgIGZlYXR1cmVQcm9qZWN0aW9uOiBwcm9qZWN0aW9uXG4gICAgICAgICAgICB9KSBhcyBGZWF0dXJlPEdlb21ldHJ5PltdO1xuICAgICAgICAgICAgdGlsZS5zZXRGZWF0dXJlcyhmZWF0dXJlcyk7XG4gICAgICAgICAgICB0aWxlLm9uTG9hZChmZWF0dXJlcywgcHJvamVjdGlvbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gZGF0YSBmb3IgJHt0aWxlLnRpbGVDb29yZH1gKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGUpO1xuICAgICAgICAgIHRpbGUub25FcnJvcigpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbInRhcmdldCIsImxheWVycyIsInNvdXJjZSIsInVybCIsImF0dHJpYnV0aW9ucyIsIm1heFpvb20iLCJtaW5ab29tIiwic3R5bGUiLCJmZWF0dXJlIiwicmVzb2x1dGlvbiIsImdldCIsInZpZXciLCJjZW50ZXIiLCJ6b29tIiwic3R5bGVUb3duIiwic2l6ZSIsIndpZHRoIiwiZm9udCIsImNvbG9yMSIsImltYWdlIiwiZmlsbCIsImNvbG9yIiwicmFkaXVzIiwic3Ryb2tlIiwidGV4dCIsInN0eWxlQm9yZGVyIiwicm9hZFN0eWxlQ2FjaGUiLCJyb2FkQ29sb3IiLCJ3YXRlclN0eWxlIiwicm9hZFN0eWxlIiwia2luZCIsInJhaWx3YXkiLCJzb3J0X2tleSIsInN0eWxlS2V5IiwiekluZGV4IiwiTUJUaWxlc0Zvcm1hdCIsIkZlYXR1cmUiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJzdXBlciIsInRoaXMiLCJkYXRhUHJvamVjdGlvbiIsIlByb2plY3Rpb24iLCJjb2RlIiwidW5pdHMiLCJmZWF0dXJlQ2xhc3NfIiwiZmVhdHVyZUNsYXNzIiwiZ2VvbWV0cnlOYW1lXyIsImdlb21ldHJ5TmFtZSIsImxheWVyc18iLCJpZFByb3BlcnR5XyIsImlkUHJvcGVydHkiLCJleHRlbnQiLCJzdXBwb3J0ZWRNZWRpYVR5cGVzIiwicmVhZEZlYXR1cmUiLCJwcm9wZXJ0aWVzIiwiaWQiLCJwb2ludHMiLCJsb2FkR2VvbWV0cnkiLCJmbGF0Q29vcmRpbmF0ZXMiLCJlbmRzIiwidHlwZSIsIk1CVHlwZXMiLCJpIiwibGVuZ3RoIiwiaiIsInB1c2giLCJ4IiwieSIsInRyYW5zZm9ybSIsInJlYWRGZWF0dXJlcyIsImZlYXR1cmVzIiwidGlsZSIsIlZlY3RvclRpbGUiLCJhZGFwdE9wdGlvbnMiLCJzZXRXb3JsZEV4dGVudCIsInNldEV4dGVudCIsImxheWVyTmFtZSIsIk9iamVjdCIsImtleXMiLCJpbmNsdWRlcyIsImwiLCJpZHgiLCJ2ZWN0b3JGZWF0dXJlIiwiZ2V0UHJvcGVydGllcyIsImxheWVyIiwicmVhZFByb2plY3Rpb24iLCJ3b3JrZXJVcmwiLCJVUkwiLCJ3YXNtVXJsIiwiTUJUaWxlc1NvdXJjZSIsImNhY2hlU2l6ZSIsInRpbGVDYWNoZVNpemUiLCJ1bmRlZmluZWQiLCJmb3JtYXQiLCJ0aWxlVXJsRnVuY3Rpb24iLCJjb29yZHMiLCJzZXRUaWxlTG9hZEZ1bmN0aW9uIiwidGlsZUxvYWRlciIsImJpbmQiLCJjb25maWciLCJmcm9tIiwic2VydmVyTW9kZSIsInJlcXVlc3RDaHVua1NpemUiLCJ3b3JrZXIiLCJzcWxXb3JrZXJzIiwiY3JlYXRlRGJXb3JrZXIiLCJ0b1N0cmluZyIsImN1cnJlbnRXb3JrZXIiLCJtZXRhZGF0YSIsInRoZW4iLCJ3IiwiZGIiLCJxdWVyeSIsInIiLCJkYXRhIiwicmVkdWNlIiwiYSIsImNvbnNvbGUiLCJkZWJ1ZyIsIm1heHpvb20iLCJtaW56b29tIiwid2FybiIsIkVycm9yIiwiY2F0Y2giLCJlIiwidGlsZUNvb3JkIiwic2V0TG9hZGVyIiwicHJvamVjdGlvbiIsImdldEZvcm1hdCIsImZlYXR1cmVQcm9qZWN0aW9uIiwic2V0RmVhdHVyZXMiLCJvbkxvYWQiLCJvbkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==