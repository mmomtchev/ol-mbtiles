"use strict";(self.webpackChunkol_mbtiles=self.webpackChunkol_mbtiles||[]).push([[491],{9491:(e,t,o)=>{o.r(t),o.d(t,{default:()=>u});var r=o(8854),n=o(2479),a=o(9090),i=o(9731),l=o(6263),s=o(8661),d=o(5901),c=o(5917);function u(){return new r.Z({target:"map",layers:[new n.Z({source:new l.Z}),new i.Z({source:new d.B({url:"https://velivole.b-cdn.net/maptiler-osm-2017-07-03-v3.6.1-europe.mbtiles",layers:["transportation","water","waterway"],attributions:["MapTiler","OSM","https://data.maptiler.com/downloads/dataset/osm/europe/"],maxZoom:14,minZoom:0}),style:function(e){switch(e.get("layer")){case"water":case"waterway":return c.d_;case"transportation":return(0,c.xl)(e);default:return null}}})],view:new a.ZP({center:(0,s.mi)([12,50]),zoom:6})})}},5917:(e,t,o)=>{o.d(t,{d_:()=>m,kY:()=>d,xl:()=>h,y8:()=>s});var r=o(7539),n=o(283),a=o(1345),i=o(8958),l=o(1280);function s(e,t){let o,s;switch(e){case 0:o=6,s="2em";break;case 1:o=5,s="1.2em";break;case 2:o=3,s="0.8em";break;default:o=1,s="0.5em"}s+=" helvetica, sans-serif";const d="#00007f";return new r.ZP({image:new n.Z({fill:new a.Z({color:d}),radius:o,stroke:new i.Z({color:d,width:o})}),text:new l.Z({font:s,text:t.get("n"),fill:new a.Z({color:"#ffffff"}),stroke:new i.Z({color:d,width:2})})})}const d=new r.ZP({stroke:new i.Z({color:"blue",width:2})}),c={},u={major_road:"#776",minor_road:"#ccb",highway:"#f39"},m=(new r.ZP({fill:new a.Z({color:"#666"}),stroke:new i.Z({color:"#444",width:1})}),new r.ZP({fill:new a.Z({color:"#9db9e8"})})),h=function(e){const t=e.get("kind"),o=e.get("railway"),n=e.get("sort_key"),a=t+"/"+o+"/"+n;let l=c[a];if(!l){let e,s;o?(e="#7de",s=1):(e=u[t],s="highway"==t?1.5:1),l=new r.ZP({stroke:new i.Z({color:e,width:s}),zIndex:n}),c[a]=l}return l}},5901:(e,t,o)=>{o.d(t,{B:()=>y});var r=o(2891),n=o.n(r),a=o(7205),i=o(3614),l=o.n(i),s=o(8929),d=o(7885),c=o(9646),u=o(9619),m=o(3433),h=o(8661);class w extends c.ZP{constructor(e){var t,o,r;super(),e=e||{},this.dataProjection=new u.Z({code:"",units:"tile-pixels"}),this.featureClass_=e.featureClass?e.featureClass:m.ZP,this.geometryName_=null!==(t=e.geometryName)&&void 0!==t?t:"Geometry",this.layers_=null!==(o=e.layers)&&void 0!==o?o:null,this.idProperty_=e.idProperty,this.extent=null!==(r=e.extent)&&void 0!==r?r:4096,this.supportedMediaTypes=["application/vnd-mbtiles"]}readFeature(e,t){const o=e.properties;let r;this.idProperty_?(r=o[this.idProperty_],delete o[this.idProperty_]):r=e.id;const n=e.loadGeometry(),a=[],i=[],l=w.MBTypes[n.length>1?"multi":"mono"][e.type];if("Unknown"===l)return null;for(let e=0;e<n.length;e++)if(0!=n[e].length){for(let t=0;t<n[e].length;t++)a.push(n[e][t].x,n[e][t].y);i.push(a.length)}const s=new this.featureClass_(l,a,i,o,r);return s.transform(t.dataProjection),s}readFeatures(e,t){const o=this.layers_,r=[],n=new s.VectorTile(new(l())(d.ec(e)));t=this.adaptOptions(t);const a=(0,h.U2)(t.dataProjection);a.setWorldExtent(t.extent),a.setExtent([0,0,this.extent,this.extent]),t.dataProjection=a;for(const e of Object.keys(n.layers)){if(o&&!o.includes(e))continue;const a=n.layers[e];for(let o=0;o<a.length;o++){const n=a.feature(o),i=this.readFeature(n,t);i.getProperties().layer=e,r.push(i)}}return r}readProjection(){return this.dataProjection}}w.MBTypes={mono:["Unknown","Point","LineString","Polygon"],multi:["Unknown","MultiPoint","MultiLineString","Polygon"]};const f=null!==n()&&void 0!==n()?n():r;class y extends a.Z{constructor(e){var t,o;super(Object.assign(Object.assign({},e),{url:void 0,format:new w({layers:e.layers}),tileUrlFunction:e=>`${e[0]}:${e[1]}:${e[2]}`})),this.setTileLoadFunction(this.tileLoader.bind(this));const r={from:"inline",config:{serverMode:"full",requestChunkSize:1024,url:e.url}};this.worker=[];for(let n=0;n<(null!==(t=e.sqlWorkers)&&void 0!==t?t:4);n++)this.worker[n]=f.createDbWorker([r],y.workerUrl.toString(),y.wasmUrl.toString(),null!==(o=e.maxSingleTransfer)&&void 0!==o?o:10485760);this.currentWorker=0,this.metadata=this.worker[this.currentWorker++%this.worker.length].then((e=>e.db.query('SELECT name,value FROM metadata WHERE name="maxzoom" or name="minzoom"'))).then((t=>{if(t&&2==t.length){const o=t.reduce(((e,t)=>(e[t.name]=t.value,e)),{});return console.debug("Loaded metadata",o),e.maxZoom==o.maxzoom&&e.minZoom==o.minzoom||console.warn(`minZoom/maxZoom ${o.minzoom}/${o.maxzoom} of retrieved MBTiles do not match Openlayers configuration ${e.minZoom}/${e.maxZoom}`),o}throw new Error("Could not load metadata")})).catch((e=>(console.warn(e),null)))}tileLoader(e,t){console.debug("loading tile",[e.tileCoord[0],e.tileCoord[1],e.tileCoord[2]]),e.setLoader(((t,o,r)=>{this.worker[this.currentWorker++%this.worker.length].then((t=>t.db.query("SELECT tile_data FROM tiles WHERE zoom_level = ? AND tile_column = ? AND tile_row = ?",[e.tileCoord[0],e.tileCoord[1],(1<<e.tileCoord[0])-1-e.tileCoord[2]]))).then((o=>{if(o&&o[0]&&o[0].tile_data){const n=e.getFormat().readFeatures(o[0].tile_data,{extent:t,featureProjection:r});return e.setFeatures(n),void e.onLoad(n,r)}throw new Error(`No data for ${e.tileCoord}`)})).catch((t=>{console.warn(t),e.onError()}))}))}destroy(){for(const e of this.worker)e.then((e=>{e.release()}))}}y.workerUrl=new URL(o(421),o.b),y.wasmUrl=new URL(o(3611),o.b)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,