"use strict";(self.webpackChunkol_mbtiles=self.webpackChunkol_mbtiles||[]).push([[491],{9491:(e,t,o)=>{o.r(t),o.d(t,{default:()=>h});var n=o(8854),r=o(2479),i=o(9090),l=o(9731),s=o(6263),a=o(8661),d=o(5686),c=o(5917),u=function(e,t,o,n){return new(o||(o=Promise))((function(r,i){function l(e){try{a(n.next(e))}catch(e){i(e)}}function s(e){try{a(n.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(l,s)}a((n=n.apply(e,t||[])).next())}))};function h(){return u(this,void 0,void 0,(function*(){return new n.Z({target:"map",layers:[new r.Z({source:new s.Z}),new l.Z({source:new d.H5(yield(0,d.ri)({url:"https://velivole.b-cdn.net/maptiler-osm-2017-07-03-v3.6.1-europe.mbtiles",layers:["transportation","water","waterway","landuse","place","boundary"],attributions:["MapTiler","OSM","https://data.maptiler.com/downloads/dataset/osm/europe/"]})),style:function(e){switch(e.get("layer")){case"water":case"waterway":return c.d_;case"transportation":return(0,c.xl)(e);case"landuse":return c.Xu;case"boundary":return c.oj;case"place":return(0,c.Hh)(e);default:return null}}})],view:new i.ZP({center:(0,a.mi)([12,50]),zoom:6})})}))}},5917:(e,t,o)=>{o.d(t,{Hh:()=>y,Xu:()=>h,d_:()=>w,kY:()=>d,oj:()=>p,xl:()=>m,y8:()=>a});var n=o(7539),r=o(283),i=o(1345),l=o(8958),s=o(1280);function a(e,t){let o,a;switch(e){case 0:o=6,a="2em";break;case 1:o=5,a="1.2em";break;case 2:o=3,a="0.8em";break;default:o=1,a="0.5em"}a+=" helvetica, sans-serif";const d="#00007f";return new n.ZP({image:new r.Z({fill:new i.Z({color:d}),radius:o,stroke:new l.Z({color:d,width:o})}),text:new s.Z({font:a,text:t.get("n"),fill:new i.Z({color:"#ffffff"}),stroke:new l.Z({color:d,width:2})})})}const d=new n.ZP({stroke:new l.Z({color:"blue",width:2})}),c={},u={motorway:"#776",trunk:"#ccb",highway:"#f39"},h=new n.ZP({fill:new i.Z({color:"#666"}),stroke:new l.Z({color:"#444",width:1})}),w=new n.ZP({fill:new i.Z({color:"#9db9e8"})}),p=new n.ZP({stroke:new l.Z({color:"#8B008B",width:2})}),m=function(e){const t=e.get("class"),o=e.get("railway"),r=e.get("sort_key"),i=t+"/"+o+"/"+r;let s=c[i];if(!s){let e,a;o?(e="#7de",a=1):(e=u[t],a="highway"==t?1.5:1),s=new n.ZP({stroke:new l.Z({color:e,width:a}),zIndex:r}),c[i]=s}return s},f=new n.ZP({image:new r.Z({radius:5,fill:new i.Z({color:"#000080"})})}),v=new l.Z({color:"white",width:2}),y=function(e){if("country"==e.get("class"))return null;if(e.get("name")){const t=f.clone();return t.setText(new s.Z({text:e.get("name"),offsetY:-5,font:"bold 16px sans-serif",stroke:v})),t}return null}},5686:(e,t,o)=>{o.d(t,{Yr:()=>E,H5:()=>x,ri:()=>u});var n,r=o(9759),i=o(8661),l=o(8641),s=o(8738);const a="undefined"!=typeof OL_MBTILES_DEBUG&&OL_MBTILES_DEBUG||"undefined"!=typeof process&&void 0!==(null===(n=null===process||void 0===process?void 0:process.env)||void 0===n?void 0:n.OL_MBTILES_DEBUG)&&process.env.OL_MBTILES_DEBUG?console.debug.bind(console):()=>{},d={jpg:"raster",png:"raster",webp:"raster",pbf:"vector",mvt:"vector"};function c(e){var t,o,n;return{workers:null!==(t=null==e?void 0:e.sqlWorkers)&&void 0!==t?t:4,httpOptions:{maxPageSize:null!==(o=null==e?void 0:e.maxSqlPageSize)&&void 0!==o?o:4096,cacheSize:null!==(n=null==e?void 0:e.sqlCacheSize)&&void 0!==n?n:4096}}}function u(e){const t=(0,r.he)(c(e)).then((t=>t.open(e.url).then((()=>t))));return t.then((e=>e.exec("SELECT name,value FROM metadata"))).then((e=>{if(e&&e.length){const t=e.reduce(((e,t)=>(e[t.row[0]]=t.row[1],e)),{});return a("Loaded metadata",t),t}throw new Error("Could not load metadata")})).then((o=>{var n,r,a,c,u,h,w,p;const m=Object.assign({},e),f=null===(r=null===(n=o.format)||void 0===n?void 0:n.toLowerCase)||void 0===r?void 0:r.call(n);d[f]||console.warn("Unknown tile format",f),m.projection=null!==(a=e.projection)&&void 0!==a?a:"EPSG:3857",m.attributions=null!==(c=o.attribution)&&void 0!==c?c:o.description,m.maxZoom=null!==(u=e.maxZoom)&&void 0!==u?u:+o.maxzoom,m.minZoom=null!==(h=e.minZoom)&&void 0!==h?h:+o.minzoom;const v=null===(p=null===(w=(0,i.U2)(m.projection))||void 0===w?void 0:w.getExtent)||void 0===p?void 0:p.call(w),y=o.bounds,g=y?(0,i.$A)(y.split(",").map((e=>+e)),"EPSG:4326",m.projection):v;if("raster"===d[f]){if(void 0===m.maxZoom||void 0===m.minZoom||void 0===v)throw new Error("Cannot determine tilegrid, need minZoom, maxZoom");const e=[(0,l.dz)(v)/256];for(let t=1;t<=m.maxZoom;t++)e.push(e[e.length-1]/2);m.tileGrid=new s.Z({origin:[v[0],v[2]],extent:g,minZoom:m.minZoom,resolutions:e})}else m.extent=v;return m.pool=t,m.url=e.url,m}))}var h=o(7205),w=o(3614),p=o.n(w),m=o(8929),f=o(7885),v=o(9646),y=o(9619),g=o(3433);class Z extends v.ZP{constructor(e){var t,o,n;super(),e=e||{},this.dataProjection=new y.Z({code:"",units:"tile-pixels"}),this.featureClass_=e.featureClass?e.featureClass:g.ZP,this.geometryName_=null!==(t=e.geometryName)&&void 0!==t?t:"Geometry",this.layers_=null!==(o=e.layers)&&void 0!==o?o:null,this.idProperty_=e.idProperty,this.extent=null!==(n=e.extent)&&void 0!==n?n:4096,this.supportedMediaTypes=["application/vnd-mbtiles"]}readFeature(e,t){const o=e.properties;let n;this.idProperty_?(n=o[this.idProperty_],delete o[this.idProperty_]):n=e.id;const r=e.loadGeometry(),i=[],l=[],s=Z.MBTypes[r.length>1?"multi":"mono"][e.type];if("Unknown"===s)return null;for(let e=0;e<r.length;e++)if(0!=r[e].length){for(let t=0;t<r[e].length;t++)i.push(r[e][t].x,r[e][t].y);l.push(i.length)}const a=new this.featureClass_(s,i,l,o,n);return a.transform(null==t?void 0:t.dataProjection),a}readFeatures(e,t){const o=this.layers_,n=[],r=new m.VectorTile(new(p())(f.ZP.ungzip(e)));t=this.adaptOptions(t);const l=(0,i.U2)(null==t?void 0:t.dataProjection),s=null==t?void 0:t.extent;if(!l||!t||!s)throw new Error("Cannot determine the projection/extent");l.setWorldExtent(s),l.setExtent([0,0,this.extent,this.extent]),t.dataProjection=l;for(const e of Object.keys(r.layers)){if(o&&!o.includes(e))continue;const i=r.layers[e];for(let o=0;o<i.length;o++){const r=i.feature(o),l=this.readFeature(r,t);l.getProperties().layer=e,n.push(l)}}return n}readProjection(){return this.dataProjection}}Z.MBTypes={mono:["Unknown","Point","LineString","Polygon"],multi:["Unknown","MultiPoint","MultiLineString","Polygon"]};class x extends h.Z{constructor(e){var t;if(void 0===e.url&&void 0===e.pool)throw new Error("Must specify url");super(Object.assign(Object.assign({},e),{url:void 0,format:new Z({layers:e.layers}),tileUrlFunction:t=>`${e.url}#${t[0]}:${t[1]}:${t[2]}`})),this.setTileLoadFunction(this.tileLoader.bind(this)),this.pool=null!==(t=e.pool)&&void 0!==t?t:(0,r.he)(c(e)).then((t=>t.open(e.url).then((()=>t))))}tileLoader(e,t){const o=e;a("loading tile",[o.tileCoord[0],o.tileCoord[1],o.tileCoord[2]]),o.setLoader(((e,t,n)=>{this.pool.then((e=>e.exec("SELECT tile_data FROM tiles WHERE zoom_level = $zoom AND tile_column = $col AND tile_row = $row",{$zoom:o.tileCoord[0],$col:o.tileCoord[1],$row:(1<<o.tileCoord[0])-1-o.tileCoord[2]}))).then((t=>{if(t&&t[0]&&t[0].row[0]){const r=o.getFormat().readFeatures(t[0].row[0],{extent:e,featureProjection:n});return o.setFeatures(r),void o.onLoad(r,n)}throw new Error(`No data for ${o.tileCoord}`)})).catch((e=>{a(e),o.onError()}))}))}disposeInternal(){return this.pool.then((e=>e.close()))}}var b=o(928),P=o(7195);class E extends b.Z{constructor(e){var t;if(void 0===e.url&&void 0===e.pool)throw new Error("Must specify url");super(Object.assign(Object.assign({},e),{url:void 0,tileUrlFunction:t=>`${e.url}#${t[0]}:${t[1]}:${t[2]}`})),this.setTileLoadFunction(this.tileLoader.bind(this)),this.pool=null!==(t=e.pool)&&void 0!==t?t:(0,r.he)(c(e)).then((t=>t.open(e.url).then((()=>t))))}tileLoader(e,t){a("loading tile",[e.tileCoord[0],e.tileCoord[1],e.tileCoord[2]]);const o=e.getImage();this.pool.then((t=>t.exec("SELECT tile_data FROM tiles WHERE zoom_level = $zoom AND tile_column = $col AND tile_row = $row",{$zoom:e.tileCoord[0],$col:e.tileCoord[1],$row:(1<<e.tileCoord[0])-1-e.tileCoord[2]}))).then((t=>{if(!(t&&t[0]&&t[0].row[0]instanceof Uint8Array))throw new Error(`No data for ${e.tileCoord}`);{const e=new Blob([t[0].row[0]]),n=URL.createObjectURL(e);o.src=n}})).catch((t=>{a(t),e.setState(P.Z.ERROR)}))}disposeInternal(){return this.pool.then((e=>e.close()))}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,