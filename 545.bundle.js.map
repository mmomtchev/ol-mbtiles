{"version":3,"file":"545.bundle.js","mappings":"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","sources":["webpack://ol-mbtiles/./examples/code/velivole.ts","webpack://ol-mbtiles/./examples/style.ts","webpack://ol-mbtiles/./dist/index.js","webpack://ol-mbtiles/./node_modules/ol/source/OSM.js"],"sourcesContent":["import Map from 'ol/Map.js';\nimport OSM from 'ol/source/OSM.js';\nimport TileLayer from 'ol/layer/Tile.js';\nimport View from 'ol/View.js';\nimport VectorTileLayer from 'ol/layer/VectorTile';\nimport TileDebug from 'ol/source/TileDebug';\nimport { fromLonLat } from 'ol/proj';\n\nimport { importMBTiles, MBTilesVectorSource } from 'ol-mbtiles';\nimport { styleTown } from '../style';\n\nexport default async function () {\n  return new Map({\n    target: 'map',\n    layers: [\n      new TileLayer({\n        source: new OSM(),\n      }),\n      new TileLayer({\n        source: new TileDebug()\n      }),\n      new VectorTileLayer({\n        source: new MBTilesVectorSource(await importMBTiles({\n          url: 'https://velivole.b-cdn.net/mbtiles/place/0.mbtiles',\n        })),\n        style: styleTown.bind(null, 0),\n        renderBuffer: 1024,\n        minZoom: 6\n      }),\n      new VectorTileLayer({\n        source: new MBTilesVectorSource(await importMBTiles({\n          url: 'https://velivole.b-cdn.net/mbtiles/place/1.mbtiles',\n        })),\n        style: styleTown.bind(null, 1),\n        renderBuffer: 256,\n        minZoom: 8\n      }),\n      new VectorTileLayer({\n        source: new MBTilesVectorSource(await importMBTiles({\n          url: 'https://velivole.b-cdn.net/mbtiles/place/2.mbtiles',\n        })),\n        style: styleTown.bind(null, 2),\n        minZoom: 10\n      }),\n    ],\n    view: new View({\n      center: fromLonLat([6, 45]),\n      zoom: 8\n    }),\n  });\n}","import { FeatureLike } from 'ol/Feature';\nimport { Style, Text, Fill, Stroke, Circle } from 'ol/style';\n\nexport function styleTown(size: number, feature: FeatureLike): Style {\n  let width: number;\n  let font: string;\n  switch (size) {\n    case 0:\n      width = 6;\n      font = '2em';\n      break;\n    case 1:\n      width = 5;\n      font = '1.2em';\n      break;\n    case 2:\n      width = 3;\n      font = '0.8em';\n      break;\n    default:\n      width = 1;\n      font = '0.5em';\n      break;\n  }\n  font += ' helvetica, sans-serif';\n  const color1 = '#00007f';\n  const color2 = '#ffffff';\n\n  const style = new Style({\n    image: new Circle({\n      fill: new Fill({\n        color: color1,\n      }),\n      radius: width,\n      stroke: new Stroke({\n        color: color1,\n        width: width,\n      }),\n    }),\n    text: new Text({\n      font: font,\n      text: feature.get('n'),\n      fill: new Fill({\n        color: color2\n      }),\n      stroke: new Stroke({\n        color: color1,\n        width: 2\n      })\n    })\n  });\n  return style;\n}\n\nexport const styleBorder = new Style({\n  stroke: new Stroke({\n    color: 'blue',\n    width: 2\n  })\n});\n\n\n// Styles inspired from https://openlayers.org/en/latest/examples/osm-vector-tiles.html\nconst roadStyleCache: Record<string, Style> = {};\nconst roadColor: Record<string, string> = {\n  'motorway': '#776',\n  'trunk': '#ccb',\n  'highway': '#f39',\n};\nexport const buildingStyle = new Style({\n  fill: new Fill({\n    color: '#666'\n  }),\n  stroke: new Stroke({\n    color: '#444',\n    width: 1,\n  }),\n});\nexport const waterStyle = new Style({\n  fill: new Fill({\n    color: '#9db9e8',\n  }),\n});\nexport const boundaryStyle = new Style({\n  stroke: new Stroke({\n    color: '#8B008B',\n    width: 2,\n  }),\n});\nexport const roadStyle = function (feature: FeatureLike) {\n  const kind = feature.get('class');\n  const railway = feature.get('railway');\n  const sort_key = feature.get('sort_key');\n  const styleKey = kind + '/' + railway + '/' + sort_key;\n  let style = roadStyleCache[styleKey];\n  if (!style) {\n    let color, width;\n    if (railway) {\n      color = '#7de';\n      width = 1;\n    } else {\n      color = roadColor[kind];\n      width = kind == 'highway' ? 1.5 : 1;\n    }\n    style = new Style({\n      stroke: new Stroke({\n        color: color,\n        width: width,\n      }),\n      zIndex: sort_key,\n    });\n    roadStyleCache[styleKey] = style;\n  }\n  return style;\n};\nconst placeBase = new Style({\n  image: new Circle({\n    radius: 5,\n    fill: new Fill({\n      color: '#000080'\n    })\n  })\n});\nconst textStroke = new Stroke({\n  color: 'white',\n  width: 2\n});\nexport const placeStyle = function (feature: FeatureLike): Style {\n  if (feature.get('class') == 'country')\n    return null as unknown as Style;\n  if (feature.get('name')) {\n    const style = placeBase.clone();\n    style.setText(new Text({\n      text: feature.get('name'),\n      offsetY: -5,\n      font: 'bold 16px sans-serif',\n      stroke: textStroke\n    }));\n    return style;\n  }\n  return null as unknown as Style;\n};","import { createSQLiteHTTPPool } from 'sqlite-wasm-http';\nimport { get, transformExtent } from 'ol/proj.js';\nimport { getWidth } from 'ol/extent.js';\nimport TileGrid from 'ol/tilegrid/TileGrid.js';\nimport VectorTileSource from 'ol/source/VectorTile.js';\nimport Protobuf from 'pbf';\nimport { VectorTile } from '@mapbox/vector-tile';\nimport pako from 'pako';\nimport FeatureFormat from 'ol/format/Feature.js';\nimport Projection from 'ol/proj/Projection.js';\nimport RenderFeature from 'ol/render/Feature.js';\nimport ImageTileSource from 'ol/source/TileImage.js';\nimport TileState from 'ol/TileState.js';\n\nvar _a;\nconst debugEnabled = (typeof OL_MBTILES_DEBUG !== 'undefined' && OL_MBTILES_DEBUG) ||\n    (typeof process !== 'undefined' && typeof ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.OL_MBTILES_DEBUG) !== 'undefined' && process.env.OL_MBTILES_DEBUG);\nconst debug = debugEnabled ? console.debug.bind(console) : () => undefined;\n\nconst formats = {\n    'jpg': { type: 'raster', mime: 'image/jpeg' },\n    'png': { type: 'raster', mime: 'image/png' },\n    'webp': { type: 'raster', mime: 'image/webp' },\n    'pbf': { type: 'vector' },\n    'mvt': { type: 'vector' },\n};\nfunction httpPoolOptions(options) {\n    var _a, _b, _c;\n    return {\n        workers: (_a = options === null || options === void 0 ? void 0 : options.sqlWorkers) !== null && _a !== void 0 ? _a : 4,\n        httpOptions: {\n            backendType: options === null || options === void 0 ? void 0 : options.backendType,\n            maxPageSize: (_b = options === null || options === void 0 ? void 0 : options.maxSqlPageSize) !== null && _b !== void 0 ? _b : 4096,\n            cacheSize: (_c = options === null || options === void 0 ? void 0 : options.sqlCacheSize) !== null && _c !== void 0 ? _c : 4096\n        },\n    };\n}\n/**\n * Automatically import MBTiles metadata and return an options object\n * compatible with the source constructors.\n *\n * @param {(MBTilesRasterOptions | MBTilesVectorOptions) & SQLOptions} opt Any MBTiles{Raster|Vector}Source options to be overridden\n * @param {string} opt.url URL of the remote tileset\n * @returns {(MBTilesRasterOptions | MBTilesVectorOptions)}\n */\nfunction importMBTiles(opt) {\n    const pool = createSQLiteHTTPPool(httpPoolOptions(opt));\n    return pool\n        .then((pool) => pool.open(opt.url).then(() => pool))\n        .then((p) => p.exec('SELECT name,value FROM metadata'))\n        .then((r) => {\n        if (r && r.length) {\n            // Transform an array of form [ ['name', 'value' ], ... ] to object\n            const data = r.reduce((a, x) => {\n                a[x.row[0]] = x.row[1];\n                return a;\n            }, {});\n            debug('Loaded metadata', data);\n            return data;\n        }\n        throw new Error('Could not load metadata');\n    })\n        .then((md) => {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const opts = Object.assign({}, opt);\n        const format = (_b = (_a = md['format']) === null || _a === void 0 ? void 0 : _a.toLowerCase) === null || _b === void 0 ? void 0 : _b.call(_a);\n        if (!formats[format])\n            console.warn('Unknown tile format', format);\n        // Sometimes, I wonder if Mapbox doesn't hold a patent or some\n        // other kind of investment related to everyone using 3857\n        opts.projection = (_c = opt.projection) !== null && _c !== void 0 ? _c : 'EPSG:3857';\n        opts.attributions = ((_d = md.attribution) !== null && _d !== void 0 ? _d : md.description);\n        opts.maxZoom = (_e = opt.maxZoom) !== null && _e !== void 0 ? _e : +md['maxzoom'];\n        opts.minZoom = (_f = opt.minZoom) !== null && _f !== void 0 ? _f : +md['minzoom'];\n        const projExtent = (_h = (_g = get(opts.projection)) === null || _g === void 0 ? void 0 : _g.getExtent) === null || _h === void 0 ? void 0 : _h.call(_g);\n        const bounds = md['bounds'];\n        const extent = bounds ?\n            transformExtent(bounds.split(',').map((r) => +r), 'EPSG:4326', opts.projection) :\n            projExtent;\n        if (formats[format].type === 'raster') {\n            if (opts.maxZoom === undefined || opts.minZoom === undefined || projExtent === undefined)\n                throw new Error('Cannot determine tilegrid, need minZoom, maxZoom');\n            const baseResolution = getWidth(projExtent) / 256;\n            const resolutions = [baseResolution];\n            for (let z = 1; z <= opts.maxZoom; z++)\n                resolutions.push(resolutions[resolutions.length - 1] / 2);\n            const mime = (_j = formats[format].mime) !== null && _j !== void 0 ? _j : format;\n            opts.mime = mime;\n            opts.tileGrid = new TileGrid({\n                origin: [projExtent[0], projExtent[2]],\n                extent,\n                minZoom: opts.minZoom,\n                resolutions\n            });\n        }\n        else {\n            const vectorOpts = opts;\n            // Alas VectorTileSource in OpenLayers does not support\n            // constraining the extent while keeping the origin\n            vectorOpts.extent = projExtent;\n        }\n        opts.pool = pool;\n        opts.url = opt.url;\n        return opts;\n    })\n        .catch((e) => pool.then((p) => p.close()).then(() => Promise.reject(e)));\n}\n\nclass MBTilesFormat extends FeatureFormat {\n    constructor(options) {\n        var _a, _b, _c;\n        super();\n        options = options ? options : {};\n        this.dataProjection = new Projection({\n            code: '',\n            units: 'tile-pixels',\n        });\n        this.featureClass_ = options.featureClass ? options.featureClass : RenderFeature;\n        this.geometryName_ = (_a = options.geometryName) !== null && _a !== void 0 ? _a : 'Geometry';\n        this.layers_ = (_b = options.layers) !== null && _b !== void 0 ? _b : null;\n        this.idProperty_ = options.idProperty;\n        this.extent = (_c = options.extent) !== null && _c !== void 0 ? _c : 4096;\n        /*\n         * As this is the very first time MBTiles will be distributed by HTTP\n         * there is still no official MIME type\n         */\n        this.supportedMediaTypes = [\n            'application/vnd-mbtiles'\n        ];\n    }\n    readFeature(source, options) {\n        const properties = source.properties;\n        let id;\n        if (!this.idProperty_) {\n            id = source.id;\n        }\n        else {\n            id = properties[this.idProperty_];\n            delete properties[this.idProperty_];\n        }\n        const points = source.loadGeometry();\n        const flatCoordinates = [];\n        const ends = [];\n        const type = MBTilesFormat.MBTypes[points.length > 1 ? 'multi' : 'mono'][source.type];\n        if (type === 'Unknown')\n            return null;\n        for (let i = 0; i < points.length; i++) {\n            if (points[i].length == 0)\n                continue;\n            for (let j = 0; j < points[i].length; j++) {\n                flatCoordinates.push(points[i][j].x, points[i][j].y);\n            }\n            ends.push(flatCoordinates.length);\n        }\n        const feature = new this.featureClass_(type, flatCoordinates, ends, 2, properties, id);\n        if ((options === null || options === void 0 ? void 0 : options.dataProjection) && 'transform' in feature)\n            feature.transform(options === null || options === void 0 ? void 0 : options.dataProjection);\n        return feature;\n    }\n    readFeatures(source, options) {\n        const layers = this.layers_;\n        const features = [];\n        const tile = new VectorTile(new Protobuf(pako.ungzip(source)));\n        options = this.adaptOptions(options);\n        const dataProjection = get(options === null || options === void 0 ? void 0 : options.dataProjection);\n        const extent = options === null || options === void 0 ? void 0 : options.extent;\n        if (!dataProjection || !options || !extent)\n            throw new Error('Cannot determine the projection/extent');\n        dataProjection.setWorldExtent(extent);\n        dataProjection.setExtent([0, 0, this.extent, this.extent]);\n        options.dataProjection = dataProjection;\n        for (const layerName of Object.keys(tile.layers)) {\n            if (layers && !layers.includes(layerName)) {\n                continue;\n            }\n            const l = tile.layers[layerName];\n            for (let idx = 0; idx < l.length; idx++) {\n                const vectorFeature = l.feature(idx);\n                const feature = this.readFeature(vectorFeature, options);\n                feature.getProperties().layer = layerName;\n                features.push(feature);\n            }\n        }\n        return features;\n    }\n    readProjection() {\n        return this.dataProjection;\n    }\n}\nMBTilesFormat.MBTypes = {\n    mono: ['Unknown', 'Point', 'LineString', 'Polygon'],\n    multi: ['Unknown', 'MultiPoint', 'MultiLineString', 'Polygon']\n};\n\n/**\n * A tile source in a remote .mbtiles file accessible by HTTP\n *\n * WARNING\n * If your application continuously creates and removes MBTilesSource\n * objects, special care must be taken to properly dispose of them.\n * An MBTilesSource creates a thread pool that the JS engine is unable to\n * automatically garbage-collect unless the dispose() method\n * is invoked.\n * If you need to dispose a map that can potentially contain\n * MBTilesSource objects, check loadExample() in\n * https://github.com/mmomtchev/ol-mbtiles/blob/main/examples/index.ts#L15\n */\nclass MBTilesVectorSource extends VectorTileSource {\n    /**\n     * @param {MBTilesVectorOptions} options options\n     */\n    constructor(options) {\n        var _a;\n        if (options.url === undefined && options.pool === undefined)\n            throw new Error('Must specify url');\n        super(Object.assign(Object.assign({}, options), { url: undefined, format: new MBTilesFormat({\n                layers: options.layers\n            }), \n            // This is required to prevent Openlayers' cache from thinking that all tiles share the same URL\n            tileUrlFunction: (coords) => `${options.url}#${coords[0]}:${coords[1]}:${coords[2]}` }));\n        this.setTileLoadFunction(this.tileLoader.bind(this));\n        this.pool = (_a = options.pool) !== null && _a !== void 0 ? _a : createSQLiteHTTPPool(httpPoolOptions(options))\n            .then((pool) => pool.open(options.url).then(() => pool));\n    }\n    tileLoader(_tile, _url) {\n        const tile = _tile;\n        debug('loading tile', [tile.tileCoord[0], tile.tileCoord[1], tile.tileCoord[2]]);\n        tile.setLoader((extent, resolution, projection) => {\n            this.pool\n                .then((p) => p.exec('SELECT tile_data FROM tiles WHERE zoom_level = $zoom AND tile_column = $col AND tile_row = $row', {\n                $zoom: tile.tileCoord[0],\n                $col: tile.tileCoord[1],\n                $row: (1 << tile.tileCoord[0]) - 1 - tile.tileCoord[2]\n            }))\n                .then((r) => {\n                if (r && r[0] && r[0].row[0]) {\n                    const format = tile.getFormat();\n                    const features = format.readFeatures(r[0].row[0], {\n                        extent,\n                        featureProjection: projection\n                    });\n                    tile.setFeatures(features);\n                    tile.onLoad(features, projection);\n                    return;\n                }\n                throw new Error(`No data for ${tile.tileCoord}`);\n            })\n                .catch((e) => {\n                debug(e);\n                tile.onError();\n            });\n        });\n    }\n    disposeInternal() {\n        return this.pool.then((p) => p.close());\n    }\n}\n\n/**\n * A tile source in a remote .mbtiles file accessible by HTTP\n *\n * WARNING\n * If your application continuously creates and removes MBTilesSource\n * objects, special care must be taken to properly dispose of them.\n * An MBTilesSource creates a thread pool that the JS engine is unable to\n * automatically garbage-collect unless the dispose() method\n * is invoked.\n * If you need to dispose a map that can potentially contain\n * MBTilesSource objects, check loadExample() in\n * https://github.com/mmomtchev/ol-mbtiles/blob/main/examples/index.ts#L15\n */\nclass MBTilesRasterSource extends ImageTileSource {\n    /**\n     * @param {MBTilesRasterOptions} options options\n     */\n    constructor(options) {\n        var _a;\n        if (options.url === undefined && options.pool === undefined)\n            throw new Error('Must specify url');\n        super(Object.assign(Object.assign({}, options), { url: undefined, \n            // This is required to prevent Openlayers' cache from thinking that all tiles share the same URL\n            tileUrlFunction: (coords) => `${options.url}#${coords[0]}:${coords[1]}:${coords[2]}` }));\n        this.setTileLoadFunction(this.tileLoader.bind(this));\n        this.pool = (_a = options.pool) !== null && _a !== void 0 ? _a : createSQLiteHTTPPool(httpPoolOptions(options))\n            .then((pool) => pool.open(options.url).then(() => pool));\n        this.mime = options.mime;\n    }\n    // TODO fix the tile type in Openlayers\n    tileLoader(tile, _url) {\n        debug('loading tile', [tile.tileCoord[0], tile.tileCoord[1], tile.tileCoord[2]]);\n        const image = tile.getImage();\n        this.pool\n            .then((p) => p.exec('SELECT tile_data FROM tiles WHERE zoom_level = $zoom AND tile_column = $col AND tile_row = $row', {\n            $zoom: tile.tileCoord[0],\n            $col: tile.tileCoord[1],\n            $row: (1 << tile.tileCoord[0]) - 1 - tile.tileCoord[2]\n        }))\n            .then((r) => {\n            if (r && r[0]) {\n                if (r[0].row[0] instanceof Uint8Array) {\n                    const blob = new Blob([r[0].row[0]], { type: this.mime });\n                    const imageUrl = URL.createObjectURL(blob);\n                    image.src = imageUrl;\n                    return;\n                }\n            }\n            throw new Error(`No data for ${tile.tileCoord}`);\n        })\n            .catch((e) => {\n            debug(e);\n            tile.setState(TileState.ERROR);\n        });\n    }\n    disposeInternal() {\n        return this.pool.then((p) => p.close());\n    }\n}\n\nexport { MBTilesFormat, MBTilesRasterSource, MBTilesVectorSource, importMBTiles };\n//# sourceMappingURL=index.js.map\n","/**\n * @module ol/source/OSM\n */\n\nimport XYZ from './XYZ.js';\n\n/**\n * The attribution containing a link to the OpenStreetMap Copyright and License\n * page.\n * @const\n * @type {string}\n * @api\n */\nexport const ATTRIBUTION =\n  '&#169; ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a> ' +\n  'contributors.';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Deprecated.  Use the cacheSize option on the layer instead.\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {number} [maxZoom=19] Max zoom.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [transition=250] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.\n * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n * @api\n */\nclass OSM extends XYZ {\n  /**\n   * @param {Options} [options] Open Street Map options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    let attributions;\n    if (options.attributions !== undefined) {\n      attributions = options.attributions;\n    } else {\n      attributions = [ATTRIBUTION];\n    }\n\n    const crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\n\n    const url =\n      options.url !== undefined\n        ? options.url\n        : 'https://tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n    super({\n      attributions: attributions,\n      attributionsCollapsible: false,\n      cacheSize: options.cacheSize,\n      crossOrigin: crossOrigin,\n      interpolate: options.interpolate,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileLoadFunction: options.tileLoadFunction,\n      transition: options.transition,\n      url: url,\n      wrapX: options.wrapX,\n      zDirection: options.zDirection,\n    });\n  }\n}\n\nexport default OSM;\n"],"names":["target","layers","source","url","style","bind","renderBuffer","minZoom","view","center","zoom","styleTown","size","feature","width","font","color1","image","fill","color","radius","stroke","text","get","styleBorder","roadStyleCache","roadColor","buildingStyle","waterStyle","boundaryStyle","roadStyle","kind","railway","sort_key","styleKey","zIndex","placeBase","textStroke","placeStyle","clone","setText","offsetY","_a","debug","process","env","OL_MBTILES_DEBUG","console","formats","type","mime","httpPoolOptions","options","_b","_c","workers","sqlWorkers","httpOptions","backendType","maxPageSize","maxSqlPageSize","cacheSize","sqlCacheSize","importMBTiles","opt","pool","then","open","p","exec","r","length","data","reduce","a","x","row","Error","md","_d","_e","_f","_g","_h","_j","opts","Object","assign","format","toLowerCase","call","warn","projection","attributions","attribution","description","maxZoom","projExtent","getExtent","bounds","extent","split","map","undefined","resolutions","z","push","tileGrid","origin","catch","e","close","Promise","reject","MBTilesFormat","constructor","super","this","dataProjection","code","units","featureClass_","featureClass","geometryName_","geometryName","layers_","idProperty_","idProperty","supportedMediaTypes","readFeature","properties","id","points","loadGeometry","flatCoordinates","ends","MBTypes","i","j","y","transform","readFeatures","features","tile","VectorTile","adaptOptions","setWorldExtent","setExtent","layerName","keys","includes","l","idx","vectorFeature","getProperties","layer","readProjection","mono","multi","MBTilesVectorSource","tileUrlFunction","coords","setTileLoadFunction","tileLoader","_tile","_url","tileCoord","setLoader","resolution","$zoom","$col","$row","getFormat","featureProjection","setFeatures","onLoad","onError","disposeInternal","MBTilesRasterSource","getImage","Uint8Array","blob","Blob","imageUrl","URL","createObjectURL","src","setState","ERROR","OSM","crossOrigin","attributionsCollapsible","interpolate","reprojectionErrorThreshold","tileLoadFunction","transition","wrapX","zDirection"],"sourceRoot":""}